/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:46:22 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement1 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 114);
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 114;
      doubleArray0[1] = (double) 114;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {114.0, 114.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {228.0, 228.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement1 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement2 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 35;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {35.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 35;
      intArray0[1] = 35;
      intArray0[2] = 35;
      intArray0[3] = 35;
      intArray0[4] = 35;
      intArray0[5] = 35;
      intArray0[6] = 35;
      intArray0[7] = 271;
      intArray0[8] = 35;
      int[] intArray1 = MathArrays.copyOf(intArray0, 35);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {35, 35, 35, 35, 35, 35, 35, 271, 35}, intArray0);
      assertEquals(35, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      FieldElement<String>[] fieldElementArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2266.926333585;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][8];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2266.926333585;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = null;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2266.926333585;
      doubleArray3[1] = 2266.926333585;
      doubleArray3[2] = 2266.926333585;
      doubleArray3[3] = 2266.926333585;
      doubleArray3[4] = 2266.926333585;
      doubleArray3[5] = 2266.926333585;
      doubleArray3[6] = 2308.559;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4484.207F);
      floatArray0[2] = 3967.113F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-4484.207F), 3967.113F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-4484.207F), 3967.113F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4484.207F);
      doubleArray0[1] = (double) (-4484.207F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-4484.207F);
      doubleArray0[4] = (double) (-4484.207F);
      doubleArray0[5] = (double) 0.0F;
      int int0 = 2782;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2782);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4484.20703125), (-4484.20703125), 0.0, (-4484.20703125), (-4484.20703125), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2782, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 2782;
      doubleArray2[4] = 0.041666666666621166;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) (-4484.207F);
      doubleArray2[7] = (double) 0.0F;
      doubleArray2[8] = (double) (-4484.207F);
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|[U";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "-+(z1h)g|Ny~,j2_";
      stringArray0[3] = ",dTNV9KG9w6h";
      stringArray0[4] = "FUNCTION_NOT_POLYNOMIAL";
      stringArray0[5] = "";
      stringArray0[6] = "J;RQ`kD'S~*g%d`n@C)";
      stringArray0[7] = "Rk";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2146775501);
      intArray0[1] = 258;
      intArray0[2] = 2146196959;
      intArray0[3] = 2145417598;
      intArray0[4] = 3534;
      intArray0[5] = 1202;
      intArray0[6] = 1423;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1423;
      intArray1[1] = 556;
      intArray1[2] = 3534;
      intArray1[3] = (-2146775501);
      intArray1[4] = 1202;
      intArray1[5] = (-2146775501);
      intArray1[6] = 1423;
      intArray1[7] = (-2146775501);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1423, 556, 3534, (-2146775501), 1202, (-2146775501), 1423, (-2146775501)}, intArray1);
      assertArrayEquals(new int[] {(-2146775501), 258, 2146196959, 2145417598, 3534, 1202, 1423}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-2147410713), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1895.80174112922;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1895.80174112922, double0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1895.80174112922;
      doubleArray2[1] = 1895.80174112922;
      doubleArray2[2] = 1895.80174112922;
      doubleArray2[1] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1895.80174112922;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = 1895.80174112922;
      try { 
        MathArrays.normalizeArray(doubleArray2, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-0.5));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.5), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-0.5));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-0.5), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-0.5), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-0.5), (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1414146.93187681);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals(1414146.93187681, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(Double.NEGATIVE_INFINITY);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) doubleArray0[5];
      doubleArray1[1] = (double) doubleArray0[6];
      doubleArray1[2] = (double) doubleArray0[7];
      doubleArray1[3] = 1.8014398800762188E16;
      doubleArray1[4] = (-0.5);
      doubleArray1[5] = 1414146.93187681;
      try { 
        MathArrays.normalizeArray(doubleArray1, 1401.7507276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2872.1F;
      floatArray0[1] = 417.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[5] = 6029.25F;
      floatArray0[6] = 1667.63F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 384.26F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2872.1F;
      floatArray1[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2872.1F, 417.0F, (-1.0F), 0.0F, Float.POSITIVE_INFINITY, 6029.25F, 1667.63F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {384.26F, 0.0F, 2872.1F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 2872.1F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 389.72;
      doubleArray0[1] = (-857.582972);
      doubleArray0[2] = 208548.6823812871;
      doubleArray0[3] = 1.8307188599677033E-8;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = (-4903.11173653);
      doubleArray0[2] = 3294198.0;
      doubleArray0[3] = (-714.33563951);
      doubleArray0[4] = (-4903.11173653);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.608E18, (-4903.11173653), 3294198.0, (-714.33563951), (-4903.11173653)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.801664E36, (-2.5574630817740477E22), 1.7182536768E25, (-3.7259746957164633E21), (-2.557463080688873E22), (-4.65824506060333E9), (-3.2303131477101433E10), 7004934.915806288, 2.404050470089823E7}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.608E18, (-4903.11173653), 3294198.0, (-714.33563951), (-4903.11173653)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.608E18, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, 62, 2146976448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-4185);
      intArray0[1] = 213;
      intArray0[2] = (-1148);
      intArray0[3] = (-2860);
      intArray0[4] = 104;
      intArray0[5] = 2;
      intArray0[6] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4185), 213, (-1148), (-2860), 104, 2, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1148);
      doubleArray0[1] = 755.821610462656;
      doubleArray0[2] = (double) 104;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 213;
      doubleArray0[5] = (double) 213;
      double[] doubleArray1 = MathArrays.scale(104, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-119392.0), 78605.44748811623, 10816.0, 0.0, 22152.0, 22152.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1148.0), 755.821610462656, 104.0, 0.0, 213.0, 213.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 213;
      doubleArray2[3] = (double) (-4185);
      doubleArray2[4] = (double) (-4185);
      doubleArray2[5] = (double) 104;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {2.0, 2.0, 213.0, (-4185.0), (-4185.0), 104.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1148.0), 755.821610462656, 104.0, 0.0, 213.0, 213.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals((-847885.3567790746), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-3533.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-1.4E-45F);
      floatArray1[4] = 2454.29F;
      floatArray1[5] = (-1.4E-45F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3533.0F), (-1.0F), (-1.4E-45F), 2454.29F, (-1.4E-45F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.4E-45F);
      doubleArray0[1] = (double) 2454.29F;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (double) (-3533.0F);
      doubleArray0[4] = (double) (-3533.0F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1.401298464324817E-45), 2454.2900390625, 1.34217729E8, (-3533.0), (-3533.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1.3421772911543822E8, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-0 < 2,454.29)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 136;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = (-606);
      intArray0[2] = 1;
      intArray0[3] = 3345;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 17;
      intArray1[1] = 17;
      intArray1[2] = 3345;
      intArray1[3] = (-606);
      intArray1[4] = 17;
      intArray1[5] = (-606);
      intArray1[6] = 17;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {17, (-606), 1, 3345}, intArray0);
      assertArrayEquals(new int[] {17, 17, 3345, (-606), 17, (-606), 17}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3951, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-2623.83717872);
      doubleArray0[2] = (-50.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.3040000951127929E19;
      doubleArray0[5] = 2302.9189;
      doubleArray0[6] = 1.801439877791744E16;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-2623.83717872), (-50.0), 0.0, 1.3040000951127929E19, 2302.9189, 1.801439877791744E16}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.844135432456035E19, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-2623.83717872), (-50.0), 0.0, 1.3040000951127929E19, 2302.9189, 1.801439877791744E16}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3.4008354932398062E38, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 328.0946122804572;
      doubleArray1[1] = 0.19454771280288696;
      doubleArray1[2] = 1080.8057807122548;
      doubleArray1[5] = 328.0946122804572;
      doubleArray1[4] = 1895.80174112922;
      doubleArray1[5] = 1.304E19;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1619.7513599806987);
      doubleArray0[1] = 1709.674135;
      doubleArray0[2] = 1.00307692307692314E18;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1709.674135, 1.00307692307692314E18, (-1619.7513599806987)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2922985.6478879983, 3.4298693416E21, 1.0061633136094676E36, (-3.249470420638202E21), 2623594.468159323}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1709.674135, 1.00307692307692314E18, (-1619.7513599806987)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2922985.6478879983, 3.4298693416E21, 1.0061633136094676E36, (-3.249470420638202E21), 2623594.468159323}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1709.674135, 1.00307692307692314E18, (-1619.7513599806987)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 2922985.6478879983, 3.4298693416E21, 1.0061633136094676E36, (-3.249470420638202E21), 2623594.468159323}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.0061633136094676E36, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.073741824E9);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1709.674135, 1.00307692307692314E18, (-1619.7513599806987)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.8301174934115635E-6, 1.073741824E9, (-1.7338598263802168E-6)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distanceInf(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1709.674135, 1.00307692307692314E18, (-1619.7513599806987)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.8301174934115635E-6, 1.073741824E9, (-1.7338598263802168E-6)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 0.375;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.375);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 29;
      intArray0[1] = 5;
      intArray0[2] = (-2634);
      intArray0[3] = (-187);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-187);
      intArray1[1] = 5;
      intArray1[2] = (-187);
      intArray1[3] = 1;
      intArray1[4] = 5;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {29, 5, (-2634), (-187)}, intArray0);
      assertArrayEquals(new int[] {(-187), 5, (-187), 1, 5}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2463.698236391787, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 158;
      intArray1[1] = (-2147483645);
      intArray1[2] = 1;
      intArray1[3] = (-2300);
      intArray1[4] = 17;
      intArray1[5] = 2145804614;
      intArray1[6] = 10;
      intArray1[7] = 2;
      intArray1[8] = 14;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-10.281961636226299);
      doubleArray0[1] = (-10.281961636226299);
      doubleArray0[2] = (-10.281961636226299);
      doubleArray0[3] = (-10.281961636226299);
      doubleArray0[4] = (-10.281961636226299);
      doubleArray0[5] = (-10.281961636226299);
      doubleArray0[6] = (-10.281961636226299);
      doubleArray0[7] = (-10.281961636226299);
      doubleArray0[8] = (-10.281961636226299);
      MathArrays.scaleInPlace((-10.281961636226299), doubleArray0);
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2455));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1895.80174112922, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1334.720865763283);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      double double3 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1334.720865763283), 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 2307.6055;
      double double1 = 1.304E19;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.8441344853345161E19, double2, 0.01);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double3, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1090.613F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1090.613F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1090.613F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 1090.613037109375, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-906.7776115616);
      doubleArray1[1] = 519.497588282405;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-906.7776115616), 519.497588282405, 3.834E-20, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1045.0470712176534, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(14, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.scaleInPlace(1045.0470712176534, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(14, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-906.7776115616), 519.497588282405, 3.834E-20, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1138;
      intArray0[1] = 2009;
      intArray0[2] = (-1217);
      intArray0[3] = 214;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1138, 2009, (-1217), 214}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[2][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 8.111138075590134;
      doubleArray0[2] = 9.3142857142857139E17;
      doubleArray0[3] = 559.7516336372584;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1747.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 8.111138075590134, 9.3142857142857139E17, 559.7516336372584, 3.834E-20, (-1747.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-70.2483F);
      floatArray0[2] = (-245.64949F);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-245.64949F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-70.2483F), (-245.64949F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-245.64949F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1489.5581555063036, (-1485.46922), (-1485.46922), 14.1014194489);
      assertEquals((-2233640.015954238), double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 14.1014194489;
      doubleArray0[1] = (-2233640.015954238);
      doubleArray0[2] = 1489.5581555063036;
      doubleArray0[3] = 1489.5581555063036;
      doubleArray0[4] = (-2233640.015954238);
      doubleArray0[5] = 14.1014194489;
      doubleArray0[6] = (-2233640.015954238);
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {14.1014194489, (-2233640.015954238), 1489.5581555063036, 1489.5581555063036, (-2233640.015954238), 14.1014194489, (-2233640.015954238)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1534.505);
      doubleArray1[1] = (-415.5);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1534.505);
      double double0 = MathArrays.linearCombination((-1534.505), (-1534.505), (-17.08585646), 1489.5581555063036);
      assertEquals(2329255.218191197, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 722.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 722.8F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1196.5);
      doubleArray1[1] = 919.7182;
      doubleArray1[2] = (-3883.02);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1, (-1933));
      assertEquals(1, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1534.505);
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1534.505);
      doubleArray2[1] = (-1534.505);
      doubleArray2[2] = (-1534.505);
      doubleArray2[3] = (-1534.505);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1534.505), (-1534.505), (-1534.505), (-1534.505)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2354705.595025, 2354705.595025, 2354705.595025, 2354705.595025}, doubleArray3, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.linearCombination((-1534.505), (-1534.505), (-1534.505), 3.834E-20, (-0.5279900428811067), 0.0, (-0.5279900428811067), (-0.5279900428811067));
      assertEquals(2354705.873798486, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1534.505), (-1534.505), (-1534.505), (-1534.505)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2354705.595025, 2354705.595025, 2354705.595025, 2354705.595025}, doubleArray3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1534.505);
      double double0 = MathArrays.linearCombination((-1534.505), (-1534.505), (-17.08585646), 1489.5581555063036);
      assertEquals(2329255.218191197, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 722.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 722.8F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.0217439756338078E-10, 2.0217439756338078E-10, (double) 1, (-2647.8));
      assertEquals((-2647.8), double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2401);
      floatArray0[1] = 722.8F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 1;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 722.8F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2401.0F), 722.8F, 0.0F, 0.0F, 1.0F, 0.0F, 722.8F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (-2647.8);
      doubleArray0[4] = (double) 722.8F;
      doubleArray0[5] = 2.925681159240093E-8;
      doubleArray0[6] = (-2647.8);
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, (-2647.8), 722.7999877929688, 2.925681159240093E-8, (-2647.8), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, (-2647.8), 722.7999877929688, 2.925681159240093E-8, (-2647.8), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 14;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 10;
      floatArray1[1] = (float) 2122219134;
      floatArray1[2] = (float) 14;
      floatArray1[3] = (float) 14;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, 2.12221914E9F, 14.0F, 14.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, 2.12221914E9F, 14.0F, 14.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 14.0F;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 2.12221914E9F;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 2.12221914E9F;
      doubleArray0[6] = 2056.52766154533;
      double[] doubleArray1 = MathArrays.scale(2122219134, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.122219134E10, 2.9711067876E10, 2.9711067876E10, 4.5038140569601485E18, 2.122219134E10, 4.5038140569601485E18, 4.3644023529317754E12}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {10.0, 14.0, 14.0, 2.122219136E9, 10.0, 2.122219136E9, 2056.52766154533}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.122219134E10, 2.9711067876E10, 2.9711067876E10, 4.5038140569601485E18, 2.122219134E10, 4.5038140569601485E18, 4.3644023529317754E12}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.122219134E10, 2.9711067876E10}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {10.0, 14.0, 14.0, 2.122219136E9, 10.0, 2.122219136E9, 2056.52766154533}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2354705.595025}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1534.505, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      
      try { 
        MathArrays.convolve(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOT_POSITIVE_DEGREES_OF_FREEDOM";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      double[][] doubleArray3 = new double[1][4];
      doubleArray3[0] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1534.505);
      double double0 = MathArrays.linearCombination((-1534.505), (-1534.505), (-17.08585646), 1489.5581555063036);
      assertEquals(2329255.218191197, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 722.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 722.8F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(14, doubleArray0.length);
      assertFalse(boolean1);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-628), 1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1534.505);
      double double0 = MathArrays.linearCombination((-1534.505), (-1534.505), (-17.08585646), 1489.5581555063036);
      assertEquals(2329255.218191197, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 722.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 722.8F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,534.505 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 665;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/";
      stringArray0[1] = "ARRAY_ELEMENT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-8);
      intArray1[1] = 2125;
      intArray1[2] = (-894);
      intArray1[3] = 13;
      intArray1[4] = (-4501);
      intArray1[5] = 151;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 738.10279186;
      doubleArray2[1] = 1.9868161777724352E-8;
      doubleArray2[2] = 2876.82;
      doubleArray2[3] = 12.0;
      doubleArray2[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {738.10279186, 1.9868161777724352E-8, 2876.82, 12.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1431655765, 1845);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3479);
      intArray0[1] = (-2065);
      intArray0[2] = 459;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3479), (-2065), 459, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-2065), (double) 0, 1.0, (double) (-3479));
      assertEquals((-3479.0), double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-3479);
      floatArray0[1] = (float) (-2065);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2065);
      floatArray0[4] = (float) (-2065);
      floatArray0[5] = (float) 459;
      floatArray0[6] = (float) 459;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3479.0F), (-2065.0F), 0.0F, (-2065.0F), (-2065.0F), 459.0F, 459.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-628), 1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination((-1841.920154714), (-1841.920154714), 3472.742727, 3472.742727);
      assertEquals(1.545261190427304E7, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 722.8F;
      floatArray0[1] = 722.8F;
      floatArray0[2] = 722.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {722.8F, 722.8F, 722.8F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2354705.595025}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1534.505, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "NOT_POSITIVE_DEGREES_OF_FREEDOM";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(138.3922914, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 1826;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1826);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {134217729, 1826}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1826, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 134217729;
      longArray0[1] = 158L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {134217729L, 158L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Xufq8Oi";
      stringArray0[1] = "PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD";
      stringArray0[2] = "V}d;DCRUQ";
      stringArray0[3] = "r.CLSXN";
      stringArray0[4] = "fm,U/9d";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      int int0 = (-3479);
      intArray0[0] = (-3479);
      int int1 = (-2065);
      double double0 = MathArrays.linearCombination(825551.655998962, (double) (-3479), 1534.505, 0.0, (-2043.88032348), (double) (-2065), 1.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int2 = 120;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 120, (-2065));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1534.505), (-3189.323264944027), (-3189.323264944027), (-1534.505), Double.NaN, (-3189.323264944027), (-4804.910828643), (-1534.505));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2722.55932122);
      doubleArray0[1] = (-2722.55932122);
      doubleArray0[2] = (-2722.55932122);
      MathArrays.scaleInPlace((-2722.55932122), doubleArray0);
      assertArrayEquals(new double[] {7412329.257561908, 7412329.257561908, 7412329.257561908}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-844.696825051653));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7412329.257561908, 7412329.257561908, 7412329.257561908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-281.56560835055103), (-281.56560835055103), (-281.56560835055103)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-844.696825051653);
      doubleArray2[1] = (-2722.55932122);
      doubleArray2[2] = (-3118.48683751);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7412329.257561908, 7412329.257561908, 7412329.257561908}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-844.696825051653), (-2722.55932122), (-3118.48683751)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {7413173.95438696, 7415051.816883128, 7415447.744399418}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1658.67;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1658.67, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TA.biOwr>B";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "$VALUES";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "TA.biOwr>B";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1658.67, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 81);
      assertEquals(81, objectArray0.length);
      assertNotNull(objectArray0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean0);
      
      double double2 = MathArrays.linearCombination(0.0, (double) 0, 0.0, (double) 81, (-1692.817608596), (double) 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1809.4948;
      doubleArray0[3] = (-3437.0348);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.3040000000000006E19);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1809.4948, (-3437.0348), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-1.449783857355273E19), 2.753783857355274E19, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1809.4948, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1809.4948, (-3437.0348), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-2.623376351008308E22), 4.98295757020831E22, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?u<5,n<oXK\".5ptNF9C";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1809.4948;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-780.0058828);
      doubleArray2[3] = 1809.4948;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double double0 = new Double((-3437.0348));
      assertEquals((-3437.0348), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1809.4948, 1809.4948, (-3024.8910996156), 0.0, (-780.0058828), 1.3040000000000006E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0171276711712002E22), double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>(class0, "%:#QdOf-_");
      assertNotNull(pair0);
      
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 81);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (-43.55595739673313);
      double double1 = MathArrays.distance(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, (-43.55595739673313), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1658.67;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1658.67, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1442.8737F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1442.8737F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1658.67, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1658.67;
      doubleArray3[1] = 1658.67;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) (-1442.8737F);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (double) (-1442.8737F);
      doubleArray3[6] = (double) (-1442.8737F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[1][1];
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) (-1442.8737F);
      doubleArray5[2] = 1195.882;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) (-1442.8737F);
      doubleArray5[5] = (double) (-1442.8737F);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (double) (-1442.8737F);
      doubleArray4[0] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = 0.19999954120254515;
      doubleArray0[6] = 3060.226187491755;
      doubleArray0[7] = (-872.9278255351);
      doubleArray0[8] = (-3.141592653589793);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1334.1197541927863));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, (-3.141592653589793), (-3.141592653589793), 0.19999954120254515, 3060.226187491755, (-872.9278255351), (-3.141592653589793)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, Double.NaN, 1.9242971635396584, 1.9242971635396584, (-0.12250428119811321), (-1874.4583469951933), 534.6882055929863, 1.9242971635396584}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, Double.NaN, 1.9242971635396584, 1.9242971635396584, (-0.12250428119811321), (-1874.4583469951933), 534.6882055929863, 1.9242971635396584}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 211);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, Double.NaN, 1.9242971635396584, 1.9242971635396584, (-0.12250428119811321), (-1874.4583469951933), 534.6882055929863, 1.9242971635396584}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(211, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 211
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1895.80174112922;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1895.80174112922, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double2 = MathArrays.linearCombination(1895.80174112922, 1.304E19, 3181156.576791017, 0.0, 208.185930642, 0.9489846229553223, 1895.80174112922, (-2043.88032348));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.4721254704325025E22, double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1, 1);
      assertEquals(1, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      int int1 = 81;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = 77;
      intArray1[0] = 77;
      int int1 = (-1609);
      intArray1[1] = (-1609);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((-907.15545), (-907.15545), (-1433.837933247), (double) 0);
      assertEquals(822931.0104647025, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 174, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1534.505);
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3069.01)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float float0 = (-1679.0F);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1679.0F);
      floatArray0[1] = (-1679.0F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1679.0F), (-1679.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1679.0F), (-1679.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray3 = MathArrays.scale((-1679.0F), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2576433.895}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147483050;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483050, 2144428905);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2307.6055;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-872.9278255351));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-871.0193894061326), (-1.9084361289674359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(3081.78, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2684290.133884032), (-5881.380293529265), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9*$p?ZZq";
      stringArray0[1] = "1jcd\"C8cL\"-MrV";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2684290.133884032), (-5881.380293529265), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2688734.5346516604, double0, 0.01);
      
      double[][] doubleArray2 = new double[6][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3081.78;
      doubleArray3[1] = 3081.78;
      double[] doubleArray4 = MathArrays.copyOf(doubleArray3, 211);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3081.78, 3081.78}, doubleArray3, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(211, doubleArray4.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-10.281961636226299);
      doubleArray0[1] = (-10.281961636226299);
      doubleArray0[2] = (-10.281961636226299);
      doubleArray0[3] = (-10.281961636226299);
      doubleArray0[4] = (-10.281961636226299);
      doubleArray0[5] = (-10.281961636226299);
      doubleArray0[6] = (-10.281961636226299);
      doubleArray0[7] = (-10.281961636226299);
      doubleArray0[8] = (-10.281961636226299);
      MathArrays.scaleInPlace((-10.281961636226299), doubleArray0);
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087, 11176.450948782087}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939, 105.71873508882939}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2455));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      doubleArray0[1] = 1658.67;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-26.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-883.0F);
      floatArray0[4] = 475.0F;
      floatArray0[5] = (-1.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-26.0F), 0.0F, Float.NaN, (-883.0F), 475.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 639;
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 639;
      longArray1[1] = (long) 639;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 639;
      longArray2[1] = (-2432L);
      longArray2[2] = (long) 639;
      longArray2[3] = (long) 639;
      longArray2[4] = (long) 639;
      longArray2[5] = (long) 639;
      longArray2[6] = (long) 639;
      longArray2[7] = (long) 639;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 9007199254740990L;
      longArray3[1] = (long) 639;
      longArray3[2] = (long) 639;
      longArray3[3] = (-2432L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 9007199254740990L;
      longArray4[1] = (-783L);
      longArray4[2] = (-2432L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 9007199254740990L;
      longArray5[1] = (-2432L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) 639;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = (long) 639;
      longArray7[1] = (-783L);
      longArray7[2] = (-3958705157555305932L);
      longArray7[3] = (-875L);
      longArray7[4] = 9007199254740990L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (-3958705157555305932L);
      longArray8[1] = 9007199254740990L;
      longArray8[2] = (long) 639;
      longArray8[3] = (long) 639;
      longArray8[4] = 9007199254740990L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = 9007199254740990L;
      longArray9[1] = (-875L);
      longArray9[2] = (long) 639;
      longArray9[3] = (-2432L);
      longArray9[4] = (-875L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2065);
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (-3479);
      intArray0[4] = 459;
      intArray0[5] = (-3479);
      intArray0[6] = (-2065);
      intArray0[7] = (-3479);
      intArray0[8] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 278);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2065), 3, 3, (-3479), 459, (-3479), (-2065), (-3479), 3}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(278, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3479);
      intArray0[1] = 459;
      intArray0[2] = (-3479);
      intArray0[3] = (-3479);
      intArray0[4] = (-2065);
      intArray0[5] = 459;
      intArray0[6] = (-3479);
      intArray0[7] = (-2065);
      intArray0[8] = (-2065);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3479), 459, (-3479), (-3479), (-2065), 459, (-3479), (-2065), (-2065)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-2065), (-4.813899778443457E-9), 25490.61282479604, (double) (-3479));
      assertEquals((-8.868184201745549E7), double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2065);
      floatArray0[2] = (float) 459;
      floatArray0[3] = (float) (-3479);
      floatArray0[4] = (float) (-3479);
      floatArray0[5] = (float) (-3479);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2065.0F), 459.0F, (-3479.0F), (-3479.0F), (-3479.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1698.041F;
      floatArray0[1] = 1846.738F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1698.041F, 1846.738F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(1017.8216, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1534.505);
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3069.01)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float float0 = (-1679.0F);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1679.0F);
      floatArray0[1] = (-1679.0F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1679.0F), (-1679.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1679.0F), (-1679.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray3 = MathArrays.scale((-1679.0F), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2576433.895}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2147483050;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147483050, 2144428905);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2085.0F);
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1.0F, (-2085.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-2085.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-2085.0F);
      doubleArray0[4] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.scale(3.141592653589793, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-2085.0), 0.0, (-2085.0), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, (-6550.220682734719), 0.0, (-6550.220682734719), 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-2085.0), 0.0, (-2085.0), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, (-6550.220682734719), 0.0, (-6550.220682734719), 9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.141592653589793), 4465.220682734719, 0.0, 4465.220682734719, (-6.728011747499565)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3479);
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3069.01)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray3 = MathArrays.scale(1.304E19, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.00099452E22)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-1170));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 159.6577991355137;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.34217729E8;
      int[] intArray0 = new int[8];
      intArray0[0] = 1174;
      intArray0[1] = 459;
      intArray0[2] = (-179);
      intArray0[3] = 459;
      intArray0[4] = 459;
      intArray0[5] = (-3823);
      intArray0[6] = 459;
      intArray0[7] = 459;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1174, 459, (-179), 459, 459, (-3823), 459, 459}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(578.8001958917424, 825551.655998962, 1.34217729E8, (double) 459);
      assertEquals(6.208376707121095E10, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {1174, 459, (-179), 459, 459, (-3823), 459, 459}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {1174, 459, (-179), 459, 459, (-3823), 459, 459}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1895.80174112922;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1895.80174112922, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3594064.2416685824, double1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double2 = MathArrays.linearCombination(1895.80174112922, 1.304E19, 3181156.576791017, 3594064.2416685824, 208.185930642, 0.9489846229553223, 1895.80174112922, (-2043.88032348));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.4721254715758307E22, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-872.9278255351));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-871.0193894061326), (-1.9084361289674359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(3081.78, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2684290.133884032), (-5881.380293529265), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9*$p?ZZq";
      stringArray0[1] = "1jcd\"C8cL\"-MrV";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2684290.133884032), (-5881.380293529265), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2688734.5346516604, double0, 0.01);
      
      double[][] doubleArray2 = new double[6][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Double[] doubleArray3 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1895.80174112922;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3081.78);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1895.80174112922}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3081.78}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1895.80174112922, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1jcd\"C8cL\"-MrV";
      stringArray0[1] = "1jcd\"C8cL\"-MrV";
      stringArray0[2] = "1jcd\"C8cL\"-MrV";
      stringArray0[3] = "9*$p?ZZq";
      stringArray0[4] = "@";
      stringArray0[5] = "9*$p?ZZq";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3081.78}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3590982.4616685826, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {3594064.2416685824}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      doubleArray0[1] = 1658.67;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "multiply";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-3032.0), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5029087.44), (-5029087.44), -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-17.08585646);
      doubleArray0[1] = 0.6409968137741089;
      doubleArray0[2] = 157.93892633;
      doubleArray0[3] = (-4.503599627370496E15);
      doubleArray0[4] = (-456.14);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-1387.0);
      doubleArray0[7] = 2861273.5305956393;
      doubleArray0[8] = 146.012;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-17.086 <= 0.641)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 1146L;
      longArray1[1] = 0L;
      longArray1[2] = 1530L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1530L;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.checkNonNegative(longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertArrayEquals(new long[] {1146L, 0L, 1530L}, longArray1);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1534.505);
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3479);
      intArray0[1] = (-2065);
      int int0 = 459;
      intArray0[2] = 459;
      intArray0[3] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3479), (-2065), 459, 3}, intArray0);
      assertArrayEquals(new int[] {(-3479), (-2065), 459}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((-1617.4), (-3032.0), 0.902267575263977, (double) 0, (-43.55595739673313), (double) 0, 881.6934845545, 965.17718);
      assertEquals(5754947.231046686, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 881.6934845545;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 881.6934845545;
      doubleArray0[4] = (-1617.4);
      doubleArray0[5] = 881.6934845545;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {881.6934845545, 0.0, 0.0, 881.6934845545, (-1617.4), 881.6934845545, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.linearCombination(467.4, (-1534.505), 0.0, 3216.9958191548567);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-717227.637), double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 81);
      assertEquals(81, objectArray0.length);
      assertNotNull(objectArray0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotNull(doubleArray3);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3479);
      intArray0[1] = (-2065);
      intArray0[2] = 459;
      intArray0[3] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3479), (-2065), 459, 3}, intArray0);
      assertArrayEquals(new int[] {(-3479), (-2065), 459}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1534.505, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.88329217E-17)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-2065);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = "joe&JXfhnZ";
      stringArray0[1] = "Wl5q41w>QBNQ9W{\u0001Sg";
      stringArray0[2] = "`d";
      stringArray0[3] = "FrH'~";
      stringArray0[4] = "ITERATIONS";
      stringArray0[5] = "A1n+X&8\"7@!#/~";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      doubleArray0[1] = 1658.67;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3317.34, 3317.34, 0.0, 0.0, 2.0E-5}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3317.34, 3317.34, 0.0, 0.0, 2.0E-5}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",b:i~O_oT";
      stringArray0[1] = "";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "";
      stringArray0[4] = "TA.biOwr>B";
      stringArray0[5] = "?YH6?j6|/N&@]$;";
      stringArray0[6] = "equal vertices {0} and {1} in simplex configuration";
      boolean boolean3 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean3);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1658.67, 1658.67, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3317.34, 3317.34, 0.0, 0.0, 2.0E-5}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-871.3839603468853));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-3.141592653589793), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-871.3839603468853), 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(3081.78, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-3.141592653589793), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-2685413.6613178244), 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "1jcd\"C8cL\"-MrV";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2028.0664;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2147483647L;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 445.9;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2028.0664;
      doubleArray1[3] = 2028.0664;
      doubleArray1[4] = (-2928.703086137);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2028.0664, 0.0, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {445.9, 0.0, 2028.0664, 2028.0664, (-2928.703086137)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2147483647L;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {445.9, 0.0, 2028.0664, 2028.0664, (-2928.703086137)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2.1474832011009574E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 30;
      intArray0[2] = 546;
      intArray0[3] = (-784);
      intArray0[4] = 746;
      intArray0[5] = (-379);
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 30, 546, (-784), 746, (-379), 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 30.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 30;
      doubleArray1[1] = (double) 746;
      doubleArray1[2] = (double) 30;
      doubleArray1[3] = (double) 0;
      double double3 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {30.0, 746.0, 30.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      float float0 = (-1679.0F);
      floatArray0[0] = (-1679.0F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1679.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1679.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray3 = MathArrays.scale(0.0F, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      int int0 = (-216);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 3;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-216), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2867.675866494), (-6.283185307179586), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1679.0F);
      floatArray1[2] = (-1679.0F);
      floatArray1[3] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1679.0F), (-1679.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = MathArrays.scale(2868.567496, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4113060.889844162), (-9011.870571760068), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 157.93892633;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1754.716328972);
      doubleArray0[4] = 1534.505;
      doubleArray0[5] = 3472.742727;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {157.93892633, (-1.0), 1.34217729E8, (-1754.716328972), 1534.505, 3472.742727}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {157.93892633, (-1.0), 1.34217729E8, (-1754.716328972), 1534.505, 3472.742727}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {24944.704450273162, 1.0, 1.801439877791744E16, 3079029.3951609717, 2354705.595025, 1.2059942047931395E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 151;
      intArray0[1] = 702;
      intArray0[2] = (-743);
      intArray0[3] = 162;
      intArray0[4] = 158;
      int[] intArray1 = MathArrays.copyOf(intArray0, 158);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {151, 702, (-743), 162, 158}, intArray0);
      assertEquals(158, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {157.93892633, (-1.0), 1.34217729E8, (-1754.716328972), 1534.505, 3472.742727}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {24944.704450273162, 1.0, 1.801439877791744E16, 3079029.3951609717, 2354705.595025, 1.2059942047931395E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.417851693272494E24, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-873));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3479);
      intArray0[1] = (-2065);
      intArray0[2] = 459;
      intArray0[3] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3479), (-2065), 459, 3}, intArray0);
      assertArrayEquals(new int[] {(-3479), (-2065), 459}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1534.505, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.88329217E-17)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-2065);
      doubleArray2[1] = (-1534.505);
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 1679.4071637;
      doubleArray2[4] = (double) 459;
      doubleArray2[5] = 2656.121577730126;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 30;
      intArray0[2] = 546;
      intArray0[3] = (-784);
      intArray0[4] = 746;
      intArray0[5] = (-379);
      intArray0[6] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 30;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(3451.0537370105344, (-1534.505), 3.834E-20, 1658.67, 3.6725170580355583E-9, 3.6725170580355583E-9, 98.0, (-1534.505));
      assertEquals((-5446040.704711351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1809.4948;
      doubleArray0[3] = (-3437.0348);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.3040000000000006E19);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1809.4948, (-3437.0348), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-1.449783857355273E19), 2.753783857355274E19, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1809.4948, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1809.4948, (-3437.0348), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, (-2.623376351008308E22), 4.98295757020831E22, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?u<5,n<oXK\".5ptNF9C";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1809.4948;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-780.0058828);
      doubleArray2[3] = 1809.4948;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 0.0;
      double double0 = 3.141592653589793;
      doubleArray0[6] = 3.141592653589793;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, (-1.0), 100.0, 0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-216);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-216), (-216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-58.488F);
      floatArray0[2] = (-58.488F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-58.488F), (-58.488F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, (-1.0), 100.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2065902.0884224293, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1433.837933247), (-3.141592653589793), 0.0, (-1.0), 100.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2055891.2188180282, 9.869604401089358, 0.0, 1.0, 10000.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1534.505);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(14, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2141277047));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1780);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1780, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1780, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(4.506260808493882E13, 5.0614674548127384E-8, 426.2496350674572, 78.9106);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2314464.8569619465, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 639;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {639}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2028.0664;
      doubleArray0[1] = (double) 639;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 639;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-2928.703086137);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2028.0664, 639.0, 0.0, 0.0, 639.0, 0.0, 0.0, (-2928.703086137)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2028.0664, 639.0, 639.0, 0.0, 0.0, 0.0, 0.0, (-2928.703086137)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2028.0664, 639.0, 639.0, 0.0, 0.0, 0.0, 0.0, (-2928.703086137)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray1 = new long[7][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray1[5] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 639;
      longArray3[1] = (long) 639;
      longArray3[2] = (long) 639;
      longArray3[3] = (long) 639;
      longArray3[4] = (long) 639;
      longArray3[5] = (long) 639;
      longArray1[6] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1534.505);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1534.505)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 3.4028235E38F;
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      int int0 = (-379);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-379));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 2;
      intArray0[0] = 2;
      intArray0[1] = 30;
      int int1 = 546;
      intArray0[2] = 546;
      int int2 = (-784);
      intArray0[3] = (-784);
      int int3 = 746;
      int int4 = 674;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2, 30, 546, (-784), 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 30;
      floatArray0[1] = (float) (-784);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 30.0F;
      doubleArray0[3] = (double) 746;
      doubleArray0[4] = (double) 746;
      doubleArray0[5] = (double) (-784);
      doubleArray0[6] = (double) 30;
      doubleArray0[7] = (double) 674;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1658.67, 0.0, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1658.67, 0.0, 0.0, 0.0, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3317.34, 0.0, 0.0, 0.0, 2.0E-5}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "1jcd\"C8cL\"-MrV";
      stringArray0[2] = "~xwm1gN.TqLN<l";
      stringArray0[3] = "~xwm1gN.TqLN<l";
      stringArray0[4] = "L`9#D.4WEz";
      stringArray0[5] = "1jcd\"C8cL\"-MrV";
      stringArray0[6] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertEquals(7, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = 1146L;
      long long1 = 0L;
      long long2 = 1530L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double double0 = 2307.6055;
      doubleArray0[1] = 2307.6055;
      doubleArray0[2] = 0.0;
      double double1 = 1.304E19;
      doubleArray0[3] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 1146L;
      longArray1[1] = 0L;
      longArray1[2] = 1530L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1146L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1530L;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1660.95434586;
      doubleArray0[1] = 1655.403223;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 3602.13706308;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1655.403223;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1050.230964111);
      doubleArray0[1] = (-3044.329);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1050.230964111), (-3044.329), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(826.238726247, doubleArray0);
      assertArrayEquals(new double[] {(-867741.4940522315), (-2515342.5152368033), (-826.238726247), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = (-2353L);
      longArray1[2] = 0L;
      longArray1[3] = (-2693L);
      longArray1[4] = (-355L);
      longArray1[5] = 2255L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2255L;
      longArray2[1] = (-1L);
      longArray2[2] = 0L;
      longArray2[3] = 2255L;
      longArray2[4] = 2255L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2693L);
      longArray3[1] = 2255L;
      longArray3[2] = (-1L);
      longArray3[3] = 0L;
      longArray3[4] = (-962L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1304.0099, 1304.0099, 1304.0099, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 1146L;
      longArray1[1] = 0L;
      longArray1[2] = 1530L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1146L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1530L;
      longArray3[1] = 1530L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1530L;
      longArray4[1] = 0L;
      longArray4[2] = 1530L;
      longArray4[3] = 1146L;
      longArray4[4] = 0L;
      longArray4[5] = 1530L;
      longArray4[6] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 1530L;
      longArray5[1] = 0L;
      longArray5[2] = 1146L;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = 1146L;
      longArray8[1] = 0L;
      longArray8[2] = 1146L;
      longArray8[3] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      
      longArray9[0] = 1530L;
      longArray9[1] = 1146L;
      longArray9[2] = 1530L;
      longArray9[3] = 1530L;
      longArray9[4] = 0L;
      longArray0[8] = longArray9;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 157.93892633;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1754.716328972);
      doubleArray0[4] = 1534.505;
      doubleArray0[5] = 3472.742727;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-4846);
      intArray0[1] = (-4846);
      intArray0[2] = (-4846);
      intArray0[3] = 168;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 639;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2028.0664;
      doubleArray0[1] = (double) 639;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 639;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-2928.703086137);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[1] = (long) 639;
      longArray0[2] = (long) 639;
      longArray0[3] = (long) 639;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 639;
      longArray0[6] = 639L;
      longArray0[7] = (long) 639;
      longArray0[8] = (long) 639;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1658.67;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {3317.34, 0.0, 0.0, 0.0, 2.0E-5}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-4846);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 639;
      intArray0[0] = 639;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2028.0664;
      doubleArray0[1] = (double) 639;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 639;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-2928.703086137);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 639;
      longArray0[2] = (long) 639;
      longArray0[3] = (long) 639;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 639;
      longArray0[6] = (-888L);
      longArray0[7] = (long) 639;
      longArray0[8] = (long) 639;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -888 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1809.4948;
      doubleArray0[3] = (-3437.0348);
      doubleArray0[4] = 1758.035766;
      doubleArray0[5] = 1349.1002988487985;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1758.035766;
      doubleArray1[1] = 1758.035766;
      doubleArray1[2] = 1349.1002988487985;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 30;
      intArray0[2] = 546;
      intArray0[3] = (-784);
      intArray0[4] = 746;
      intArray0[5] = (-379);
      intArray0[6] = 0;
      intArray0[7] = (-343);
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-343);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-343);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2 >= -343)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1679.0F);
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.scale(0.0F, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) (-1679.0F);
      doubleArray2[2] = (double) (-1679.0F);
      doubleArray2[3] = (double) (-1679.0F);
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1,679)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1895.80174112922;
      MathArrays.checkOrder(doubleArray0);
      double double0 = 1577.462151643941;
      MathArrays.linearCombination(1577.462151643941, 1577.462151643941, 1895.80174112922, (-2278.309205));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1830835.7178005972);
      doubleArray1[1] = 1577.462151643941;
      doubleArray1[2] = (-2278.309205);
      MathArrays.equals(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[4];
      float float0 = 190.6024F;
      floatArray0[0] = 190.6024F;
      float float1 = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-58.488F);
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      MathArrays.checkRectangular(longArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2142233076);
      double double0 = 1527.463796953;
      double double1 = (-1.0);
      double double2 = 12.0;
      double double3 = (-393.1);
      MathArrays.linearCombination(1527.463796953, (double) (-2142233076), (-1.0), 1673.169, (double) (-2142233076), 12.0, 12.0, (-393.1));
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, Integer.MAX_VALUE, 1150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[4];
      longArray1[0] = 2147483647L;
      longArray1[1] = 2488L;
      long long0 = 100L;
      longArray1[2] = 100L;
      longArray1[3] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[4];
      doubleArray0[0] = (double) 4550;
      intArray0[2] = (-2401);
      intArray0[3] = (-1073741823);
      int int0 = new Integer(1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, (-1557), (-1557));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1433.837933247);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 0.0;
      double double0 = 3.141592653589793;
      doubleArray0[6] = 3.141592653589793;
      MathArrays.equals(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-216);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-216), (-216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination((-907.15545), (-907.15545), (-1433.837933247), (double) 0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1130.481449565775;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 393.65280434406;
      doubleArray0[3] = 2552.4;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 419;
      intArray0[2] = 0;
      intArray0[3] = 20;
      intArray0[4] = 72;
      intArray0[5] = 2223;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray2, doubleArray0);
      double[][] doubleArray3 = new double[5][0];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1536.0);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 1130.481449565775;
      doubleArray4[5] = (double) 72;
      doubleArray4[6] = (double) 2223;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-796.1843758660617);
      doubleArray0[0] = (-796.1843758660617);
      int int0 = 178;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 178);
      double double1 = 0.0;
      double double2 = 1.304E19;
      MathArrays.linearCombination((-796.1843758660617), (-796.1843758660617), 0.0, 1.304E19);
      double double3 = 1161.41;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1161.41);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-796.1843758660617);
      doubleArray3[1] = 633909.5603732303;
      doubleArray3[2] = (double) 178;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 633909.5603732303;
      doubleArray3[5] = (double) 178;
      doubleArray3[6] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 178 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 5631;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 674;
      intArray0[5] = 338;
      intArray0[6] = 0;
      intArray0[7] = (-3017);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3017);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,017 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, 1400.13292, 0.0, (double) 0, 0.0, 500.1871311, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[2];
      intArray0[0] = 420;
      intArray0[1] = 12;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination(Double.NaN, (double) 420, (double) 420, (double) 0, Double.NaN, (double) 12);
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, 0.0, (-0.6123983670957781), (double) 420);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      MathArrays.distance1(intArray1, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (-0.6123983670957781);
      doubleArray0[3] = (-0.6123983670957781);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (420 >= 12)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[2];
      intArray0[0] = 420;
      intArray0[1] = 0;
      MathArrays.distance1(intArray0, intArray0);
      double double0 = Double.NaN;
      MathArrays.linearCombination(Double.NaN, (double) 420, (double) 420, (double) 0, Double.NaN, (double) 0);
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, 0.0, 1.0E-5, (double) 420);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      MathArrays.distance1(intArray1, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 420;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (420 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1692.817608596);
      doubleArray0[1] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (-1142.63928967682), 0.0, (-2378.947993294), 1.34217729E8, (-2378.947993294), 0.0, (-1142.63928967682));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.34217729E8;
      doubleArray3[4] = (-2378.947993294);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1476.326;
      MathArrays.equals(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 1198L;
      longArray1[1] = (-185L);
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = (-312L);
      longArray1[5] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-1L);
      longArray2[1] = 0L;
      longArray2[2] = (-312L);
      longArray2[3] = (-185L);
      longArray2[4] = (-185L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1L);
      longArray3[1] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 0L;
      longArray4[1] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 1L;
      longArray5[1] = (-312L);
      longArray5[2] = 1L;
      longArray5[3] = (-501L);
      longArray5[4] = (-1L);
      longArray5[5] = (-1L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -185 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (6.283 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-6136L);
      longArray0[1] = 1935L;
      longArray0[2] = 4453L;
      longArray0[3] = 2147483647L;
      longArray0[4] = 2205L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -6,136 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5838.3020883);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2367.76147167);
      doubleArray0[3] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 91;
      intArray0[0] = 91;
      int int1 = (-858);
      intArray0[1] = (-858);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-858);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("+!JA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.+!JA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2307.6055;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3081.78;
      doubleArray0[6] = 617.48503;
      MathArrays.normalizeArray(doubleArray0, (-1946.9122076553767));
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?u<5,n<oXK\".5ptNF9C";
      stringArray0[1] = "";
      stringArray0[2] = "denominator format";
      stringArray0[3] = "=,fwY0g6AAxG$z~4";
      stringArray0[4] = "";
      stringArray0[5] = "1jcd\"C8cL\"-MrV";
      stringArray0[6] = "L`9#D.4WEz";
      stringArray0[7] = "~xwm1gN.TqLN<l";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 56.6393968;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 799.4422;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.668E-20, 113.2787936, 0.0, 1598.8844}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = MathArrays.linearCombination(311.051396984, 311.051396984, (-870.8285849), (-870.8285849), 311.051396984, 1321.0);
      assertEquals(1265994.2912604986, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3553.8;
      doubleArray0[2] = (-1.0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,553.8 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      double double0 = 329.203603050603;
      doubleArray0[1] = 329.203603050603;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-342.7);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-342.7);
      doubleArray1[1] = 329.203603050603;
      doubleArray1[2] = -0.0;
      doubleArray1[3] = (-342.7);
      doubleArray1[4] = -0.0;
      doubleArray1[5] = (-342.7);
      doubleArray1[6] = (-342.7);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2166.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.32;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(3.32, doubleArray0);
      assertArrayEquals(new double[] {7191.12, 0.0, 11.0224}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1662);
      intArray0[1] = (-2562);
      intArray0[2] = 261;
      intArray0[3] = 574;
      intArray0[4] = (-3433);
      intArray0[5] = (-1002);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1662), (-2562), 261, 574, (-3433), (-1002)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 1489;
      int int0 = 0;
      intArray0[2] = 0;
      int int1 = 0;
      intArray0[3] = 0;
      int int2 = 0;
      intArray0[4] = 0;
      int int3 = (-1);
      intArray0[5] = (-1);
      int int4 = 1;
      MathArrays.copyOf(intArray0, 1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-153.542F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1387.1814F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3454.034F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1679.5F);
      floatArray0[8] = 814.3369F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1679.5F);
      floatArray1[3] = 814.3369F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 3454.034F;
      floatArray1[6] = (-153.542F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 224.48455425344;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1375.22527086;
      doubleArray0[4] = 538.2283038022463;
      doubleArray0[5] = 3109.0;
      doubleArray0[6] = 1282.284651879798;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.7976931348623157E308;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 83.003, (-1828.74899513906), -0.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1828.74899513906);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-1828.74899513906);
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 538.2283038022463;
      doubleArray1[5] = (-1828.74899513906);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.7976931348623157E308;
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-1913L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 4503599627370495L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = (-2224L);
      longArray2[4] = 4503599627370495L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
