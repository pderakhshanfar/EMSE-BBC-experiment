/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:08:00 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[7];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4680.0);
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = 0.0;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination(4506.74912742594, (-1950.238666), 0.0, 4506.74912742594);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.copyOf(doubleArray0, 223);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 1545.691F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1545.691F;
      doubleArray0[3] = (double) 1545.691F;
      doubleArray0[4] = (double) 1545.691F;
      doubleArray0[5] = (double) 1545.691F;
      doubleArray0[6] = 1.9699272335463627E-8;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.17333333333333325E18;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 3442.807814684949;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1376.3718752562652;
      doubleArray0[5] = 421.965;
      doubleArray0[6] = (-247.0);
      doubleArray0[7] = (-12476.103566781136);
      doubleArray0[8] = 429.1829243075119;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2903.460314);
      doubleArray0[1] = 0.4311765432357788;
      doubleArray0[2] = 3.2451856334014566E32;
      doubleArray0[3] = 0.19999954104423523;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 15989.3;
      doubleArray0[6] = (-1239.488981);
      doubleArray0[7] = (-3335.3897889927484);
      doubleArray0[8] = 2.925681159240093E-8;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Object object1 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 1316;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1316;
      doubleArray1[1] = (double) 1316;
      doubleArray1[2] = (double) 1316;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][9];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(9.497134151843133);
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<Double, FieldElement<Integer>> pair0 = new Pair<Double, FieldElement<Integer>>(double0, fieldElement0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2, 2146383073);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1939.7230167598;
      doubleArray1[2] = 2377.27991060911;
      doubleArray1[3] = (-1324.6);
      doubleArray1[4] = 0.14285714285714285;
      doubleArray1[5] = 1.3040000000000004E19;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (-3436.222);
      doubleArray1[8] = 1941802.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, 1.3040000000000004E19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 1334.0839353840977;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 2001.9029541015625;
      doubleArray0[4] = 2.608E18;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = 1571.682143411;
      MathArrays.safeNorm(doubleArray0);
      long[][] longArray1 = new long[8][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      long[] longArray2 = new long[5];
      longArray2[0] = (-302932621132653753L);
      longArray2[1] = (-2443L);
      longArray2[2] = 4863L;
      longArray2[3] = (-2644281811660520851L);
      longArray2[4] = (-3401L);
      longArray1[7] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -302,932,621,132,653,753 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.9305076599121094;
      doubleArray0[1] = (-1895.5);
      doubleArray0[2] = (-1438.4475);
      doubleArray0[3] = (-1895.5);
      doubleArray0[4] = 1010.7;
      doubleArray0[5] = (-5511.07);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1438.4475);
      doubleArray1[1] = (-1438.4475);
      doubleArray1[2] = (-5511.07);
      doubleArray1[3] = (-5511.07);
      doubleArray1[4] = (-1895.5);
      doubleArray1[5] = 1010.7;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.linearCombination(doubleArray2, doubleArray0);
      MathArrays.ebeMultiply(doubleArray2, doubleArray0);
      MathArrays.copyOf(doubleArray1, 1993);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1993;
      longArray0[1] = (long) 1993;
      longArray0[2] = (long) 1993;
      longArray0[3] = (long) 1993;
      longArray0[4] = (long) 1993;
      longArray0[5] = (long) 1993;
      longArray0[6] = (long) 1993;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.167;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "XU6J0S10@0R_";
      stringArray0[3] = "3vO";
      stringArray0[4] = "P8$zyLa= 82LCzC";
      stringArray0[5] = "points {3} and {2} are not increasing ({1} > {0})";
      stringArray0[6] = "k%";
      stringArray0[7] = "[ mo%qsYZ,]ab6ou]";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7675435543060303;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 2.0;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1, (-63));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-3129.0), (-3129.0), 0.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3281;
      intArray0[1] = (-1);
      intArray0[2] = 1315;
      intArray0[3] = 2131337154;
      intArray0[4] = (-2144883787);
      intArray0[5] = (-103);
      intArray0[6] = (-1);
      MathArrays.distance(intArray0, intArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = new int[7];
      intArray2[0] = 3281;
      intArray2[1] = 1315;
      intArray2[2] = 2131337154;
      intArray2[3] = 3281;
      intArray2[4] = (-1);
      intArray2[5] = (-1);
      intArray2[6] = 2131337154;
      MathArrays.distance1(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "XU6J0S10@0R_";
      stringArray0[3] = "3vO";
      stringArray0[4] = "P8$zyLa= 82LCzC";
      stringArray0[5] = "points {3} and {2} are not increasing ({1} > {0})";
      stringArray0[6] = "k%";
      stringArray0[7] = "[ mo%qsYZ,]ab6ou]";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7675435543060303;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 2.0;
      MathArrays.safeNorm(doubleArray0);
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      int int0 = 2248;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 2425, (-1591));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2425;
      doubleArray0[1] = (double) (-1591);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,591 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 1883.5561;
      doubleArray0[2] = (-4414.2682716);
      doubleArray0[3] = (-855.90426111782);
      doubleArray0[4] = 1146.565759;
      doubleArray0[5] = 745.99741;
      doubleArray0[6] = (-2816.99821109);
      doubleArray0[7] = 5.669184079525E-24;
      doubleArray0[8] = 4127.07;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(412.5037437981882, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1459.51F);
      floatArray0[3] = (-1649.4615F);
      floatArray0[4] = (-198.66708F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-61.8F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-1649.4615F);
      floatArray1[1] = (-1459.51F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1459.51F);
      floatArray1[4] = (-198.66708F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-61.8F);
      floatArray1[7] = (-198.66708F);
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(0.25, 0.0, 0.0, (-1802.653023065), 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1802.653023065);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.25;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2929.55582369);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[8];
      longArray1[0] = (-265L);
      longArray1[1] = (-3020L);
      longArray1[2] = 1428L;
      longArray1[3] = (-1L);
      longArray1[4] = 65L;
      longArray1[5] = 1346L;
      longArray1[6] = 0L;
      longArray1[7] = 429L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-650.91494213963);
      doubleArray1[1] = (-3678.384);
      doubleArray1[2] = 477.0;
      doubleArray1[3] = 2400.0;
      doubleArray1[4] = (-796.204);
      doubleArray1[5] = 1.3421137217454197E8;
      doubleArray1[5] = 1.86285714285713766E18;
      doubleArray1[7] = (-1712.018684112402);
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.9974949359893799;
      doubleArray0[1] = 0.9974949359893799;
      doubleArray0[2] = (-1901.59897);
      doubleArray0[3] = (-5370.0);
      doubleArray0[4] = 564.38539;
      doubleArray0[5] = (-452.13452);
      doubleArray0[6] = 4245.543530797765;
      doubleArray0[8] = (-803.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3746.298014);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.7214844226837158;
      doubleArray0[3] = 5370.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(4.3466666666666665E18, doubleArray1);
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 4.3466666666666665E18;
      doubleArray3[2] = 1.304E19;
      doubleArray3[3] = 0.7214844226837158;
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray2, doubleArray3);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3194.6681499606;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 13.0;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = (-1113.2858953363);
      doubleArray1[3] = (-1908.5);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 1600.657924123851;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-356.72083F);
      floatArray0[5] = (-3044.808F);
      floatArray0[6] = (-450.67938F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 522;
      intArray0[1] = (-419);
      intArray0[2] = 791;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";bWB XPq";
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1442.088;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.8441344853345161E19;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";bWB XPq";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1532.9493673;
      doubleArray0[1] = 1532.9493673;
      doubleArray0[2] = 1.125;
      doubleArray0[3] = 3334.755595719106;
      doubleArray0[4] = 31.0;
      doubleArray0[5] = (-1956.82);
      doubleArray0[6] = (-1699.0);
      doubleArray0[7] = (-581.974163);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[0];
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";bWB XPq";
      stringArray0[1] = ";Kxe2\"A!pRQQ";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "NOT_POSITIVE_DEGREES_OF_FREEDOM";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1475.65353;
      doubleArray0[1] = 1475.65353;
      doubleArray0[2] = (-162.27581);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 108.0F;
      MathArrays.equals(floatArray0, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1316;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 108.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 108.0F;
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[25];
      double[] doubleArray1 = new double[25];
      MathArrays.equals(doubleArray1, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = new double[0];
      MathArrays.ebeMultiply(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 2128136948;
      intArray0[3] = 134217729;
      intArray0[4] = 107;
      intArray0[5] = 718;
      intArray0[6] = 3;
      intArray0[7] = 134217729;
      int[] intArray1 = new int[5];
      intArray1[0] = 134217729;
      intArray1[1] = (-1);
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 718;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.6028797571515328E16;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1388.66699);
      doubleArray0[4] = 1.184154459111628E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1729.6001040913;
      doubleArray1[1] = (-841.9091589984143);
      doubleArray1[2] = (-2418.3079029);
      doubleArray1[3] = (-812.2432053238693);
      doubleArray1[4] = 2806.531449693505;
      MathArrays.equals((double[]) null, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -841.909 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      int[] intArray0 = new int[6];
      intArray0[1] = (-1476);
      intArray0[2] = 238;
      intArray0[3] = (-1476);
      MathArrays.normalizeArray(doubleArray0, (-1476));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1476);
      floatArray0[1] = (float) (-1476);
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1476);
      floatArray1[1] = (float) 238;
      floatArray1[2] = (float) (-1476);
      floatArray1[3] = (float) (-1476);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&_c";
      stringArray0[1] = "&_c";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.convolve(doubleArray3, doubleArray3);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-20.0);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      doubleArray0[5] = (-3027.109351333668);
      int[] intArray0 = new int[4];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-477.0);
      doubleArray1[3] = (double) (-1476);
      doubleArray1[4] = 1.304E19;
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = 1.8441344853345161E19;
      doubleArray2[3] = (double) 0;
      MathArrays.linearCombination(doubleArray2, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 67;
      intArray0[2] = 1532;
      intArray0[3] = (-115);
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 0.625;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2271.82565428892);
      doubleArray0[4] = 15.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-0.7853981633974483);
      MathArrays.normalizeArray(doubleArray0, 1.5707963267948966);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[5];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 1416.0F;
      floatArray0[2] = (-4168.0F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-2020.8F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-36.085F);
      floatArray0[1] = 677.3224F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 49.5605F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 943.01577364097;
      doubleArray0[1] = (-808.232057518);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = (-1950.238666);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray1, doubleArray3);
      MathArrays.checkPositive(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Integer integer0 = new Integer((-28));
      double[][] doubleArray1 = new double[18][9];
      doubleArray1[0] = doubleArray0;
      double[][] doubleArray2 = new double[18][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer1 = new Integer((-28));
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer((-28));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4370);
      integerArray0[3] = integer3;
      integerArray0[4] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 5;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray1, intArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3027.109351333668);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 552.862;
      doubleArray0[3] = (-20.0);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = (-3027.109351333668);
      doubleArray0[6] = (-477.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 595.0;
      doubleArray1[1] = (-3027.109351333668);
      doubleArray1[2] = (-477.0);
      doubleArray1[3] = 552.862;
      doubleArray1[4] = (-477.0);
      MathArrays.equals(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 525.1617F;
      floatArray0[1] = 2203.242F;
      floatArray0[2] = 0.5F;
      floatArray0[3] = (-43.871F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1094.8766F;
      floatArray0[6] = (-667.2F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(361);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3407.0F;
      doubleArray0[1] = (double) 2431.981F;
      doubleArray0[2] = (double) 3407.0F;
      doubleArray0[3] = (double) (-28);
      doubleArray0[4] = (double) 2431.981F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,407 > 2,431.981)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1316, 1316);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1950.238666);
      double double0 = new Double((-1950.238666));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5082.704F);
      floatArray0[1] = (-2579.3806F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Integer integer0 = new Integer((-652));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.equals(floatArray0, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, (-652));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "r";
      stringArray0[2] = "";
      stringArray0[3] = "FUNCTION";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[6] = "instance of class {0} not comparable to existing values";
      stringArray0[7] = ":Q(";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<UclV\"5eY~ulH'";
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (-2042.143);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 134217729;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<nUcalV\"5eY~ulH'";
      stringArray0[1] = "<nUcalV\"5eY~ulH'";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-567.4792);
      doubleArray0[1] = 1173.3105248808758;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-625.17);
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[2];
      intArray0[0] = (-3928);
      intArray0[1] = (-3928);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3928);
      floatArray0[1] = (float) (-3928);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-3928);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-3928);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      double[] doubleArray1 = MathArrays.scale(2.28123E-17, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1419;
      intArray0[1] = (-255);
      intArray0[2] = 19;
      intArray0[3] = 874;
      intArray0[4] = 1349;
      intArray0[5] = 1291;
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1316, 1316);
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 616.173;
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[7];
      double double1 = 1.0;
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 616.173;
      doubleArray2[2] = 616.173;
      doubleArray2[3] = 616.173;
      doubleArray2[4] = 616.173;
      double double2 = 3928.0;
      doubleArray2[5] = 3928.0;
      doubleArray2[6] = 616.173;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<nUcalV\"5eY~ulH'";
      stringArray0[1] = "";
      stringArray0[2] = "<nUcalV\"5eY~ulH'";
      MathArrays.equals((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3407.0F;
      floatArray0[1] = 2431.981F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Integer integer0 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i|/MRz/k";
      stringArray0[1] = "smCcJ#UB0xL)jiv";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray1 = new int[6];
      intArray1[0] = (-3928);
      intArray1[1] = (-3928);
      intArray1[2] = (-3928);
      intArray1[3] = (-3928);
      intArray1[4] = (-3928);
      intArray1[5] = (-3928);
      MathArrays.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3928);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3928);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-3928);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray1);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 5;
      MathArrays.copyOf(intArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      Integer integer0 = new Integer(756);
      int[] intArray0 = new int[4];
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")U]=e\"Qn%u#q;S~!cSx";
      stringArray0[1] = "";
      stringArray0[2] = ",Q";
      stringArray0[3] = "";
      stringArray0[4] = "G6M=YS";
      stringArray0[5] = "DECREASING";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 2.28123E-17);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-748.963);
      doubleArray0[1] = (-1.1080862041791113);
      doubleArray0[2] = (double) (-565);
      doubleArray0[3] = (double) (-565);
      doubleArray0[4] = (-1.1080862041791113);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.28123E-17);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3559.819F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3609.7373F;
      floatArray0[3] = 1427.0F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 3609.7373F;
      floatArray1[1] = 0.0F;
      floatArray1[3] = 1427.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.linearCombination((double) 1427.0F, (double) 0.0F, 2214.9017051255, 1.304E19);
      MathArrays.checkPositive(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      intArray0[0] = (-3240);
      intArray0[1] = 0;
      int int0 = new Integer(0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Integer integer0 = new Integer(1011);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination((double) 1011, 841.98, (double) 1011, (-1694.44), 1232.299, 841.98, 3.834E-20, (-1694.44));
      MathArrays.convolve(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      int int0 = (-1);
      intArray0[0] = (-1);
      intArray0[1] = 5;
      int int1 = (-3928);
      intArray0[2] = (-3928);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-565);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-565);
      doubleArray0[1] = (double) (-565);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = (-565);
      intArray1[1] = (-565);
      intArray1[2] = (-565);
      intArray1[3] = (-565);
      intArray1[4] = (-565);
      intArray1[5] = (-565);
      intArray1[6] = (-565);
      intArray1[8] = (-565);
      MathArrays.distance(intArray0, intArray1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -565 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      doubleArray0[5] = (-3027.109351333668);
      int[] intArray0 = new int[4];
      intArray0[0] = 238;
      intArray0[1] = 1126;
      intArray0[2] = (-1476);
      intArray0[3] = 134217729;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i|/MRz/k";
      stringArray0[1] = "smCcJ#UB0xL)jiv";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray1 = new int[8];
      intArray1[0] = 7167;
      intArray1[1] = 242;
      intArray1[2] = 3224;
      intArray1[3] = 152;
      intArray1[4] = 0;
      intArray1[5] = 7167;
      intArray1[6] = 139;
      intArray1[7] = 152;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 242;
      doubleArray0[1] = (double) 152;
      doubleArray0[2] = (double) 242;
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2705.79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 3.834E-20, 0.0);
      MathArrays.linearCombination(861.8313, 4506.74912742594, (-717.892666), 2896.95042, 4506.74912742594, 0.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lower bound ({0}) must be strictly less than upper bound ({1})";
      stringArray0[1] = "lower bound ({0}) must be strictly less than upper bound ({1})";
      stringArray0[2] = "*y^as{-^";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      stringArray0[5] = "lower bound ({0}) must be strictly less than upper bound ({1})";
      stringArray0[6] = "i|/MRz/k";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[3];
      intArray0[0] = 7167;
      intArray0[1] = 2147483377;
      intArray0[2] = 152;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-1714.9);
      double double1 = 4303.22;
      MathArrays.linearCombination((-1714.9), (-1714.9), (-1714.9), 2891.06139402557, 4303.22, (-1714.9));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2891.06139402557;
      doubleArray0[1] = (-9396591.15261445);
      doubleArray0[2] = 4303.22;
      doubleArray0[3] = 2891.06139402557;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double double2 = 1.34217729E8;
      MathArrays.linearCombination((-9396591.15261445), 833.2154607018091, 1.34217729E8, (-1.0), 1.34217729E8, 84.46606, 2891.06139402557, 2891.06139402557);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-9,396,591.153 <= 4,303.22)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.5;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      int int0 = (-2202);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2202));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[][] doubleArray0 = new double[9][8];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-0.39088464687141244);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-625.17);
      doubleArray1[5] = (-567.4792);
      doubleArray1[6] = (-625.17);
      doubleArray1[7] = (-625.17);
      doubleArray1[8] = (-0.39088464687141244);
      doubleArray0[7] = doubleArray1;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      double[][] doubleArray4 = new double[2][0];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2384.019129804;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-3139.9452774);
      doubleArray0[3] = 2635.469;
      doubleArray0[4] = (-120.5611898692);
      doubleArray0[5] = (-3573.11574);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-3573.11574);
      doubleArray2[1] = 2384.019129804;
      doubleArray2[2] = 2635.469;
      doubleArray2[3] = 2635.469;
      doubleArray2[4] = 1.34217729E8;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 242;
      intArray0[1] = 224;
      int[] intArray1 = new int[7];
      intArray1[0] = 224;
      intArray1[1] = 224;
      intArray1[2] = 242;
      intArray1[3] = 242;
      intArray1[4] = 224;
      intArray1[5] = 224;
      intArray1[6] = 242;
      MathArrays.distance1(intArray0, intArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 284;
      intArray0[2] = 2;
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      Double double0 = new Double(2);
      Integer integer0 = new Integer(2);
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 2;
      floatArray1[2] = (float) 284;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.copyOf(intArray0);
      MathArrays.copyOf(doubleArray1, 2416);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.ebeDivide(doubleArray2, doubleArray2);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[20];
      intArray0[0] = 1295;
      intArray0[1] = 1295;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0, 1295);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1295;
      floatArray0[1] = 2495.4414F;
      floatArray0[2] = (float) 1295;
      floatArray0[3] = (float) 1295;
      floatArray0[4] = (float) 1295;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1950.238666);
      doubleArray0[1] = (-1950.238666);
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1295;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1950.238666);
      doubleArray4[1] = 616.173;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (double) 1295;
      doubleArray4[6] = (double) 1295;
      doubleArray4[7] = (-1950.238666);
      doubleArray4[8] = (-21.84);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray4, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-363.6F);
      floatArray0[2] = (-373.671F);
      floatArray0[3] = 2103.7546F;
      floatArray0[4] = (-1331.798F);
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.convolve(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&_c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 7167;
      intArray0[1] = 7167;
      intArray0[2] = 152;
      intArray0[3] = 152;
      intArray0[4] = 7167;
      intArray0[5] = 152;
      intArray0[6] = 2147483377;
      MathArrays.copyOf(intArray0);
      MathArrays.scaleInPlace((-871.35302065), doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 152;
      floatArray0[1] = (float) 7167;
      floatArray0[2] = (float) 7167;
      floatArray0[3] = (float) 7167;
      floatArray0[4] = (float) 152;
      floatArray0[5] = (float) 7167;
      floatArray0[6] = (float) 152;
      floatArray0[7] = (float) 152;
      floatArray0[8] = (float) 152;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.28123E-17;
      Integer integer0 = new Integer(756);
      int[] intArray0 = new int[4];
      intArray0[0] = 756;
      intArray0[1] = 756;
      intArray0[2] = 756;
      intArray0[3] = 756;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance1(intArray0, intArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1949.3870399701193);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 205;
      intArray0[0] = 205;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4680.0);
      doubleArray0[1] = (double) 205;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 205;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Double double0 = new Double(1.34217729E8);
      int int1 = 243;
      int int2 = 262;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 205, 205);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&_c";
      stringArray0[1] = "&_c";
      stringArray0[2] = "&_c";
      stringArray0[3] = "&_c";
      stringArray0[4] = "&_c";
      stringArray0[5] = "&_c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.convolve(doubleArray1, doubleArray0);
      MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 174;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4680.0);
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 174;
      doubleArray0[6] = (-1950.238666);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination(4506.74912742594, (-1950.238666), 0.0, 4506.74912742594);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.copyOf(doubleArray0, 223);
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 174);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&_c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray5 = MathArrays.convolve(doubleArray4, doubleArray4);
      MathArrays.ebeSubtract(doubleArray4, doubleArray5);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 7167;
      floatArray0[1] = (float) 7167;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.linearCombination(2214.9017051255, (-1950.238666), 616.173, 1.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,950.239 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.linearCombination((-1950.238666), 0.0, 0.0, (-1950.238666));
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-567.4792);
      doubleArray0[1] = 1173.3105248808758;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-625.17);
      doubleArray0[4] = (-0.39088464687141244);
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      intArray0[1] = 2;
      intArray0[2] = (-565);
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3027.109351333668);
      doubleArray1[1] = (-3027.109351333668);
      doubleArray1[2] = (-3027.109351333668);
      doubleArray1[3] = (-3027.109351333668);
      doubleArray1[4] = (-3027.109351333668);
      doubleArray1[5] = (-3027.109351333668);
      doubleArray1[6] = (-3027.109351333668);
      doubleArray1[7] = (-3027.109351333668);
      MathArrays.equals(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 559.245F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 174;
      // Undeclared exception!
      try { 
        MathArrays.scale(174, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<FieldElement<Integer>, String> pair0 = new Pair<FieldElement<Integer>, String>(fieldElement0, "jxH}cT");
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1295);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, (-20.0));
      MathArrays.linearCombination(861.8313, 4506.74912742594, (-717.892666), 2896.95042, 4506.74912742594, 0.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lower bound ({0}) must be strictly less than upper bound ({1})";
      stringArray0[1] = ",9>\"qrflT9";
      stringArray0[2] = "*y^as{-^";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "";
      stringArray0[5] = "w!y> %HzB;mZE";
      stringArray0[6] = "i|/MRz/k";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[3];
      intArray0[0] = 7167;
      intArray0[1] = 2147483377;
      intArray0[2] = 152;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      doubleArray0[5] = (-3027.109351333668);
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -20 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 596.3247166611322;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 848;
      intArray0[2] = (-524);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scaleInPlace((-1950.238666), doubleArray1);
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      int int0 = 2;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 284;
      intArray0[2] = 2;
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      Integer integer0 = new Integer(2);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination((double) 0.0F, 0.0, (double) 2, 2903.4082432541572, (-1333.065666), (-1.0));
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1330.990248));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1317.202156342695;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-294.0);
      doubleArray0[3] = (-171.41714683578994);
      MathArrays.linearCombination(1564.778, (-171.41714683578994), (-2193.14816), (-294.0), 4427.39201, (-2193.14816), 0.0, (-3159.2031898));
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4580.57803542683;
      doubleArray0[1] = 4580.57803542683;
      doubleArray0[2] = 4580.57803542683;
      doubleArray0[3] = 2423.405;
      doubleArray0[4] = 4580.57803542683;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 4580.57803542683;
      doubleArray0[7] = 4580.57803542683;
      MathArrays.scaleInPlace(4580.57803542683, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 7929566.556138862;
      doubleArray1[1] = 7929566.556138862;
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-4680));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4680));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(583);
      integerArray0[3] = integer3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      MathArrays.linearCombination((double) 583, (-429.440873182), (double) 4, (double) integerArray0[3]);
      MathArrays.linearCombination((-1950.238666), 0.9808930158615112, (-248032.029065106), 0.0, (double) 4, (-429.440873182));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<nUcalV\"5eY~ulH'";
      stringArray0[1] = "";
      stringArray0[2] = "F";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[5];
      double double0 = (-567.4792);
      doubleArray0[0] = (-567.4792);
      doubleArray0[1] = 1173.3105248808758;
      doubleArray0[2] = 0.0;
      double double1 = (-625.17);
      doubleArray0[3] = (-625.17);
      doubleArray0[4] = 0.0;
      int int0 = 2306;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2306);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 124.4026;
      doubleArray0[2] = (-2904.24);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1100);
      intArray0[1] = 3043;
      intArray0[2] = 134217729;
      intArray0[3] = (-524);
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scaleInPlace(917.1150588, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1295);
      int[] intArray0 = new int[2];
      intArray0[0] = 1295;
      intArray0[1] = 1295;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0, 1295);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1950.238666);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1295;
      intArray0[1] = 1295;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0, 1295);
      try { 
        MathArrays.ebeSubtract(doubleArray4, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 929L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = (-4227L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4503599627370496L;
      doubleArray0[1] = (double) (-4227L);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 284;
      intArray0[2] = 2;
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double0 = new Integer(2);
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray1 = new long[0][6];
      MathArrays.checkRectangular(longArray1);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[2];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      intArray0[1] = 2;
      intArray0[2] = (-565);
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[8];
      longArray1[0] = 929L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1L;
      longArray1[5] = (-15L);
      longArray1[0] = (-4227L);
      longArray1[7] = 4503599627370496L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 0L;
      longArray2[1] = 929L;
      longArray2[2] = (-4227L);
      longArray2[3] = (-15L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-316);
      intArray0[3] = 850;
      intArray0[4] = (-2163);
      intArray0[5] = 115;
      intArray0[6] = 2146560298;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-4680);
      Integer integer0 = new Integer((-4680));
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4680));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(583);
      integerArray0[3] = integer3;
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (long) int1;
      longArray2[1] = (long) 583;
      longArray2[2] = (long) (int)integerArray0[2];
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-4680);
      longArray2[5] = (long) (int)integerArray0[2];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[10];
      longArray4[0] = (long) int1;
      longArray4[1] = (long) (int)integerArray0[0];
      longArray4[2] = (long) 583;
      longArray4[3] = (long) (int)integerArray0[0];
      longArray4[4] = (long) (-4680);
      integerArray0[2] = (Integer) 0;
      longArray4[6] = (long) (int)integerArray0[0];
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-2629.5955714759);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      doubleArray0[2] = 616.173;
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1295);
      int[] intArray0 = new int[2];
      intArray0[0] = 1295;
      intArray0[1] = 1295;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1295;
      longArray0[1] = (long) 1295;
      longArray0[2] = (long) 1295;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 46.738360943671;
      double double1 = (-40.19);
      MathArrays.linearCombination(46.738360943671, 46.738360943671, (-40.19), (-40.19));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3799.71048370087;
      doubleArray0[1] = 3799.71048370087;
      doubleArray0[2] = 46.738360943671;
      MathArrays.scaleInPlace(46.738360943671, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 46.738360943671;
      doubleArray1[1] = (-40.19);
      doubleArray1[2] = 3799.71048370087;
      doubleArray1[3] = 46.738360943671;
      doubleArray1[4] = 46.738360943671;
      doubleArray1[5] = 46.738360943671;
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-375);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-375), (-375));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 134217729;
      intArray0[4] = 3078;
      intArray0[5] = 134217729;
      intArray0[6] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0, 1338);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3078;
      floatArray0[1] = (float) 3078;
      floatArray0[2] = (float) 3078;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-4680));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4680));
      integerArray0[2] = integer1;
      Integer integer3 = new Integer(583);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(963);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(2041);
      integerArray0[5] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.058823529411764705;
      doubleArray0[1] = 0.058823529411764705;
      int[] intArray0 = null;
      int[] intArray1 = new int[1];
      intArray1[0] = 217;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 174;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4680.0);
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 174;
      doubleArray0[6] = (-1950.238666);
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray1 = new double[0];
      MathArrays.linearCombination(4506.74912742594, (-1950.238666), 0.0, 4506.74912742594);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3349.286F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2359.9205990701294;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1314.1752656655);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1942);
      intArray0[1] = 43;
      intArray0[2] = 1643;
      intArray0[3] = 144;
      intArray0[4] = 2266;
      intArray0[5] = (-1164);
      intArray0[6] = 0;
      intArray0[7] = 1043;
      MathArrays.linearCombination((-2672.5609), (double) 43, Double.NaN, (double) 0, 0.0, 0.0, Double.NaN, 0.0);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1950.238666);
      doubleArray1[1] = 1.494140625;
      doubleArray1[2] = (-1950.238666);
      doubleArray1[3] = 616.173;
      doubleArray1[4] = (-1950.238666);
      doubleArray1[5] = (-2479.0);
      doubleArray1[6] = 616.173;
      double[][] doubleArray2 = new double[0][4];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2267.33666157369);
      doubleArray2[2] = (-2267.33666157369);
      doubleArray2[3] = (-2267.33666157369);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 284;
      intArray0[2] = 2;
      intArray0[3] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray1 = new long[0][6];
      MathArrays.checkRectangular(longArray1);
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      doubleArray0[5] = (-3027.109351333668);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-3233));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-4680));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4680));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(583);
      integerArray0[3] = integer3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = 7929566.556138862;
      doubleArray0[2] = (double) (int)integerArray0[2];
      doubleArray0[3] = (double) 0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (7,929,566.556 >= -4,680)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2950.237816);
      doubleArray0[2] = (-1261.635884939253);
      doubleArray0[3] = 973.0523998882;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1261.635884939253);
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-2193.14816);
      doubleArray0[8] = 2.0;
      MathArrays.linearCombination(0.0, 0.0, 1.0, 3.834E-20, (-2193.14816), 2.0, 0.0, (-1261.635884939253));
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1317.202156342695;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-294.0);
      doubleArray0[3] = (-171.41714683578994);
      MathArrays.linearCombination(1564.778, (-171.41714683578994), (-2193.14816), (-294.0), 4427.39201, (-2193.14816), 0.0, (-3159.2031898));
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[2];
      longArray1[0] = 3513L;
      longArray1[1] = 546L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 3513L;
      longArray2[1] = 3513L;
      longArray2[2] = 3513L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 546L;
      longArray3[1] = 3513L;
      longArray3[2] = 2168L;
      longArray3[3] = 995L;
      longArray3[4] = 2168L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1595.8228;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        MathArrays.normalizeArray(doubleArray0, 622.787586255981);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[0][0];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-2629.5955714759);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1450.2;
      doubleArray0[6] = 1.304E19;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-421.5546601);
      doubleArray0[2] = (-989.358244);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-497.9511936581236);
      doubleArray0[5] = 2153.987699;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 5468.8;
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 105.41304055;
      MathArrays.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2815.9486068);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(0.0, 1465.927682236, 308.3, 0.0, 21.51683382707, 0.0, 2398.174, (-1482.22296072078));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 595.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-477.0);
      doubleArray0[5] = (-3027.109351333668);
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = 1036.11;
      doubleArray0[8] = 1829.60169677011;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 145);
      double[] doubleArray2 = MathArrays.scale(904.81, doubleArray1);
      MathArrays.copyOf(doubleArray2);
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 145;
      longArray1[1] = (long) 145;
      MathArrays.checkNonNegative(longArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1023L;
      longArray0[1] = 1577L;
      longArray0[2] = 4503599627370496L;
      longArray0[3] = 0L;
      longArray0[4] = 279L;
      longArray0[5] = 9007199254740990L;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3378);
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 3226;
      intArray0[2] = 3226;
      intArray0[3] = (-2630);
      int int2 = (-1164);
      intArray0[4] = (-1164);
      intArray0[5] = 0;
      int int3 = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3226;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1164);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3226;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1164);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,164 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 652.5062684;
      doubleArray0[1] = (-2267.33666157369);
      doubleArray0[2] = 1690.8142846186604;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      MathArrays.equalsIncludingNaN(doubleArray3, doubleArray0);
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1295;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<nUcalV\"5eY~ulH'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-567.4792);
      doubleArray0[1] = 1173.3105248808758;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-625.17);
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1950.238666);
      doubleArray0[0] = (-1950.238666);
      doubleArray0[1] = 616.173;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = 1.0;
      doubleArray0[3] = 1.0;
      double double3 = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.normalizeArray(doubleArray0, (-1950.238666));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (616.173 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-533.883);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1673.1728;
      doubleArray0[3] = (-1051.24252297);
      doubleArray0[4] = 605.286743617358;
      doubleArray0[5] = 2801.8650916;
      doubleArray0[6] = 781.85484837005;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-741));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2950.237816);
      doubleArray0[2] = (-1261.635884939253);
      doubleArray0[3] = 973.0523998882;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1136.8909401;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-2193.14816);
      doubleArray0[8] = 2.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1080;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1080, 1080);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      long[][] longArray0 = new long[7][2];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1773L);
      longArray1[1] = (-492L);
      longArray1[2] = (-1L);
      longArray1[3] = (-1773L);
      longArray1[4] = 1023L;
      longArray1[5] = 2965L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 2965L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-1L);
      longArray4[1] = (-492L);
      longArray4[2] = (-492L);
      longArray4[3] = (-492L);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[8];
      longArray1[0] = 929L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 1L;
      longArray1[5] = 1L;
      longArray1[6] = (-4227L);
      longArray1[7] = 4503599627370496L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 0L;
      longArray2[1] = 929L;
      longArray2[2] = (-4227L);
      longArray2[3] = 1L;
      longArray2[4] = 1L;
      longArray2[5] = 0L;
      longArray2[6] = (-4227L);
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 929L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 4503599627370496L;
      longArray5[1] = 1L;
      longArray5[2] = (-4227L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1330.990248);
      doubleArray0[1] = 2891.57;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1550.666360309946);
      doubleArray0[4] = (-779.647847945196);
      doubleArray0[5] = 809.5411806084578;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1982.564231);
      doubleArray0[8] = 4330.1973952;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,330.99 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2359.9205990701294;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1314.1752656655);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1942);
      intArray0[1] = 43;
      intArray0[2] = 1643;
      intArray0[3] = 144;
      intArray0[4] = 2266;
      intArray0[5] = (-1164);
      intArray0[6] = 0;
      intArray0[7] = 1043;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2688));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1317.57946615645;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-294.0);
      doubleArray0[3] = (-190.364005454641);
      doubleArray0[4] = 0.0;
      MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray1 = new double[0];
      MathArrays.scale(3.32, doubleArray1);
      int int0 = 0;
      MathArrays.copyOf(doubleArray0, 0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 174;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2193);
      double[][] doubleArray2 = new double[1][6];
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-625.17);
      doubleArray3[1] = (double) 0;
      doubleArray2[0] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 124.4026;
      doubleArray0[2] = (-2904.240647555906);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.7976931348623157E308;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1011.4648740359013, 1.7976931348623157E308, (-2904.240647555906), Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2835);
      intArray0[2] = 233;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2125);
      MathArrays.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 720.622524764;
      doubleArray0[2] = 3023.3608826459;
      doubleArray0[3] = 672.3410265461705;
      doubleArray0[4] = 1061.292977852791;
      doubleArray0[5] = 2038.389198161592;
      doubleArray0[6] = 0.0;
      int int0 = 0;
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.linearCombination(3.141592653589793, Double.NaN, 672.3410265461705, 1061.292977852791);
      MathArrays.convolve(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1068, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 629;
      intArray0[2] = 2640;
      MathArrays.copyOf(intArray0, 2640);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1242.74912742594;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 2640;
      doubleArray0[7] = (double) 629;
      MathArrays.normalizeArray(doubleArray0, 1890.1300204361128);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 239.4037902691738;
      doubleArray1[1] = 100.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 2704.0;
      doubleArray1[4] = 1972.29483088932;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 3524L;
      longArray0[2] = (-1430L);
      long long0 = 2228L;
      longArray0[3] = 2228L;
      longArray0[4] = 0L;
      long long1 = (-1056L);
      longArray0[5] = (-1056L);
      longArray0[6] = (-3155L);
      long long2 = 0L;
      longArray0[7] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,430 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.copyOf(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      long[][] longArray0 = new long[7][2];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1773L);
      longArray1[1] = (-492L);
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = 1023L;
      longArray1[5] = 2965L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 2965L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-1L);
      longArray4[1] = 0L;
      longArray4[2] = (-492L);
      longArray4[3] = (-492L);
      longArray4[4] = 349L;
      longArray4[5] = (-1773L);
      longArray4[6] = 2965L;
      longArray4[7] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 1023L;
      longArray5[1] = 2965L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 1023L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = 0L;
      longArray7[1] = 1023L;
      longArray7[2] = (-1L);
      longArray7[3] = (-1L);
      longArray7[4] = (-1L);
      longArray7[5] = 349L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,773 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-4680));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4680));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(583);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(963);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[4]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2041);
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1595.8228;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scale(1595.8228, doubleArray2);
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = (-1545L);
      longArray2[4] = 995L;
      longArray2[5] = 546L;
      longArray2[6] = 2168L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-1545L);
      longArray3[1] = 546L;
      longArray3[2] = 0L;
      longArray3[3] = 546L;
      longArray3[4] = 3513L;
      longArray3[5] = (-1545L);
      longArray3[6] = 546L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 2168L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 546L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 2168L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,545 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4341.0483);
      doubleArray0[1] = 2200.729;
      doubleArray0[2] = (-771.696);
      doubleArray0[3] = 341.1975608444;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-2324.75400746322);
      doubleArray0[6] = -0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1836.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 427.5F;
      floatArray0[3] = 220.7159F;
      floatArray0[4] = (-1617.1415F);
      floatArray0[5] = (-2631.3457F);
      floatArray0[6] = (-4542.768F);
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = -0.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(-0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      int int0 = 789;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 789);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[7];
      intArray0[0] = 789;
      intArray0[1] = 789;
      intArray0[2] = 789;
      intArray0[3] = 789;
      intArray0[4] = 789;
      intArray0[5] = 789;
      intArray0[6] = 789;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = 46.738360943671;
      double double1 = (-40.19);
      MathArrays.linearCombination(46.738360943671, 46.738360943671, (-40.19), (-40.19));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3799.71048370087;
      doubleArray0[1] = 3799.71048370087;
      doubleArray0[2] = 46.738360943671;
      MathArrays.scaleInPlace(46.738360943671, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 46.738360943671;
      doubleArray1[1] = (-40.19);
      doubleArray1[2] = 3799.71048370087;
      doubleArray1[3] = 46.738360943671;
      doubleArray1[4] = 46.738360943671;
      doubleArray1[5] = 46.738360943671;
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-375);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-375), (-375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-2271L);
      longArray1[2] = 0L;
      longArray1[3] = (-127L);
      longArray1[4] = 686L;
      longArray1[5] = 2328L;
      longArray1[6] = 0L;
      longArray1[7] = (-2744L);
      longArray1[8] = 4503599627370495L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = (-2271L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 0L;
      longArray4[1] = 2328L;
      longArray4[2] = (-127L);
      longArray4[3] = 4503599627370495L;
      longArray4[4] = 3479L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 4503599627370495L;
      longArray5[1] = 0L;
      longArray5[2] = (-2744L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-2744L);
      longArray6[1] = 0L;
      longArray6[2] = 4503599627370495L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,271 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-457.21532);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-457.21532);
      doubleArray0[1] = (-457.21532);
      doubleArray0[2] = (-457.21532);
      doubleArray0[3] = (-457.21532);
      doubleArray0[4] = (-457.21532);
      doubleArray0[5] = (-457.21532);
      MathArrays.scale((-457.21532), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-457.215 >= -457.215)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2393.71022;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1496.7714170202746;
      doubleArray0[6] = (-1228.6713);
      doubleArray0[7] = 1025.0;
      doubleArray0[8] = 1536.97;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<nUcalV\"5eY~ulH'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-567.4792);
      doubleArray0[1] = 1173.3105248808758;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-524);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(434.43186949, Double.NaN, (-189.0), (-189.0), Double.NaN, 1077.7176247511463);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1698690.2302288765, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 124.4026;
      doubleArray0[2] = (-2904.240647555906);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1100);
      intArray0[1] = 3043;
      intArray0[2] = 134217729;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.scaleInPlace(917.1150588, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0, 3043);
      double[] doubleArray1 = MathArrays.scale((-2904.240647555906), doubleArray0);
      MathArrays.linearCombination((-1878.8704), (double) 3043, (double) 0, 3.834E-20, (double) 0, 124.4026);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2950.237816);
      doubleArray0[2] = (-1261.635884939253);
      doubleArray0[3] = 973.0523998882;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1136.8909401;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-2193.14816);
      int int0 = (-1875);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, String>>) null, (-1875));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = MathArrays.linearCombination(843.955969462, 843.955969462, 843.955969462, (-846.087), 0.0, 926.69988346517, 843.955969462, 1244.5119916);
      assertEquals(1048514.8284342116, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 926.69988346517;
      doubleArray0[1] = 926.69988346517;
      doubleArray0[2] = 1048514.8284342116;
      doubleArray0[3] = 1959.95;
      doubleArray0[4] = 1244.5119916;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1295.855032);
      MathArrays.scaleInPlace((-846.087), doubleArray0);
      assertArrayEquals(new double[] {(-784068.7243013954), (-784068.7243013954), (-8.871347656454167E8), (-1658288.21565), (-1052965.4174368693), -0.0, 1096406.0964597838}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 152, (-1120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 2184.878294340856;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 256);
      assertEquals(256, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(20.0, 0.0, 804.2064468018401, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 256;
      floatArray0[1] = (float) 256;
      floatArray0[2] = (float) 256;
      floatArray0[3] = (float) 256;
      floatArray0[4] = (float) 256;
      floatArray0[5] = (float) 256;
      floatArray0[6] = (float) 256;
      floatArray0[7] = (float) 256;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4580.57803542683;
      doubleArray0[1] = 4580.57803542683;
      doubleArray0[2] = 4580.57803542683;
      double double0 = 2423.405;
      doubleArray0[3] = 2423.405;
      doubleArray0[4] = 4580.57803542683;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 4580.57803542683;
      doubleArray0[7] = 4580.57803542683;
      MathArrays.scaleInPlace(4580.57803542683, doubleArray0);
      double double2 = (-41.29517240238785);
      MathArrays.linearCombination(0.0, (-41.29517240238785), 2.0981695138634715E7, 0.0);
      double double3 = (-807.0);
      MathArrays.linearCombination(2.0981695138634715E7, 1.1100595713943558E7, (-807.0), 2.0981695138634715E7, 0.0, 0.0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2250);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2250), (-2250));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3349.286F;
      floatArray0[2] = 307.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1220.5466F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1220.5466F);
      doubleArray0[1] = (double) 3349.286F;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 3349.286F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 3349.286F;
      doubleArray2[3] = (double) (-1220.5466F);
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) (-1220.5466F);
      doubleArray2[6] = (double) 0.0F;
      doubleArray2[7] = (-1740.01);
      doubleArray2[8] = (double) (-1220.5466F);
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) (-1220.5466F);
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) 307.0F;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
