/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:29:33 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 1);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 102.54734394813751;
      doubleArray0[1] = 1484.873281886;
      doubleArray0[2] = (-369.8);
      doubleArray0[3] = 1.34217729E8;
      int int0 = 1610;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1610);
      assertArrayEquals(new double[] {102.54734394813751, 1484.873281886, (-369.8), 1.34217729E8}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1610, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 1484.873281886;
      doubleArray2[2] = 102.54734394813751;
      doubleArray2[3] = (double) 1610;
      doubleArray2[4] = (-956.4763);
      doubleArray2[5] = 1.34217729E8;
      doubleArray2[6] = (-369.8);
      doubleArray2[7] = 1.34217729E8;
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 252;
      doubleArray0[1] = (double) 252;
      doubleArray0[2] = (double) 252;
      doubleArray0[3] = (double) 252;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {252.0, 252.0, 252.0, 252.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 252);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Class
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = (-720.206);
      doubleArray0[2] = (-1755.1);
      doubleArray0[3] = 9.755392680573412E-9;
      doubleArray0[4] = 3.4439717236742845E-8;
      doubleArray0[5] = 836.09635835;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 933.5648967331334;
      doubleArray0[8] = 5574039.235506333;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4.3466666666666665E18, (-720.206), (-1755.1), 9.755392680573412E-9, 3.4439717236742845E-8, 836.09635835, 1.304E19, 933.5648967331334, 5574039.235506333}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4.3466666666666665E18, (-720.206), (-1755.1), 9.755392680573412E-9, 3.4439717236742845E-8, 836.09635835, 1.304E19, 933.5648967331334, 5574039.235506333}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.3745366896198556E19, double1, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 2.9399112E-39;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 2.9399112E-39;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 2.9399112E-39, 0.0, Double.NEGATIVE_INFINITY, 2.9399112E-39, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1306.834912;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-4764.042367669844);
      doubleArray0[4] = 4.503599627370496E15;
      doubleArray0[5] = 287.9622052118231;
      doubleArray0[6] = (-1587.2318592373704);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1306.834912, 1.86285714285714278E18, (-1.0), (-4764.042367669844), 4.503599627370496E15, 287.9622052118231, (-1587.2318592373704)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.86286258674747162E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-1));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.4028234663852886E38;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1335.75472442);
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = 4.3466666666666665E18;
      MathArrays.scaleInPlace(4.3466666666666665E18, doubleArray0);
      assertArrayEquals(new double[] {(-5.806080535478933E21), 1.889351111111111E37, 1.889351111111111E37}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-5.806080535478933E21), 1.889351111111111E37, 1.889351111111111E37}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.806080535478933E21), 1.889351111111111E37, 1.889351111111111E37}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-5.806080535478933E21), 1.889351111111111E37, 1.889351111111111E37}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.806080535478933E21), 1.889351111111111E37, 1.889351111111111E37}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.6719459654180097E37, double0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1584L;
      longArray0[1] = (-7278142539171889152L);
      longArray0[2] = 4047L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,278,142,539,171,889,152 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-6.183783414420964E24);
      doubleArray0[1] = (-6.183783414420964E24);
      doubleArray0[2] = (-6.183783414420964E24);
      doubleArray0[3] = (-6.183783414420964E24);
      doubleArray0[4] = (-6.183783414420964E24);
      doubleArray0[5] = (-6.183783414420964E24);
      double[] doubleArray1 = MathArrays.scale((-6.183783414420964E24), doubleArray0);
      assertArrayEquals(new double[] {(-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1.4187767428240556E75), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5147114045216888E25, double1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2154.4F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1028.08F;
      floatArray0[4] = (-91.451F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2154.4F), 0.0F, 0.0F, 1028.08F, (-91.451F), 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8.773408091041592E99, double2, 0.01);
      
      int[] intArray0 = new int[0];
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24), (-6.183783414420964E24)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49, 3.82391773164678E49}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9.366647260915504E49, double4, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = 0.125;
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-782));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 224.953;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 2.17333333333333325E18;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1191.022384427019;
      doubleArray0[8] = 1722.16568;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 224.953, 0.0, 1.304E19, 2.17333333333333325E18, 0.0, 1191.022384427019, 1722.16568}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.856896813982343E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1240.98294685;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 2.9399112E-39;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1240.98294685, 0.0, Double.NEGATIVE_INFINITY, 2.9399112E-39, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1131.74645193432);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1804.99723;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1131.74645193432), 1.304E19, 1.7976931348623157E308, 1804.99723}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 311);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 215;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 215;
      intArray1[1] = 0;
      intArray1[2] = 215;
      intArray1[3] = 215;
      intArray1[4] = 0;
      intArray1[5] = 2;
      intArray1[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 0, 215}, intArray0);
      assertArrayEquals(new int[] {215, 0, 215, 215, 0, 2, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(213, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2143655709;
      intArray0[2] = (-544);
      intArray0[3] = 693;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 693;
      intArray1[1] = (-544);
      intArray1[2] = 2143655709;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-269);
      intArray0[1] = 22;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = (-269);
      intArray1[2] = 22;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-269), 22}, intArray0);
      assertArrayEquals(new int[] {4, (-269), 22}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(564, int0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 311;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 311, 311);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Class
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2249.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 714.0F;
      floatArray0[1] = 384.13F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-71.3F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-1042.9531F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {714.0F, 384.13F, 1.0F, (-71.3F), 1.0F, 0.0F, 1.0F, 0.0F, (-1042.9531F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Double double1 = new Double((-4.503599627370496E15));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4.503599627370496E15), (double)double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2816;
      intArray0[1] = 337;
      int int0 = 259;
      intArray0[2] = 259;
      int int1 = 300;
      intArray0[3] = 300;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2816, 337, 259, 300}, intArray0);
      assertArrayEquals(new int[] {2816, 337, 259, 300}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray1 = MathArrays.scale(337, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2816, 337, 259, 300}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3777.991281;
      doubleArray0[1] = 1370904.5402673413;
      doubleArray0[2] = (-243.80035750507);
      doubleArray0[3] = 1308.567863;
      doubleArray0[0] = 0.8775825500488281;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.8775825500488281, 1370904.5402673413, (-243.80035750507), 1308.567863, 0.0, (-3.141592653589793), Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, (-2383));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-503.19497213440417);
      doubleArray0[2] = (-1349.77621763);
      doubleArray0[3] = (-1538.7110595703125);
      doubleArray0[4] = 4.116164446561962E-8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-503.19497213440417), (-1349.77621763), (-1538.7110595703125), 4.116164446561962E-8}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1023;
      intArray0[1] = 2146634907;
      intArray0[2] = (-1);
      intArray0[3] = 358;
      intArray0[4] = 307;
      intArray0[5] = 1551;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1023, 2146634907, (-1), 358, 307, 1551}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-503.19497213440417), (-1349.77621763), (-1538.7110595703125), 4.116164446561962E-8}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3841;
      intArray0[1] = 3841;
      intArray0[2] = 3841;
      intArray0[3] = 3841;
      intArray0[4] = 3841;
      intArray0[5] = 3841;
      intArray0[6] = 3841;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3841);
      assertArrayEquals(new int[] {3841, 3841, 3841, 3841, 3841, 3841, 3841}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(3841, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3841;
      floatArray0[1] = (float) 3841;
      floatArray0[2] = (float) 3841;
      floatArray0[3] = (float) 3841;
      floatArray0[4] = (float) 3841;
      floatArray0[5] = (float) 3841;
      floatArray0[6] = (float) 3841;
      floatArray0[7] = (-1738.975F);
      floatArray0[8] = (float) 3841;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3841.0F, 3841.0F, 3841.0F, 3841.0F, 3841.0F, 3841.0F, 3841.0F, (-1738.975F), 3841.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3841.0F;
      doubleArray0[1] = (double) (-1738.975F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.6499779725887846E7;
      doubleArray0[1] = Double.NaN;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2.6499779725887846E7, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.6499779725887846E7;
      doubleArray2[1] = 847.16974;
      doubleArray2[2] = 521.0;
      doubleArray2[3] = 847.16974;
      doubleArray2[4] = 847.16974;
      doubleArray2[5] = Double.NaN;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 2.6499779725887846E7);
      assertArrayEquals(new double[] {2.6496717570553016E7, 847.0718461546292, 520.9397963701605, 847.0718461546292, 847.0718461546292, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2.6499779725887846E7, 847.16974, 521.0, 847.16974, 847.16974, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {2.6499779725887846E7, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.6499779725887846E7, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 305;
      intArray0[2] = 3671;
      intArray0[3] = 134217729;
      intArray0[4] = 299;
      intArray0[5] = 1415;
      intArray0[6] = 2111210298;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 305;
      intArray1[0] = 1415;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 305;
      intArray1[6] = 2766;
      intArray1[7] = 134217729;
      intArray1[8] = 305;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 305, 3671, 134217729, 299, 1415, 2111210298, 0}, intArray0);
      assertArrayEquals(new int[] {1415, 305, 0, 2, 2, 305, 2766, 134217729, 305}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1915317817), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 299;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {299.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(299.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {299.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {299.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {89401.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {299.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 305;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = (float) 2111210298;
      floatArray0[4] = (float) 299;
      floatArray0[5] = (float) 2111210298;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {305.0F, 0.0F, 1.4E-45F, 2.11121024E9F, 299.0F, 2.11121024E9F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4917.6172797726;
      doubleArray0[1] = (-58.20279497);
      doubleArray0[2] = (-315.396632);
      doubleArray0[3] = 2.608E18;
      doubleArray0[4] = 0.3333333134651184;
      doubleArray0[5] = 0.1246747374534607;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4917.6172797726, (-58.20279497), (-315.396632), 2.608E18, 0.3333333134651184, 0.1246747374534607}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.608E18, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4917.6172797726, (-58.20279497), (-315.396632), 2.608E18, 0.3333333134651184, 0.1246747374534607}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.1246747374534607;
      doubleArray1[1] = (-315.396632);
      doubleArray1[2] = 4917.6172797726;
      doubleArray1[3] = 0.3333333134651184;
      doubleArray1[4] = 2.608E18;
      doubleArray1[5] = 2.608E18;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 40;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 40;
      intArray0[1] = 40;
      intArray0[2] = 40;
      intArray0[3] = 40;
      intArray0[4] = 40;
      intArray0[5] = 40;
      intArray0[6] = 40;
      intArray0[7] = 40;
      intArray0[8] = 40;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {40, 40, 40, 40, 40, 40, 40, 40, 40}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 40;
      doubleArray1[2] = 521.0;
      doubleArray1[3] = (double) 40;
      doubleArray1[4] = (double) 40;
      doubleArray1[5] = (double) 40;
      doubleArray1[6] = (double) 40;
      doubleArray1[7] = (double) 40;
      doubleArray1[8] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 40.0, 521.0, 40.0, 40.0, 40.0, 40.0, 40.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(521.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = 311;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1529.57);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "expansion factor smaller than one ({0})";
      stringArray0[1] = "@-C/<";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-539.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547), (-2617.1378615068547));
      assertEquals(2.739764234453069E7, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[5];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2691.247F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3186.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2691.247F, 0.0F, 3186.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1013.77112636098);
      doubleArray2[2] = (double) 3186.0F;
      doubleArray2[3] = (double) 2691.247F;
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 2691.247F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1013.77112636098), 3186.0, 2691.2470703125, 0.0, 2691.2470703125}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray2.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 3822);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(3822, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-128.7247765);
      doubleArray0[1] = 735.517037971;
      doubleArray0[2] = 0.1246747374534607;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-6.032174644509064E-23);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1602.51121;
      doubleArray0[8] = 0.125;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-128.7247765);
      doubleArray1[1] = (-128.7247765);
      doubleArray1[2] = 0.125;
      doubleArray1[3] = (-128.7247765);
      doubleArray1[4] = 0.1246747374534607;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2574.8972F;
      floatArray0[1] = (-423.8F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 627.518F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {2574.8972F, (-423.8F), Float.NaN, 627.518F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 143L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {143L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 521L;
      doubleArray0[1] = (double) 521L;
      doubleArray0[2] = (double) 521L;
      doubleArray0[3] = (double) 521L;
      doubleArray0[4] = (double) 521L;
      doubleArray0[5] = 71.5958;
      doubleArray0[6] = 71.5958;
      doubleArray0[7] = 0.7675435543060303;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {521.0, 521.0, 521.0, 521.0, 521.0, 71.5958, 71.5958, 0.7675435543060303}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1169.383387208142, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {521.0, 521.0, 521.0, 521.0, 521.0, 71.5958, 71.5958, 0.7675435543060303}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {521.0, 521.0, 521.0, 521.0, 521.0, 71.5958, 71.5958, 0.7675435543060303}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2897;
      intArray0[1] = 308;
      intArray0[2] = 544;
      intArray0[3] = 0;
      intArray0[4] = 1426;
      intArray0[5] = (-773);
      intArray0[6] = 306;
      intArray0[7] = (-1208);
      intArray0[8] = 290;
      int[] intArray1 = MathArrays.copyOf(intArray0, 306);
      assertArrayEquals(new int[] {2897, 308, 544, 0, 1426, (-773), 306, (-1208), 290}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(306, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 306;
      doubleArray2[1] = (double) 1426;
      doubleArray2[2] = (double) (-773);
      doubleArray2[3] = (double) (-1208);
      doubleArray2[4] = (double) 308;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 308;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1529.57);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1529.57)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1529.57)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 311, 0);
      assertEquals(311, objectArray0.length);
      assertNotNull(objectArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 311;
      longArray1[5] = (long) 311;
      longArray1[6] = (-4848L);
      longArray1[7] = (long) 311;
      longArray1[8] = (long) 311;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination((-2014.411819144168), (-2682.6653898), 0.0, (-1.0), 2182.0, 1598.2523);
      assertEquals(8891379.386622116, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 40;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {40, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 40;
      doubleArray0[2] = (double) 40;
      doubleArray0[3] = (double) 40;
      doubleArray0[2] = 71.5958;
      doubleArray0[5] = (double) 40;
      doubleArray0[6] = (double) 40;
      doubleArray0[7] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 40.0, 71.5958, 40.0, 0.0, 40.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(107.35901721625436, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 40.0, 71.5958, 40.0, 0.0, 40.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 40.0, 71.5958, 40.0, 0.0, 40.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2517.4378);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.17333333333333325E18, 1.5076572141752228E11, 2.17333333333333325E18, (-1899.1691), 2.17333333333333325E18, (-2032.0), (-2617.1378615068547), 23.74532);
      assertEquals(3.276641593370076E29, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 13125.95857764;
      doubleArray0[1] = (-1899.1691);
      doubleArray0[2] = 1.5076572141752228E11;
      doubleArray0[3] = (-2032.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {13125.95857764, (-1899.1691), 1.5076572141752228E11, (-2032.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.722907885819211E8, (-4.985682987706768E7), 3.957889232115662E15, (-5.726592522546286E14), 2.2730302754545943E22, (-6.127118918408105E14), 4129024.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {13125.95857764, (-1899.1691), 1.5076572141752228E11, (-2032.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {26251.91715528, (-3798.3382), 3.0153144283504456E11, (-4064.0), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1371.9628F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2121.6497F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1371.9628F), 0.0F, Float.NaN, 0.0F, (-2121.6497F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,899.169 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination(0.0, 3773.2, 0.0, 0.11111095942313305, 0.0, 3773.2, 0.0, 0.11111095942313305);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1190.0);
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1738.0);
      doubleArray1[1] = (-1190.0);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = (-1190.0);
      doubleArray1[6] = (-1190.0);
      doubleArray1[7] = 1.304E19;
      doubleArray1[8] = (-1417.57488016235);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1190.0), 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1738.0), (-1190.0), 1.304E19, 1.304E19, 1.304E19, (-1190.0), (-1190.0), 1.304E19, (-1417.57488016235)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.3040000000000002E19, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,190 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 4841.199889819, 0.0, Double.NaN, 0.0, 1001505.9744337056, 4841.199889819, 1001505.9744337056);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 4841.199889819;
      doubleArray1[3] = 1001505.9744337056;
      doubleArray1[4] = (-979.2543);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 4841.199889819;
      doubleArray1[7] = 4841.199889819;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 4841.199889819, 1001505.9744337056, (-979.2543), 0.0, 4841.199889819, 4841.199889819}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 40;
      floatArray1[1] = (float) 40;
      floatArray1[2] = (float) 40;
      floatArray1[3] = 1.0F;
      floatArray1[4] = (float) 40;
      floatArray1[5] = (float) 40;
      floatArray1[6] = (float) 40;
      floatArray1[7] = (float) 40;
      floatArray1[8] = (float) 40;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 40.0F, 40.0F, 1.0F, 40.0F, 40.0F, 40.0F, 40.0F, 40.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-2517.4378);
      doubleArray0[2] = (-2517.4378);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2517.4378), (-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 209.71F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 209.71F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 209.71F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 209.71F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3690.16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1587);
      assertNotNull(integer0);
      assertEquals(1587, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1587, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1350);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1350, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = 2494.0186340617392;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1350;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (int)integerArray0[0];
      doubleArray0[6] = (double) (int)integerArray0[2];
      doubleArray0[7] = (double) 1587;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1587.0, 2494.0186340617392, 0.0, 1350.0, 0.0, 1587.0, 1350.0, 1587.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-279.6327108), doubleArray1);
      assertArrayEquals(new double[] {1587.0, 2494.0186340617392, 0.0, 1350.0, 0.0, 1587.0, 1350.0, 1587.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.6327108), (-279.6327108), Double.NaN, (-279.6327108), Double.NaN, (-279.6327108), (-279.6327108), (-279.6327108), Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3264;
      intArray0[1] = 189;
      intArray0[2] = 1085;
      intArray0[3] = 2147483632;
      intArray0[4] = (-3938);
      intArray0[5] = 1300;
      intArray0[6] = 1274;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {3264, 189, 1085, 2147483632, (-3938), 1300, 1274}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1895.7516526045615;
      doubleArray0[1] = 1.18545454545454541E18;
      doubleArray0[2] = 0.5039018405998233;
      doubleArray0[3] = 773.156489;
      doubleArray0[4] = (-3316.4713987447);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1895.7516526045615, 1.18545454545454541E18, 0.5039018405998233, 773.156489, (-3316.4713987447)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3593874.3283529263, 4.4946548272660873E21, 1.4053024793388428E36, 1.1947054548068759E18, 1.8330837484654418E21, (-7.863052189023797E21), 594428.6043985587, (-5128302.765044742), 1.0998982538691627E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 307;
      intArray0[1] = (-3031);
      intArray0[2] = (-1180);
      intArray0[3] = 1073741824;
      intArray0[4] = 3146;
      intArray0[5] = 0;
      intArray0[6] = 13;
      int[] intArray1 = MathArrays.copyOf(intArray0, 43);
      assertArrayEquals(new int[] {307, (-3031), (-1180), 1073741824, 3146, 0, 13}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(43, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2517.4378);
      doubleArray0[0] = (-2517.4378);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      int int0 = 7;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 7);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 143L;
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.19999999999923582, (-1123.49216571), 1.34217729E8);
      assertEquals((-1.5076572348508798E11), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 143L;
      doubleArray0[1] = (-1.5076572348508798E11);
      doubleArray0[2] = 1781.5657;
      doubleArray0[3] = (double) 143L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 8.0);
      assertArrayEquals(new double[] {143.0, (-1.5076572348508798E11), 1781.5657, 143.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.587931721109664E-9), 8.000000109710122, (-9.453425795993668E-8), (-7.587931721109664E-9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t#W]WFyk_K(79O7O5";
      stringArray0[1] = "8P:a`lus";
      stringArray0[2] = "#EzWy/";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[4] = "";
      stringArray0[5] = "EULER_ANGLES_SINGULARITY";
      stringArray0[6] = "h,ExId^K@cmc";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.scale(0.366272509098053, doubleArray0);
      assertArrayEquals(new double[] {52.376968801021576, (-5.5221339826866425E10), 652.5385390620291, 52.376968801021576}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {143.0, (-1.5076572348508798E11), 1781.5657, 143.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1827);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 143L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {143L}, longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-527.4513624406));
      assertNotNull(double0);
      assertEquals((-527.4513624406), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(5.2240336371356666E-9);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(5.2240336371356666E-9, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2587.75);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2587.75, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(40.19140625);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(40.19140625, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(143L);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(143.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = Double.valueOf(0.8109631538391113);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(0.8109631538391113, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-6);
      intArray0[0] = (-6);
      intArray0[1] = 13;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[5];
      longArray1[0] = (-881L);
      longArray1[1] = 738L;
      longArray1[2] = (-1693L);
      longArray1[3] = 635L;
      longArray1[4] = (-1504L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 738L;
      longArray2[1] = 635L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 13.07;
      doubleArray0[3] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 13.07, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.34217729E8, 1.34217729E8, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.34217729E8, 1.34217729E8, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.34217729E8, 1.34217729E8, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.801439877791744E16, 1.801439877791744E16, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.801439877791744E16, 1.801439877791744E16, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1968.3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {1968.3}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1968.3}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1968.3, double0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 300L;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146630943, (-2383));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 143L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {143L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2517.4378);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2517.4378, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 0.0, 1.34217729E8, 0.19999999999923582);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2517.4378));
      assertArrayEquals(new double[] {(-2517.4378), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2517.4378), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[4][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.34217729E8;
      doubleArray3[1] = 0.19999999999923582;
      doubleArray3[2] = 2517.4378;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray3, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-750.719F);
      floatArray0[1] = 310.47192F;
      floatArray0[2] = 1173.4182F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 310.47192F;
      doubleArray0[1] = (double) 310.47192F;
      doubleArray0[2] = (double) 1173.4182F;
      doubleArray0[3] = (double) (-750.719F);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {310.471923828125, 310.471923828125, 1173.418212890625, (-750.718994140625)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      Double double0 = new Double(310.471923828125);
      assertNotNull(double0);
      assertEquals(310.471923828125, (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {310.471923828125, 310.471923828125, 1173.418212890625, (-750.718994140625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {96392.81548553705, 192785.6309710741, 825019.6355077624, 262472.4792919159, 910755.9616131186, (-1761814.6809750795), 563579.0081635118}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-199.59252151412), doubleArray1);
      assertArrayEquals(new double[] {310.471923828125, 310.471923828125, 1173.418212890625, (-750.718994140625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.9239285098603655E7), (-3.847857019720731E7), (-1.646677493496545E8), (-5.238754396993614E7), (-1.8178007886237943E8), 3.5164503461641103E8, (-1.1248615531178212E8)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -750.719 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3075.248;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3075.248;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {3075.248, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = new Double((-302.533293068562));
      assertEquals((-302.533293068562), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-302.533293068562);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-302.533293068562);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(165);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(165, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(300);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(300, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 143L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {143L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1;
      intArray0[0] = 1;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 137;
      intArray0[2] = 137;
      int int3 = (-2291);
      intArray0[3] = (-2291);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3920.30177);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(7.848361555046424E-8, (-3254.15020669144), (-551.20794966168), 0.0, 4.3466666666666665E18, (-3920.30177), 2.356194490192345, 0.7853981633974483);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.7040245026933334E22), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1002.0737231996;
      doubleArray0[2] = (-607.58387);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-607.58387);
      doubleArray1[1] = 1002.0737231996;
      doubleArray1[2] = (-607.58387);
      doubleArray1[3] = 1002.0737231996;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 1002.0737231996;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-302.533293068562), (-302.533293068562), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, (-728.0), 1572.253504593169, 1775.0, 0.0, 3546.770373, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1144600.551343827), double1, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2147483647));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2147483647), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(134217729);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(134217729, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(9, integerArray0.length);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(134217729, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2147483647));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-2147483647), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(134217729);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(134217729, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(306);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(306, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.getInteger("XejgMGf!_C9B;K");
      assertNull(integer7);
      
      integerArray0[7] = null;
      Integer integer8 = new Integer(32768);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      assertEquals(32768, (int)integer8);
      
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 32768;
      try { 
        MathArrays.convolve(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 830;
      int[] intArray0 = new int[1];
      intArray0[0] = 830;
      int int1 = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertArrayEquals(new int[] {830}, intArray0);
      assertArrayEquals(new int[] {830}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double double0 = MathArrays.linearCombination(3011.2284882, (double) 830, 851.0, (-1118.8133883531975));
      assertEquals(1547209.4517174289, double0, 0.01);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 3011.2284882;
      doubleArray0[1] = (-3146.9878386810205);
      doubleArray0[2] = 851.0;
      doubleArray0[3] = 1547209.4517174289;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3011.2284882);
      assertArrayEquals(new double[] {3011.2284882, (-3146.9878386810205), 851.0, 1547209.4517174289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.857841181073255, (-6.12193828200061), 1.655478109558269, 3009.8371071913693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 239.189;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 830;
      doubleArray0[1] = (double) 830;
      doubleArray2[4] = (double) 830;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {239.189, 1.0, 830.0, 0.0, 830.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {239.189, 1.0, 830.0, 0.0, 830.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {239.189, 1.0, 830.0, 0.0, 830.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {239.189, 1.0, 830.0, 0.0, 830.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertEquals(5, doubleArray4.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 2524;
      double double0 = MathArrays.linearCombination(1145.93728, (-1710.1584085472416), (double) 2524, (-2032.0), (-1899.1691), (-2617.1378615068547), 4841.199889819, (-3638.323177771225));
      assertEquals((-1.9731964685397826E7), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 143L;
      double double0 = 1224.327931;
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = 1.34217729E8;
      double double3 = 1.2246467991473532E-16;
      double double4 = MathArrays.linearCombination(1.34217729E8, (double) 143L, 1.34217729E8, 1.2246467991473532E-16);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.9193135247E10, double4, 0.01);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      int int0 = 0;
      int int1 = 1;
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int2 = 1373;
      Integer integer1 = new Integer(1373);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1373, (int)integer1);
      
      int int3 = 1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertTrue(integer2.equals((Object)int3));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer integer3 = new Integer(1373);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int3));
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1373, (int)integer3);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      int int4 = (-728);
      Integer integer4 = new Integer((-728));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int4));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int2));
      assertNotNull(integer4);
      assertEquals((-728), (int)integer4);
      
      integerArray0[1] = integer4;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      integerArray0[5] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-728);
      intArray0[4] = (int) integerArray0[1];
      intArray0[5] = 2147483558;
      int int5 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, (-728), (-728), 2147483558}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, (-728), (-728), 2147483558}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      int[] intArray0 = new int[5];
      intArray0[0] = 2147483558;
      intArray0[1] = 4239;
      intArray0[2] = (-976);
      intArray0[3] = 2147483558;
      intArray0[4] = 2147483558;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2147483558, 4239, (-976), 2147483558, 2147483558}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 1.34217729E8;
      double double1 = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 143L;
      Integer integer0 = new Integer((-728));
      assertNotNull(integer0);
      assertEquals((-728), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-728), (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, integerArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = (int) integerArray0[2];
      intArray0[2] = 2146785562;
      intArray0[3] = (int) integerArray0[1];
      intArray0[4] = 2147483558;
      intArray0[5] = (int) integerArray0[0];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 651;
      intArray0[1] = 2560;
      intArray0[2] = 2560;
      intArray0[3] = (-1582);
      intArray0[4] = 18;
      intArray0[5] = (-586);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {651, 2560, 2560, (-1582), 18, (-586)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.scale(18, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.092571258544922;
      doubleArray0[1] = 993.46551686608;
      doubleArray0[2] = 539.7009543737425;
      doubleArray0[3] = (-48.75);
      doubleArray0[4] = 4385673.64;
      doubleArray0[5] = 1.25;
      doubleArray0[6] = 696.2275147;
      doubleArray0[7] = 3.4028234663852886E38;
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2780.30363630148);
      doubleArray1[1] = (-2780.30363630148);
      doubleArray1[2] = (-2780.30363630148);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1091.0;
      doubleArray1[5] = 2587.75;
      doubleArray1[6] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-2780.30363630148), (-2780.30363630148), (-2780.30363630148), 0.0, 1091.0, 2587.75, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5574.674518982583, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-2780.30363630148), (-2780.30363630148), (-2780.30363630148), 0.0, 1091.0, 2587.75, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = MathArrays.linearCombination(0.0, 1091.0, Double.POSITIVE_INFINITY, 1415.596194221072);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      MathArrays.scaleInPlace((-633.69217487464), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[2] = 368.05176;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1133.5630633554067);
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0E-5;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1133.5630633554067)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1133.5630733554067, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0000000000000002E-10, double2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-115);
      intArray0[1] = (-115);
      intArray0[2] = 134217729;
      intArray0[3] = (-115);
      intArray0[4] = 134217729;
      intArray0[5] = 1872;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-115), (-115), 134217729, (-115), 134217729, 1872}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-115), (-115), 134217729, (-115), 134217729, 1872}, intArray0);
      assertArrayEquals(new int[] {(-115), (-115), 134217729, (-115), 134217729, 1872}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[2] = 368.05176;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2989.432329725264, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2518.320471023967);
      double double1 = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = (-3920.30177);
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = (-1.0);
      double double5 = 1.34217729E8;
      double double6 = Double.NaN;
      double double7 = MathArrays.linearCombination(Double.NaN, 0.0, 1.34217729E8, 0.0);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-3920.30177));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(4.3466666666666665E18, 3.834E-20, (-3920.30177), 1.34217729E8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.261740005639137E11), double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      
      double double2 = MathArrays.linearCombination((-0.1666666567325592), (-4359.628), 2780.30363630148, (-0.1666666567325592), (-2652.587656731142), (-138.55), (-4359.628), (-2695.0863404));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.2117353112577064E7, double2, 0.01);
      
      double double3 = MathArrays.linearCombination((-1.0), 1.2117353112577064E7, (-3520.0), (-438.040174873115), (-2695.0863404), Double.NaN);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2517.4378);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double double1 = 4.3466666666666665E18;
      double double2 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.34217729E8, 0.19999999999923582);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2517.4378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-302.533293068562);
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-302.533293068562), (-302.533293068562), 0.0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3075.248;
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 3075.248}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3075.248, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 3075.248}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 3075.248}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 1.34217729E8, 1384.83264915854, 9.219544613762692E-9, 2780.30363630148, (-2780.30363630148), 3164.1971578101757, (-3252.0106091));
      assertEquals(1.8014398759897348E16, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.219544613762692E-9;
      doubleArray0[1] = 1384.83264915854;
      doubleArray0[2] = 1.8014398759897348E16;
      doubleArray0[3] = (-2780.30363630148);
      doubleArray0[4] = 2780.30363630148;
      doubleArray0[5] = 1.8014398759897348E16;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2395.5, (-1036.7667152), 2395.5, 1.4699556E-39, 1.4699556E-39, (-1036.7667152));
      assertEquals((-2483574.6662616), double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1336.1194F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1336.1194F;
      floatArray1[1] = 1336.1194F;
      floatArray1[2] = 1336.1194F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1336.1194F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1336.1194F, 1336.1194F, 1336.1194F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 4503599627370505L;
      longArray0[6] = 4503599627370505L;
      longArray0[2] = 143L;
      longArray0[3] = 342L;
      longArray0[4] = 342L;
      longArray0[5] = 1770L;
      longArray0[6] = 342L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4503599627370505L, 0L, 143L, 342L, 342L, 1770L, 342L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1576.3);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1576.3)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NaN;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double1 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.scaleInPlace(1092.9, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double2 = MathArrays.linearCombination(Double.NaN, Double.NEGATIVE_INFINITY, Double.NaN, 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      MathArrays.scaleInPlace(Double.NEGATIVE_INFINITY, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      floatArray0[1] = 681.0F;
      floatArray0[2] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {285.59778F, 681.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 285.59778F;
      doubleArray0[2] = 1779.0;
      doubleArray0[3] = 2.2153887E7;
      doubleArray0[4] = (double) 681.0F;
      doubleArray0[5] = (double) 681.0F;
      doubleArray0[6] = (double) 285.59778F;
      doubleArray0[7] = (double) 285.59778F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 285.5977783203125, 1779.0, 2.2153887E7, 681.0, 681.0, 285.5977783203125, 285.5977783203125}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination(1200.021112682, 681.0, 681.0, 539.7009543737425);
      assertEquals(1184750.7276649605, double0, 0.01);
      
      MathArrays.scaleInPlace(463761.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.3244911127160645E8, 8.25030819E8, 1.0274108789007E13, 3.15821241E8, 3.15821241E8, 1.3244911127160645E8, 1.3244911127160645E8}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.3244911127160645E8, 8.25030819E8, 1.0274108789007E13, 3.15821241E8, 3.15821241E8, 1.3244911127160645E8, 1.3244911127160645E8}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3920.30177);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1224.327931, (-3920.30177), 1.34217729E8, Double.POSITIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4.3466666666666665E18);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.3466666666666665E18}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3920.30177)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      
      double double2 = MathArrays.linearCombination(4.3466666666666665E18, 4.3466666666666665E18, (-1.0), (-4359.628), 292.9746146173576, (-138.55), (-93.70205007111218), (-1.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.889351111111111E37, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 232;
      int[] intArray0 = new int[5];
      intArray0[0] = 232;
      intArray0[1] = 232;
      intArray0[2] = 232;
      intArray0[3] = 232;
      intArray0[4] = 232;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {232, 232, 232, 232, 232}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-233.4732286766);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2911), 1808);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 143L;
      long[][] longArray1 = new long[2][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[9][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[5];
      longArray1[2] = 1023L;
      longArray1[4] = 521L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      double double2 = 1.0E-5;
      double double3 = 1997.883775224822;
      int[] intArray0 = new int[0];
      int int0 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double4 = MathArrays.linearCombination(1.0E-5, (-2695.0863404), 1.0E-5, 0.0, 1997.883775224822, 0.0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-0.026950863404000002), double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("JsOv ~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.JsOv ~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = (-1250);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 0, 1, 0, 1, (-1250)}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[2] = 368.05176;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, (-3920.30177), (-1133.5630633554067), 0.9305076599121094);
      assertEquals((-1054.7891134456418), double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2795.68);
      assertArrayEquals(new double[] {1.0E-5, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2795.68, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {1.0E-5, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2795.68, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2795.68, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = MathArrays.ebeSubtract(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray4.length);
      assertEquals(8, doubleArray5.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotNull(doubleArray5);
      
      double double1 = MathArrays.linearCombination(2.85040095144011776E17, 1.304E19, 1442.9903637036625, 1328.8840193624553, 368.05176, (-2924.707792666244), (-3920.30177), 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.7169228406778624E36, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      int[] intArray0 = new int[1];
      intArray0[0] = 830;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertArrayEquals(new int[] {830}, intArray0);
      assertArrayEquals(new int[] {830}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 830;
      integerArray0[1] = (Integer) 830;
      integerArray0[2] = (Integer) 830;
      integerArray0[3] = (Integer) 830;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = 1860.234059;
      doubleArray0[2] = 8.0E298;
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) (int)integerArray0[2];
      doubleArray0[5] = (double) 830;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {830.0, 1860.234059, 8.0E298, 830.0, 830.0, 830.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-199.59252151412);
      Double double0 = new Double(-0.0);
      assertNotNull(double0);
      assertEquals(-0.0, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-199.59252151412);
      doubleArray1[2] = (Double) (-199.59252151412);
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) (-199.59252151412);
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) (-199.59252151412);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(3.834E-20);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3.834E-20, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double1;
      Double double2 = new Double((-1683.325689792));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1683.325689792), (double)double2, 0.01);
      
      doubleArray1[1] = double2;
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      doubleArray1[4] = double1;
      doubleArray1[5] = double1;
      doubleArray1[6] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float float0 = 3.4028235E38F;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1373);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1373, (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer integer3 = new Integer(1373);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1373, (int)integer3);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      Integer integer4 = new Integer((-728));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-728), (int)integer4);
      
      integerArray0[1] = integer4;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      integerArray0[5] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-728);
      intArray0[4] = (int) integerArray0[1];
      intArray0[5] = 2147483558;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, (-728), (-728), 2147483558}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1133.5630633554067);
      double double0 = MathArrays.linearCombination(368.05176, 0.0, (-1.0), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3920.30177);
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = MathArrays.ebeSubtract(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1.7976931348623157E308, 0.0, (-3920.30177), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray5.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray5);
      
      double double1 = MathArrays.linearCombination((-1133.5630633554067), 1.7976931348623157E308, 2989.432329725264, 2989.432329725264, (-3158.454500149774), (-1683.274196064697), 368.05176, 1625.3497906);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1095);
      intArray0[1] = 2496;
      intArray0[2] = 3;
      intArray0[3] = 2244;
      intArray0[4] = 1582;
      intArray0[5] = 3974;
      intArray0[6] = 1808;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-1095);
      intArray1[2] = 3974;
      intArray1[3] = 1582;
      intArray1[4] = 3974;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-1L);
      longArray1[3] = 140L;
      longArray1[4] = 2147483647L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 2147483647L;
      longArray2[6] = 2147483647L;
      longArray2[7] = (-4452L);
      double double0 = MathArrays.linearCombination(1648.6132, (-1556021.3899648), 14.101419448852539, 2.608E18, (-1764.929156256607), 3588.1, (-1249.6763245068), 3.834E-20);
      assertEquals(3.677650192003581E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2517.4378);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = 0L;
      long long1 = (-214L);
      long long2 = 0L;
      long long3 = 521L;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-750.719F);
      floatArray0[1] = 310.47192F;
      floatArray0[2] = 1173.4182F;
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1173.4182F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = (-750.719F);
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-750.719F);
      floatArray1[5] = 1173.4182F;
      floatArray1[6] = 310.47192F;
      floatArray1[7] = 310.47192F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-750.719F), 310.47192F, 1173.4182F, 3.4028235E38F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1173.4182F, 3.4028235E38F, (-750.719F), 3.4028235E38F, (-750.719F), 1173.4182F, 310.47192F, 310.47192F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3.4028235E38F;
      doubleArray0[1] = (double) (-750.719F);
      doubleArray0[2] = (double) (-750.719F);
      doubleArray0[3] = (double) (-750.719F);
      doubleArray0[4] = (double) (-750.719F);
      doubleArray0[5] = (double) 1173.4182F;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-450));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1023;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {0, 1023, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 292.5F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-6509.0F);
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {292.5F, 0.0F, 0.0F, 0.0F, (-6509.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      floatArray0[1] = 681.0F;
      floatArray0[2] = 3.4028235E38F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 285.59778F;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = (-554.7);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 681.0F;
      doubleArray0[6] = (double) 3.4028235E38F;
      doubleArray0[7] = (double) 681.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[2] = 368.05176;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1133.5630633554067);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, (-1133.5630633554067)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, (-1133.5630633554067)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2989.432329725264, 368.05176, 257.88520471404, (-3920.30177), 1.0E-5, 0.0, (-1133.5630633554067)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2.5792403717324946E7, double2, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = (-115);
      intArray0[2] = 1872;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {134217729, (-115), 1872}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {134217729, (-115), 1872}, intArray1);
      assertArrayEquals(new int[] {134217729, (-115), 1872}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      floatArray0[1] = 681.0F;
      float float0 = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {285.59778F, 681.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3.4028235E38F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = (-1.0);
      double double1 = MathArrays.linearCombination(10.0, (double) 285.59778F, (double) 681.0F, (double) 681.0F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(466616.9777832031, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.4028234663852886E38);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray4, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1957.3791799452545);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1087.6851743115024;
      doubleArray0[7] = (-1138.5015033);
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-1L);
      longArray1[1] = 2147483647L;
      longArray1[2] = (-1L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3075.248;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {3075.248}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3075.248;
      doubleArray1[1] = 0.0;
      Double double2 = new Double(3075.248);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(3075.248, (double)double2, 0.01);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 3075.248;
      doubleArray2[1] = (Double) 3075.248;
      doubleArray2[2] = (Double) 3075.248;
      doubleArray2[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = (-768);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 978.987;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 1997.883775224822;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 978.987, 0.0, 1.0E-5, 1997.883775224822, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 958415.546169, 0.0, 1.0000000000000002E-10, 3991539.5793065876, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 978.987, 0.0, 1.0E-5, 1997.883775224822, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 958415.546169, 0.0, 1.0000000000000002E-10, 3991539.5793065876, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1091;
      intArray0[1] = 0;
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 465);
      assertArrayEquals(new int[] {1091, 0, 2}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(465, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-554.7);
      doubleArray0[2] = (double) 1091;
      doubleArray0[3] = (double) 1091;
      doubleArray0[4] = (double) 2;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) (-554.7);
      doubleArray2[1] = (Double) 1091.0;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray2[2] = double0;
      Double double1 = new Double(1.5874010519681994);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.5874010519681994, (double)double1, 0.01);
      
      doubleArray2[3] = double1;
      doubleArray2[4] = (Double) 2.0;
      doubleArray2[5] = (Double) 2.0;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-554.7 <= 1,091)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1957.3791799452545);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1087.6851743115024;
      doubleArray0[7] = (-1138.5015033);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0, (-1957.3791799452545), 3.834E-20, 1087.6851743115024, (-1138.5015033)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(6310579.96551656, double0, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 1087.6851743115024;
      doubleArray1[1] = (Double) (-1138.5015033);
      doubleArray1[2] = (Double) (-1957.3791799452545);
      Double double1 = new Double(714.601);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(714.601, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {(-1138.5015033), 1.0, 3.834E-20, 0.0, 1087.6851743115024, 1.0, (-1957.3791799452545), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-199.59252151412);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-199.59252151412), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      long[] longArray0 = new long[3];
      longArray0[0] = (-1692L);
      longArray0[1] = 2147483647L;
      longArray0[2] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,692 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2683;
      intArray0[2] = (-4597);
      intArray0[3] = 0;
      intArray0[4] = 71;
      intArray0[5] = 0;
      intArray0[6] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 2683, (-4597), 0, 71, 0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 2683, (-4597), 0, 71, 0, 2}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 71;
      doubleArray0[2] = (double) 2683;
      doubleArray0[3] = (double) (-4597);
      doubleArray0[4] = (double) 71;
      doubleArray0[5] = (double) 2683;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 71.0, 2683.0, (-4597.0), 71.0, 2683.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 71.0, 2683.0, (-4597.0), 71.0, 2683.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.5539469E7, double1, 0.01);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 2683;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 2683;
      intArray2[5] = 0;
      double double2 = MathArrays.distance(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 2683, (-4597), 0, 71, 0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 2683, 2, 2, 2683, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5288.983739812404, double2, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2683;
      floatArray0[1] = (float) (-4597);
      floatArray0[2] = (float) 2683;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-4597);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-568.62634F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {2683.0F, (-4597.0F), 2683.0F, 2.0F, 0.0F, (-4597.0F), 0.0F, (-568.62634F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1498L);
      longArray0[1] = 1L;
      longArray0[2] = (-217L);
      longArray0[3] = (-123L);
      longArray0[4] = (-1207L);
      longArray0[5] = 2045L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,498 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-302.533293068562), (-302.533293068562), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      long[][] longArray0 = new long[8][6];
      long[] longArray1 = new long[8];
      longArray1[0] = (-894L);
      longArray1[1] = (-556L);
      longArray1[2] = (-2416L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-1206L);
      longArray1[7] = (-228L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1206L);
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = (-894L);
      longArray2[5] = (-2416L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = (-228L);
      longArray3[2] = (-267L);
      longArray3[3] = 0L;
      longArray3[4] = (-894L);
      longArray3[5] = (-1206L);
      longArray3[6] = 0L;
      longArray3[7] = (-2416L);
      longArray3[8] = (-894L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-228L);
      longArray4[1] = 0L;
      longArray4[2] = (-2416L);
      longArray4[3] = (-228L);
      longArray4[4] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-894L);
      longArray5[1] = (-556L);
      longArray5[2] = (-1206L);
      longArray5[3] = 0L;
      longArray5[4] = (-1206L);
      longArray5[5] = 0L;
      longArray5[6] = (-556L);
      longArray5[7] = 0L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-267L);
      longArray6[1] = (-2416L);
      longArray6[2] = (-228L);
      longArray6[3] = (-2416L);
      longArray6[4] = (-2416L);
      longArray6[5] = (-1206L);
      longArray6[6] = 9007199254740990L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = 100L;
      longArray7[1] = 1430L;
      longArray7[2] = (-267L);
      longArray7[3] = 0L;
      longArray7[4] = (-267L);
      longArray7[5] = 9007199254740990L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = 9007199254740990L;
      longArray8[1] = 0L;
      longArray8[2] = 0L;
      longArray8[3] = 9007199254740990L;
      longArray8[4] = 9007199254740990L;
      longArray8[5] = (-1206L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = MathArrays.linearCombination(878.2037132309, 0.0, (-233.4732286766), 5.669184079525E-24);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.3236027110086804E-21), double1, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 878.2037132309;
      doubleArray2[1] = 0.0;
      boolean boolean2 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {878.2037132309, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 5.669184079525E-24;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.1256551444530487;
      doubleArray3[3] = (-4078.47);
      doubleArray3[4] = (-4078.47);
      doubleArray3[5] = 2.608E18;
      doubleArray3[6] = 1711.43510956174;
      double double2 = MathArrays.distance(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5.669184079525E-24, 0.0, 0.1256551444530487, (-4078.47), (-4078.47), 2.608E18, 1711.43510956174}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 143L;
      longArray0[1] = 342L;
      longArray0[2] = 1770L;
      longArray0[3] = 4503599627370496L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {143L, 342L, 1770L, 4503599627370496L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2094.2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {2094.2}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(3510.33527579743, 1526.5739611178, 3510.33527579743, 1851.0, 1851.0, 1526.5739611178, Double.NaN, 601.481449);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2287.584601879587);
      doubleArray0[1] = (-2287.584601879587);
      doubleArray0[2] = (-2287.584601879587);
      doubleArray0[3] = (-2287.584601879587);
      doubleArray0[4] = (-2287.584601879587);
      doubleArray0[5] = (-2287.584601879587);
      doubleArray0[6] = (-2287.584601879587);
      double[] doubleArray1 = MathArrays.scale((-2287.584601879587), doubleArray0);
      assertArrayEquals(new double[] {(-2287.584601879587), (-2287.584601879587), (-2287.584601879587), (-2287.584601879587), (-2287.584601879587), (-2287.584601879587), (-2287.584601879587)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5233043.310756588, 5233043.310756588, 5233043.310756588, 5233043.310756588, 5233043.310756588, 5233043.310756588, 5233043.310756588}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = (-1692L);
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 100L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray2[4] = (-886L);
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,692 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      floatArray0[1] = 681.0F;
      float float0 = 3.4028235E38F;
      floatArray0[2] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {285.59778F, 681.0F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3.4028235E38F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1373);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1373, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = int0;
      intArray0[2] = 1;
      intArray0[3] = (int) integerArray0[1];
      intArray0[4] = 0;
      intArray0[5] = int0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 1373, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2138);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 978.987;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 1997.883775224822;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 978.987, 0.0, 1.0E-5, 1997.883775224822, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 958415.546169, 0.0, 1.0000000000000002E-10, 3991539.5793065876, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 1808);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[3];
      intArray0[0] = 232;
      intArray0[1] = (-1857);
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {232, (-1857), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 232;
      doubleArray2[1] = (double) 1713;
      doubleArray2[2] = (double) 232;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) (-1857);
      doubleArray2[5] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {232.0, 1713.0, 232.0, 0.0, (-1857.0), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2517.4378);
      doubleArray0[0] = (-2517.4378);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2517.4378);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NaN;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2517.4378), Double.NEGATIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double3 = 0.0;
      double double4 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NEGATIVE_INFINITY, 0.0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = 1092.9;
      MathArrays.scaleInPlace(1092.9, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2751307.7716200002), Double.NEGATIVE_INFINITY, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-2,517.438 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2780.30363630148);
      doubleArray0[2] = 2547.26605264;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2780.30363630148), 2547.26605264, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3770.762874136134, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, (-2780.30363630148), 2547.26605264, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2780.30363630148), 2547.26605264, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = MathArrays.linearCombination(0.0, 2547.26605264, 0.0, (-4078.47));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.scaleInPlace(6488564.342932167, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.8040179037030426E10), 1.6528099681121477E10, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.8040179037030426E10), 1.6528099681121477E10, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, (-1.8040179037030426E10), 1.6528099681121477E10, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.8040179037030426E10), 1.6528099681121477E10, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-166));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = (-15.461956200257);
      double double1 = (-1628.76840276172);
      doubleArray0[4] = (-1628.76840276172);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 20.0;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 20.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3.141592653589793);
      doubleArray1[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-3.141592653589793), (-15.461956200257), (-1628.76840276172), 0.0, 20.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 0.0, (-3.141592653589793), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-3669));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2517.4378);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2517.4378);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2517.4378), Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = MathArrays.linearCombination(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.scaleInPlace(1092.9, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-2751307.7716200002), Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2517.4378), Double.NEGATIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-2,517.438 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-1779);
      intArray0[0] = (-1779);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1779)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1779);
      doubleArray0[1] = (double) (-1779);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1779);
      doubleArray0[5] = (double) (-1779);
      doubleArray0[6] = (double) (-1779);
      doubleArray0[7] = (double) (-1779);
      doubleArray0[8] = (double) (-1779);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1779.0), (-1779.0), 0.0, 0.0, (-1779.0), (-1779.0), (-1779.0), (-1779.0), (-1779.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4706.791582383907, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1779.0), 1.0E-5, (-1779.0), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-2.319816E22), double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3164841.0, 3164841.0, 0.0, 0.0, 3164841.0, 3164841.0, 3164841.0, 3164841.0, 3164841.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1779.0), (-1779.0), 0.0, 0.0, (-1779.0), (-1779.0), (-1779.0), (-1779.0), (-1779.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 3544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1576.2994256);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1576.2994256)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2484719.87914689, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1576.2994256)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3588.8513333;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1576.2994256);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, (-1576.2994256)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3588.8513333, 0.0, 0.0, 0.0, 0.0, (-1576.2994256)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1713;
      int int0 = (-1857);
      intArray0[1] = (-1857);
      intArray0[2] = 0;
      int int1 = 232;
      intArray0[3] = 232;
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1713, (-1857), 0, 232}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 539.7009543737425;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 139.14557725762;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (539.701 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1764.929156256607);
      doubleArray0[1] = 1063.776;
      doubleArray0[2] = (-269.1104);
      doubleArray0[3] = (-2535.22);
      double double0 = (-806.99042);
      doubleArray0[4] = (-806.99042);
      doubleArray0[5] = (-1281.49);
      double double1 = 585.9;
      doubleArray0[6] = 585.9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,063.776 > -269.11)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 137;
      intArray0[3] = (-2291);
      intArray0[4] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 0, 137, (-2291), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-883.45908424543);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-883.45908424543)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 143;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {143}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-883.45908424543)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-883.45908424543)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((double) 143, 1.0, 0.0, (double) 0);
      assertEquals(143.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 143;
      floatArray0[1] = (float) 143;
      floatArray0[2] = (float) 143;
      floatArray0[3] = (float) 143;
      floatArray0[4] = (float) 0;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {143.0F, 143.0F, 143.0F, 143.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1023;
      int int0 = 1;
      intArray0[2] = 1;
      int int1 = 1948;
      intArray0[3] = 1948;
      int int2 = 0;
      intArray0[4] = 0;
      intArray0[5] = (-3303);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1023;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1023;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-3303);
      doubleArray0[5] = (double) (-3303);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2780.30363630148);
      doubleArray0[2] = 2547.26605264;
      doubleArray0[3] = 587.0;
      doubleArray0[4] = 795.13416;
      MathArrays.distance1(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[5];
      long long0 = 0L;
      longArray1[0] = 0L;
      long long1 = (-214L);
      longArray1[1] = (-214L);
      long long2 = 1023L;
      longArray1[2] = 1023L;
      long long3 = 0L;
      longArray1[3] = 0L;
      long long4 = 521L;
      longArray1[4] = 521L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -214 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1342.9893793076385, 1342.9893793076385, 0.0, 100.0, (-330.84241541472), 0.0);
      assertEquals(1803620.4729331161, double0, 0.01);
      
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection.values();
      double double1 = MathArrays.linearCombination(100.0, 100.0, 0.0, 829.609, 2.0, -0.0);
      assertEquals(10000.0, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-563);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2301);
      intArray0[4] = (-1774);
      intArray0[5] = 1242;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2803.2805233;
      doubleArray0[1] = (-3774.690936270995);
      doubleArray0[2] = (-113.54155665413646);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5606.5610466, (-7549.38187254199), (-227.0831133082729), 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-1L);
      longArray1[3] = 140L;
      longArray1[4] = 2147483647L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = (-1L);
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 2147483647L;
      longArray2[6] = 2147483647L;
      longArray2[7] = (-4452L);
      longArray2[8] = 2147483647L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3075.248;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3075.248;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3075.248;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.34217729E8;
      doubleArray0[0] = 1.34217729E8;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1098.55;
      doubleArray0[4] = 582.6953;
      double double3 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (134,217,729 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1479.71035011426;
      doubleArray0[1] = 509.520707901;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 509.520707901;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 154.0379116;
      doubleArray1[6] = 1479.71035011426;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 753943.0650786543, 259611.35177993614, 0.0, 227931.49210450545, 2268028.22599729, 753943.0650786543, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(10, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 285.59778F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 285.59778F;
      doubleArray0[1] = (double) 285.59778F;
      doubleArray0[2] = (double) 681.0F;
      doubleArray0[3] = (double) 285.59778F;
      doubleArray0[4] = (-295.75);
      doubleArray0[5] = (double) 285.59778F;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-2742), (-2742));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1091;
      intArray0[1] = 0;
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 465);
      assertEquals(465, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-554.7);
      doubleArray0[2] = (double) 1091;
      doubleArray0[3] = (double) 1091;
      doubleArray0[4] = (double) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1091.0, 2.0, 0.0, (-554.7), 1091.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-360.7406);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2156.704;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1617.44023;
      doubleArray0[5] = 3255.64224;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace((-360.7406), doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2156.704;
      doubleArray2[1] = 3255.64224;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1617.44023;
      doubleArray2[4] = 2156.704;
      doubleArray2[5] = 3255.64224;
      doubleArray2[6] = (-2372.01775);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 2156.704;
      double[][] doubleArray3 = new double[6][0];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 3255.64224;
      doubleArray4[2] = (-360.7406);
      doubleArray3[3] = doubleArray4;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 8.7646104E7;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 172, 286);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1529.57);
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 311;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 311, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-361.94744);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 651.9245938079405;
      doubleArray0[5] = (-4427.65434552);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3590.702F;
      floatArray0[1] = (-1205.5573F);
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 1752.396F;
      floatArray0[4] = 1589.359F;
      floatArray0[5] = (-527.3474F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = 351.5665F;
      floatArray0[8] = 165.0F;
      MathArrays.equals(floatArray0, floatArray0);
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = 1L;
      longArray1[1] = (-3830L);
      longArray1[2] = (-596L);
      longArray1[3] = 981L;
      longArray1[4] = 1184L;
      longArray1[5] = (-1615L);
      longArray1[6] = (-3624L);
      longArray1[7] = 2089L;
      longArray1[8] = 4503599627370496L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,830 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 3.834E-20, 0.0, 0.0, 3.834E-20);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 460.7017491125;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2989.432329725264;
      doubleArray0[2] = 368.05176;
      doubleArray0[3] = 257.88520471404;
      doubleArray0[4] = (-3920.30177);
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1133.5630633554067);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(368.05176, 0.0, (-1.0), 0.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      MathArrays.copyOf(doubleArray2);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      MathArrays.ebeSubtract(doubleArray3, doubleArray1);
      double double1 = MathArrays.linearCombination((-1133.5630633554067), 1.7976931348623157E308, 2989.432329725264, 2989.432329725264, (-3158.454500149774), (-1683.274196064697), 368.05176, 1625.3497906);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1968.3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1968.3, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 65;
      intArray0[2] = 2;
      intArray0[3] = 3512;
      intArray0[4] = 830;
      intArray0[5] = 2533;
      intArray0[6] = Integer.MIN_VALUE;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 766);
      assertEquals(766, doubleArray1.length);
      
      MathArrays.OrderDirection.values();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 65;
      integerArray0[1] = (Integer) 830;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1957.3791799452545);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1087.6851743115024;
      doubleArray0[7] = (-1138.5015033);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6310578.96551656, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, (-1957.3791799452545), 3.834E-20, 1087.6851743115024, (-1138.5015033)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 1087.6851743115024;
      doubleArray1[1] = (Double) (-1138.5015033);
      doubleArray1[2] = (Double) (-1957.3791799452545);
      Double double1 = new Double(714.601);
      doubleArray1[3] = double1;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) (-1138.5015033);
      doubleArray1[6] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }
}
