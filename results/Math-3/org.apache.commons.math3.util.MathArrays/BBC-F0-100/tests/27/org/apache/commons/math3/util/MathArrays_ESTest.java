/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:48:05 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4724.7;
      doubleArray0[3] = (-599.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(105);
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<Integer, FieldElement<Object>> pair0 = new Pair<Integer, FieldElement<Object>>(integer0, fieldElement0);
      Pair<Integer, FieldElement<Object>> pair1 = new Pair<Integer, FieldElement<Object>>(pair0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 105);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 4724.7;
      doubleArray0[2] = 4724.7;
      doubleArray0[3] = (-599.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double double3 = 3.141592653589793;
      MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-565);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-565));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[][] longArray0 = new long[9][0];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      longArray0[4] = null;
      longArray0[5] = null;
      longArray0[6] = null;
      longArray0[7] = null;
      longArray0[8] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1242.83F;
      floatArray0[1] = 1445.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1560.0F;
      floatArray0[4] = (-65.15634F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3477.4F);
      floatArray0[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.buildArray(field0, 1493);
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 1493);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.401298464324817E-45;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (-795L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-795L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (-795L);
      longArray3[1] = (-795L);
      longArray3[2] = (-795L);
      longArray3[3] = (-795L);
      longArray3[4] = (-795L);
      longArray3[5] = (-795L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (-795L);
      longArray5[1] = (-795L);
      longArray5[2] = (-795L);
      longArray5[3] = (-795L);
      longArray5[4] = (-2019L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = (-210L);
      longArray6[1] = (-795L);
      longArray6[2] = (-2019L);
      longArray6[3] = (-2019L);
      longArray6[4] = (-795L);
      longArray6[5] = (-2584L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (-2584L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = (-210L);
      longArray9[1] = (-2019L);
      longArray9[2] = (-2019L);
      longArray9[3] = (-795L);
      longArray9[4] = (-2584L);
      longArray9[5] = (-2019L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -795 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 27.5F;
      floatArray0[1] = 27.5F;
      floatArray0[2] = 27.5F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1938.6863F);
      floatArray0[5] = (-938.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 923.4602F;
      floatArray0[8] = (-1.4E-45F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-938.0F);
      doubleArray0[1] = (double) (-1.4E-45F);
      doubleArray0[2] = (double) 1328.0F;
      doubleArray0[3] = (double) (-1938.6863F);
      doubleArray0[4] = (double) 27.5F;
      MathArrays.scaleInPlace(1.2599210498948732, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-4855.6769979059));
      doubleArray0[0] = double0;
      Double double1 = new Double((-4855.6769979059));
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (-4855.6769979059);
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = (double) doubleArray0[1];
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.linearCombination(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      intArray0[1] = (-2146482489);
      intArray0[2] = (-1);
      int[] intArray1 = new int[5];
      intArray1[0] = (-2146482489);
      intArray1[1] = 0;
      intArray1[2] = (-1);
      intArray1[3] = (-2146482489);
      intArray1[4] = 0;
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 878.4238986;
      doubleArray0[1] = 472.9285758609834;
      doubleArray0[2] = 472.9285758609834;
      doubleArray0[3] = 472.9285758609834;
      doubleArray0[4] = 0.07692307692307693;
      doubleArray0[5] = 472.9285758609834;
      doubleArray0[6] = 472.9285758609834;
      MathArrays.scaleInPlace(472.9285758609834, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int int0 = 5424;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 5424);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = new long[10];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4739.600102936046;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.893485277253286E-8;
      doubleArray0[3] = 1.63E18;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1546.95;
      doubleArray0[6] = (-465.0);
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.63E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      floatArray0[1] = 1161.2039F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1193.9);
      doubleArray0[1] = (-0.1666666567325592);
      doubleArray0[2] = 2232.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1069.0135F);
      floatArray0[1] = (-978.83F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = Float.NEGATIVE_INFINITY;
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-1069.0135F);
      floatArray1[1] = (-1592.8058F);
      floatArray1[2] = (-1069.0135F);
      floatArray1[3] = Float.NEGATIVE_INFINITY;
      floatArray1[4] = Float.NaN;
      floatArray1[5] = (-1069.0135F);
      floatArray1[6] = (-978.83F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (-1592.8058F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(Float.NEGATIVE_INFINITY, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-559.76080431);
      doubleArray0[3] = (-559.76080431);
      doubleArray0[4] = (-559.76080431);
      doubleArray0[5] = (-7.877917738262007E-9);
      doubleArray0[6] = (-559.76080431);
      doubleArray0[7] = (-559.76080431);
      double[] doubleArray1 = MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-559.76080431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2.6033824355191673E-8);
      doubleArray0[2] = (-890.9479560551);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-2948.71964253);
      doubleArray0[5] = 3474.5;
      doubleArray0[6] = (-658.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.9315254622659124E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1697.1F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-606.6256F);
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1697.1F;
      floatArray1[5] = 1697.1F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 1.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 621.554207150644;
      doubleArray0[1] = 1798.140566207405;
      doubleArray0[2] = 263.96957701;
      doubleArray0[3] = 21.6357549;
      doubleArray0[4] = 2703.92997772;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 686.7814F;
      floatArray0[2] = 4008.3108F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(1.304E19, 0.0, 0.0, 0.0, 2330.45, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-537.809F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-73.0F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 0.0F, (double) 3.4028235E38F, (double) 0.0F, (double) 0.0F, 986.0, (double) 0.0F, (double) 3.4028235E38F, (double) 0.0F);
      long[] longArray0 = new long[9];
      longArray0[0] = (-1073741824L);
      longArray0[1] = 2042L;
      longArray0[2] = 2046L;
      longArray0[3] = (-2803L);
      longArray0[4] = (-4930L);
      longArray0[5] = (-4152L);
      longArray0[6] = (-3958705157555305932L);
      longArray0[7] = 1L;
      longArray0[8] = 655L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2631.6802F);
      floatArray0[1] = 440.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-938.05F);
      floatArray0[2] = (-1953.9602F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-957.1152F);
      floatArray0[5] = (-1255.4951F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1454.0027F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-938.05F);
      floatArray1[1] = (-1454.0027F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 13, (-1034));
      assertEquals(13, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) (-1034);
      doubleArray0[4] = (double) (-1034);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 646.7897955;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-1607.8168292);
      doubleArray1[3] = 4353.5283203125;
      doubleArray1[4] = (-2543.0);
      doubleArray1[5] = (-301.51);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.scale((-1599.9185681701852), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[1];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2548.127999536774;
      double double0 = MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
      Double double1 = new Double(3218.83900587);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2548.127999536774, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 21 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 1071.900227;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1071.900227, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 2576.9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, (-964));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-2615.39184655), doubleArray0);
      Double double0 = Double.valueOf((-2615.39184655));
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) doubleArray1[0];
      doubleArray2[1] = (double) doubleArray1[1];
      doubleArray2[6] = (double) doubleArray1[0];
      doubleArray2[3] = (-2615.39184655);
      doubleArray2[4] = (double) doubleArray1[0];
      doubleArray2[5] = (double) doubleArray1[1];
      doubleArray2[6] = (double) doubleArray1[1];
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[8];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double0 = 358.014290445699;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[8];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean2 == boolean1);
      
      long[][] longArray0 = new long[7][9];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 3578.5;
      doubleArray3[1] = 3578.5;
      boolean boolean3 = MathArrays.equals(doubleArray3, doubleArray3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5240866.6517191;
      doubleArray0[2] = 2548.127999536774;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 15;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray1 = new long[0][9];
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-513);
      intArray0[1] = (-1473);
      intArray0[2] = 904;
      intArray0[3] = 0;
      intArray0[4] = 84;
      intArray0[5] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = (-1473);
      intArray1[4] = 0;
      intArray1[5] = 904;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(5350, int0);
      
      int[] intArray2 = new int[5];
      intArray2[0] = 904;
      intArray2[1] = 904;
      intArray2[2] = (-513);
      intArray2[3] = (-2237);
      intArray2[4] = 5350;
      int int1 = MathArrays.distanceInf(intArray2, intArray2);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84;
      doubleArray0[1] = (double) (-513);
      doubleArray0[2] = (double) 5350;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {84.0, (-513.0), 5350.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5240866.6517191;
      doubleArray0[2] = 2548.127999536774;
      MathArrays.safeNorm(doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 5240866.6517191;
      doubleArray0[2] = 2548.127999536774;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4);
      assertArrayEquals(new double[] {Double.NaN, 5240866.6517191, 2548.127999536774, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 19.28006762726);
      assertArrayEquals(new double[] {Double.NaN, 19.27069814530637, 0.009369481953632509}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 251;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-3082.6749));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-3082.6749));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1335.0));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      doubleArray0[6] = double6;
      Double double7 = new Double((-1335.0));
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[6]);
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 682.11120411848;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.842720000000001E21;
      doubleArray2[3] = (-361.25596429);
      doubleArray2[4] = 8.0;
      doubleArray2[5] = 963.337254599;
      doubleArray2[6] = 1334.059676;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      double double0 = MathArrays.linearCombination(595.6530461552913, 595.6530461552913, 595.6530461552913, 595.6530461552913);
      assertEquals(709605.1027881553, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.checkPositive(doubleArray1);
      double double0 = MathArrays.linearCombination(1.280566225E7, 0.0, 1.280566225E7, 3578.5, 1.280566225E7, 0.058823529411764705);
      assertEquals(4.5825815635875E10, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.280566225E7}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 109L;
      long[] longArray1 = new long[7];
      longArray1[0] = 109L;
      longArray1[1] = 109L;
      longArray1[2] = 109L;
      longArray1[3] = 109L;
      longArray1[4] = 109L;
      longArray1[5] = 109L;
      longArray1[6] = 109L;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[8];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 3051;
      intArray0[1] = (-579);
      intArray0[2] = 252;
      intArray0[3] = (-2751);
      intArray0[4] = (-2644);
      intArray0[5] = 43;
      intArray0[6] = 15;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2751);
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 43;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = 0.1666666505023083;
      doubleArray0[5] = (double) (-2751);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(4.1651515504644E38, double0, 0.01);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.distanceInf(intArray0, intArray0);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      double double0 = 3578.5;
      doubleArray0[0] = 3578.5;
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3578.5;
      doubleArray2[1] = 3578.5;
      double double1 = (-7.800414592973399E-9);
      doubleArray2[2] = (-7.800414592973399E-9);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double double0 = 1618.775254894746;
      double double1 = 30283.06915283203;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1618.775254894746;
      MathArrays.scale(30283.06915283203, doubleArray0);
      MathArrays.checkNonNegative(longArray0);
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-61.3208419);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3760.2456513247953}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      longArray1[0] = 109L;
      long[] longArray2 = new long[7];
      longArray2[0] = 109L;
      longArray2[1] = 109L;
      longArray2[2] = 109L;
      longArray2[3] = 109L;
      longArray2[4] = 109L;
      longArray2[5] = 109L;
      longArray2[6] = 109L;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1, 1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      Double.valueOf((-61.3208419));
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 109L;
      doubleArray0[1] = 951.1838003891565;
      doubleArray0[2] = 4668.8748;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (double) 109L;
      doubleArray0[5] = 951.1838003891565;
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 124;
      intArray0[1] = 2146380455;
      intArray0[2] = 218;
      intArray0[3] = 1267;
      int[] intArray1 = new int[3];
      intArray1[0] = 124;
      intArray1[1] = 1267;
      intArray1[2] = 1267;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 951.1838003891565;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double.valueOf((-61.3208419));
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-61.3208419), doubleArray0);
      MathArrays.linearCombination(0.0, (-61.3208419), 901.5, (-2607.2641037780095), (-30.733713038), (-2308.20351454708), (-1.7976931348623157E308), 901.5);
      long[] longArray0 = new long[4];
      longArray0[0] = (-9223372036854775808L);
      longArray0[1] = 3824L;
      longArray0[2] = 2935890503282001226L;
      longArray0[3] = (-1335L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      Double double0 = Double.valueOf((-61.3208419));
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      Double double0 = Double.valueOf((-61.3208419));
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = double0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-61.3208419);
      doubleArray2[1] = (double) doubleArray1[0];
      doubleArray2[2] = (-61.3208419);
      MathArrays.equals(doubleArray0, doubleArray2);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      doubleArray0[1] = (-61.3208419);
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 3760.2456513247953;
      doubleArray1[1] = (Double) 3760.2456513247953;
      Double double0 = Double.valueOf((-61.3208419));
      doubleArray1[2] = double0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1618.775254894746;
      double[] doubleArray1 = MathArrays.scale(1618.775254894746, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.distance(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1618.775254894746;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1618.775254894746;
      doubleArray2[6] = 1618.775254894746;
      doubleArray2[7] = 1618.775254894746;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      doubleArray0[1] = (-61.3208419);
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 3760.2456513247953;
      doubleArray1[1] = (Double) 3760.2456513247953;
      MathArrays.linearCombination(3760.2456513247953, 1.0, (-1528.5339263), (-1949.71269), (-61.3208419), 3760.2456513247953);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      int[] intArray0 = new int[6];
      intArray0[0] = 300;
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      intArray0[3] = 1656;
      intArray0[4] = 1656;
      intArray0[5] = (-1996);
      int[] intArray1 = MathArrays.copyOf(intArray0, 2019);
      assertEquals(2019, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 22;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 22;
      doubleArray1[1] = (double) 22;
      doubleArray1[2] = (double) 22;
      doubleArray1[3] = (double) 22;
      doubleArray1[4] = (double) 22;
      doubleArray1[5] = (double) 22;
      doubleArray1[6] = (double) 22;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 2109.24342;
      doubleArray3[1] = 2109.24342;
      doubleArray3[2] = (double) 22;
      doubleArray3[3] = 1222.3371057118409;
      doubleArray3[4] = 2109.24342;
      doubleArray3[5] = 2109.24342;
      doubleArray3[6] = 1222.3371057118409;
      MathArrays.scaleInPlace(2109.24342, doubleArray3);
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 2109.24342;
      doubleArray4[1] = 2705.1798857;
      doubleArray4[2] = (double) 22;
      doubleArray4[3] = 1222.3371057118409;
      doubleArray4[4] = (double) 22;
      doubleArray4[5] = 1.2845974911093275E11;
      doubleArray4[6] = (double) 22;
      doubleArray4[7] = 1222.3371057118409;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray4, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[6];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination(3.26E18, 1.0, (double) 0, 1.0, 3.26E18, (-3072.0), 1.0, 1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.001146E22);
      doubleArray0[2] = (-3072.0);
      doubleArray0[3] = (-1.001146E22);
      doubleArray0[4] = 1.0;
      MathArrays.scale((-881.4), doubleArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 1560;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      doubleArray0[1] = (-61.3208419);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-61.3208419);
      doubleArray1[1] = (-61.3208419);
      doubleArray1[2] = (-1980.69);
      doubleArray1[3] = (-61.3208419);
      doubleArray1[4] = (-61.3208419);
      doubleArray1[5] = (-61.3208419);
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.scaleInPlace((-2964.86947634515), doubleArray1);
      assertArrayEquals(new double[] {(-3.7967117129410355E10)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 3578.5, (-2964.86947634515), 3578.5, (-2964.86947634515));
      assertEquals((-2.121957084220224E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      MathArrays.linearCombination(0.546302437782, (double) 1, (-1091.0), (double) 2, 1.0, 1.0, 1.0, 1.0);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 109L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 109L;
      longArray3[1] = 109L;
      longArray3[2] = 109L;
      longArray3[3] = 109L;
      longArray3[4] = 109L;
      longArray3[5] = 109L;
      longArray3[6] = 109L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 22;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 220.92241F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 22.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 220.92241F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 220.92241F;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[6];
      doubleArray0[2] = (double) 2;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2907);
      assertEquals(2907, intArray1.length);
      
      double double1 = MathArrays.linearCombination((double) 2, (double) 220.92241F, (double) 2, 0.0, (-40.613893796551345), (-0.33333333333333287), 6.52E18, (double) 220.92241F);
      assertEquals(1.4404141070556641E21, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 481;
      intArray0[0] = 481;
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 481;
      doubleArray0[1] = (double) 481;
      doubleArray0[2] = (double) 481;
      doubleArray0[3] = (double) 481;
      doubleArray0[4] = (double) 481;
      doubleArray0[5] = (double) 481;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 481;
      doubleArray1[1] = (-854.6712);
      doubleArray1[2] = (double) 481;
      doubleArray1[3] = (double) 481;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      doubleArray0[1] = (-61.3208419);
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      assertArrayEquals(new double[] {3760.2456513247953, 3760.2456513247953}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 3760.2456513247953;
      doubleArray1[1] = (Double) 3760.2456513247953;
      Double double0 = Double.valueOf((-61.3208419));
      doubleArray1[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-61.3208419));
      MathArrays.checkPositive(doubleArray1);
      MathArrays.checkOrder(doubleArray2);
      assertArrayEquals(new double[] {(-61.3208419), Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 220.92241F;
      doubleArray0[2] = (double) 220.92241F;
      MathArrays.linearCombination((-598.933639), Double.NaN, (double) 220.92241F, 1301.842834, (-1.0), (-1528.5339263));
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1996);
      intArray0[1] = 1656;
      intArray0[2] = (-498);
      intArray0[3] = (-1600);
      intArray0[4] = 1831;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1996));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1320);
      intArray0[4] = (-1320);
      intArray0[1] = (-228);
      intArray0[2] = 212;
      intArray0[3] = 2870;
      intArray0[4] = 3084;
      intArray0[5] = 386;
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 185L;
      longArray0[1] = 356L;
      longArray0[2] = 9218868437227405312L;
      longArray0[3] = (-9223372036854775808L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-61.3208419);
      doubleArray0[1] = (-61.3208419);
      MathArrays.scaleInPlace((-61.3208419), doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 414.458F;
      floatArray0[1] = (-122.63F);
      floatArray0[2] = 0.5F;
      floatArray0[3] = (-2979.0615F);
      floatArray0[4] = 2834.9436F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 2017.5841F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("LCM_OVERFLOW_32_BITS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.LCM_OVERFLOW_32_BITS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) 3702, 6.283185307179586, (-3157.74541), Double.NaN, 0.0, 6.283185307179586);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]";
      stringArray0[1] = "]";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.linearCombination(0.902267575263977, 595.4680612224, 595.4680612224, 1353.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[1] = 806205.5583576536;
      doubleArray0[2] = 1353.0;
      doubleArray0[3] = 806205.5583576536;
      doubleArray0[4] = (-376.446724899598);
      doubleArray0[5] = 1353.0;
      doubleArray0[6] = 595.4680612224;
      doubleArray0[7] = (double) (-425.6062F);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2146143982;
      intArray0[1] = 236;
      intArray0[2] = 0;
      intArray0[3] = (-2147483647);
      intArray0[4] = 447;
      intArray0[5] = 2612;
      intArray0[6] = (-1);
      intArray0[7] = 252;
      intArray0[8] = (-2146980958);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 23.0;
      doubleArray0[6] = 23.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray1, 0.0F);
      MathArrays.checkPositive(doubleArray1);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.375);
      doubleArray0[0] = double0;
      Double double1 = new Double(3808.209139084);
      doubleArray0[1] = double1;
      Double double2 = new Double(1204.76937);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf(3808.209139084);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      MathArrays.linearCombination(1326.8368559, 1.7976931348623157E308, 1372.47076291, 0.8333333333333334, (-51.3879), 1204.76937, (-1201.47), (double) doubleArray0[0]);
      double[] doubleArray1 = new double[0];
      MathArrays.checkPositive(doubleArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2452.04F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double double0 = new Double(0.0F);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1959.1798827061145;
      doubleArray1[1] = 1959.1798827061145;
      doubleArray1[2] = 1959.1798827061145;
      doubleArray1[3] = (-145.06082053);
      doubleArray1[4] = 1959.1798827061145;
      doubleArray1[5] = 1959.1798827061145;
      doubleArray1[6] = 1959.1798827061145;
      doubleArray1[7] = 1959.1798827061145;
      doubleArray1[8] = 1959.1798827061145;
      MathArrays.scaleInPlace(1959.1798827061145, doubleArray1);
      Double.valueOf(3838385.8128003445);
      Double[] doubleArray2 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.375);
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 358.014290445699;
      doubleArray1[1] = 3808.209139084;
      doubleArray1[2] = 3808.209139084;
      doubleArray1[3] = 1.375;
      doubleArray1[4] = 358.014290445699;
      doubleArray1[5] = 358.014290445699;
      doubleArray1[6] = 3808.209139084;
      doubleArray1[7] = 1.375;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 3808.209139084;
      doubleArray2[1] = 358.014290445699;
      doubleArray2[2] = (double) doubleArray0[0];
      doubleArray2[3] = 358.014290445699;
      doubleArray2[4] = (double) doubleArray0[0];
      doubleArray2[5] = 1.375;
      doubleArray2[6] = (double) doubleArray0[0];
      doubleArray2[7] = 3808.209139084;
      doubleArray2[8] = (double) doubleArray0[0];
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "KE3G6V/v%K*wO";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "KE3G6V/v%K*wO";
      stringArray0[4] = "";
      stringArray0[5] = "KE3G6V/v%K*wO";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 425.606201171875);
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {425.606201171875, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = (-425.6062F);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-425.6062F);
      floatArray1[2] = 0.0F;
      MathArrays.equals(floatArray1, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2322);
      intArray0[1] = 139;
      MathArrays.distance1(intArray0, intArray0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 139;
      integerArray0[1] = (Integer) 139;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YujG#@AMhC\"<QL1z'D";
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YujG#@AMhC\"<QL1z'D";
      stringArray0[1] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[2] = "h^QBBt'H";
      stringArray0[3] = "]";
      stringArray0[4] = "";
      stringArray0[5] = "Q<3sB&m)lZIH";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-598);
      double double0 = MathArrays.linearCombination((-1521.8891), (-0.16624879837036133), 393.809570005, 595.4680612224);
      assertEquals(234754.03337583234, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 595.4680612224;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1190.9361224448}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination((-2456.639892578125), 234754.03337583234, (-2666.0), 1066.2, (-2666.0), (-1521.8891));
      assertEquals((-5.754912561940863E8), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      doubleArray0[2] = (-5.1240039);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-5.1240039);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 342.24335845571;
      doubleArray0[7] = 361.1;
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2145.134493251875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      intArray1[0] = 2;
      intArray1[1] = 2;
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2, int1);
      
      Integer integer0 = new Integer((-369));
      Integer integer1 = new Integer(2147439649);
      Integer integer2 = new Integer((-369));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[5];
      Integer integer3 = new Integer((-369));
      integerArray0[0] = integer3;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      integerArray0[4] = (Integer) 2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L%0";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1656);
      MathArrays.copyOf(intArray0);
      float[] floatArray0 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-1656);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) (-1656);
      doubleArray2[3] = (double) (-1656);
      doubleArray2[4] = (double) (-1656);
      MathArrays.equals(doubleArray0, doubleArray2);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      doubleArray0[1] = (-18.9378683);
      try { 
        MathArrays.convolve(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.375);
      doubleArray0[0] = double0;
      Double double1 = new Double(3808.209139084);
      doubleArray0[1] = double1;
      Double double2 = new Double(1204.76937);
      doubleArray0[2] = double2;
      Double double3 = Double.valueOf(3808.209139084);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      doubleArray0[4] = double4;
      Double double5 = new Double((-563.95961));
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) doubleArray0[3];
      MathArrays.distance(doubleArray1, doubleArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1600), (-1600));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[2] = "h^QBBt'H";
      stringArray0[3] = "]";
      stringArray0[4] = "";
      stringArray0[5] = "Q<3sB&m)lZIH";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 0.0, 0.0);
      int[] intArray0 = new int[9];
      intArray0[1] = (-2585);
      intArray0[2] = 263;
      intArray0[3] = 3702;
      intArray0[5] = (-807);
      intArray0[6] = (-1707);
      int int0 = 2210;
      intArray0[7] = 2210;
      intArray0[8] = 2;
      MathArrays.copyOf(intArray0, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2585);
      doubleArray0[1] = (double) (-807);
      doubleArray0[2] = (double) 263;
      doubleArray0[3] = 1.700416E38;
      doubleArray0[4] = (double) 3702;
      doubleArray0[5] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 6.283185307179586, 0.0, 0.0, 0.0, 0.0);
      assertEquals(8.19327364056218E19, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146923756;
      intArray0[1] = (-2585);
      intArray0[2] = 263;
      intArray0[3] = 3702;
      intArray0[4] = 2146452446;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 121;
      intArray0[2] = (-1936);
      intArray0[3] = 2532;
      intArray0[4] = 18;
      intArray0[5] = (-5125);
      intArray0[6] = (-546);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1936);
      doubleArray0[1] = (double) 1;
      MathArrays.linearCombination(940.9299249547344, (-2216.373757040227), (-1.0), 1.304E19, 2141.0, (double) 121, 1976.3, (-2216.373757040227));
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1, 121, (-1936), 2532, 18, (-5125), (-546)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathArrays.linearCombination(1.304E19, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586);
      int[] intArray0 = new int[9];
      intArray0[0] = 2146923756;
      intArray0[1] = (-2585);
      intArray0[2] = 263;
      intArray0[3] = 3702;
      intArray0[4] = 2146452446;
      intArray0[5] = (-807);
      intArray0[6] = (-1707);
      intArray0[7] = 2210;
      intArray0[8] = 2;
      MathArrays.copyOf(intArray0, 1);
      MathArrays.linearCombination(6.283185307179586, (double) (-807), (double) 2146923756, (double) (-1707), (double) 2146452446, (double) 3702, 8.19327364056218E19, 6050.0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2146923756, (-2585), 263, 3702, 2146452446, (-807), (-1707), 2210, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3578.5;
      doubleArray1[1] = 358.014290445699;
      doubleArray1[2] = 2057338.3722135369;
      doubleArray1[3] = 2057338.3722135369;
      doubleArray1[4] = 3578.5;
      doubleArray1[5] = 3578.5;
      doubleArray1[6] = 3578.5;
      doubleArray1[7] = 3578.5;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-2846.0);
      doubleArray0[2] = (-2846.0);
      doubleArray0[3] = (-2846.0);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (-2846.0);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 220.92241F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1242.6237F);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 220.92241F;
      floatArray0[6] = 220.92241F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-425.6062F);
      floatArray1[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 121;
      intArray0[2] = (-1936);
      intArray0[3] = 2532;
      intArray0[4] = 18;
      intArray0[5] = (-5125);
      intArray0[6] = (-546);
      int[] intArray1 = new int[7];
      MathArrays.distance(intArray0, intArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1936);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1936);
      doubleArray1[1] = (double) 121;
      doubleArray1[2] = (double) (-1936);
      doubleArray1[3] = (double) (-1936);
      doubleArray1[4] = (double) (-5125);
      doubleArray1[5] = (double) 121;
      doubleArray1[6] = (double) (-5125);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      long[][] longArray0 = new long[1][6];
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2146481087);
      intArray0[1] = 2;
      intArray0[2] = 134217729;
      intArray0[3] = (-2146239008);
      intArray0[4] = 1985;
      intArray0[5] = 2;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 6.283185307179586, 0.0, 0.0, 0.0, 0.0);
      assertEquals(8.19327364056218E19, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 2146923756;
      intArray0[2] = 263;
      intArray0[3] = 3702;
      intArray0[4] = 2146452446;
      intArray0[5] = (-807);
      intArray0[6] = (-807);
      intArray0[7] = 2210;
      intArray0[8] = 2;
      MathArrays.copyOf(intArray0, 1);
      double double1 = MathArrays.linearCombination(6.283185307179586, (double) (-807), (double) 2146923756, (double) 263, (double) 2146452446, (double) 3702, 8.19327364056218E19, 6050.0);
      assertEquals(4.956930552625227E23, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3702;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 263;
      MathArrays.copyOf(doubleArray0, 222);
      double double2 = MathArrays.linearCombination((-3885.0), 0.0, 1.633123935319537E16, (-2649.468), (-379.31903178361), (double) (-807), 263.0, 1806.38592);
      assertEquals((-4.326909606663105E19), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      MathArrays.copyOf(intArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2;
      floatArray0[4] = (-425.6062F);
      floatArray0[5] = (float) 2;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 2;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      long long0 = (-215L);
      long long1 = (-1L);
      long long2 = (-1043L);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3159.308F;
      floatArray0[2] = (-1.0F);
      MathArrays.equals(doubleArray2, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1644.5176576);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1388.564);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "TJSCEgzxTRhf`";
      long[] longArray0 = new long[6];
      longArray0[0] = (-215L);
      longArray0[1] = 3414L;
      longArray0[2] = (-1L);
      longArray0[3] = 301L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3414L;
      doubleArray0[1] = (double) 301L;
      doubleArray0[2] = 2.17333333333333325E18;
      doubleArray0[3] = 902.202933099;
      doubleArray0[4] = (double) 301L;
      doubleArray0[5] = (double) 383L;
      doubleArray0[6] = (double) 4230L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,414 >= 301)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1031.191044918;
      doubleArray0[1] = (-2846.0);
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2846.0), 1031.191044918}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 9218868437227405312L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.copyOf(doubleArray0, 446);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1043L);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2140257453;
      intArray0[1] = 24;
      intArray0[5] = 24;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 358.014290445699;
      MathArrays.linearCombination(0.0, Double.NaN, Double.NaN, 0.19454771280288696);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(128174.2321633373, double0, 0.01);
      assertArrayEquals(new double[] {358.014290445699, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-424);
      intArray0[2] = 1877;
      intArray0[3] = (-2146797769);
      intArray0[4] = (-2865);
      intArray0[5] = 24;
      intArray0[6] = (-25);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-425.6062F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 220.92241F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      MathArrays.distance1(doubleArray1, doubleArray0);
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[7];
      longArray1[0] = 15L;
      longArray1[1] = (-1525L);
      longArray1[2] = 0L;
      longArray1[3] = (-3512299194304650054L);
      longArray1[4] = (-2773L);
      longArray1[5] = 760L;
      longArray1[6] = (-3130L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 760L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = new double[13];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3159.308F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 23.0;
      doubleArray0[1] = (-313.827494273);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1204.7657654);
      doubleArray0[4] = (-2666.0);
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1777.0825819700528);
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      MathArrays.linearCombination((-260.694), (-313.827494273), 14.0, (-2666.0), (-1.0), (-1.0));
      MathArrays.scaleInPlace(1.34217729E8, doubleArray2);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = 3131.6082F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1243.6123655754805;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 2594.987777073);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-605));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 6.283185307179586, 0.0, 0.0, 0.0, 0.0);
      assertEquals(8.19327364056218E19, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2146923756;
      intArray0[1] = (-2585);
      intArray0[2] = 263;
      intArray0[3] = 3702;
      intArray0[4] = 2146452446;
      intArray0[5] = (-807);
      intArray0[6] = (-1707);
      intArray0[7] = 2210;
      intArray0[8] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertArrayEquals(new int[] {2146923756}, intArray1);
      
      double double1 = MathArrays.linearCombination(6.283185307179586, (double) (-807), (double) 2146923756, (double) (-1707), (double) 2146452446, (double) 3702, 8.19327364056218E19, 6050.0);
      assertEquals(4.956930552582932E23, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YujG#@AMhC\"<QL1z'D";
      stringArray0[1] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[2] = "h^QBBt'H";
      stringArray0[3] = "]";
      stringArray0[4] = "";
      stringArray0[5] = "Q<3sB&m)lZIH";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (-598);
      intArray0[1] = (-4544);
      intArray0[2] = 2141;
      int int0 = new Integer((-4544));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4544);
      doubleArray0[1] = (double) (-4544);
      doubleArray0[2] = (double) 2141;
      doubleArray0[3] = (double) 2141;
      doubleArray0[4] = (double) (-4544);
      doubleArray0[5] = (double) (-598);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-4,544 <= -4,544)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1278.59, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1278.59), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1424.959;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4724.7;
      doubleArray0[3] = (-599.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double double0 = 3.141592653589793;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 0;
      MathArrays.buildArray(field0, 0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 4724.7;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1204.7657654));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      doubleArray0[1] = (-2086.63);
      doubleArray0[2] = (-5.1240039);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 342.24335845571;
      doubleArray0[7] = 361.1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      doubleArray0[1] = (-18.9378683);
      doubleArray0[2] = (-5.1240039);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-5.1240039);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 342.24335845571;
      doubleArray0[7] = 361.1;
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1031.191044918;
      doubleArray0[1] = (-2846.0);
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2846.0), 1031.191044918}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = (-3130L);
      longArray1[2] = 383L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 9007199254740990L;
      longArray2[1] = 4230L;
      longArray2[2] = 1273L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-3130L);
      longArray4[1] = 383L;
      longArray4[2] = 383L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-644.04145022);
      long[][] longArray0 = new long[1][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1031.191044918;
      doubleArray0[1] = (-2846.0);
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[3];
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = (-3130L);
      longArray1[2] = 383L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 9007199254740990L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,130 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 23.0;
      doubleArray0[1] = (-313.827494273);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1204.7657654);
      doubleArray0[4] = (-2666.0);
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1777.0825819700528);
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray2;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-313.827494273);
      doubleArray4[2] = 23.0;
      doubleArray4[3] = (-1.0);
      doubleArray3[4] = doubleArray4;
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {296.18043032834214, 296.18043032834214, 296.18043032834214, 296.18043032834214, 296.18043032834214, 296.18043032834214}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (-1371.69105);
      doubleArray0[3] = 0.01745329052209854;
      doubleArray0[4] = (double) 14;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-425.6062F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "TJSCEgzxTRhf`";
      long[] longArray0 = new long[6];
      long long0 = (-215L);
      longArray0[0] = (-215L);
      longArray0[1] = 3414L;
      long long1 = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 301L;
      long long2 = (-1043L);
      longArray0[4] = (-1043L);
      longArray0[5] = (-3166L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -215 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1204.76937;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-700.38998945112);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 220.92241F;
      floatArray0[5] = 0.0F;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 962.079581482719;
      doubleArray0[1] = 962.079581482719;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 962.079581482719;
      doubleArray0[4] = 962.079581482719;
      doubleArray0[5] = 962.079581482719;
      MathArrays.scale(962.079581482719, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      double double0 = 3578.5;
      doubleArray0[0] = 3578.5;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      float float0 = 3159.308F;
      floatArray0[1] = 3159.308F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      float float1 = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = (-3765);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-3765));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1155.280578089651;
      doubleArray0[1] = (-2790.757518);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(3262.312, doubleArray0);
      assertArrayEquals(new double[] {3768885.6932688057, (-9104321.740061615), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1845.37723;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.linearCombination((-945.4031154), (-945.4031154), 1538.193312166603, (-945.4031154));
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 220.92241F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-425.6062F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 220.92241F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 1850.0;
      doubleArray0[2] = 1486.927;
      doubleArray0[3] = 2046.059168435549;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 2049L;
      longArray1[2] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 2049L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 0L;
      longArray3[1] = 2049L;
      longArray3[2] = 2049L;
      longArray3[3] = 2049L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray3[8] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 2049L;
      longArray4[1] = 2049L;
      longArray4[2] = 2049L;
      longArray4[3] = 2049L;
      longArray4[4] = 1L;
      longArray4[5] = 0L;
      longArray4[6] = 2049L;
      longArray4[7] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 1L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = 1L;
      longArray6[2] = 1L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = 2049L;
      longArray7[1] = 0L;
      longArray7[2] = 2049L;
      longArray7[3] = 0L;
      longArray7[4] = 0L;
      longArray7[5] = 1L;
      longArray7[6] = 0L;
      longArray7[7] = 0L;
      longArray7[8] = 2049L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      longArray8[0] = 2049L;
      longArray8[1] = 2049L;
      longArray8[2] = 1L;
      longArray8[3] = 0L;
      longArray8[4] = 0L;
      longArray8[5] = 2049L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 190.233;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.233}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1313;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1737);
      intArray0[5] = 1707;
      intArray0[6] = 0;
      intArray0[7] = (-592);
      intArray0[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-721.0), (-721.0), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1431655765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 4724.7;
      doubleArray0[2] = 4724.7;
      doubleArray0[3] = (-599.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double double3 = 3.141592653589793;
      MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-976.1697857871396);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 605.0;
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-976.1697857871396);
      doubleArray2[1] = (-976.1697857871396);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-976.1697857871396);
      doubleArray2[4] = (-976.1697857871396);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 358.014290445699;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1724.386692);
      doubleArray0[4] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[3];
      longArray1[0] = (-2381L);
      longArray1[1] = (-484L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2381L);
      longArray2[1] = (-2381L);
      longArray2[2] = 0L;
      longArray2[3] = (-484L);
      longArray2[4] = 880L;
      longArray2[5] = 0L;
      longArray2[6] = (-484L);
      longArray2[7] = (-2381L);
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-2381L);
      longArray3[1] = (-2381L);
      longArray3[2] = (-484L);
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 880L;
      longArray3[6] = (-2381L);
      longArray3[7] = (-484L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 0L;
      longArray4[1] = (-1L);
      longArray4[2] = 0L;
      longArray4[3] = (-2381L);
      longArray4[4] = (-2381L);
      longArray4[5] = 0L;
      longArray4[6] = 4503599627370495L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-1L);
      longArray5[1] = (-1L);
      longArray5[2] = (-484L);
      longArray5[3] = 1835L;
      longArray5[4] = 880L;
      longArray5[5] = 880L;
      longArray5[6] = 880L;
      longArray5[7] = (-1603L);
      longArray5[8] = (-484L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (-484L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1643.205292896125);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("lHR-Nd%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.lHR-Nd%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2594.987777073;
      doubleArray0[1] = 0.0;
      double double0 = (-2353.294);
      doubleArray0[2] = (-2353.294);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 1009.0;
      doubleArray0[5] = 0.0;
      double double1 = (-3.141592653589793);
      doubleArray0[6] = (-3.141592653589793);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,594.988 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2062.41715213031);
      double[] doubleArray1 = MathArrays.scale((-2062.41715213031), doubleArray0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2062.41715213031);
      doubleArray2[1] = (-2062.41715213031);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2062.41715213031);
      doubleArray2[4] = (-2062.41715213031);
      doubleArray2[5] = (-2062.41715213031);
      MathArrays.safeNorm(doubleArray2);
      MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray3, doubleArray2);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1529;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 1529;
      longArray3[2] = (long) 0;
      longArray3[3] = (-2430L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = (long) 0;
      longArray4[1] = (-2430L);
      longArray4[2] = (long) 0;
      longArray4[3] = (-2430L);
      longArray4[4] = (long) 0;
      longArray4[5] = (long) 0;
      longArray4[6] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 1529;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = (long) 0;
      longArray5[6] = (long) 0;
      longArray5[7] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 0;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = (long) 0;
      longArray7[1] = (long) 0;
      longArray7[2] = (long) 0;
      longArray7[3] = 1807L;
      longArray7[4] = (long) 1529;
      longArray7[5] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = (long) 1529;
      longArray9[1] = 1807L;
      longArray9[2] = (long) 1529;
      longArray9[3] = 1807L;
      longArray9[4] = (long) 1529;
      longArray9[5] = (long) 0;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,430 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-1920.7185666495557);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,920.719 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2664.3695184164376);
      doubleArray0[1] = (-4040.12451058247);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1575.99769);
      MathArrays.equals(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (-9223372036854775808L);
      longArray1[1] = (-68L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-9223372036854775808L);
      longArray2[1] = 0L;
      longArray2[2] = (-9223372036854775808L);
      longArray2[3] = (-68L);
      longArray2[4] = 0L;
      longArray2[5] = (-68L);
      longArray2[6] = (-9223372036854775808L);
      longArray2[7] = (-9223372036854775808L);
      longArray2[8] = (-68L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (-9223372036854775808L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = (-9223372036854775808L);
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = (-1L);
      longArray4[3] = 0L;
      longArray4[4] = (-68L);
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (-68L);
      longArray5[1] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 358.014290445699;
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2594.987777073;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "h^QBBt'H";
      stringArray0[1] = "]";
      stringArray0[2] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[3] = "h^QBBt'H";
      stringArray0[4] = "";
      stringArray0[5] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[6] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[7] = "]";
      stringArray0[8] = "@kMk~Hcw-s<W7DI!J?";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((-1521.8891), 393.809570005, 1.304E19, 2062.41715213031);
      assertEquals(2.6893919663779245E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2;
      floatArray0[4] = (-425.6062F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-2456.64F);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2456.642334937315, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      double[] doubleArray1 = new double[19];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) (-427.24448F);
      doubleArray1[6] = (double) (-427.24448F);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("oF}tZg[ 2Fp1I-X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.oF}tZg[ 2Fp1I-X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2083.173, 0.0, 2521.810647, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1655;
      intArray0[1] = 155;
      intArray0[2] = 215;
      intArray0[3] = 94;
      intArray0[4] = 134217729;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 662.444;
      doubleArray0[1] = (double) 215;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (double) 94;
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 662.444, 94.0, 215.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "TJSCEgzxTRhf`";
      stringArray0[2] = "kXdFu9Ie";
      stringArray0[3] = "KE3G6V/v%K*wO";
      stringArray0[4] = "";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1264.92;
      doubleArray2[1] = 20.0;
      doubleArray2[2] = 2061.8839701799216;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {1600022.6064000002, 50596.8, 5216636.5431199735, 82475.35880719687, 4251365.5064849155}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 121;
      intArray0[2] = (-1936);
      intArray0[3] = 2532;
      intArray0[4] = 18;
      intArray0[5] = (-5125);
      intArray0[6] = (-546);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1936);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 121;
      MathArrays.scaleInPlace((-0.7853981633974483), doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1520.53084433746, (-0.7853981633974483), (-95.03317777109125)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[0];
      int[] intArray2 = MathArrays.copyOf(intArray1, 18);
      assertEquals(18, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YujG#@AMhC\"<QL1z'D";
      stringArray0[1] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[2] = "h^QBBt'H";
      stringArray0[3] = "]";
      stringArray0[4] = "";
      stringArray0[5] = "Q<3sB&m)lZIH";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (-598);
      intArray0[1] = (-4544);
      intArray0[2] = 2141;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4544);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2141;
      doubleArray0[3] = (double) 2141;
      doubleArray0[4] = (double) (-4544);
      doubleArray0[5] = (double) (-598);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-4,544 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YujG#@AMhC\"<QL1z'D";
      stringArray0[1] = "@kMk~Hcw-s<W7DI!J?";
      stringArray0[2] = "h^QBBt'H";
      stringArray0[3] = "]";
      stringArray0[4] = "";
      stringArray0[5] = "Q<3sB&m)lZIH";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-598);
      intArray0[1] = (-4544);
      intArray0[2] = 2141;
      Integer integer0 = new Integer((-4544));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4544);
      doubleArray0[1] = (double) (int)integer0;
      doubleArray0[3] = (double) 2141;
      doubleArray0[4] = (double) (-4544);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8156.450759981329, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2086.63);
      doubleArray0[1] = (-18.9378683);
      doubleArray0[2] = (-5.1240039);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 342.24335845571;
      doubleArray0[7] = 361.1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1033.54F);
      floatArray0[1] = (-3620.9902F);
      floatArray0[2] = (-1751.7756F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1447.8553F);
      floatArray0[5] = 3450.082F;
      floatArray0[6] = 1858.3508F;
      floatArray0[7] = 747.67F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 747.67F;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3450.082F;
      doubleArray1[1] = (double) 3450.082F;
      doubleArray1[2] = (double) (-1751.7756F);
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 1858.3508F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 22;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = (-1478);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1478), (-1478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2702, 1074);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-225.220768542293);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-705.0);
      doubleArray0[4] = 1278.59;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertArrayEquals(new double[] {1.3039999999999998E19, (-225.22076854229297), 0.0, (-704.9999999999999), 1278.5899999999997}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray0);
      assertArrayEquals(new double[] {(-1.304E19), 225.220768542293, -0.0, 705.0, (-1278.59)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 530.363;
      doubleArray0[1] = 530.363;
      MathArrays.scaleInPlace(530.363, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.912120158889415E10, 1.582424031777883E11, 7.912120158889415E10}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {281284.91176900006, 281284.91176900006}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-667));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2088.4240478854;
      doubleArray0[1] = (-817.141);
      double double0 = (-1132.48);
      doubleArray0[2] = (-1132.48);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 23.0;
      doubleArray0[1] = (-313.827494273);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1204.7657654);
      doubleArray0[4] = (-2666.0);
      doubleArray0[5] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1777.0825819700528);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray2;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-313.827494273);
      doubleArray4[2] = 23.0;
      doubleArray4[3] = (-1.0);
      doubleArray3[4] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
