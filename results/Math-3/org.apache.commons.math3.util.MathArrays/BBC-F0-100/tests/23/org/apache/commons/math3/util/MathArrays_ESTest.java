/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:08:07 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      intArray0[4] = 2892;
      intArray0[5] = 2459;
      intArray0[6] = 2171;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 636, (-650), 2171, 2892, 2459, 2171}, intArray0);
      
      MathArrays.scaleInPlace(2459, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1398185.65411), 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-1787));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1787), (int)integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2171);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      intArray0[4] = 2892;
      intArray0[5] = 2459;
      intArray0[6] = 2171;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 636, (-650), 2171, 2892, 2459, 2171}, intArray0);
      
      MathArrays.scaleInPlace(2459, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1398185.65411), 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 2171);
      assertEquals(2171, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2622.575558461891;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {2622.575558461891}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = (-1549);
      Integer integer0 = new Integer((-1549));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1549), (int)integer0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int int1 = 17;
      int int2 = 21;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 17, 21);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6.876408578035188E10;
      doubleArray0[1] = 1286.88738;
      doubleArray0[2] = (-467.408);
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 2253.85;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {6.876408578035188E10, 1286.88738, (-467.408), 2.17333333333333325E18, 2253.85, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.17333333333333427E18, double0, 0.01);
      assertArrayEquals(new double[] {6.876408578035188E10, 1286.88738, (-467.408), 2.17333333333333325E18, 2253.85, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[4];
          double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
          assertEquals(4, doubleArray0.length);
          assertEquals(4, doubleArray1.length);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray1, doubleArray0);
          assertNotNull(doubleArray1);
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
          
          int int0 = 2186;
          double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2186);
          assertEquals(4, doubleArray0.length);
          assertEquals(4, doubleArray1.length);
          assertEquals(2186, doubleArray2.length);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray0, doubleArray2);
          assertNotSame(doubleArray1, doubleArray2);
          assertNotSame(doubleArray1, doubleArray0);
          assertNotSame(doubleArray2, doubleArray0);
          assertNotSame(doubleArray2, doubleArray1);
          assertNotNull(doubleArray2);
          assertFalse(doubleArray0.equals((Object)doubleArray1));
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray1));
          assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
          
          // Undeclared exception!
          MathArrays.convolve(doubleArray0, doubleArray2);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.32, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[22];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(22, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 425.0;
      doubleArray0[2] = 4080.49;
      doubleArray0[3] = (-3284.828257215303);
      doubleArray0[4] = 2768.16551205344;
      doubleArray0[5] = 1.3040000000000004E19;
      doubleArray0[6] = (-570.897);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.19999998807907104;
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {Double.NaN, 425.0, 4080.49, (-3284.828257215303), 2768.16551205344, 1.3040000000000004E19, (-570.897), 0.0, 0.19999998807907104}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {Double.NaN, 425.0, 4080.49, (-3284.828257215303), 2768.16551205344, 1.3040000000000004E19, (-570.897), 0.0, 0.19999998807907104}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[2] = (double) 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 2075;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2075, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 2075, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = 12;
      intArray0[2] = (-2146789342);
      intArray0[3] = 1344;
      intArray0[1] = (-307);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {9, (-307), (-2146789342), 1344, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (-307);
      doubleArray0[3] = (double) (-307);
      doubleArray0[4] = (double) 1344;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {12.0, 9.0, (-307.0), (-307.0), 1344.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-307), doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {12.0, 9.0, (-307.0), (-307.0), 1344.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-2146556008);
      intArray0[2] = 1443;
      intArray0[3] = (-1172);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146556008);
      intArray1[1] = 2331;
      intArray1[2] = (-2146556008);
      intArray1[3] = (-2146556008);
      intArray1[4] = 1443;
      intArray1[5] = 1443;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-3707957), int0);
      assertArrayEquals(new int[] {1, (-2146556008), 1443, (-1172)}, intArray0);
      assertArrayEquals(new int[] {(-2146556008), 2331, (-2146556008), (-2146556008), 1443, 1443}, intArray1);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-536.4675836187396);
      doubleArray0[1] = (-2668.594757567);
      doubleArray0[2] = 1.44888888888888883E18;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-168.12);
      doubleArray0[5] = (-29.9880565);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-536.4675836187396), (-2668.594757567), 1.44888888888888883E18, 0.0, (-168.12), (-29.9880565), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2245.93421;
      doubleArray0[1] = (-2680.59);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2245.93421, (-2680.59)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2680.59);
      doubleArray2[1] = 2245.93421;
      doubleArray2[2] = (-2680.59);
      doubleArray2[3] = (-2680.59);
      doubleArray2[4] = 2245.93421;
      doubleArray2[5] = (-2680.59);
      doubleArray2[6] = (-2680.59);
      doubleArray2[7] = (-2680.59);
      doubleArray2[8] = (-2680.59);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2245.93421, (-2680.59)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2680.59), 2245.93421, (-2680.59), (-2680.59), 2245.93421, (-2680.59), (-2680.59), (-2680.59), (-2680.59)}, doubleArray2, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1472.847F;
      floatArray0[1] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1472.847F, Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(46.638454293012, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = 0.9689123630523682;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.9689123630523682);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1237.0;
      doubleArray0[1] = (-3.987);
      doubleArray0[2] = 9.219544613762692E-9;
      doubleArray0[3] = 1682.0;
      doubleArray0[4] = 1.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2087.8960453454097, double0, 0.01);
      assertArrayEquals(new double[] {1237.0, (-3.987), 9.219544613762692E-9, 1682.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1237.0, (-3.987), 9.219544613762692E-9, 1682.0, 1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      int int0 = 131;
      intArray0[0] = 131;
      intArray0[1] = 2146046513;
      int int1 = 93;
      intArray0[2] = 93;
      int int2 = 562;
      intArray0[3] = 562;
      intArray0[4] = (-2539);
      intArray0[5] = 211;
      int int3 = (-2609);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2609));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2533.345);
      doubleArray0[1] = 1954.6878340889866;
      doubleArray0[2] = 1.0;
      doubleArray0[5] = (-4649.327906);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1954.6878340889866);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2533.345), 1954.6878340889866, 1.0, 0.0, 1.0, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8572.383315353856, (-6614.311661329032), (-3.383819935837344), -0.0, (-3.383819935837344), Double.NaN, 3.383819935837344}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2533.345), 1954.6878340889866, 1.0, 0.0, 1.0, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5066.69), 3909.3756681779732, 2.0, 0.0, 2.0, Double.NaN, (-2.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.68435458E8}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.68435458E8}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1.34217729E8, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.68435458E8}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145372045, 2145372045);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 709.1875140048011;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 709.1875140048011, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 502946.9300203099, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 709.1875140048011, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 709.1875140048011, (-0.3594962557460113), 709.1875140048011, 709.1875140048011, 631.9289616383);
      assertEquals(448611.3665899996, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(709.1875140048011, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      int[] intArray0 = new int[7];
      intArray0[0] = 82;
      intArray0[1] = 756;
      intArray0[2] = 1;
      intArray0[3] = 2105;
      intArray0[4] = (-1528);
      intArray0[5] = (-6832);
      intArray0[6] = 1;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 756;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2223);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 134217729;
      doubleArray2[1] = (double) 134217729;
      doubleArray2[2] = (double) 134217729;
      doubleArray2[3] = (double) 134217729;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (double) 134217729;
      doubleArray2[6] = (double) 134217729;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, Double.NaN, 1.34217729E8, 1.34217729E8}, doubleArray2, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray2, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, Double.NaN, 1.34217729E8, 1.34217729E8}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2450.691);
      doubleArray0[2] = (-972.9282032044216);
      doubleArray0[3] = 6.879510005726846E10;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 904.2801230728506;
      doubleArray0[6] = (-3206.6529625206);
      doubleArray0[7] = 3448.60607656829;
      doubleArray0[8] = 6.879510005726846E10;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-2450.691), (-972.9282032044216), 6.879510005726846E10, 1.0, 904.2801230728506, (-3206.6529625206), 3448.60607656829, 6.879510005726846E10}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.159286126222868E22, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2450.691), (-972.9282032044216), 6.879510005726846E10, 1.0, 904.2801230728506, (-3206.6529625206), 3448.60607656829, 6.879510005726846E10}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3499);
      intArray0[1] = 2;
      intArray0[2] = 61;
      intArray0[3] = (-1);
      intArray0[4] = 2147483298;
      intArray0[5] = (-1723);
      intArray0[6] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-3499), 2, 61, (-1), 2147483298, (-1723), 1}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2147483298;
      doubleArray1[1] = (double) 2147483298;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3703.042181);
      doubleArray0[3] = 6.875169465347275E10;
      doubleArray0[4] = 0.041666663879186654;
      doubleArray0[5] = 1.2395317739455448E7;
      doubleArray0[6] = (-488.85981065654);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0, (-3703.042181), 6.875169465347275E10, 0.041666663879186654, 1.2395317739455448E7, (-488.85981065654)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4542475023869687E-11, (-5.3851398429528434E-8), 0.9998198023468425, 6.059364187910452E-13, 1.8025859863895973E-4, (-7.109231586646398E-9)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1889.6F;
      floatArray0[1] = (-566.75F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-566.75F);
      floatArray1[1] = 1889.6F;
      floatArray1[2] = (-566.75F);
      floatArray1[3] = 1889.6F;
      floatArray1[4] = 1889.6F;
      floatArray1[5] = (-566.75F);
      floatArray1[6] = (-566.75F);
      floatArray1[7] = 1889.6F;
      floatArray1[8] = (-566.75F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1889.6F, (-566.75F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-566.75F), 1889.6F, (-566.75F), 1889.6F, 1889.6F, (-566.75F), (-566.75F), 1889.6F, (-566.75F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 421.0;
      doubleArray0[1] = 952.1910386948;
      doubleArray0[2] = (-3013.52175);
      doubleArray0[3] = 1493.34980080412;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3520.698473237299, double0, 0.01);
      assertArrayEquals(new double[] {421.0, 952.1910386948, (-3013.52175), 1493.34980080412, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1588.7133362635);
      doubleArray1[1] = 1284.0;
      doubleArray1[2] = 1493.34980080412;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(17, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(17, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[4][2];
      doubleArray0[0] = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1151.8F;
      doubleArray1[1] = 1405.66992930341;
      doubleArray1[2] = 1405.66992930341;
      doubleArray1[3] = (double) 1151.8F;
      doubleArray1[4] = (double) 1151.8F;
      doubleArray1[6] = 1405.66992930341;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      MathArrays.scaleInPlace(4173588.1018014713, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {8.526373996964842E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8.526373996964842E9, double0, 0.01);
      assertArrayEquals(new double[] {8.526373996964842E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {8.526373996964842E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "`ia6}#iHjz3";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#f6hbz*$}(";
      stringArray0[5] = "REAL_FORMAT";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {8.526373996964842E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+DNO";
      stringArray0[1] = "+DNO";
      stringArray0[2] = "+DNO";
      stringArray0[3] = "+DNO";
      stringArray0[4] = "+DNO";
      stringArray0[5] = "+DNO";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertEquals(6, stringArray0.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertEquals(1, stringArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-405);
      intArray0[1] = 830;
      intArray0[2] = 3488;
      intArray0[3] = (-1745);
      intArray0[4] = 0;
      intArray0[5] = 1371;
      intArray0[6] = 1566;
      intArray0[7] = (-1);
      intArray0[8] = 1500;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-405), 830, 3488, (-1745), 0, 1371, 1566, (-1), 1500}, intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1151.8F;
      doubleArray0[1] = (double) 1151.8F;
      doubleArray0[2] = (double) 1151.8F;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 1151.8F;
      doubleArray0[6] = (double) 1151.8F;
      doubleArray0[7] = (double) 1151.8F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1151.800048828125, 1151.800048828125, 1151.800048828125, (-1.0), (-1.0), 1151.800048828125, 1151.800048828125, 1151.800048828125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1326643.3524804711, 1326643.3524804711, 1326643.3524804711, 1.0, 1.0, 1326643.3524804711, 1326643.3524804711, 1326643.3524804711}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1151.800048828125, 1151.800048828125, 1151.800048828125, (-1.0), (-1.0), 1151.800048828125, 1151.800048828125, 1151.800048828125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1326643.3524804711, 1326643.3524804711, 1326643.3524804711, 1.0, 1.0, 1326643.3524804711, 1326643.3524804711, 1326643.3524804711}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2653286.7049609423, 2653286.7049609423, 2653286.7049609423, 2.0, 2.0, 2653286.7049609423, 2653286.7049609423, 2653286.7049609423}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1151.8F;
      doubleArray3[1] = (double) 1151.8F;
      doubleArray3[2] = (double) 1151.8F;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (double) 1151.8F;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (double) 1151.8F;
      doubleArray3[7] = (-1.0);
      doubleArray3[8] = 1.304E19;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1315.44262713766;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 6.52E18;
      doubleArray0[4] = 3.1660099222737955E-7;
      doubleArray0[5] = (-853.584);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      doubleArray1[1] = 1315.44262713766;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1315.44262713766;
      doubleArray1[4] = 1.1730463525082348E-7;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1195.08);
      doubleArray0[2] = 1131.135403078305;
      doubleArray0[3] = 2096.29;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1195.08), 1131.135403078305, 2096.29}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1428216.2063999998, (-2703594.5950216413), (-3731001.20630288), 4742375.66823804, 4394431.7641}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1195.08);
      doubleArray2[2] = (-1195.08);
      doubleArray2[3] = 1131.135403078305;
      doubleArray2[4] = 2096.29;
      doubleArray2[5] = 2096.29;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 1131.135403078305;
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-1195.08), 1131.135403078305, 2096.29}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1195.08), (-1195.08), 1131.135403078305, 2096.29, 2096.29, 0.0, 0.0, 1131.135403078305}, doubleArray2, 0.01);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (-4699L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-4699L);
      longArray2[2] = (-4699L);
      longArray2[3] = (-4699L);
      longArray2[4] = (-4699L);
      longArray2[5] = (-4699L);
      longArray2[6] = (-4699L);
      longArray2[7] = (-4699L);
      longArray2[8] = (-6L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1151.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1151.8F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1151.8F;
      floatArray1[1] = 1151.8F;
      floatArray1[2] = 1151.8F;
      floatArray1[3] = 1151.8F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1151.8F;
      floatArray1[6] = 1151.8F;
      floatArray1[7] = 1151.8F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1151.8F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1151.8F, 1151.8F, 1151.8F, 1151.8F, 0.0F, 1151.8F, 1151.8F, 1151.8F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "].3q~n";
      stringArray0[3] = "pDT&3qu";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[6] = "pDT&3qu";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1689);
      floatArray0[1] = (float) (-80);
      floatArray0[2] = (float) (-80);
      floatArray0[3] = (float) (-1689);
      floatArray0[4] = (float) (-80);
      floatArray0[5] = (float) (-80);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1689.0F), (-80.0F), (-80.0F), (-1689.0F), (-80.0F), (-80.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2200;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 18;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2200);
      assertEquals(2, doubleArray0.length);
      assertEquals(2200, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 18.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 2,200
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2173.88983331468);
      doubleArray0[2] = (-2064.682148);
      doubleArray0[3] = 1481.2700408082;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3344.0798904115236, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-2173.88983331468), (-2064.682148), 1481.2700408082}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2943;
      int int1 = (-1804);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2943, (-1804));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(17, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1405.4909933651993;
      doubleArray2[1] = 1405.4909933651993;
      doubleArray2[2] = 1405.4909933651993;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1405.4909933651993;
      doubleArray2[6] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1405.66992930341;
      doubleArray0[1] = 1405.66992930341;
      doubleArray0[2] = 1405.66992930341;
      doubleArray0[3] = 4.3466666666666665E18;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1405.66992930341, 1405.66992930341, 1405.66992930341}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.889351111111111E37, double0, 0.01);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1405.66992930341, 1405.66992930341, 1405.66992930341}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1405.66992930341;
      doubleArray2[1] = 1.889351111111111E37;
      doubleArray2[2] = 1405.66992930341;
      doubleArray2[3] = 1.889351111111111E37;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1405.66992930341, 1.889351111111111E37, 1405.66992930341, 1.889351111111111E37}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.3466666666666665E18, 1405.66992930341, 1405.66992930341, 1405.66992930341}, doubleArray0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1405.66992930341, 1405.66992930341, 1405.66992930341, 4.3466666666666665E18}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1405.66992930341;
      doubleArray3[1] = 4.3466666666666665E18;
      doubleArray3[2] = 1405.66992930341;
      doubleArray3[3] = 4.3466666666666665E18;
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1405.66992930341, 1405.66992930341, 1405.66992930341, 4.3466666666666665E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1405.66992930341, 4.3466666666666665E18, 1405.66992930341, 4.3466666666666665E18}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2811.33985860682, 4.346666666666668E18, 2811.33985860682, 8.693333333333333E18}, doubleArray4, 0.01);
      
      double[] doubleArray5 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray5.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {1405.66992930341, 1405.66992930341, 1405.66992930341, 4.3466666666666665E18}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1405.66992930341, 1405.66992930341, 1405.66992930341, 4.3466666666666665E18}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {1405.66992930341, 1405.66992930341, 1405.66992930341, 4.3466666666666665E18}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 2431L;
      longArray1[1] = 460L;
      longArray1[2] = (-2052L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2431L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-3949L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-3949L);
      longArray4[1] = 460L;
      longArray4[2] = (-3949L);
      longArray4[3] = 47L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-3949L);
      longArray5[1] = 47L;
      longArray5[2] = 2431L;
      longArray5[3] = 2431L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-3949L);
      longArray6[1] = 460L;
      longArray6[2] = (-873L);
      longArray6[3] = 460L;
      longArray6[4] = 460L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-873L);
      longArray7[1] = (-2052L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,052 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 2432;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {7, 2432}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      doubleArray0[1] = 1405.66992930341;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2145620806;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 1347.262367, Double.NaN, 0.0, 173.0, Double.NaN, 2243.9654169, 3291.7759534650004);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "H(PGu1R3:-?d]GgJ#,";
      double[] doubleArray1 = MathArrays.scale((-1016.6073976361541), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 74, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (-1805.131899673481);
      doubleArray2[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H(PGu1R3:-?d]GgJ#,";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) 1151.8F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(1151.800048828125, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1151.800048828125;
      doubleArray1[1] = (-322.626);
      doubleArray1[2] = (double) 1151.8F;
      doubleArray1[3] = 1151.800048828125;
      doubleArray1[4] = (double) 1151.8F;
      doubleArray1[5] = (double) 1151.8F;
      doubleArray1[6] = 1151.800048828125;
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1474.426048828125, double1, 0.01);
      assertArrayEquals(new double[] {1151.800048828125, (-322.626), 1151.800048828125, 1151.800048828125, 1151.800048828125, 1151.800048828125, 1151.800048828125}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = 1151.8F;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) 1151.8F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1151.8F;
      doubleArray2[1] = (double) 1151.8F;
      double double0 = 1.1730463525082348E-7;
      doubleArray2[2] = 1.1730463525082348E-7;
      doubleArray2[3] = (double) 1151.8F;
      double double1 = 64.1384849157558;
      doubleArray2[4] = 64.1384849157558;
      double double2 = 3546.0;
      doubleArray2[5] = 3546.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 18
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 709.1875140048011;
      doubleArray0[0] = 709.1875140048011;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 1151.8F;
      floatArray0[0] = 1151.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1151.8F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1151.8F}, floatArray0, 0.01F);
      
      double double0 = 1.1730463525082348E-7;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2859.7;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2859.7}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(0.5039018405998233, 952.2649, 3213.21, 3213.21, 952.2649, 0.5039018405998233, 0.0, 0.5039018405998233);
      assertEquals(1.0325678200171698E7, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 952.2649;
      doubleArray1[1] = (-1767.0848975919);
      doubleArray1[2] = 3574.611294515;
      doubleArray1[3] = 952.2649;
      doubleArray1[4] = 952.2649;
      doubleArray1[5] = (-631.520573459);
      doubleArray1[6] = 3213.21;
      doubleArray1[7] = (-631.520573459);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {952.2649, (-1767.0848975919), 3574.611294515, 952.2649, 952.2649, (-631.520573459), 3213.21, (-631.520573459)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1942.22334248645;
      doubleArray1[1] = 1102.395354064797;
      doubleArray1[2] = 1448.8;
      doubleArray1[3] = (-3570.985);
      doubleArray1[4] = 1531.68458170941;
      doubleArray1[5] = 0.9166666666666666;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 7.2444444444444442E17;
      doubleArray1[1] = 1074.989448948749;
      doubleArray1[2] = (-2369.2759369696505);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 709.1875140048011;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1812.0F;
      doubleArray0[1] = (double) 0.0F;
      floatArray0[2] = 391.0F;
      floatArray0[3] = 3192.2039F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-942.23F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = 391.0F;
      floatArray1[3] = 3192.2039F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1812.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1812.0F, 0.0F, 391.0F, 3192.2039F, 3.4028235E38F, (-942.23F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, 391.0F, 3192.2039F, 0.0F, 1812.0F}, floatArray1, 0.01F);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(502946.9300203099, double0, 0.01);
      assertArrayEquals(new double[] {709.1875140048011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {709.1875140048011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {502946.9300203099, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2694.2953213, 2694.2953213, 2694.2953213, (-393.1103881));
      assertEquals(6200071.798966813, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-393.1103881);
      doubleArray0[1] = 6200071.798966813;
      doubleArray0[2] = 6200071.798966813;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-393.1103881), 6200071.798966813, 6200071.798966813}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-160);
      intArray0[1] = 9;
      intArray0[2] = 2147483632;
      intArray0[3] = 194;
      intArray0[4] = 3000;
      intArray0[5] = (-1842);
      intArray0[6] = 228;
      intArray0[7] = 2;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 194;
      intArray1[1] = 3000;
      intArray1[2] = 2147483632;
      intArray1[3] = 9;
      intArray1[4] = (-1842);
      intArray1[5] = (-160);
      intArray1[6] = 2;
      intArray1[7] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10280, int0);
      assertArrayEquals(new int[] {(-160), 9, 2147483632, 194, 3000, (-1842), 228, 2}, intArray0);
      assertArrayEquals(new int[] {194, 3000, 2147483632, 9, (-1842), (-160), 2, 2}, intArray1);
      
      double[] doubleArray2 = MathArrays.scale((-3586.1549046792097), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-393.1103881), 6200071.798966813, 6200071.798966813}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1409754.7463651628, (-2.223441789122809E10), (-2.223441789122809E10)}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-393.1103881), 6200071.798966813, 6200071.798966813}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-637.9971876977);
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-637.9971876977);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {407040.4115101743}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {407040.4115101743}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-407678.40869787196)}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 33;
      intArray0[1] = 1;
      intArray0[2] = 2146002420;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 587;
      intArray0[2] = 1;
      intArray0[3] = 42;
      intArray0[4] = 967;
      intArray0[5] = 587;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1, 587, 1, 42, 967, 587}, intArray0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 70.7F;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2160.4263F;
      doubleArray0[2] = (double) (-2870.3F);
      doubleArray0[3] = (double) 70.7F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 70.7F;
      doubleArray0[6] = 3120.3493469140394;
      doubleArray0[7] = (double) (-2870.3F);
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0F);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2160.42626953125, (-2870.300048828125), 70.69999694824219, 0.0, 70.69999694824219, 3120.3493469140394, (-2870.300048828125), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2160.42626953125, (-2870.300048828125), 70.69999694824219, 0.0, 70.69999694824219, 3120.3493469140394, (-2870.300048828125), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2160.42626953125, (-2870.300048828125), 70.69999694824219, 0.0, 70.69999694824219, 3120.3493469140394, (-2870.300048828125), 0.0}, doubleArray2, 0.01);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (-2408L);
      longArray1[1] = (-1217L);
      longArray1[2] = 3131L;
      longArray1[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,408 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.25534194707870483;
      doubleArray0[1] = 0.25534194707870483;
      doubleArray0[2] = 0.25534194707870483;
      doubleArray0[3] = 0.25534194707870483;
      doubleArray0[4] = 0.25534194707870483;
      MathArrays.scaleInPlace(0.25534194707870483, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0651995099379441, 0.0651995099379441, 0.0651995099379441, 0.0651995099379441, 0.0651995099379441}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-2.356194490192345), 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-637.9971876977);
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-637.9971876977);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {407040.4115101743}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-637.9971876977)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {407040.4115101743}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-407678.40869787196)}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 33;
      intArray0[1] = 1;
      intArray0[2] = 2146002420;
      intArray0[3] = (-83);
      intArray0[4] = 134217729;
      intArray0[5] = 51;
      intArray0[6] = 1538;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {33, 1, 2146002420, (-83), 134217729, 51, 1538}, intArray1);
      assertArrayEquals(new int[] {33, 1, 2146002420, (-83), 134217729, 51, 1538}, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1302;
      intArray0[1] = 711;
      intArray0[2] = (-1);
      intArray0[3] = 2;
      intArray0[4] = 1431;
      int int0 = 1298;
      intArray0[5] = 1298;
      intArray0[6] = 134217729;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 2;
      intArray1[2] = 134217729;
      intArray1[3] = 1431;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-650);
      double double0 = MathArrays.linearCombination(0.0, (double) (-650), 0.0, 1.7976931348623157E308);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-2726.600056), (-2726.600056), 1681.0, (-3394.3855), (-2661.78));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-29);
      doubleArray0[1] = (double) (-29);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-29.0), (-29.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7827257129423813E-8);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-29.0), (-29.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.913628564711906E-9, 8.913628564711906E-9}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-29);
      intArray0[1] = (-29);
      intArray0[2] = (-29);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-29), (-29), (-29)}, intArray0);
      assertArrayEquals(new int[] {(-29), (-29), (-29)}, intArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.2605774406171803E-8, double0, 0.01);
      assertArrayEquals(new double[] {(-29.0), (-29.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.913628564711906E-9, 8.913628564711906E-9}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2530.49737245), (-631.520573459), (-630.2911855195866), (double) 134217729, 0.0, (-631.520573459), (double) 134217729, 1.0);
      assertEquals((-8.446043573900482E10), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (-630.2911855195866);
      doubleArray0[2] = (-2530.49737245);
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 539061.3883012189;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, (-630.2911855195866), (-2530.49737245), 0.0, 0.0, 539061.3883012189}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 400;
      intArray0[5] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 400, 0, 134217729}, intArray0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, (-630.2911855195866), (-2530.49737245), 0.0, 0.0, 539061.3883012189}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2773.1378;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2773.1378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7690293.25778884, double1, 0.01);
      assertArrayEquals(new double[] {2773.1378, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2773.1378, 0.9489846229553223, 0.0, 7690293.25778884);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2631.6651295361517, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "";
      stringArray0[3] = "H(PGu1R3:-?d]GgJ#,";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[1] = "";
      stringArray1[2] = "H(PGu1R3:-?d]GgJ#,";
      stringArray1[3] = "";
      stringArray1[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray1[5] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, true);
      assertEquals(6, stringArray1.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      doubleArray0[1] = 1405.66992930341;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2042.93614726488, 1405.66992930341, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6149496.051949325, double0, 0.01);
      assertArrayEquals(new double[] {2042.93614726488, 1405.66992930341, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2042.93614726488, 1405.66992930341, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(2042.93614726488, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2042.93614726488, 1405.66992930341, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4173588.1018014713, 2871693.909697205, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.valueOf("DECREASING");
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection1);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1405.66992930341, 0.0, 0.0, 2042.93614726488}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1405.66992930341, 0.0, 0.0, 2042.93614726488}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2811.33985860682, 0.0, 0.0, 4085.87229452976}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray4.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1405.66992930341, 0.0, 0.0, 2042.93614726488}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4173588.1018014713, 2871693.909697205, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2811.33985860682, 0.0, 0.0, 4085.87229452976}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-80);
      intArray0[1] = 208;
      intArray0[2] = 1610;
      intArray0[3] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-80), 208, 1610, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-80), 208, 1610, (-1)}, intArray1);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection2, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 245.4793818093;
      doubleArray0[1] = 245.4793818093;
      doubleArray0[2] = 245.4793818093;
      doubleArray0[3] = 245.4793818093;
      doubleArray0[4] = 245.4793818093;
      doubleArray0[5] = 245.4793818093;
      doubleArray0[6] = 245.4793818093;
      doubleArray0[7] = 245.4793818093;
      doubleArray0[8] = 245.4793818093;
      MathArrays.scaleInPlace(245.4793818093, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609, 60260.12689347609}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (60,260.127 <= 60,260.127)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[1] = "";
      stringArray0[2] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[3] = "";
      stringArray0[4] = "$-44*:3w &d,5%OP";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[8] = "Ds:BrH#G1d(#}&Nfp";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-528.738266151), (-528.738266151), (-1341.0));
      assertEquals(709038.0149084909, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-528.738266151);
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[1] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[2] = "Ds:BrH#G1d(#}&Nfp";
      stringArray0[3] = "Ds:BrH#G1d(#}&Nfp";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((-422.890387), (-2.957007209750105E-8), 3.834E-20, 1.2599210498948732, (-2.957007209750105E-8), (-883.0), (-2.957007209750105E-8), 2417002.0984231746);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.07143231103728957), double1, 0.01);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, (-528.738266151)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 709.1875140048011;
      doubleArray0[0] = 709.1875140048011;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double3 = 3984.3;
      doubleArray0[3] = 3984.3;
      double double4 = (-4539.151195763);
      doubleArray0[4] = (-4539.151195763);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {709.1875140048011, 0.0, Double.NEGATIVE_INFINITY, 3984.3, (-4539.151195763), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {323305.1525885041, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      long[] longArray0 = new long[9];
      longArray0[0] = 1738L;
      longArray0[1] = 1738L;
      longArray0[2] = 1738L;
      longArray0[3] = 1738L;
      longArray0[4] = 1738L;
      longArray0[5] = 1738L;
      longArray0[7] = 1738L;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1151.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1151.8F}, floatArray0, 0.01F);
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0E-5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "$-44*:3w &d,5%OP";
      stringArray0[2] = "";
      stringArray0[3] = "$-44*:3w &d,5%OP";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-2174);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1, (-2174)}, intArray0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(568.59929, double1, 0.01);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2160.4263F;
      floatArray0[1] = 70.7F;
      floatArray0[2] = (-2870.3F);
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2160.4263F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2160.4263F, 70.7F, (-2870.3F), 3.4028235E38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2160.4263F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2095);
      intArray0[1] = 2141822931;
      intArray0[2] = 13;
      intArray0[3] = (-1853);
      intArray0[4] = 1;
      intArray0[5] = 5889;
      intArray0[6] = (-312);
      int[] intArray1 = MathArrays.copyOf(intArray0, 633);
      assertEquals(633, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2095), 2141822931, 13, (-1853), 1, 5889, (-312)}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1853), (-1831));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[][] longArray1 = new long[9][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 1738L;
      longArray2[1] = 1738L;
      longArray2[2] = 1738L;
      longArray2[3] = 1738L;
      longArray2[4] = 1738L;
      longArray2[5] = 1738L;
      longArray2[6] = 1738L;
      longArray2[7] = 1738L;
      longArray2[8] = 1738L;
      longArray1[6] = longArray2;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1835.550638);
      doubleArray0[0] = (-1835.550638);
      double double1 = 430215.5233102725;
      doubleArray0[1] = 430215.5233102725;
      double double2 = 2734.8;
      doubleArray0[2] = 2734.8;
      doubleArray0[3] = 2417002.0984231746;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1835.550638), 430215.5233102725, 2734.8, 2417002.0984231746}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3671.101276), 860431.046620545, 5469.6, 4834004.196846349}, doubleArray1, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1738L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1738L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1738L;
      doubleArray0[2] = (double) 1738L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1,738)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2773.1378;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-1074.989448948749);
      int[] intArray0 = new int[9];
      intArray0[0] = 1307;
      intArray0[1] = 1307;
      intArray0[2] = 1307;
      intArray0[3] = (-542);
      intArray0[4] = 17;
      intArray0[5] = (-542);
      intArray0[6] = 3927;
      intArray0[7] = 1307;
      intArray0[8] = 1307;
      int[] intArray1 = MathArrays.copyOf(intArray0, 417);
      assertEquals(9, intArray0.length);
      assertEquals(417, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1307, 1307, 1307, (-542), 17, (-542), 3927, 1307, 1307}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2773.1378, (-20.0), (-1074.989448948749), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5546.2756, (-40.0), (-2149.978897897498), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(417, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1307, 1307, 1307, (-542), 17, (-542), 3927, 1307, 1307}, intArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((double) 3927, 0.01745329052209854, (double) (-542), (-1074.989448948749), (double) (-542), (-20.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(593552.8204021022, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-1515.96);
      doubleArray0[2] = 57.840608;
      doubleArray0[3] = 4354.0;
      doubleArray0[4] = (-11.165);
      doubleArray0[5] = 1040.950006;
      doubleArray0[6] = 2320.17243639;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, (-1515.96), 57.840608, 4354.0, (-11.165), 1040.950006, 2320.17243639, 1.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3.2036122560026415E7, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-1515.96), 57.840608, 4354.0, (-11.165), 1040.950006, 2320.17243639, 1.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (-5870L);
      longArray1[1] = (-1131L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-5870L);
      longArray2[1] = (-1131L);
      longArray2[2] = (-5870L);
      longArray2[3] = (-1131L);
      longArray2[4] = (-1131L);
      longArray2[5] = (-5870L);
      longArray2[6] = (-5870L);
      longArray2[7] = (-5870L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1131L);
      longArray3[1] = (-5870L);
      longArray3[2] = (-5870L);
      longArray3[3] = (-5034868814120038111L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-5870L);
      longArray4[1] = (-5034868814120038111L);
      longArray4[2] = (-5870L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-5034868814120038111L);
      longArray6[1] = (-5034868814120038111L);
      longArray6[2] = (-1131L);
      longArray6[3] = (-5034868814120038111L);
      longArray6[4] = (-1131L);
      longArray6[5] = (-5870L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (-1522L);
      longArray7[1] = (-5034868814120038111L);
      longArray7[2] = (-5034868814120038111L);
      longArray7[3] = (-5034868814120038111L);
      longArray7[4] = (-645L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-5034868814120038111L);
      longArray8[1] = (-5034868814120038111L);
      longArray8[2] = (-1131L);
      longArray8[3] = (-1131L);
      longArray8[4] = (-5034868814120038111L);
      longArray8[5] = (-5870L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = (-1131L);
      longArray9[1] = (-645L);
      longArray9[2] = (-5034868814120038111L);
      longArray9[3] = (-5034868814120038111L);
      longArray9[4] = 4626L;
      longArray9[5] = (-5034868814120038111L);
      longArray9[6] = (-645L);
      longArray9[7] = (-1522L);
      longArray9[8] = (-1522L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = 74;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1151.8F;
      floatArray0[1] = 1151.8F;
      floatArray0[2] = 1151.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1151.8F, 1151.8F, 1151.8F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1151.8F, 1151.8F, 1151.8F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.3594962557460113);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-0.3594962557460113), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 636;
      intArray0[1] = 636;
      int int2 = (-650);
      intArray0[2] = (-650);
      int int3 = 2171;
      intArray0[3] = 2171;
      int int4 = 2892;
      intArray0[4] = 2892;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) (-650);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 636;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      intArray0[4] = 2892;
      intArray0[5] = 2459;
      intArray0[6] = (-8);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 636, (-650), 2171, 2892, 2459, (-8)}, intArray0);
      
      MathArrays.scaleInPlace(2459, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1398185.65411), 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination((double) (-29), (-5.207000323380292E-8), (double) (-29), (-630.2911855195866), (double) 134217729, (double) 134217729, 1327.1593017561977, (-3726.17983281));
      assertEquals(1.8014398772990484E16, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-897.17853), 2313.9752967500376, (-0.3058015757857271), 1.8014398772990484E16);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.508831533689007E15), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(323305.1525885041, double0, 0.01);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertEquals(2, doubleArray0.length);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.625;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2470;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2470}, intArray0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2155.37);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2155.37}, doubleArray1, 0.01);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2470}, intArray0);
      
      Double[] doubleArray2 = new Double[6];
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray2[0] = double1;
      doubleArray2[1] = (Double) 0.625;
      doubleArray2[5] = (Double) 0.625;
      doubleArray2[3] = (Double) 0.625;
      doubleArray2[4] = (Double) 0.625;
      Double double2 = new Double((-2937.76));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2937.76), (double)double2, 0.01);
      
      doubleArray2[5] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      doubleArray0[1] = 1405.66992930341;
      doubleArray0[2] = 1338.409;
      doubleArray0[3] = 35.41281183;
      doubleArray0[4] = (-1366.933957);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1331.375702741);
      int[] intArray0 = new int[1];
      intArray0[0] = (-542);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1307);
      assertEquals(1, intArray0.length);
      assertEquals(1307, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-542)}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2042.93614726488, 1405.66992930341, 1338.409, 35.41281183, (-1366.933957), Double.NaN, (-1331.375702741)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4085.87229452976, 2811.33985860682, 2676.818, 70.82562366, (-2733.867914), Double.NaN, (-2662.751405482)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-542)}, intArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1738L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1738L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1738L;
      doubleArray0[2] = (double) 1738L;
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3726.17983281);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-631.520573459);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1619.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3.141592653589793;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      intArray0[4] = 2892;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-568.59929), 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.linearCombination((double) (-29), (-5.207000323380292E-8), (double) (-29), (-630.2911855195866), (double) 134217729, (double) 134217729, 1327.1593017561977, (-3726.17983281));
      assertEquals(1.8014398772990484E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1844.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2270.196697819751;
      doubleArray0[3] = (-1736.9383297495076);
      doubleArray0[4] = 211.8059;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1820.4076696006612;
      doubleArray0[7] = 907.4343;
      doubleArray0[8] = 226.722;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 907.4343;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 2270.196697819751;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-3942.72168847), 0.0, (-1.0), (-3942.72168847), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 721.0612818;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 2104.572118;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (721.061 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 460L;
      longArray2[2] = 1924L;
      longArray2[3] = 0L;
      longArray2[4] = 2147483647L;
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1924L;
      longArray3[1] = 1924L;
      longArray3[2] = 336L;
      longArray3[3] = 0L;
      longArray3[4] = 2147483647L;
      longArray3[5] = 460L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 336L;
      doubleArray0[1] = (double) 336L;
      doubleArray0[2] = (double) 1924L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {336.0, 336.0, 1924.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "$-44*:3w &d,5%OP";
      stringArray0[3] = "Ds:BrH#G1d(#}&Nfp";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1738L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1738L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1738L;
      doubleArray0[1] = (double) 1738L;
      doubleArray0[2] = (double) 1738L;
      doubleArray0[3] = 1738.0;
      doubleArray0[4] = (double) 1738L;
      doubleArray0[5] = (double) 1738L;
      doubleArray0[6] = (double) 1738L;
      doubleArray0[7] = (double) 1738L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1738L);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {217.25, 217.25, 217.25, 217.25, 217.25, 217.25, 217.25, 217.25}, doubleArray1, 0.01);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1955.25, 1955.25, 1955.25, 1955.25, 1955.25, 1955.25, 1955.25, 1955.25}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0, 1738.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {217.25, 217.25, 217.25, 217.25, 217.25, 217.25, 217.25, 217.25}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1405.66992930341;
      doubleArray0[1] = 35.41281183;
      doubleArray0[2] = 1338.409;
      doubleArray0[3] = (-1331.375702741);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1366.933957);
      doubleArray0[6] = (-1331.375702741);
      doubleArray0[8] = 1405.66992930341;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1338.409, 0.0, 1405.66992930341, 1405.66992930341, (-1331.375702741), (-1331.375702741), (-1366.933957), Double.NaN, 35.41281183}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-542);
      intArray0[1] = (-542);
      intArray0[2] = 1307;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-542));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[4];
      float float0 = 2160.4263F;
      floatArray0[0] = 2160.4263F;
      floatArray0[1] = 70.7F;
      float float1 = (-2870.3F);
      floatArray0[2] = (-2870.3F);
      float float2 = 3.4028235E38F;
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2160.4263F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2160.4263F, 70.7F, (-2870.3F), 3.4028235E38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2160.4263F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2095);
      intArray0[1] = 2141822931;
      intArray0[2] = 13;
      int int0 = 6;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2160.4263F;
      floatArray0[1] = 70.7F;
      floatArray0[2] = (-2870.3F);
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2160.4263F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2160.4263F, 70.7F, (-2870.3F), 3.4028235E38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2160.4263F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2095);
      intArray0[1] = 2141822931;
      intArray0[2] = 13;
      intArray0[3] = (-1853);
      intArray0[4] = 1;
      intArray0[5] = 5889;
      intArray0[6] = (-312);
      int[] intArray1 = MathArrays.copyOf(intArray0, 633);
      assertEquals(633, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2095), 2141822931, 13, (-1853), 1, 5889, (-312)}, intArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1853), (-1831));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 709.1875140048011;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 3984.3;
      doubleArray0[4] = (-4539.151195763);
      doubleArray0[5] = (-888.61416);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-438.93502);
      doubleArray0[8] = 2.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {709.1875140048011, 0.0, Double.NEGATIVE_INFINITY, 3984.3, (-4539.151195763), (-888.61416), Double.NaN, (-438.93502), 2.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(606.631553453097, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {709.1875140048011, 0.0, Double.NEGATIVE_INFINITY, 3984.3, (-4539.151195763), (-888.61416), Double.NaN, (-438.93502), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {430215.5233102725, 0.0, Double.NEGATIVE_INFINITY, 2417002.0984231746, (-2753592.3412441914), (-539061.3883012189), Double.NaN, (-266271.83304756624), 1213.263106906194}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {709.1875140048011, 0.0, Double.NEGATIVE_INFINITY, 3984.3, (-4539.151195763), (-888.61416), Double.NaN, (-438.93502), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {430215.5233102725, 0.0, Double.NEGATIVE_INFINITY, 2417002.0984231746, (-2753592.3412441914), (-539061.3883012189), Double.NaN, (-266271.83304756624), 1213.263106906194}, doubleArray1, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1475.144369431805);
      doubleArray0[1] = 58.04395171;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1475.144369431805), 58.04395171, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(58.04395171, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1475.144369431805), 58.04395171, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-85623.2085445781), 3369.100330112812, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3.4028235E38F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1475.144369431805), 58.04395171, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-85623.2085445781), 3369.100330112812, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-87098.3529140099), 3427.144281822812, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      int int0 = (-2194);
      intArray0[0] = (-2194);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 166;
      intArray0[5] = 2;
      intArray0[6] = 2394;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-2194), 0, 1, 0, 166, 2, 2394}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-2194));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-95.17426073026);
      doubleArray0[3] = (-1855.43579954);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), (-95.17426073026), (-1855.43579954)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1.304E19, (-1855.43579954), 16.2221097, (-2751.1579681734793), (-2751.1579681734793), (-1855.43579954));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.4194882826001594E22), double1, 0.01);
      
      MathArrays.scaleInPlace(16.2221097, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-16.2221097), (-1543.92729818268), (-30099.083081445093)}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), 6718);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2527.974027080386);
      doubleArray0[3] = 1069.62862135;
      doubleArray0[4] = (-4412.384873847);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = (-378.366072);
      doubleArray0[7] = 116.573798;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2527.974027080386), 1069.62862135, (-4412.384873847), 1.7976931348623157E308, (-378.366072), 116.573798}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = null;
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1520.2;
      doubleArray0[3] = 986.692;
      doubleArray0[4] = (-3.141592653589793);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1520.2, 986.692, (-3.141592653589793)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1084);
      intArray1[1] = (-3646);
      intArray1[2] = 2304;
      intArray1[3] = 3113;
      intArray1[4] = 251;
      intArray1[5] = 2754;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1084), (-3646), 2304, 3113, 251, 2754}, intArray1);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 251;
      longArray1[1] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1520.2;
      doubleArray0[3] = 986.692;
      doubleArray0[4] = (-3.141592653589793);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 1520.2, 986.692, (-3.141592653589793)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1084);
      intArray1[1] = (-3646);
      intArray1[2] = 2304;
      intArray1[3] = 3108;
      intArray1[4] = 251;
      intArray1[5] = 2754;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1084), (-3646), 2304, 3108, 251, 2754}, intArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3108, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.625;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.625}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.390625}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[1];
      int int0 = 2470;
      intArray0[0] = 2470;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2470}, intArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 2155.37);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2155.37}, doubleArray3, 0.01);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2470}, intArray0);
      
      Double[] doubleArray4 = new Double[6];
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray4[0] = double1;
      doubleArray4[1] = (Double) 0.625;
      doubleArray4[2] = (Double) 0.625;
      doubleArray4[3] = (Double) 0.625;
      doubleArray4[4] = (Double) 0.625;
      Double double2 = new Double((-2937.76));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2937.76), (double)double2, 0.01);
      
      doubleArray4[5] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray4.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-751.80377567);
      double double0 = 887.045623016;
      doubleArray0[1] = 887.045623016;
      double double1 = 1529.91;
      doubleArray0[2] = 1529.91;
      doubleArray0[3] = 0.0;
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {(-751.80377567), 887.045623016, 1529.91, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      long long0 = (-464L);
      longArray0[1] = (-464L);
      long long1 = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 947L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -464 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2042.93614726488;
      doubleArray0[1] = 1405.66992930341;
      doubleArray0[2] = 1338.409;
      doubleArray0[3] = 35.41281183;
      doubleArray0[4] = (-1366.933957);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1331.375702741);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1405.66992930341, Double.NaN, 1338.409, 35.41281183, (-1331.375702741), (-1366.933957), 2042.93614726488}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-542);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1307);
      assertEquals(1, intArray0.length);
      assertEquals(1307, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-542)}, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1405.66992930341, Double.NaN, 1338.409, 35.41281183, (-1331.375702741), (-1366.933957), 2042.93614726488}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2811.33985860682, Double.NaN, 2676.818, 70.82562366, (-2662.751405482), (-2733.867914), 4085.87229452976}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-542)}, intArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2188;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2188, 2188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2151.7978095701;
      doubleArray0[1] = (-846.0998911899);
      doubleArray0[2] = 3057.9846887;
      doubleArray0[3] = 1309.2052944798;
      doubleArray0[4] = (-2106.38803237);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-525));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1738L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1738L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1738L;
      doubleArray0[1] = (double) 1738L;
      doubleArray0[2] = (double) 1738L;
      doubleArray0[3] = 40.7791;
      doubleArray0[4] = (double) 1738L;
      doubleArray0[5] = (double) 1738L;
      doubleArray0[6] = (double) 1738L;
      doubleArray0[7] = (double) 1738L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1738L);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1738.0, 1738.0, 1738.0, 40.7791, 1738.0, 1738.0, 1738.0, 1738.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {247.45626796834557, 247.45626796834557, 247.45626796834557, 5.806124221581105, 247.45626796834557, 247.45626796834557, 247.45626796834557, 247.45626796834557}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1738L;
      doubleArray2[1] = (double) 1738L;
      doubleArray2[2] = 40.7791;
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3476.0, 3476.0, 81.5582}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1738.0, 1738.0, 40.7791}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-175);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-175), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-165.61), (-4191.14950374), 3120.4834, 0.0, 3120.4834, (-1.0));
      assertEquals(690975.7859143815, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1757;
      intArray0[1] = (-79);
      intArray0[2] = (-3356);
      intArray0[3] = 0;
      intArray0[4] = 232;
      intArray0[5] = 203;
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 232);
      assertEquals(7, intArray0.length);
      assertEquals(232, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1757, (-79), (-3356), 0, 232, 203, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 203;
      doubleArray0[1] = (double) (-3356);
      doubleArray0[2] = 690975.7859143815;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1757;
      doubleArray0[5] = 690975.7859143815;
      doubleArray0[6] = 3120.4834;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 920.0;
      doubleArray0[2] = (-4165.3177489);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-227.9);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 920.0, (-4165.3177489), 0.0, (-227.9), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 172;
      intArray0[1] = (-727);
      intArray0[2] = 0;
      intArray0[3] = 223;
      intArray0[4] = 0;
      intArray0[5] = 2839;
      intArray0[6] = 0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 172;
      intArray1[2] = (-727);
      intArray1[3] = 0;
      intArray1[4] = 2839;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = (-3619);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4187.587014021321, double1, 0.01);
      assertArrayEquals(new int[] {0, 172, (-727), 0, 2839, 0, 0, (-3619)}, intArray1);
      assertArrayEquals(new int[] {172, (-727), 0, 223, 0, 2839, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3726.17983281);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-631.520573459);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1619.0;
      doubleArray0[6] = 3.141592653589793;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1 >= -631.521)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 645.366F;
      floatArray0[2] = 907.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 645.366F, 907.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      long[][] longArray0 = new long[9][6];
      long[] longArray1 = new long[7];
      longArray1[0] = 453L;
      longArray1[1] = (-1L);
      longArray1[2] = 0L;
      longArray1[3] = 4886L;
      longArray1[4] = (-148L);
      longArray1[5] = 9218868437227405312L;
      longArray1[6] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 9218868437227405312L;
      longArray2[1] = 4886L;
      longArray2[2] = (-148L);
      longArray2[3] = 453L;
      longArray2[4] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1L);
      longArray4[1] = (-148L);
      longArray4[2] = (-148L);
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (-148L);
      longArray6[1] = 4886L;
      longArray6[2] = 9218868437227405312L;
      longArray6[3] = (-952L);
      longArray6[4] = 453L;
      longArray6[5] = (-148L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-148L);
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = (-1L);
      longArray7[4] = (-1L);
      longArray7[5] = (-1073741824L);
      longArray7[6] = (-952L);
      longArray7[7] = (-148L);
      longArray7[8] = (-148L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = 4886L;
      longArray8[1] = 0L;
      longArray8[2] = (-952L);
      longArray8[3] = (-952L);
      longArray8[4] = (-1073741824L);
      longArray8[5] = 0L;
      longArray8[6] = 4886L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = 9218868437227405312L;
      longArray9[1] = 9218868437227405312L;
      longArray9[2] = 713L;
      longArray9[3] = (-148L);
      longArray9[4] = (-1073741824L);
      longArray9[5] = (-1073741824L);
      longArray9[6] = (-148L);
      longArray9[7] = 9218868437227405312L;
      longArray9[8] = (-148L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3.4028235E38F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3.4028235E38F;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1844.4);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2270.196697819751;
      doubleArray0[3] = (-1736.9383297495076);
      doubleArray0[4] = 211.8059;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1820.4076696006612;
      doubleArray0[7] = 907.4343;
      doubleArray0[8] = 226.722;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1844.4), 0.0, 2270.196697819751, (-1736.9383297495076), 211.8059, Double.NaN, 1820.4076696006612, 907.4343, 226.722}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 907.4343;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 2270.196697819751;
      doubleArray2[3] = 1820.4076696006612;
      doubleArray2[4] = 907.4343;
      doubleArray2[5] = 2270.196697819751;
      doubleArray2[6] = 1.304E19;
      doubleArray2[7] = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1965.137355935;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1965.137355935;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = 2.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 2147483647L;
      longArray1[2] = 0L;
      longArray1[3] = 1023L;
      longArray1[4] = 5262L;
      longArray1[5] = 9218868437227405312L;
      longArray1[6] = (-5519L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1023L;
      longArray2[1] = 5262L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1023L;
      longArray3[1] = (-5519L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = (-5519L);
      longArray5[2] = (-5519L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-5519L);
      longArray6[1] = (-903L);
      longArray6[2] = 1023L;
      longArray6[3] = 2147483647L;
      longArray6[4] = 2147483647L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1323.30516736);
      doubleArray0[0] = (-1323.30516736);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      int int0 = 270;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 270);
      assertEquals(4, doubleArray0.length);
      assertEquals(270, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1323.30516736), Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = new double[5][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 270
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 460L;
      longArray2[2] = 1924L;
      longArray2[3] = 0L;
      longArray2[4] = 2147483647L;
      longArray2[5] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1924L;
      longArray3[1] = 1924L;
      longArray3[2] = 336L;
      longArray3[3] = 0L;
      longArray3[4] = 2147483647L;
      longArray3[5] = 460L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 0L;
      longArray0[5] = longArray6;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-896.49704027899);
      doubleArray0[1] = (-3266.874452070652);
      doubleArray0[2] = 42.9823877458463;
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 1086.76919599687;
      doubleArray0[6] = 388.16;
      doubleArray0[7] = 1086.8021860336623;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-896.49704027899), (-3266.874452070652), 42.9823877458463, 1.0E-5, (-20.0), 1086.76919599687, 388.16, 1086.8021860336623, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {803706.9432289889, 1.0672468685591921E7, 1847.4856563342785, 1.0000000000000002E-10, 400.0, 1181067.285367683, 150668.18560000003, 1181138.9915675472, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-947.78);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 296.937068983;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-947.78), 0.0, 296.937068983}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 74;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 74, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1466.368461538;
      doubleArray0[1] = 790.5047;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1665.8733882607678, double0, 0.01);
      assertArrayEquals(new double[] {1466.368461538, 790.5047}, doubleArray0, 0.01);
      
      int int0 = 2;
      int int1 = (-3651);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 252, (-3651));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      int int1 = (-29);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729, (-29));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2200;
      intArray0[3] = (-534);
      intArray0[4] = (-4365);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 1, 2200, (-534), (-4365)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-528.738266151), (-528.738266151), (-1341.0));
      assertEquals(709038.0149084909, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 709038.0149084909;
      doubleArray0[1] = (-528.738266151);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {709038.0149084909, (-528.738266151)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1341.0);
      doubleArray2[1] = 0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-9.508199779922863E8), double1, 0.01);
      assertArrayEquals(new double[] {709038.0149084909, (-528.738266151)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1341.0), 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {709038.0149084909, (-528.738266151)}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(1316.9, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {709038.0149084909, (-528.738266151)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.337321618329917E8, (-696295.4226942519)}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1440.308518);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,440.309 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-165.61);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-165.61);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-165.61), 0.0, (-165.61), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2773.1378;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = (-1074.989448948749);
      doubleArray0[3] = (-2327.820598368);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1656.4246593480532);
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2773.1378, (-20.0), (-1074.989448948749), (-2327.820598368), -0.0, (-1.0), 0.0, (-1656.4246593480532), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2242);
      intArray0[1] = 0;
      intArray0[2] = 138;
      intArray0[3] = 146;
      intArray0[4] = (-4325);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1178;
      intArray0[8] = (-657);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-4325), (double) 0, (double) 0, (double) (-657), (-1.0), (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1178;
      floatArray0[1] = (float) 138;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-2242);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1178;
      doubleArray0[1] = (double) (-2242.0F);
      doubleArray0[2] = (double) (-2242.0F);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) 1178;
      doubleArray0[8] = (double) 138;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[4];
      intArray0[1] = (-650);
      intArray0[2] = 2892;
      intArray0[3] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.scaleInPlace((-0.7853981633974483), doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      double double0 = 1.0;
      double double1 = 0.0;
      MathArrays.linearCombination(Double.POSITIVE_INFINITY, 3589.110082446873, 1.0, Double.POSITIVE_INFINITY, 3589.110082446873, 1.0, 0.0, 1.7976931348623157E308);
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1153.7114F);
      floatArray0[1] = (-601.0156F);
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[4];
      long long0 = 1L;
      longArray0[0] = 1L;
      longArray0[1] = (-2063L);
      longArray0[2] = 1055L;
      longArray0[3] = (-1179L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,063 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-568.59929);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 636;
      intArray0[2] = (-650);
      intArray0[3] = 2171;
      intArray0[4] = 2892;
      intArray0[5] = 2459;
      intArray0[6] = (-8);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.scaleInPlace(2459, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1727.0, 1727.0, 1727.0, 0.0, 0.0, 1727.0);
      assertEquals(2982529.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2982529.0;
      doubleArray0[3] = 0.0;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 169.83F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 293;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 123;
      intArray0[4] = 0;
      intArray0[5] = 2871;
      intArray0[6] = 0;
      intArray0[7] = 140;
      intArray0[8] = 175;
      int[] intArray1 = MathArrays.copyOf(intArray0, 140);
      assertEquals(140, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1078.297231206);
      doubleArray0[1] = 0.0;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
