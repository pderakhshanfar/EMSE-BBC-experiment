/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:53:43 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, String> pair0 = new Pair<Object, String>(class0, "p#L");
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 17;
      int int1 = 2147482118;
      // Undeclared exception!
      MathArrays.buildArray(field0, 17, 2147482118);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2549.0;
      doubleArray0[1] = 6.123233995736766E-17;
      doubleArray0[2] = 557.33;
      doubleArray0[3] = 2234.33803;
      doubleArray0[4] = (-1589.848317);
      doubleArray0[5] = 4.3466666666666665E18;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1831.1342556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2392;
      intArray0[1] = 176;
      intArray0[2] = (-1467);
      intArray0[3] = 1;
      intArray0[4] = 1638;
      intArray0[5] = (-3090);
      intArray0[6] = (-3032);
      intArray0[7] = (-1588);
      intArray0[8] = 2510;
      int[] intArray1 = MathArrays.copyOf(intArray0, 144);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(144, intArray1.length);
      assertArrayEquals(new int[] {2392, 176, (-1467), 1, 1638, (-3090), (-3032), (-1588), 2510}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 144;
      doubleArray0[1] = 0.008333333333333333;
      doubleArray0[2] = (double) (-1467);
      doubleArray0[3] = (double) 1638;
      doubleArray0[4] = (double) 1638;
      doubleArray0[5] = (double) 1638;
      doubleArray0[6] = (double) (-3032);
      doubleArray0[7] = (double) (-3090);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 400;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {400}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2146071554;
      doubleArray0[1] = (double) (-2735);
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-4.4898513621794836));
      assertEquals((-4.4898513621794836), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(5.669184079525E-24);
      assertEquals(5.669184079525E-24, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (-4.4898513621794836);
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 5.669184079525E-24;
      doubleArray1[5] = (double) doubleArray0[1];
      doubleArray1[6] = 5.669184079525E-24;
      doubleArray1[7] = (double) doubleArray0[1];
      doubleArray1[8] = (-4.4898513621794836);
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(10.039612854703353, double2, 0.01);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-4.4898513621794836), (-4.4898513621794836), (-4.4898513621794836), (-4.4898513621794836), 5.669184079525E-24, 5.669184079525E-24, 5.669184079525E-24, 5.669184079525E-24, (-4.4898513621794836)}, doubleArray1, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-177), 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2873.3828785;
      doubleArray0[1] = (-2363.8962224575607);
      doubleArray0[2] = 2087.166;
      doubleArray0[3] = 3.4439717236742845E-8;
      doubleArray0[4] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2873.3828785, (-2363.8962224575607), 2087.166, 3.4439717236742845E-8, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.242596687079903E-20, (-3.4903313293335423E-20), 3.081734642202788E-20, 5.085080423700793E-31, 5.660963535341936E-43}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6.299137071274237E-20, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2873.3828785, (-2363.8962224575607), 2087.166, 3.4439717236742845E-8, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.242596687079903E-20, (-3.4903313293335423E-20), 3.081734642202788E-20, 5.085080423700793E-31, 5.660963535341936E-43}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1531.064887063016);
      assertEquals(1531.064887063016, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.3040000000016271E19);
      assertEquals(1.3040000000016271E19, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.3040000000016271E19);
      assertEquals(1.3040000000016271E19, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1531.064887063016;
      doubleArray1[1] = 4.3466666666666665E18;
      doubleArray1[2] = (double) doubleArray0[2];
      doubleArray1[3] = (double) doubleArray0[1];
      doubleArray1[4] = 1.3040000000016271E19;
      doubleArray1[5] = (double) doubleArray0[0];
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.300039806421585E19, double3, 0.01);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1531.064887063016, 4.3466666666666665E18, 1.3040000000016271E19, 1.3040000000016271E19, 1.3040000000016271E19, 1531.064887063016}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 177.9;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.304E19;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 177.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 1.700416E38, 2.319816E21}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(4.1651515504644E38, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 177.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 1.700416E38, 2.319816E21}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3282.5597948);
      doubleArray0[1] = (-3282.5597948);
      doubleArray0[2] = (-273.03614647145);
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 0.3333333333332802;
      doubleArray0[5] = (-793.6503835345);
      doubleArray0[6] = 3363.73;
      doubleArray0[7] = 4.983191803254889E-7;
      doubleArray0[8] = 665.6;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3282.5597948), (-3282.5597948), (-273.03614647145), 6.52E18, 0.3333333333332802, (-793.6503835345), 3363.73, 4.983191803254889E-7, 665.6}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5707963267948966;
      doubleArray0[1] = 5.730558848581237E7;
      doubleArray0[2] = 1668.017061998;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 5.730558848581237E7, 1668.017061998}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 434.594421;
      doubleArray0[1] = (-491.55105128722);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2289.7130034;
      doubleArray0[4] = (-731.11481402331);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-776.8250673181116));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {434.594421, (-491.55105128722), Double.NaN, 2289.7130034, (-731.11481402331)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-224.82318653601254), 254.28783333488707, Double.NaN, (-1184.508012074393), 378.21829795740695}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {434.594421, (-491.55105128722), Double.NaN, 2289.7130034, (-731.11481402331)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-224.82318653601254), 254.28783333488707, Double.NaN, (-1184.508012074393), 378.21829795740695}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {209.77123446398747, (-237.26321795233292), Double.NaN, 1105.2049913256071, (-352.8965160659031)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {434.594421, (-491.55105128722), Double.NaN, 2289.7130034, (-731.11481402331)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-224.82318653601254), 254.28783333488707, Double.NaN, (-1184.508012074393), 378.21829795740695}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {209.77123446398747, (-237.26321795233292), Double.NaN, 1105.2049913256071, (-352.8965160659031)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.071754128303083, 2.0717541283030836, Double.NaN, 2.0717541283030836, 2.071754128303083}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 134217729;
      intArray0[1] = 2;
      intArray0[2] = 383;
      intArray0[3] = 2955;
      intArray0[4] = (-1661);
      intArray0[5] = 14;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {134217729, 2, 383, 2955, (-1661), 14}, intArray1);
      assertArrayEquals(new int[] {134217729, 2, 383, 2955, (-1661), 14}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1592.034358205;
      doubleArray0[1] = 5.0614674548127384E-8;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 881.196;
      doubleArray0[4] = 0.7937005259840998;
      doubleArray0[5] = (-3077.3309060864);
      doubleArray0[6] = 4256.1733689441;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1592.034358205, 5.0614674548127384E-8, Double.NaN, 881.196, 0.7937005259840998, (-3077.3309060864), 4256.1733689441}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-439.231212838);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 5.0614674548127384E-8;
      doubleArray1[4] = Double.NaN;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[9];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.linearCombination((-1743.8122612254), 0.0, 0.0, 0.0, 0.0, 0.0, (-4.9E-324), 0.0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2904;
      intArray1[1] = 2141648094;
      intArray1[2] = 2;
      intArray1[3] = (-754);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1394);
      doubleArray0[1] = (double) 0;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1394.0), 0.0}, doubleArray0, 0.01);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, (-1394));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 134217729;
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) 134217729;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(1.1504376771428572E8, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7, 1.9173961285714284E7}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3138);
      intArray0[1] = 134217729;
      intArray0[2] = 478;
      intArray0[3] = 2145981816;
      intArray0[4] = 48;
      intArray0[5] = (-222);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (-3138);
      intArray1[2] = (-4007);
      intArray1[3] = 48;
      intArray1[4] = 134217729;
      intArray1[5] = 48;
      intArray1[6] = (-3138);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2145981768, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-3138), 134217729, 478, 2145981816, 48, (-222)}, intArray0);
      assertArrayEquals(new int[] {1, (-3138), (-4007), 48, 134217729, 48, (-3138)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-1166.5114F);
      floatArray0[1] = 655.6731F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1166.5114F);
      doubleArray0[1] = (double) 655.6731F;
      doubleArray0[2] = (double) 655.6731F;
      doubleArray0[3] = (double) 655.6731F;
      doubleArray0[4] = (double) 655.6731F;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 655.6731F;
      doubleArray1[1] = (double) 655.6731F;
      doubleArray1[2] = (double) 655.6731F;
      doubleArray1[3] = (double) (-1166.5114F);
      doubleArray1[4] = (double) 655.6731F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-239978.59409749508), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1166.5113525390625), 655.673095703125, 655.673095703125, 655.673095703125, 655.673095703125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {655.673095703125, 655.673095703125, 655.673095703125, (-1166.5113525390625), 655.673095703125}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-9.430739961557329);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.430739961557329), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.430739961557329), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2145810410;
      intArray0[1] = 5;
      intArray0[2] = 198;
      intArray0[3] = 153;
      intArray0[4] = 16;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {2145810410, 5, 198, 153, 16}, intArray0);
      assertArrayEquals(new int[] {2145810410, 5, 198, 153, 16}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1282.4304314;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 454.9752267;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1360.746217445232, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1282.4304314, (-6.032174644509064E-23), 454.9752267}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 11;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {11.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 11, 11);
      assertEquals(11, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {11.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.928513836263676E13;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-1428.910029);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 2605.616774336117;
      doubleArray0[6] = (-2243.267577402212);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853411019E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {4.928513836263676E13, 1.34217729E8, (-1428.910029), 1.304E19, 1.304E19, 2605.616774336117, (-2243.267577402212)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[9];
      floatArray0[0] = 150.0F;
      floatArray0[1] = (-1433.6809F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-206.4F);
      floatArray0[5] = Float.POSITIVE_INFINITY;
      floatArray0[6] = 0.5F;
      floatArray0[7] = 1676.4F;
      floatArray0[8] = (-847.044F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {150.0F, (-1433.6809F), 0.0F, 0.0F, (-206.4F), Float.POSITIVE_INFINITY, 0.5F, 1676.4F, (-847.044F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-86.0);
      doubleArray0[1] = (double) 0.5F;
      doubleArray0[2] = (double) (-1433.6809F);
      doubleArray0[3] = 7020337.08392973;
      doubleArray0[4] = (double) (-847.044F);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 1676.4F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7020337.482104173, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-86.0), 0.5, (-1433.680908203125), 7020337.08392973, (-847.0440063476562), 0.0, 1676.4000244140625}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1409.5879F;
      floatArray0[1] = 3347.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 892.79F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-545.35535F);
      floatArray0[6] = (-1.4E-45F);
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1409.5879F, 3347.0F, 0.0F, 892.79F, 0.0F, (-545.35535F), (-1.4E-45F)}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3139.192F);
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 876.46F;
      floatArray0[5] = (-1537.68F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 855.5157F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 876.46F;
      floatArray1[2] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-3139.192F), (-1.4E-45F), 0.0F, 0.0F, 876.46F, (-1537.68F), 0.0F, 0.0F, 855.5157F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 876.46F, (-1.4E-45F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1753.9771553);
      assertEquals(1753.9771553, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-2639.5840002304));
      assertEquals((-2639.5840002304), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-392.5F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-392.5F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-2242.025F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-392.5F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2242.025F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 297.1115421973194;
      doubleArray0[1] = (-1701.789736);
      doubleArray0[2] = (-1701.789736);
      doubleArray0[3] = (double) 2584;
      doubleArray0[4] = (double) 2584;
      doubleArray0[5] = (-1701.789736);
      doubleArray0[6] = (-1701.789736);
      doubleArray0[7] = 756.1760081853;
      doubleArray0[8] = (double) 2584;
      double[] doubleArray1 = MathArrays.scale((-1701.789736), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {297.1115421973194, (-1701.789736), (-1701.789736), 2584.0, 2584.0, (-1701.789736), (-1701.789736), 756.1760081853, 2584.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-505621.37295852904), 2896088.3055549497, 2896088.3055549497, (-4397424.677824), (-4397424.677824), 2896088.3055549497, 2896088.3055549497, (-1286852.5693391955), (-4397424.677824)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(4400008.677824, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {297.1115421973194, (-1701.789736), (-1701.789736), 2584.0, 2584.0, (-1701.789736), (-1701.789736), 756.1760081853, 2584.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-505621.37295852904), 2896088.3055549497, 2896088.3055549497, (-4397424.677824), (-4397424.677824), 2896088.3055549497, 2896088.3055549497, (-1286852.5693391955), (-4397424.677824)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1390.7773832385935));
      assertEquals((-1390.7773832385935), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 6;
      intArray0[2] = (-2146952486);
      intArray0[3] = (-2180);
      intArray0[4] = (-1873);
      intArray0[5] = 3917;
      intArray0[6] = (-1947);
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3917;
      intArray1[1] = 2147483372;
      intArray1[2] = (-2180);
      intArray1[3] = (-1947);
      intArray1[4] = (-1873);
      intArray1[5] = 3917;
      intArray1[6] = Integer.MAX_VALUE;
      intArray1[7] = (-1873);
      intArray1[8] = 10;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-533302), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {10, 6, (-2146952486), (-2180), (-1873), 3917, (-1947), Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {3917, 2147483372, (-2180), (-1947), (-1873), 3917, Integer.MAX_VALUE, (-1873), 10}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1.34217729E8;
      MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = 5122.1F;
      floatArray0[2] = 2038.0F;
      floatArray0[3] = 585.78F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2125.293F);
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-3.4028235E38F);
      floatArray1[2] = 585.78F;
      floatArray1[3] = Float.NEGATIVE_INFINITY;
      floatArray1[4] = 5122.1F;
      floatArray1[5] = Float.NEGATIVE_INFINITY;
      floatArray1[6] = (-2125.293F);
      floatArray1[7] = 2038.0F;
      floatArray1[8] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-3.4028235E38F), 5122.1F, 2038.0F, 585.78F, Float.NEGATIVE_INFINITY, 0.0F, (-2125.293F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F), 585.78F, Float.NEGATIVE_INFINITY, 5122.1F, Float.NEGATIVE_INFINITY, (-2125.293F), 2038.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1957.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-1566.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 2146.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1957.0F, 1.0F, Float.POSITIVE_INFINITY, 0.0F, (-1566.0F), (-1.0F), 2146.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[7][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(1334);
      assertEquals(1334, (int)integer0);
      assertNotNull(integer0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1334, 1334);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(2791.194733, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1865;
      intArray0[1] = (-987);
      intArray0[2] = (-2017);
      intArray0[3] = 0;
      intArray0[4] = 910;
      intArray0[5] = (-922);
      intArray0[6] = 233;
      intArray0[7] = 16;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2017);
      intArray1[1] = 233;
      intArray1[2] = 0;
      intArray1[3] = 1865;
      intArray1[4] = (-987);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1473.61490122;
      doubleArray0[1] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1473.61490122, 1.304E19}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1473.61490122, 1.304E19}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3215.31287208446);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1473.61490122, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double1 = MathArrays.linearCombination(1.304E19, 0.0, 0.0, 1473.61490122, 1473.61490122, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.sortInPlace(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-3215.31287208446)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-77);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-77), (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1777.79);
      doubleArray1[1] = (-1359.4664417);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(2238.0094481946358, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1777.79), (-1359.4664417)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1777.79);
      doubleArray2[1] = 1140.21793;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1359.4664417);
      doubleArray3[1] = (-1359.4664417);
      doubleArray3[2] = 1140.21793;
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertArrayEquals(new double[] {(-1777.79), 1140.21793}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1359.4664417), (-1359.4664417), 1140.21793}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2416845.845389843, 866757.8333302033, (-3577156.0458343397), 1300096.927893485}, doubleArray4, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray5 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray5.length);
      assertArrayEquals(new double[] {(-1777.79), (-1359.4664417)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1777.79), 1140.21793}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3160537.2841, 389777.811615143, (-1550088.0120596397)}, doubleArray5, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertNotNull(doubleArray5);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 952.812371230885;
      doubleArray0[0] = 952.812371230885;
      double double1 = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-526.0);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {952.812371230885, Double.NaN, (-526.0)}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 7;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-285.6);
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-285.6), Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-77);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-77), (-77));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2584;
      intArray0[1] = 2584;
      intArray0[2] = 2584;
      intArray0[3] = 2584;
      intArray0[4] = 2584;
      intArray0[5] = 2584;
      intArray0[6] = 2584;
      intArray0[7] = 2584;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2584;
      intArray1[1] = 2584;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      MathArrays.checkOrder(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.7249995199969751);
      assertEquals(0.7249995199969751, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1430.9928), (-2512.885505896), (-1430.9928), 1055.1552);
      assertEquals(2086001.5720789733, double0, 0.01);
      
      Integer integer0 = new Integer((-1823));
      assertEquals((-1823), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(310);
      assertEquals(310, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[6];
      Integer integer2 = new Integer(310);
      assertEquals(310, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer3 = new Integer((-678));
      assertEquals((-678), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("bad value for maximum iterations number: {0}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.bad value for maximum iterations number: {0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = Float.NEGATIVE_INFINITY;
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = Float.NEGATIVE_INFINITY;
      floatArray1[5] = Float.NEGATIVE_INFINITY;
      floatArray1[6] = Float.NEGATIVE_INFINITY;
      floatArray1[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), Float.NEGATIVE_INFINITY, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = (-2333.672727);
      double double1 = 7790771.427326663;
      doubleArray1[1] = 7790771.427326663;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7790771.427326663}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2584;
      intArray0[1] = 2584;
      intArray0[2] = 2584;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 127;
      intArray1[1] = 2584;
      intArray1[2] = 2584;
      intArray1[3] = 2584;
      intArray1[4] = 2584;
      intArray1[5] = 2584;
      intArray1[6] = 2584;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(2457, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {2584, 2584, 2584}, intArray0);
      assertArrayEquals(new int[] {127, 2584, 2584, 2584, 2584, 2584, 2584}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 1724);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(1724, intArray2.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2584, 2584, 2584}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(518.76059, 0.0, 3.834E-20, (double) 2584, 0.5039018405998233, (double) 2584);
      assertEquals(1302.0823561099435, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 700;
      intArray0[1] = 0;
      intArray0[2] = 2642;
      int int0 = 2906;
      intArray0[3] = 2906;
      intArray0[4] = 1582;
      int int1 = (-2146865894);
      intArray0[5] = (-2146865894);
      int int2 = (-1);
      intArray0[6] = (-1);
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {700, 0, 2642, 2906, 1582, (-2146865894), (-1)}, intArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 303.301;
      doubleArray0[3] = (double) 1582;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 2906;
      doubleArray0[7] = (double) 2642;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2147483645;
      intArray0[2] = 2146687490;
      intArray0[3] = 680;
      intArray0[4] = (-585);
      intArray0[5] = 2146629399;
      intArray0[6] = (-2146629399);
      intArray0[7] = 117;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 2147483645, 2146687490, 680, (-585), 2146629399, (-2146629399), 117}, intArray0);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[3] = 735.736171042;
      doubleArray0[3] = (double) 0.0F;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 735.736171042;
      doubleArray3[1] = (double) (-10);
      doubleArray3[2] = (double) (-10);
      doubleArray3[3] = (double) (-10);
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = 735.736171042;
      doubleArray3[6] = 735.736171042;
      doubleArray3[7] = 735.736171042;
      doubleArray3[8] = (double) (-10);
      doubleArray1[6] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-247), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-4845.833F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, (-4845.833F)}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination(562.0, 239.358089989, (double) (-4845.833F), 1.86285714285714278E18, (double) (-4845.833F), (double) 3.4028235E38F, 3386.8399351608, (-793.6503835345));
      assertEquals((-1.648951427316878E42), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 628;
      intArray0[2] = 1;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 389;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 1;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(738.7184849453816, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 628, 1}, intArray0);
      assertArrayEquals(new int[] {389, 0, 1, 1}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1875.0);
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 542.4497;
      doubleArray0[5] = (-5591.84249261986);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.17333333333333325E18, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1875.0), 2.17333333333333325E18, (-1.0), 0.0, 542.4497, (-5591.84249261986)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.17333333333333325E18, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1875.0), 2.17333333333333325E18, (-1.0), 0.0, 542.4497, (-5591.84249261986)}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 2.17333333333333325E18;
      doubleArray1[3] = 2.17333333333333325E18;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 2.17333333333333325E18;
      doubleArray1[6] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1875.0), 2.17333333333333325E18, (-1.0), 0.0, 542.4497, (-5591.84249261986)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2.17333333333333325E18, 2.17333333333333325E18, (-1.0), 2.17333333333333325E18, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5581553024052497E7;
      doubleArray2[1] = (-330.761);
      doubleArray2[2] = (-0.16624882440418567);
      doubleArray2[3] = 1.34217729E8;
      doubleArray2[4] = 562.0;
      doubleArray2[5] = (-625.904611);
      doubleArray2[6] = (-2603.2);
      doubleArray2[7] = (-1858.59507540593);
      doubleArray2[8] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-409.142483304);
      doubleArray0[1] = 653.349;
      doubleArray0[2] = 2791.194733;
      doubleArray0[3] = 350.0226196943074;
      doubleArray0[4] = (-127.49768149);
      doubleArray0[5] = (-2088.75978);
      doubleArray0[6] = (-3210.383431);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.075599530502949E10;
      doubleArray1[1] = 2791.194733;
      doubleArray1[2] = 350.0226196943074;
      doubleArray1[3] = (-3210.383431);
      doubleArray1[4] = (-1.0);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[][] longArray0 = new long[8][8];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 372;
      intArray0[0] = 118;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {118, 0, 0, 0, 0, 372, 0}, intArray0);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[][] longArray0 = new long[8][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(393.0, (-1587.300767069), (-1561.8465802937), (-1561.8465802937), (-1587.300767069), (-0.3058015757857271));
      assertEquals(1816040.937992824, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(607.8159958691652, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 194);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(194, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(90588.0246538524, (double) 194, 1055.1552, 0.0);
      assertEquals(1.7574076782847364E7, double0, 0.01);
      
      Integer integer0 = new Integer(385);
      assertEquals(385, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(369);
      assertEquals(369, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[2];
      Integer integer2 = new Integer((-406));
      assertEquals((-406), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 128);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(128, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(128, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(128, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace(76.05068741887406, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(128, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(793.6503835345, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("}w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.}w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 90588.0246538524, 1055.1552, 1055.1552);
      assertEquals(1113352.4960870398, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6314593.565742195, 3988705.0910652922, (-1345247.076349797), (-623809.201458117), 154449.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 393;
      floatArray0[1] = (float) 393;
      floatArray0[2] = (-2636.433F);
      floatArray0[3] = (float) 393;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (float) 393;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 393;
      floatArray1[1] = (float) 393;
      floatArray1[2] = (-2636.433F);
      floatArray1[3] = (-3.4028235E38F);
      floatArray1[4] = (-2636.433F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {393.0F, 393.0F, (-2636.433F), 393.0F, 0.0F, (-3.4028235E38F), 393.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {393.0F, 393.0F, (-2636.433F), (-3.4028235E38F), (-2636.433F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 393 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int int0 = 1;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(90588.0246538524, 1055.1552, 90588.0246538524, 45.08);
      assertEquals(9.966813342263621E7, double0, 0.01);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 1;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "POPULATION_LIMIT_NOT_POSITIVE";
      stringArray0[1] = ",abkU|Gi)(D)A";
      stringArray0[2] = "/(";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("[;/T2Y`%{?j f0>Mz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.[;/T2Y`%{?j f0>Mz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 393;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 1.0, 1055.2, 1055.2);
      assertEquals(1113447.04, double0, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 393
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1292.15);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (-2512.885505896);
      doubleArray0[3] = (-793.6503835345);
      doubleArray0[4] = (double) 393;
      doubleArray0[5] = (-793.6503835345);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-793.6503835345);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1292.15), (-793.6503835345), (-2512.885505896), (-793.6503835345), 393.0, (-793.6503835345)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-793.6503835345)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2696.3093261;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2696.3093261);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {2696.3093261}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2696.3093261}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2696.3093261}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(90588.0246538524, 1055.1552, 90588.0246538524, 45.08);
      assertEquals(9.966813342263621E7, double0, 0.01);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 881.196;
      doubleArray0[0] = 881.196;
      double double1 = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1,799.1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1696.555;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.5463024377822876;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[][] longArray1 = new long[8][8];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.17333333333333325E18;
      doubleArray0[1] = 174.5339;
      doubleArray0[2] = 542.4497;
      doubleArray0[3] = (-318.154756992062);
      doubleArray0[4] = 1396.8930746334;
      doubleArray0[5] = (-5591.84249261986);
      doubleArray0[6] = 1454.1203481;
      doubleArray0[7] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.17333333333333325E18, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.17333333333333325E18, 174.5339, 542.4497, (-318.154756992062), 1396.8930746334, (-5591.84249261986), 1454.1203481, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1481.3147F);
      floatArray0[4] = (-428.403F);
      floatArray0[3] = (-2810.2566F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-2810.2566F), (-428.403F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-2810.2566F), (-428.403F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[][] longArray1 = new long[8][8];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 441.2399;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 441.2399}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 441.2399}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      int int0 = 387;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 387);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(387, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4003.0754, (-2042.9273250732851), (-2042.9273250732851), 1055.1552);
      assertEquals((-1.033359750926184E7), double0, 0.01);
      
      Integer integer0 = new Integer(393);
      assertEquals(393, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(377);
      assertEquals(377, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[3];
      Integer integer2 = new Integer((-1142));
      assertEquals((-1142), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1481.3147F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3.4028235E38F;
      double double0 = MathArrays.linearCombination((-9.007199254740992E15), 3.834E-20, 651.129041403962, (double) (-1481.3147F));
      assertEquals((-964527.0191935026), double0, 0.01);
      
      Integer integer0 = new Integer(353);
      assertEquals(353, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(353);
      assertEquals(353, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      integerArray0[8] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-2512.885505896);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 393;
      floatArray0[1] = 3773.152F;
      floatArray0[2] = 1372.0F;
      floatArray0[3] = (float) 393;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {393.0F, 3773.152F, 1372.0F, 393.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertEquals(396, doubleArray2.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {393.0F, 3773.152F, 1372.0F, 393.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2584;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2584}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 2584);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2584, intArray1.length);
      assertArrayEquals(new int[] {2584}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "no";
      stringArray0[2] = "";
      stringArray0[3] = "x1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4060;
      intArray0[1] = 8;
      intArray0[2] = 2584;
      intArray0[3] = 83;
      intArray0[4] = 1499;
      intArray0[5] = 365;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 365;
      doubleArray0[2] = (double) 1499;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 83;
      doubleArray0[5] = (double) 4060;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4344.043623169547, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 365.0, 1499.0, 0.0, 83.0, 4060.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-3578.004), doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, (-1305971.46), (-5363427.996), -0.0, (-296974.332), (-1.452669624E7)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4060;
      intArray0[1] = 8;
      intArray0[2] = 2584;
      intArray0[3] = 83;
      intArray0[4] = 1499;
      intArray0[5] = 365;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      doubleArray0[5] = 2043.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4145.3064798767455, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1499.0;
      doubleArray0[1] = (-3210.383431);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2201.7312015716);
      doubleArray0[4] = 5282.2;
      doubleArray0[5] = 3756.759734;
      doubleArray0[6] = 2.17333333333333325E18;
      doubleArray0[7] = 0.06666666666666667;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1499.0, (-3210.383431), 1.0, (-2201.7312015716), 5282.2, 3756.759734, 2.17333333333333325E18, 0.06666666666666667}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "!";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "`Z8F(Y6d6qib";
      stringArray0[4] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 148, (-3110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "!";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "`Z8F(Y6d6qib";
      stringArray0[4] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 3118L;
      longArray0[1] = (-1156L);
      longArray0[2] = 1134L;
      longArray0[3] = (-342L);
      longArray0[4] = (-1130L);
      longArray0[5] = (-3437L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,156 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-100.04794);
      doubleArray0[0] = (-100.04794);
      double double1 = 90588.0246538524;
      doubleArray0[1] = 90588.0246538524;
      double double2 = 0.3333333333332802;
      doubleArray0[2] = 0.3333333333332802;
      double double3 = 365.0;
      doubleArray0[3] = 365.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -100.048 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4060;
      intArray0[1] = 8;
      intArray0[2] = 2584;
      intArray0[3] = 83;
      intArray0[4] = 1499;
      intArray0[5] = 365;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {4060, 8, 2584, 83, 1499, 365}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 365;
      doubleArray0[2] = (double) 1499;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 83;
      doubleArray0[5] = (double) 4060;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4344.043623169547, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 365.0, 1499.0, 0.0, 83.0, 4060.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1390.7773832385935));
      assertEquals((-1390.7773832385935), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 1462L;
      longArray1[2] = 938L;
      longArray1[3] = 3465L;
      longArray1[2] = 2535L;
      longArray1[5] = 1462L;
      longArray1[6] = 419L;
      longArray1[7] = 0L;
      longArray1[8] = (-1554L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1462L;
      doubleArray0[1] = (double) 3465L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1462.0, 3465.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1462.0, 3465.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = (-246);
      intArray0[2] = (-2541);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      doubleArray0[5] = 2043.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.3606146945002038;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1109.2;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.3606146945002038, 0.0, 1109.2, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(0.3606146945002038, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2999.40821024617);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float float0 = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 628;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-2512.885505896);
      doubleArray0[2] = (-2512.885505896);
      doubleArray0[3] = (-2512.885505896);
      doubleArray0[0] = 1313.8698006;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1313.8698006, (-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1313.8698006, (-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1726253.8529286836, 6314593.565742195, 6314593.565742195, 6314593.565742195, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1313.8698006, (-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1726253.8529286836, 6314593.565742195, 6314593.565742195, 6314593.565742195, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {1313.8698006, (-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1726253.8529286836, 6314593.565742195, 6314593.565742195, 6314593.565742195, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.268072805532391E9, 3.9586755025701256E9, (-1.1909175144407574E10), (-2.7777025791385273E10), (-4.76035519409331E10), (-3.17357012939554E10), (-1.58678506469777E10), 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1551.1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1551.1), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1987);
      intArray0[1] = 14;
      intArray0[2] = (-1470);
      intArray0[3] = (-2146144816);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1987), 14, (-1470), (-2146144816)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-793.6503835345);
      doubleArray0[2] = (double) 393;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-793.6503835345), 393.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(0.0, 90588.0246538524, 1055.1552, 1055.1552);
      assertEquals(1113352.4960870398, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(393);
      assertEquals(393, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(393, (int)integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 393;
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) 393;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {393.0F, 393.0F, 393.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2791.194733;
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = 1023;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1023);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1023, doubleArray1.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1023, doubleArray1.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7790768.03752694, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 1023;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 393;
      doubleArray3[5] = (double) 393;
      doubleArray3[6] = 2791.194733;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0708593250394448E-7;
      doubleArray0[1] = 3683840.0;
      doubleArray0[2] = 4761.0;
      doubleArray0[3] = (-7.800414592973399E-9);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1467396940239352E-14, 1.35706771456E13, 2.2667121E7, 6.084646782227235E-17}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1.357069612412E13, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1467396940239352E-14, 1.35706771456E13, 2.2667121E7, 6.084646782227235E-17}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 628;
      intArray0[1] = 628;
      intArray0[2] = 628;
      intArray0[3] = 628;
      intArray0[4] = 628;
      intArray0[5] = 13;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {628, 628, 628, 628, 628, 13}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {1.0708593250394448E-7, 3683840.0, 4761.0, (-7.800414592973399E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1467396940239352E-14, 1.35706771456E13, 2.2667121E7, 6.084646782227235E-17}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = new double[6][2];
      doubleArray4[0] = doubleArray3;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 628;
      doubleArray5[1] = (double) 628;
      doubleArray5[2] = (double) 628;
      doubleArray5[3] = 4761.0;
      doubleArray5[4] = 3683840.0;
      doubleArray5[5] = 3683840.0;
      doubleArray5[6] = (double) 628;
      doubleArray4[1] = doubleArray5;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray2;
      doubleArray4[5] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray3, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination((-1.0), 0.0, 0.0, 204.132094, 1.34217729E8, 204.132094, (-1265.931622), (-1.0));
      assertEquals(2.739814733862615E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      doubleArray0[5] = 2043.0;
      doubleArray0[6] = 453.87340393234854;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 453.87340393234854}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-425L);
      longArray2[1] = (-608L);
      longArray2[2] = (-608L);
      longArray2[4] = (-425L);
      longArray2[5] = (-608L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-425L);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 737;
      intArray0[1] = (-1);
      intArray0[2] = 1816;
      intArray0[3] = (-1406);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-2483);
      intArray0[7] = 173;
      intArray0[8] = 2074;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {737, (-1), 1816, (-1406), (-1), (-1), (-2483), 173, 2074}, intArray0);
      assertArrayEquals(new int[] {737, (-1), 1816, (-1406), (-1), (-1), (-2483), 173, 2074}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[5][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(628, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1109.2;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2765, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 2878L;
      longArray1[1] = 712L;
      longArray1[2] = 1280L;
      longArray1[3] = 2552L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2099.3859047;
      doubleArray0[3] = 2090.72797611683;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 3683840.0;
      doubleArray0[6] = 81.3075032;
      doubleArray0[7] = (-42.7972322921);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2099.3859047, 2090.72797611683, 1.34217729E8, 3683840.0, 81.3075032, (-42.7972322921)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2099.3859047;
      doubleArray1[1] = 672.56817928;
      doubleArray1[2] = 81.3075032;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 19.25059423237119;
      doubleArray1[5] = 2458.494931;
      doubleArray1[6] = 2099.3859047;
      doubleArray1[7] = (-1.0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {4407421.176853037, 452347.9557800142, 6610.91007661801, 1.0, 370.58537829940286, 6044197.325752696, 4407421.176853037, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2099.3859047, 672.56817928, 81.3075032, (-1.0), 19.25059423237119, 2458.494931, 2099.3859047, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(1.3790803489057016E8, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2099.3859047, 2090.72797611683, 1.34217729E8, 3683840.0, 81.3075032, (-42.7972322921)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2099.3859047, 672.56817928, 81.3075032, (-1.0), 19.25059423237119, 2458.494931, 2099.3859047, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 628;
      intArray0[1] = 628;
      intArray0[2] = 628;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {628, 628, 628}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {4407421.176853037, 452347.9557800142, 6610.91007661801, 1.0, 370.58537829940286, 6044197.325752696, 4407421.176853037, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4407421.176853037, 452347.9557800142, 6610.91007661801, 1.0, 370.58537829940286, 6044197.325752696, 4407421.176853037, 1.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2099.3859047, 672.56817928, 81.3075032, (-1.0), 19.25059423237119, 2458.494931, 2099.3859047, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float float0 = (-1481.3147F);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1481.3147F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 1372.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1481.3147F), 1.0F, 1.0F, 3.4028235E38F, 1372.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-191.1942045);
      doubleArray0[1] = 1.9868161777724352E-8;
      doubleArray0[2] = 1725.29266;
      doubleArray0[3] = (-84.15995036);
      doubleArray0[4] = (-1202.144);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2147483647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("(Av-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.(Av-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2791.194733;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 393);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertEquals(395, doubleArray2.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(6.069606661455137E13, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertEquals(395, doubleArray2.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace(393, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(393, doubleArray1.length);
      assertArrayEquals(new double[] {2791.194733, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 393;
      intArray0[1] = (-4007);
      intArray0[2] = 3406;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-4007);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {393, (-4007), 3406, 1, 1, (-4007)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 2878L;
      longArray1[1] = 712L;
      long long0 = 1280L;
      longArray1[2] = 1280L;
      long long1 = 2552L;
      longArray1[3] = 2552L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2878L;
      longArray2[1] = 1280L;
      longArray2[2] = 712L;
      longArray2[3] = 2878L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(longArray1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 165);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.036;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 7169.3286F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, (-1.0F), 0.0F, 0.0F, 7169.3286F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 7169.3286F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 7169.32861328125, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 7169.32861328125, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale(0.0F, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 7169.32861328125, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1075);
      intArray0[1] = (-3077);
      intArray0[2] = 145;
      intArray0[3] = 2512;
      intArray0[4] = (-836);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1075), (-3077), 145, 2512, (-836)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1109.2;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1109.2, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][8];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 1278, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 628;
      intArray0[2] = 1;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2765, (-247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 243.5605680242;
      doubleArray0[1] = 1701.778024;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2149.984398706);
      doubleArray0[4] = (-1742.63);
      doubleArray0[5] = (-609.84);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1701.778024;
      doubleArray1[1] = 1701.778024;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-2149.984398706);
      doubleArray1[5] = (-107.1195042870371);
      doubleArray1[6] = 243.5605680242;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = (-1.0);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      double double1 = 2412.932908829617;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double double2 = MathArrays.linearCombination(531.322119, 3039.69558992, 566.84283844923, Double.POSITIVE_INFINITY, 531.322119, 1.304E19);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1148.97253));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[1] = (-2512.885505896);
      doubleArray0[2] = (-2512.885505896);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6314593.565742195, 6314593.565742195, 6314593.565742195, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-2512.885505896), (-2512.885505896), (-2512.885505896), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6314593.565742195, 6314593.565742195, 6314593.565742195, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2068.268788143269);
      doubleArray0[1] = (-894.4786030755101);
      doubleArray0[2] = (-4998.2);
      doubleArray0[3] = 4524.8;
      doubleArray0[4] = 692.123;
      doubleArray0[5] = 4391.0;
      doubleArray0[6] = 0.036;
      doubleArray0[7] = (-191.1942045);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2068.268788143269), (-894.4786030755101), (-4998.2), 4524.8, 692.123, 4391.0, 0.036, (-191.1942045)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertArrayEquals(new double[] {(-2068.268788143269), (-894.4786030755101), (-4998.2), 4524.8, 692.123, 4391.0, 0.036, (-191.1942045)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 15
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 2878L;
      longArray1[1] = 712L;
      longArray1[2] = 1280L;
      longArray1[3] = 2552L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2878L;
      longArray2[1] = 1280L;
      longArray2[2] = 712L;
      longArray2[3] = 2878L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 165;
      Object[] objectArray0 = MathArrays.buildArray(field0, 165);
      assertEquals(165, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1280L;
      doubleArray0[1] = (double) 1280L;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1280.0, 1280.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(2878L, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3683840.0, 3683840.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, (double) 2878L, 3414.06941334);
      assertEquals(9825691.77159252, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3683840.0, 3683840.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3683840.0, 3683840.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7367680.0, 7367680.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3683840.0, 3683840.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7367680.0, 7367680.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3683840.0, 3683840.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,683,840 >= 3,683,840)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 230.50351815;
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(230.50351815, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-623.477034280756);
      doubleArray0[2] = (-40.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = (-1394.9);
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (-717.113);
      doubleArray0[8] = 2.0;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1394.9), (-717.113), (-623.477034280756), (-40.0), (-1.0), 0.0, 2.0, 1.34217729E8, 1.7976931348623157E308}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 651;
      intArray0[1] = (-795);
      intArray0[2] = 134217729;
      intArray0[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {651, (-795), 134217729, 0}, intArray0);
      
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 651;
      longArray1[1] = (long) (-795);
      longArray1[2] = (long) (-795);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 651;
      longArray2[1] = (long) 134217729;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) (-795);
      longArray4[1] = (long) 134217729;
      longArray4[2] = (long) 651;
      longArray4[3] = (long) (-795);
      longArray4[4] = (long) 651;
      longArray4[5] = (long) 651;
      longArray4[6] = (long) 651;
      longArray4[7] = (long) 134217729;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 134217729;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 651;
      longArray6[4] = (long) (-795);
      longArray6[5] = (long) (-795);
      longArray6[6] = (long) 0;
      longArray6[7] = (long) (-795);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) 651;
      longArray7[1] = (long) 651;
      longArray7[2] = (long) (-795);
      longArray7[3] = (long) 0;
      longArray7[4] = (long) 134217729;
      longArray7[5] = (long) 651;
      longArray7[6] = (long) 0;
      longArray7[7] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = (long) 651;
      longArray9[1] = (long) 134217729;
      longArray9[2] = (long) 134217729;
      longArray9[3] = (long) (-795);
      longArray9[4] = (long) 134217729;
      longArray9[5] = (long) 0;
      longArray9[6] = 282L;
      longArray9[7] = (long) 0;
      longArray9[8] = (long) (-795);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2175.26);
      doubleArray2[1] = 501.2364581;
      doubleArray2[2] = 559.330297512;
      doubleArray2[3] = 221.449;
      doubleArray2[4] = 124.01839571;
      doubleArray2[5] = 0.0;
      double double0 = 1519.7113751256;
      doubleArray2[6] = 1519.7113751256;
      doubleArray2[7] = 0.0;
      double double1 = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray1[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = (-2512.885505896);
      double double1 = 0.0;
      double double2 = MathArrays.linearCombination((-2512.885505896), (-2512.885505896), (-2512.885505896), (-2512.885505896), 1.0, (-793.6503835345), (-793.6503835345), 0.0);
      assertEquals(1.2628393481100855E7, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-793.6503835345);
      doubleArray0[1] = 1.2628393481100855E7;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-793.6503835345), 1.2628393481100855E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1551.1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1551.1), 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-191.1942045);
      doubleArray0[1] = (-84.15995036);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1148.97253);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = 1649.2286;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-191.1942045), (-84.15995036), 1.0, 1.304E19, (-1148.97253), 0.0, -0.0, 1649.2286}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (13,040,000,000,000,000,000 >= -1,148.973)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 177.026881;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-316.7962814);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 177.026881, 3.834E-20, 0.0, (-316.7962814)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 628;
      intArray0[2] = 1;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 628, 1}, intArray0);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2999.40821024617);
      doubleArray0[5] = 2043.0;
      doubleArray0[6] = 453.497549874414;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {881.196, 3.834E-20, 1799.1, 0.0, (-2999.40821024617), 2043.0, 453.497549874414}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1762.392, 7.668E-20, 3598.2, 0.0, (-5998.81642049234), 4086.0, 906.995099748828}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1109.2;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1109.2, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 1109.2, (-1248.23660276618));
      assertEquals((-1384544.039788247), double0, 0.01);
      
      long[][] longArray0 = new long[4][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 1626L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1626L;
      longArray2[1] = 1626L;
      longArray2[2] = 1626L;
      longArray2[3] = 1626L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1626L;
      longArray3[1] = 1626L;
      longArray3[2] = 1626L;
      longArray3[3] = 1626L;
      longArray3[4] = 1626L;
      longArray3[5] = 1626L;
      longArray3[6] = 1626L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1626L;
      longArray4[1] = 1626L;
      longArray4[2] = 1626L;
      longArray4[3] = 1626L;
      longArray4[4] = 1626L;
      longArray4[5] = 1626L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 69;
      intArray0[0] = 69;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-300.97844549710265);
      doubleArray0[1] = (double) 69;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (double) 69;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 69;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1481.3147F);
      floatArray0[4] = (-428.403F);
      floatArray0[5] = (-2810.2566F);
      floatArray0[6] = 3.4028235E38F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2810.2566F);
      doubleArray0[1] = (double) (-2810.2566F);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 284.9030837345;
      doubleArray0[3] = 1.7976931348623157E308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double double0 = MathArrays.linearCombination(0.0, 4424.995, (-203.7), (-1521.6477), 1285.782077383934, (-20.0));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 194;
      intArray0[2] = 188;
      intArray0[3] = 302;
      intArray0[4] = 0;
      intArray0[5] = 455;
      intArray0[6] = 1726;
      intArray0[7] = 0;
      MathArrays.copyOf(intArray0);
      double double1 = MathArrays.linearCombination((double) 1726, 100.0, (double) 455, 518.0, Double.NaN, (-3144.2519137759), (double) 0, 4424.995);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1018L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[][] longArray1 = new long[8][8];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-1568.0), doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 1462L;
      longArray1[2] = 938L;
      longArray1[3] = 3465L;
      longArray1[4] = 2535L;
      longArray1[5] = (-635L);
      longArray1[6] = 419L;
      longArray1[7] = 0L;
      longArray1[8] = (-1554L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1462L;
      doubleArray0[1] = (double) 3465L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.linearCombination((-543.7337), (-543.7337), 0.0, (-2847.0));
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 2878L;
      longArray1[1] = 712L;
      long long0 = 1280L;
      longArray1[2] = 1280L;
      longArray1[3] = 2552L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 2878L;
      longArray2[1] = 1280L;
      longArray2[2] = 712L;
      longArray2[3] = 2878L;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 165;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 165);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3146.258179739064;
      doubleArray0[1] = 501.6196198664725;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[7];
      longArray1[0] = (-3936L);
      longArray1[1] = (-721L);
      longArray1[2] = 237L;
      longArray1[3] = 0L;
      longArray1[4] = 1257L;
      longArray1[5] = 0L;
      longArray1[6] = (-1382L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-1382L);
      longArray2[1] = 0L;
      longArray2[2] = (-1382L);
      longArray2[3] = 0L;
      longArray2[4] = (-1382L);
      longArray2[5] = (-721L);
      longArray2[6] = 237L;
      longArray2[7] = 0L;
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = (-3936L);
      longArray3[2] = (-721L);
      longArray3[3] = 0L;
      longArray3[4] = (-1382L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      longArray4[1] = 237L;
      longArray4[2] = 1257L;
      longArray4[3] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-1382L);
      longArray5[1] = 0L;
      longArray5[2] = (-721L);
      longArray5[3] = (-204L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,936 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 881.196;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1799.1;
      doubleArray0[3] = 0.0;
      long[][] longArray0 = new long[0][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[][] longArray1 = new long[8][8];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1133));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      Double double0 = new Double(0.0);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2388);
      intArray0[4] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2353.784536361408);
      doubleArray0[1] = (-685.18);
      doubleArray0[2] = 2551.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2230.5555;
      double double0 = (-1131.80142165);
      doubleArray0[5] = (-1131.80142165);
      doubleArray0[6] = (-2009.0);
      doubleArray0[7] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-568));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathArrays.OrderDirection.values();
      MathArrays.equals((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, String>>) null, 2146987966);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, Double.POSITIVE_INFINITY);
      double double0 = MathArrays.linearCombination(0.0, (-1.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 243.5605680242;
      doubleArray0[1] = 1701.778024;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2149.984398706);
      doubleArray0[4] = (-1742.63);
      doubleArray0[5] = (-609.84);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1701.778024;
      doubleArray1[1] = 1701.778024;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2149.984398706);
      doubleArray1[5] = (-107.1195042870371);
      doubleArray1[6] = 243.5605680242;
      doubleArray1[7] = 1.34217729E8;
      doubleArray1[8] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      MathArrays.equals(doubleArray1, (double[]) null);
      try { 
        MathArrays.convolve(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2512.885505896);
      doubleArray0[2] = 1.0;
      doubleArray0[0] = (-2512.885505896);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2619.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2, (-247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-664);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-664);
      doubleArray0[1] = (double) (-664);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 506.0;
      MathArrays.scaleInPlace(506.0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) (-664);
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-664);
      longArray2[5] = (long) 0;
      longArray2[6] = (long) (-664);
      longArray2[7] = (long) 0;
      longArray2[8] = 2932L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) (-664);
      longArray3[1] = (long) (-664);
      longArray3[2] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 2932L;
      longArray4[1] = 2932L;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) (-664);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 1L;
      longArray5[1] = (long) (-664);
      longArray5[2] = 2932L;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = (long) (-664);
      longArray5[6] = (long) 0;
      longArray5[7] = (long) (-664);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (long) (-664);
      longArray6[1] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = (long) (-664);
      longArray7[1] = 4456L;
      longArray7[2] = (-1768L);
      longArray7[3] = 0L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -664 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2791.194733;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = 393;
      MathArrays.copyOf(doubleArray0, 393);
      MathArrays.linearCombination(3.141592653589793, (-1.0), (-706.97205), 1.304E19);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 400;
      intArray0[3] = 2303;
      intArray0[4] = 1562;
      intArray0[5] = 246;
      intArray0[6] = (-2991);
      intArray0[7] = 134217729;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination((double) 0, (double) 134217729, 100.0, 264.4078340395);
      MathArrays.OrderDirection.values();
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[8];
      int int0 = 2;
      intArray0[0] = 2;
      intArray0[1] = 2;
      int int1 = 400;
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2664.8577F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1842.5112F;
      floatArray0[6] = (-1287.183F);
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 183;
      intArray0[1] = 2066;
      intArray0[2] = 0;
      intArray0[3] = (-1488);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-819);
      int[] intArray1 = new int[4];
      intArray1[0] = (-819);
      intArray1[1] = (-276);
      intArray1[2] = 0;
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-584.8600671931191);
      doubleArray0[1] = 2958.95;
      doubleArray0[2] = 3067.3464;
      doubleArray0[3] = 772.731902;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 290.8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (3,067.346 >= 772.732)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 578.2493708399;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-578.1180373);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 320.314138319;
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2043;
      intArray0[4] = (-3457);
      intArray0[5] = (-1609);
      intArray0[6] = 1256;
      MathArrays.copyOf(intArray0, 2622);
      MathArrays.linearCombination((double) 0, (-844.84391), 0.0, 0.0, 0.0, 1533.63020839, (double) 2, (-20.0));
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1256;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-1609);
      longArray0[3] = (long) 2043;
      longArray0[4] = (long) 2;
      longArray0[5] = 0L;
      longArray0[6] = (long) 2622;
      longArray0[7] = (long) 1256;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,609 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
