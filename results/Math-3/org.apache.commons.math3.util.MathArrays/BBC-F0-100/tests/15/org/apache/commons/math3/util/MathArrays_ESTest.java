/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:56:36 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-708.379);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 384.760058;
      doubleArray0[3] = (-4315.8701171875);
      doubleArray0[4] = (-259.22071);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 5.0614674548127384E-8;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-708.379), 1.34217729E8, 384.760058, (-4315.8701171875), (-259.22071), 1.0, 5.0614674548127384E-8}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale((-1015.08422611601), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-708.379), 1.34217729E8, 384.760058, (-4315.8701171875), (-259.22071), 1.0, 5.0614674548127384E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {719064.3490118331, (-1.3624229957301335E11), (-390563.8657152811), 4380971.677922486, 263130.8538035926, (-1015.08422611601), (-5.137815774379959E-5)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1.828613206206308E19), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-708.379), 1.34217729E8, 384.760058, (-4315.8701171875), (-259.22071), 1.0, 5.0614674548127384E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {719064.3490118331, (-1.3624229957301335E11), (-390563.8657152811), 4380971.677922486, 263130.8538035926, (-1015.08422611601), (-5.137815774379959E-5)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3235.1065566797506;
      doubleArray0[1] = (-2566.1);
      doubleArray0[2] = 3556.7647;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 676.1513;
      doubleArray0[5] = 282.790452900599;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2293.83249318651);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3235.1065566797506, (-2566.1), 3556.7647, 1.0, 676.1513, 282.790452900599, Double.NaN, (-2293.83249318651)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3186));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1829.1192711);
      doubleArray0[1] = (-2754.81627);
      doubleArray0[2] = (-1.9841269659586505E-4);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2264.1F;
      floatArray0[1] = (-2415.0F);
      floatArray0[2] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2264.1F, (-2415.0F), 1.4E-45F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rD[j~{MQp";
      stringArray0[1] = "EVALUATIONS";
      stringArray0[2] = "u.&-!\"m`qr&&Zp#";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "FUNCTION";
      stringArray0[5] = "?HN$X%md1vkhqc.]UO";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-479.681762095);
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 2264.1F;
      doubleArray0[4] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2314.356032483681, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-479.681762095), 1.401298464324817E-45, 1.401298464324817E-45, 2264.10009765625, 1.401298464324817E-45}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 857.26F;
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {857.26F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 857.26F;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) 857.26F;
      doubleArray0[3] = (double) 857.26F;
      doubleArray0[4] = (double) 857.26F;
      doubleArray0[5] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 857.26F;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-763.25922);
      doubleArray0[1] = 1806.0;
      doubleArray0[2] = (-188.081);
      doubleArray0[3] = 0.9305076599121094;
      doubleArray0[4] = 2181.5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-742.47218);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-305.9);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E19, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-742.47218), 1.304E19, 1.304E19, 1.304E19, 1.304E19, (-305.9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-742.47218);
      doubleArray1[1] = (-305.9);
      doubleArray1[2] = (-305.9);
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = (-490.56);
      doubleArray1[6] = (-305.9);
      doubleArray1[7] = 2.608E19;
      doubleArray1[8] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.4500597096282264E19, double1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-742.47218), (-305.9), (-305.9), 1.304E19, 1.304E19, (-490.56), (-305.9), 2.608E19, 1.304E19}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 13);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-742.47218), 1.304E19, 1.304E19, 1.304E19, 1.304E19, (-305.9)}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -742.472 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 4200.4F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-558.935F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2206.615F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {4200.4F, (-1.0F), (-558.935F), 0.0F, (-2206.615F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2337.379709);
      doubleArray0[1] = 2710.6386157852785;
      doubleArray0[2] = 1972.227789994866;
      doubleArray0[3] = (-2127.5672553214135);
      doubleArray0[4] = (-1352.691);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1758.423654973432);
      doubleArray0[7] = 2333.42278127158;
      doubleArray0[8] = (-1954.3);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5950.89132390968, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2337.379709), 2710.6386157852785, 1972.227789994866, (-2127.5672553214135), (-1352.691), 3.834E-20, (-1758.423654973432), 2333.42278127158, (-1954.3)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(7347561.70538633, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7174041640795443E10), 1.991658449048532E10, 1.4491065384064991E10, (-1.5632431690833519E10), (-9.938980590820742E9), 2.8170551578451187E-13, (-1.2920126309128254E10), 1.7144967870147123E10, (-1.4359339840836506E10)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 789.7769118621;
      doubleArray0[1] = (-11.77253189044258);
      doubleArray0[2] = (-2998.7);
      doubleArray0[3] = 3583.050612887;
      doubleArray0[4] = (-742.47218);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-305.9);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {789.7769118621, (-11.77253189044258), (-2998.7), 3583.050612887, (-742.47218), 1.304E19, 1.304E19, (-305.9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3235.1065566797506;
      doubleArray0[1] = (-2566.1);
      doubleArray0[2] = 3556.7647;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 676.1513;
      doubleArray0[5] = 282.790452900599;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2293.83249318651);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3235.1065566797506, (-2566.1), 3556.7647, 1.0, 676.1513, 282.790452900599, Double.NaN, (-2293.83249318651)}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-168.8F);
      floatArray0[1] = 4052.9648F;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-168.8F), 4052.9648F, Float.NaN}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3167;
      intArray0[1] = 1;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3167, 1}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.44888888888888883E18, Double.NaN, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0992790123456787E36, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.44888888888888883E18, Double.NaN, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.44888888888888883E18, Double.NaN, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.44888888888888883E18, Double.NaN, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0992790123456787E36, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3167, 1}, intArray1);
      assertArrayEquals(new int[] {3167, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1230.0306278;
      doubleArray0[2] = (-789.7769118621);
      doubleArray0[3] = 722.6437689021061;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3.26E18, 1230.0306278, (-789.7769118621), 722.6437689021061}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (int)integerArray0[1];
      doubleArray3[1] = (double) 3646;
      doubleArray3[2] = (double) 703;
      doubleArray3[3] = (double) (int)integerArray0[0];
      doubleArray3[4] = (double) (int)integerArray0[0];
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(7990.536228317746, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3646.0, 3646.0, 703.0, 3646.0, 3646.0}, doubleArray3, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3646, (int)integer1);
      assertNotNull(integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (int) integerArray0[0]);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (int)integerArray0[1];
      doubleArray3[1] = (double) 3646;
      doubleArray3[2] = (double) 703;
      doubleArray3[3] = (double) (int)integerArray0[0];
      doubleArray3[4] = (double) (int)integerArray0[0];
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(7990.536228317746, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3646.0, 3646.0, 703.0, 3646.0, 3646.0}, doubleArray3, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, (int) integerArray0[0]);
      assertNotNull(objectArray0);
      assertEquals(3646, objectArray0.length);
      assertEquals(2, integerArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4.46377168225451, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 867.26324535;
      doubleArray0[1] = (-4.9E-324);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(867.26324535, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {867.26324535, (-4.9E-324)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.3039999999999998E19;
      doubleArray0[1] = 2629.6190145671;
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345157E19, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.3039999999999998E19, 2629.6190145671, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 270);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(270, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.3039999999999998E19, 2629.6190145671, 1.304E19}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 270;
      longArray1[1] = (long) 270;
      longArray1[2] = (long) 270;
      longArray1[3] = (long) 270;
      longArray1[4] = (long) 270;
      longArray1[5] = (long) 270;
      longArray1[6] = (long) 270;
      longArray1[7] = (long) 270;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 270;
      longArray2[1] = (long) 270;
      longArray2[2] = (long) 270;
      longArray2[3] = (long) 270;
      longArray2[4] = (long) 270;
      longArray2[5] = (long) 270;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 270;
      longArray3[1] = (long) 270;
      longArray3[2] = (long) 270;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer((-281));
      assertEquals((-281), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(612);
      assertEquals(612, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer1);
      assertNotNull(pair0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1568.6050195252737);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 609.2258597291554;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1568.6050195252737), 1.304E19, 3.26E18, 1.304E19, Double.NaN, 609.2258597291554}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 106;
      intArray0[1] = (-1064);
      intArray0[2] = (-2140396242);
      intArray0[3] = (-2142774253);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2140396242);
      intArray1[1] = 106;
      intArray1[2] = 3709;
      intArray1[3] = (-2142774253);
      intArray1[4] = 106;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-14169827), int0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {106, (-1064), (-2140396242), (-2142774253)}, intArray0);
      assertArrayEquals(new int[] {(-2140396242), 106, 3709, (-2142774253), 106}, intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 210.0F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = (-2803.385F);
      floatArray0[3] = 0.0F;
      floatArray0[1] = (-381.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {210.0F, (-381.0F), (-2803.385F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3940.9;
      doubleArray0[2] = 475.304801234267;
      doubleArray0[3] = 1322.17788031;
      doubleArray0[4] = 3402.1282792190996;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 3940.9, 475.304801234267, 1322.17788031, 3402.1282792190996}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1040);
      assertEquals(1040, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1040;
      floatArray0[1] = (float) 1040;
      floatArray0[2] = (float) 1040;
      floatArray0[3] = (-3326.2F);
      floatArray0[4] = (-3.4028235E38F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1040;
      floatArray1[1] = (float) (int)integerArray0[0];
      floatArray1[2] = (-3326.2F);
      floatArray1[3] = (-3326.2F);
      floatArray1[4] = (-3326.2F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1040.0F, 1040.0F, 1040.0F, (-3326.2F), (-3.4028235E38F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1040.0F, 1040.0F, (-3326.2F), (-3326.2F), (-3326.2F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3326.2F);
      doubleArray0[1] = (double) 1040.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3484.9972905550135, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3326.199951171875), 1040.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(1040.0F, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3459247.94921875), 1081600.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, int0);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 0}, intArray0);
      assertArrayEquals(new int[] {2, 2, 0, 2, 2, 2, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1073.057014551);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 145.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 503.683;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1073.057014551), 1.0, 145.0, Double.NEGATIVE_INFINITY, 503.683}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1073.057014551);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(200);
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("");
      assertNull(integer1);
      
      integerArray0[1] = null;
      Integer integer2 = new Integer(187);
      assertEquals(187, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals(187, (int)integer3);
      assertNotNull(integer3);
      assertEquals(8, integerArray0.length);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((int) integerArray0[4]);
      assertEquals(187, (int)integer4);
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(99);
      assertEquals(99, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(10);
      assertEquals(10, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[7] = integer6;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1778.4694604);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-679);
      intArray0[1] = (-1);
      intArray0[2] = (-1617);
      intArray0[3] = 1317;
      intArray0[4] = 178;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-679);
      intArray1[1] = 178;
      intArray1[2] = (-1617);
      intArray1[3] = 167;
      intArray1[4] = 178;
      intArray1[5] = (-1617);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1329, int0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-679), (-1), (-1617), 1317, 178}, intArray0);
      assertArrayEquals(new int[] {(-679), 178, (-1617), 167, 178, (-1617)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1191.6904F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 5579.6436F;
      floatArray0[5] = (-2443.8738F);
      floatArray0[6] = 512.2373F;
      floatArray0[7] = (-1718.0F);
      floatArray0[8] = (-189.3F);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 5579.6436F;
      floatArray1[1] = Float.NaN;
      floatArray1[2] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(3, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {5579.6436F, Float.NaN, Float.NaN}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1191.6904F), Float.NaN, 5579.6436F, (-2443.8738F), 512.2373F, (-1718.0F), (-189.3F)}, floatArray0, 0.01F);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3986.4730456089;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      double double0 = (-879.35629193);
      Double double1 = new Double((-879.35629193));
      assertEquals((-879.35629193), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Double, String> pair0 = new Pair<Double, String>(double1, (String) null);
      assertNotNull(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Pair<Double, Object> pair1 = new Pair<Double, Object>(pair0);
      assertNotNull(pair1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 3219;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3219, 3219);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 112, 700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-691));
      assertEquals((-691), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1104));
      assertEquals((-1104), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("^Myn[gtYECA");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = Integer.getInteger("^Myn[gtYECA", (-1104));
      assertEquals((-1104), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4685);
      assertEquals(4685, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertEquals((-1104), (int)integer5);
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      assertEquals((-1), (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1104));
      assertEquals((-1104), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 183, (-1104));
      assertNotNull(objectArray0);
      assertEquals(183, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.112763991139216, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.112763991139216;
      doubleArray2[1] = 2.112763991139216;
      doubleArray2[2] = (double) 3646;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.112763991139216, 2.112763991139216, 3646.0}, doubleArray2, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Vc?FB4A";
      stringArray0[1] = "g.%EYAeF";
      stringArray0[2] = " ?5Hq,";
      stringArray0[3] = "START_POSITION";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      int int0 = 703;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(705.268, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1888;
      intArray0[1] = (-3052);
      intArray0[2] = 0;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1888;
      intArray1[2] = 3;
      intArray1[3] = (-3052);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5288.492507321912, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1888, (-3052), 0}, intArray0);
      assertArrayEquals(new int[] {0, 1888, 3, (-3052)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-197.597), (-1832.474403), (-197.597), (-230.0373342658755), (-2503.4), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-660);
      Integer[] integerArray1 = new Integer[2];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer integer0 = new Integer((-491));
      assertEquals((-491), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("p LfltS>72B&,&92", integer0);
      assertEquals((-491), (int)integer1);
      assertNotNull(integer1);
      
      integerArray1[0] = integer1;
      Integer integer2 = new Integer((-660));
      assertEquals((-660), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray1[1] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray1, mathArrays_OrderDirection0, true);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(705.268, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2209;
      intArray0[0] = 2209;
      intArray0[2] = 2209;
      intArray0[3] = 2209;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2209, 0, 2209, 2209}, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 134217729;
      intArray0[2] = 671;
      intArray0[3] = 681;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 134217729, 671, 681}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 681;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1094;
      intArray0[1] = (-1);
      intArray0[2] = 699;
      intArray0[3] = (-3147);
      intArray0[4] = 672;
      intArray0[5] = 701;
      intArray0[6] = 600;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1094, (-1), 699, (-3147), 672, 701, 600}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1094;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 672;
      doubleArray0[4] = (double) 672;
      doubleArray0[5] = 5.35360464390568E22;
      doubleArray0[6] = (double) 699;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = (double) (-3147);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2188.0, 0.0, 1344.0, 1344.0, 1.070720928781136E23, 1398.0, 7.668E-20, (-6294.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1094.0, 0.0, 672.0, 672.0, 5.35360464390568E22, 699.0, 3.834E-20, (-3147.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5.35360464390568E22, double0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2188.0, 0.0, 1344.0, 1344.0, 1.070720928781136E23, 1398.0, 7.668E-20, (-6294.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1094.0, 0.0, 672.0, 672.0, 5.35360464390568E22, 699.0, 3.834E-20, (-3147.0)}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 1094;
      integerArray0[2] = (Integer) 672;
      integerArray0[3] = (Integer) 672;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2188.0, 0.0, 1344.0, 1344.0, 1.070720928781136E23, 1398.0, 7.668E-20, (-6294.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1094.0, 0.0, 672.0, 672.0, 5.35360464390568E22, 699.0, 3.834E-20, (-3147.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 703;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {7, 703}, intArray0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 703 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(618.50037, (-2830.9860420639056), 1.9933176091498834, (-2830.9860420639056));
      assertEquals((-1756608.9688102647), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1756608.9688102647);
      doubleArray1[2] = (-1756608.9688102647);
      doubleArray1[3] = (-1756608.9688102647);
      doubleArray1[4] = (-2830.9860420639056);
      doubleArray1[5] = 1.9933176091498834;
      doubleArray1[6] = (-1756608.9688102647);
      doubleArray1[7] = 618.50037;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1639.2F;
      floatArray0[1] = 1639.2F;
      floatArray0[2] = 4332.3906F;
      floatArray0[3] = 1639.2F;
      floatArray0[4] = 4332.3906F;
      floatArray0[5] = 1639.2F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = 1639.2F;
      floatArray0[8] = 1639.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1639.2F, 1639.2F, 4332.3906F, 1639.2F, 4332.3906F, 1639.2F, Float.NaN, 1639.2F, 1639.2F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3168.944663704207);
      doubleArray1[1] = (-3168.944663704207);
      doubleArray1[2] = (-3435.0500174963877);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = (-3168.944663704207);
      doubleArray1[5] = (-3168.944663704207);
      doubleArray1[6] = (-3168.944663704207);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3168.944663704207), (-3168.944663704207), (-3435.0500174963877), 3.834E-20, (-3168.944663704207), (-3168.944663704207), (-3168.944663704207)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-3168.944663704207), (-3168.944663704207), (-3435.0500174963877), 3.834E-20, (-3168.944663704207), (-3168.944663704207), (-3168.944663704207)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2209;
      intArray0[1] = 2209;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2209, 2209}, intArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1380.0;
      doubleArray0[1] = 1380.0;
      doubleArray0[2] = 1380.0;
      doubleArray0[3] = 1380.0;
      doubleArray0[4] = 1380.0;
      doubleArray0[5] = 1380.0;
      doubleArray0[6] = 1380.0;
      doubleArray0[7] = 1380.0;
      MathArrays.scaleInPlace(1380.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(3168.944663704207, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0, 1904400.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9, 6.034938217558291E9}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 3408);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(212);
      assertEquals(212, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(212);
      assertEquals(212, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(212, (int)integer2);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3408);
      assertEquals(3408, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("");
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = new Integer(3408);
      assertEquals(3408, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray0[5] = integer5;
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-1902.008466927), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1834), (-1834));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 3408);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Class<FieldElement> class1 = FieldElement.class;
      Field<Object> field1 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field1).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field1).getZero();
      Object[][] objectArray1 = MathArrays.buildArray(field1, 228, 0);
      assertSame(class1, class0);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(228, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 703L, 703L, 703L}, longArray0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(705, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2.112763991139216, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 703L, 703L, 703L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination((-2830.9860420639056), 0.0, (-2830.9860420639056), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace((-1100.7), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(705.268, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 701;
      intArray0[1] = (-804);
      intArray0[2] = (-1481);
      intArray0[3] = 2294;
      intArray0[4] = 2144234807;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.25;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-417.984007169443);
      doubleArray0[3] = 653.07472;
      doubleArray0[4] = 22.35574539;
      doubleArray0[5] = 0.8109631538391113;
      doubleArray0[6] = 9.313225746154785E-10;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.25, 1.304E19, (-417.984007169443), 653.07472, 22.35574539, 0.8109631538391113, 9.313225746154785E-10}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.9933176091498834;
      doubleArray0[1] = 1.9933176091498834;
      doubleArray0[2] = 1.9933176091498834;
      doubleArray0[3] = 1.9933176091498834;
      doubleArray0[4] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 7.642379713480652E-20}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 7.642379713480652E-20}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 7.642379713480652E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.946630181894015, 7.946630181894015, 7.946630181894015, 7.946630181894015, 1.5284759426961305E-19}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 3.834E-20}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 750);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(750, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 1.9933176091498834, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 3.9733150909470076, 7.642379713480652E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.946630181894015, 7.946630181894015, 7.946630181894015, 7.946630181894015, 1.5284759426961305E-19}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 3408;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 3901;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3408, 3901);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (int)integerArray0[1];
      doubleArray3[1] = (double) 3646;
      doubleArray3[2] = (double) 703;
      doubleArray3[3] = (double) (int)integerArray0[0];
      doubleArray3[4] = (double) (int)integerArray0[0];
      double double0 = MathArrays.distance1(doubleArray2, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7990.536228317746, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3646.0, 3646.0, 703.0, 3646.0, 3646.0}, doubleArray3, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (int) integerArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-3168.944663704207), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3168.944663704207);
      doubleArray1[1] = (-3168.944663704207);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (-3168.944663704207);
      doubleArray1[6] = (-3168.944663704207);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-3168.944663704207), (-3168.944663704207), 0.0, 0.0, 0.0, (-3168.944663704207), (-3168.944663704207)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1639.2F;
      doubleArray0[0] = (double) 1639.2F;
      doubleArray2[2] = (-42.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 680;
      intArray0[1] = 555;
      intArray0[2] = 680;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {680, 555, 680}, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = 1.9933176091498834;
      // Undeclared exception!
      try { 
        MathArrays.scale(1.9933176091498834, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1890);
      intArray0[0] = (-1890);
      intArray0[1] = (-1890);
      intArray0[2] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3986.4730456089;
      doubleArray0[2] = (double) (-1890);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 3986.4730456089, (-1890.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 713);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray1.length);
      assertEquals(713, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(713, doubleArray2.length);
      assertEquals(720, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection1, false, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(713, doubleArray2.length);
      assertEquals(720, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = new Integer(703);
      assertEquals(703, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray4 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[2];
          doubleArray0[1] = (-2.112763991139216);
          double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray1, doubleArray0);
          assertNotNull(doubleArray1);
          assertEquals(2, doubleArray0.length);
          assertEquals(703, doubleArray1.length);
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
          
          double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray0, doubleArray2);
          assertNotSame(doubleArray2, doubleArray0);
          assertNotSame(doubleArray2, doubleArray1);
          assertNotNull(doubleArray2);
          assertEquals(2, doubleArray0.length);
          assertEquals(3, doubleArray2.length);
          assertFalse(doubleArray0.equals((Object)doubleArray1));
          assertFalse(doubleArray2.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray1));
          assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
          
          long[] longArray0 = new long[4];
          longArray0[1] = (long) 703;
          doubleArray1[570] = (double) 703;
          longArray0[3] = (long) 703;
          MathArrays.checkNonNegative(longArray0);
          assertEquals(4, longArray0.length);
          assertArrayEquals(new long[] {0L, 703L, 0L, 703L}, longArray0);
          
          long[][] longArray1 = new long[1][2];
          longArray1[0] = longArray0;
          MathArrays.checkNonNegative(longArray1);
          assertEquals(1, longArray1.length);
          
          double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
          assertNotSame(doubleArray0, doubleArray3);
          assertNotSame(doubleArray0, doubleArray1);
          assertNotSame(doubleArray0, doubleArray2);
          assertNotSame(doubleArray1, doubleArray3);
          assertNotSame(doubleArray1, doubleArray2);
          assertNotSame(doubleArray1, doubleArray0);
          assertNotSame(doubleArray2, doubleArray0);
          assertNotSame(doubleArray2, doubleArray3);
          assertNotSame(doubleArray2, doubleArray1);
          assertNotSame(doubleArray3, doubleArray1);
          assertNotSame(doubleArray3, doubleArray2);
          assertNotSame(doubleArray3, doubleArray0);
          assertNotNull(doubleArray3);
          assertEquals(2, doubleArray0.length);
          assertEquals(703, doubleArray1.length);
          assertEquals(3, doubleArray2.length);
          assertEquals(705, doubleArray3.length);
          assertFalse(doubleArray0.equals((Object)doubleArray1));
          assertFalse(doubleArray0.equals((Object)doubleArray2));
          assertFalse(doubleArray1.equals((Object)doubleArray2));
          assertFalse(doubleArray1.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray0));
          assertFalse(doubleArray2.equals((Object)doubleArray1));
          assertFalse(doubleArray3.equals((Object)doubleArray1));
          assertFalse(doubleArray3.equals((Object)doubleArray2));
          assertFalse(doubleArray3.equals((Object)doubleArray0));
          assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
          assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
          
          // Undeclared exception!
          MathArrays.convolve(doubleArray1, doubleArray3);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 3408);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double double0 = MathArrays.linearCombination(1.997844754509471E-9, (double) (-1380L), (double) (-1890), (-714.8592642839085), (-714.8592642839085), 6.71088645E7, (double) 4014L, (-1938.9609016115116));
      assertEquals((-4.797982540844808E10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2.112763991139216);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2.112763991139216)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.46377168225451}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(3646);
      assertEquals(3646, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2339;
      intArray0[1] = 0;
      intArray0[2] = (-2033);
      intArray0[3] = (-1353);
      intArray0[4] = 680;
      boolean boolean3 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2339;
      intArray0[1] = 0;
      intArray0[2] = (-2033);
      intArray0[3] = (-1353);
      intArray0[4] = 680;
      intArray0[5] = 706;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2339, 0, (-2033), (-1353), 680, 706}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Integer integer0 = new Integer((-2039));
      assertEquals((-2039), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2154);
      assertEquals(2154, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-359);
      intArray2[1] = (-2039);
      intArray2[2] = 175;
      intArray2[3] = (-2039);
      intArray2[4] = (-2039);
      intArray2[5] = (-2039);
      intArray2[6] = 175;
      intArray2[7] = 2154;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      Integer integer0 = new Integer(1023);
      assertEquals(1023, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      int int0 = 703;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(3.834E-20, 1.304E19, 1165.60240874439, 0.0, (-770.44), 0.0, 1615.3923977, (double) 703);
      assertEquals(1135621.3555367, double0, 0.01);
      
      Integer integer0 = new Integer(703);
      assertEquals(703, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.9933176091498834, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2339;
      intArray0[1] = 0;
      intArray0[2] = (-2033);
      intArray0[3] = (-1353);
      intArray0[4] = 680;
      intArray0[5] = 706;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2339, 0, (-2033), (-1353), 680, 706}, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-3168.944663704207), doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 0, (-384.8074723257), 511693.560362354, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[4] = 966.198180338;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 966.198180338, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-3168.944663704207), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, (-3061828.56766282), -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, (-3061828.56766282), -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(705, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 703;
      doubleArray4[1] = (double) 703L;
      doubleArray4[2] = (-1270.1447367101534);
      doubleArray4[3] = (double) 703;
      doubleArray4[4] = (double) 703L;
      doubleArray4[5] = (double) 703L;
      doubleArray4[6] = 1.304E19;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = (double) 703L;
      double[] doubleArray5 = MathArrays.convolve(doubleArray1, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotNull(doubleArray5);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(711, doubleArray5.length);
      assertEquals(9, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {703.0, 703.0, (-1270.1447367101534), 703.0, 703.0, 703.0, 1.304E19, 0.0, 703.0}, doubleArray4, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1890);
      intArray0[0] = (-1890);
      intArray0[1] = (-1890);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(705.268, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(94);
      assertEquals(94, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(3.834E-20, 1.304E19, 1165.60240874439, 0.0, (-770.44), 0.0, 1615.3923977, (double) 703);
      assertEquals(1135621.3555367, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-705);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1380L);
      longArray1[4] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) (-705);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[1] = (long) (-445);
      longArray2[3] = (long) 2250;
      longArray2[4] = 736L;
      longArray2[7] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[2] = (long) (-445);
      longArray3[3] = 4014L;
      longArray0[2] = longArray3;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-445), 2250);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(705, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 703L;
      doubleArray4[2] = (double) 703;
      doubleArray4[3] = 3.6725170580355583E-9;
      doubleArray4[4] = 988.0;
      doubleArray4[5] = (double) 703L;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray4, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 232;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 232;
      doubleArray0[1] = (double) 232;
      doubleArray0[2] = (double) 232;
      doubleArray0[3] = 3003.3299307408;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {232.0, 232.0, 232.0, 3003.3299307408, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(703, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L}, longArray0);
      
      Integer integer0 = new Integer(19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(703);
      assertEquals(703, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(176);
      assertEquals(176, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-696));
      assertEquals((-696), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-696));
      assertEquals((-696), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      
      Integer integer5 = new Integer((-696));
      assertEquals((-696), (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer((-696));
      assertEquals((-696), (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 3258.14234;
      doubleArray0[2] = 2932.1;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 3280.673875;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 3258.14234, 2932.1, 1.0, 1.34217729E8, 3280.673875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 3258.14234, 2932.1, 1.0, 1.34217729E8, 3280.673875}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1883.3219791874326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 601.489;
      doubleArray0[6] = 3003.3299307408;
      doubleArray0[7] = (-3199.4463856);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-160.2), (-71.5), 0.0, 1883.3219791874326, 0.0, 601.489, 3003.3299307408, (-3199.4463856)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146619756, 42);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 60.596265671978, 60.596265671978, (-379.279494), (-4076.348287288154), 367.195420721502, 0.0, (-1636.723));
      assertEquals((-1519799.3453405052), double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(2, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-20.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination((-1138.15454), (-389.90645), (-20.0), 1.304E19, (-389.90645), (-389.90645));
      assertEquals((-2.607999999999994E20), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-20.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1438;
      intArray0[2] = 1;
      intArray0[3] = (-849);
      intArray0[4] = 1;
      intArray0[5] = (-614);
      intArray0[6] = (-1834);
      intArray0[7] = 4710;
      intArray0[8] = 7;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      double double0 = MathArrays.linearCombination((-1356.0628282418663), 390.4344, 601.489, 3.834E-20, 3.834E-20, 1.34217729E8);
      assertEquals((-529453.5767069161), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-160.2);
      doubleArray1[3] = 1.9933176091498834;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-160.2 < 1.993)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-144.8854899843162);
      doubleArray0[1] = (-71.5);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-144.8854899843162), (-71.5), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-144.8854899843162);
      doubleArray1[1] = (-144.8854899843162);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-71.5);
      doubleArray1[4] = (-144.8854899843162);
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-715.3275895436677);
      doubleArray0[2] = 1283.65952;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 511693.560362354, 1647781.7632866302}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1035.0464096));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.8244106387022192, 1305.0512645206818, (-2341.9220847593842)}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(1283.65952, (-197.597), (-715.3275895436677), (-2296.927697852), (-3168.281936755), 2202.9694);
      assertEquals((-5590219.673956883), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-2037.277952), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean2);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double double0 = MathArrays.linearCombination((-16.5113909796), Double.NaN, (double) 0.0F, (double) 0.0F);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination((-2830.9860420639056), 0.0, (-2830.9860420639056), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((-3107.515004202913), (-3107.515004202913), 2088.060813140602, (-2.6033824355191673E-8), 0.0, 815.79);
      assertEquals(9656649.501291871, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-4100));
      assertEquals((-4100), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      String string0 = "";
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2511);
      assertEquals(2511, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-696));
      assertEquals((-696), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(2, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      assertEquals((-696), (int)integer6);
      assertNotNull(integer6);
      assertEquals(7, integerArray0.length);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      
      integerArray0[6] = integer6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[][] longArray1 = new long[9][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      longArray1[8] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.9933176091498834, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      double double0 = MathArrays.linearCombination((-96.213075672), 1096.582, 1883.3219791874326, (-6.032174644509064E-23), 0.0, (-888.860013902525));
      assertEquals((-105505.52694655312), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-160.2), (-71.5), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "]]S-/-";
      stringArray0[2] = "";
      stringArray0[3] = "eDy4z.2zyg+MI%Bcet-";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, 3402.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.8504700929334538;
      double double0 = MathArrays.linearCombination((-2830.9860420639056), 0.8504700929334538, (-2830.9860420639056), 0.8504700929334538);
      assertEquals((-4815.337924574801), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.8504700929334538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((-3107.515004202913), (-3107.515004202913), 2088.060813140602, (-2.6033824355191673E-8), 0.8504700929334538, 815.79);
      assertEquals(9657343.306288986, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer0 = new Integer((-2039));
      assertEquals((-2039), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2154);
      assertEquals(2154, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(175);
      assertEquals(175, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2511);
      assertEquals(2511, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-696));
      assertEquals((-696), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-696);
      doubleArray4[1] = (double) 703L;
      doubleArray4[2] = (double) int0;
      doubleArray4[3] = (double) 703L;
      doubleArray4[4] = (double) 703L;
      doubleArray4[5] = (double) 2;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 248;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 248;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {248.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61504.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 134217729);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {248.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {248.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61504.0, 0.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {248.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 0, Double.NaN, 0.0, (double) 134217729, 60.596265671978, (-1035.0464096), 0.0, 250.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination(1.0, 511693.560362354, (double) 0, (-384.8074723257));
      assertEquals(511693.560362354, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-144.8854899843162);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1883.3219791874326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 601.489;
      double double0 = MathArrays.linearCombination(1883.3219791874326, 1.9933176091498834, (-6.032174644509064E-23), 601.489, 1883.3219791874326, (-1356.0628282418663));
      assertEquals((-2550148.870722166), double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3925.9177F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.4E-45F), 0.0F, 3925.9177F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-144.8854899843162), (-71.5), 0.0, 1883.3219791874326, 0.0, 601.489, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2511);
      assertEquals(2511, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-696));
      assertEquals((-696), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(2, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      assertEquals((-696), (int)integer6);
      assertNotNull(integer6);
      assertEquals(7, integerArray0.length);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 703L;
      doubleArray3[1] = (double) int0;
      doubleArray3[2] = (double) (int)integerArray0[3];
      doubleArray3[3] = (double) (int)integerArray0[3];
      doubleArray3[4] = (-95.4145);
      doubleArray3[5] = (double) int0;
      doubleArray3[6] = (double) (int)integerArray0[6];
      doubleArray3[7] = (double) int0;
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotNull(doubleArray4);
      assertEquals(8, doubleArray4.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {494209.0, 4.0, 484416.0, 484416.0, 9103.926810250001, 4.0, 484416.0, 4.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {703.0, 2.0, (-696.0), (-696.0), (-95.4145), 2.0, (-696.0), 2.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 9;
      intArray0[2] = (-1663);
      intArray0[3] = 2278;
      intArray0[4] = (-1241);
      intArray0[5] = (-2398);
      intArray0[6] = (-221);
      intArray0[7] = 845;
      intArray0[8] = (-1508);
      int[] intArray1 = MathArrays.copyOf(intArray0, 223);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(223, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {134217729, 9, (-1663), 2278, (-1241), (-2398), (-221), 845, (-1508)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-144.8854899843162);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1883.3219791874326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 601.489;
      double double0 = MathArrays.linearCombination(1883.3219791874326, 1.9933176091498834, (-6.032174644509064E-23), 601.489, 1883.3219791874326, (-1356.0628282418663));
      assertEquals((-2550148.870722166), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-144.885 < -71.5)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection2, false);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertTrue(boolean1);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1029.4);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1029.4)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(250.0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 966.198180338;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 966.198180338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-3168.944663704207), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, (-3061828.56766282), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 966.198180338;
      doubleArray0[2] = (-1921.799322408096);
      doubleArray0[3] = 2841.851999013;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1540.9902728;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1890.0;
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 966.198180338, (-1921.799322408096), 2841.851999013, Double.NaN, 1540.9902728, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1890.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-457.9032448));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 966.198180338, (-1921.799322408096), 2841.851999013, Double.NaN, 1540.9902728, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-129.09079494205724), 256.7657518895153, (-379.69118667965927), Double.NaN, (-205.88701506779887), -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(966.198180338, 0.0, (-4352.34766624), 1540.9902728, (-1921.799322408096), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 248;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 248;
      doubleArray0[1] = (double) 248;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {248.0, 248.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61504.0, 61504.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 134217729);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {248.0, 248.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.71088645E7, 6.71088645E7}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {248.0, 248.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {61504.0, 61504.0}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {248.0, 248.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.71088645E7, 6.71088645E7}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 0, Double.NaN, 0.0, (double) 134217729, 60.596265671978, (-1035.0464096), 0.0, 250.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1029.4);
      doubleArray0[1] = (-3168.944663704207);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1029.4), (-3168.944663704207), 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(1809.632, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1862835.1808000002), (-5734623.669668372), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1862835.1808000002), (-5734623.669668372), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.4701549108261694E12, 2.1365317441013285E13, 3.2885908632720742E13, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(705, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(511693.560362354, 0.0, 1.34217729E8, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-660);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = 6635480.775109699;
      doubleArray0[2] = (double) (-660);
      doubleArray0[3] = (double) (-660);
      doubleArray0[4] = (double) (-660);
      doubleArray0[5] = (double) (-660);
      doubleArray0[6] = (double) (-660);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {31.0, 6635480.775109699, (-660.0), (-660.0), (-660.0), (-660.0), (-660.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {31.0, 6635480.775109699, (-660.0), (-660.0), (-660.0), (-660.0), (-660.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-445);
      intArray0[0] = (-445);
      intArray0[1] = 2250;
      intArray0[2] = 0;
      intArray0[3] = (-705);
      intArray0[4] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-445), 2250, 0, (-705), 0}, intArray0);
      
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1380L);
      longArray1[1] = (long) (-445);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-445);
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) (-705);
      longArray1[8] = (long) 2250;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-705);
      longArray2[1] = (long) (-445);
      longArray2[3] = (long) 2250;
      longArray2[4] = 736L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-445), doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 227.09304865256345;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 3405.3550816408;
      doubleArray0[3] = (-1227.40334);
      doubleArray0[4] = 902.3195615746629;
      doubleArray0[5] = 1092.3869339398;
      doubleArray0[6] = 1384.079;
      doubleArray0[7] = 4246.420063452313;
      doubleArray0[8] = 3753.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {227.09304865256345, Double.NEGATIVE_INFINITY, 3405.3550816408, (-1227.40334), 902.3195615746629, 1092.3869339398, 1384.079, 4246.420063452313, 3753.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 227.09304865256345;
      doubleArray1[1] = (-1227.40334);
      doubleArray1[2] = 3786.3683244013;
      doubleArray1[3] = (-1227.40334);
      doubleArray1[4] = 227.09304865256345;
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {227.09304865256345, Double.NEGATIVE_INFINITY, 3405.3550816408, (-1227.40334), 902.3195615746629, 1092.3869339398, 1384.079, 4246.420063452313, 3753.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {227.09304865256345, (-1227.40334), 3786.3683244013, (-1227.40334), 227.09304865256345}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-715.3275895436677);
      doubleArray0[2] = 1283.65952;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 511693.560362354, 1647781.7632866302}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1035.0464096));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.8244106387022192, 1305.0512645206818, (-2341.9220847593842)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 511693.560362354, 1647781.7632866302}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-3.660285211190199E8), 2.1151907473252692E9}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 511,693.56)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 703);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(703, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 703;
      longArray0[1] = (long) 703;
      longArray0[2] = (long) 703;
      longArray0[3] = (long) 703;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {703L, 703L, 703L, 703L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1524.8828092055442), doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-715.3275895436677);
      doubleArray0[2] = 1283.65952;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 511693.560362354, 1647781.7632866302}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1035.0464096));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.8244106387022192, 1305.0512645206818, (-2341.9220847593842)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3199.4463856);
      doubleArray3[1] = 3003.3299307408;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1.0), (-715.3275895436677), 1283.65952}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3199.4463856), 3003.3299307408}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 218.428503497892;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 2314.3177284;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1890);
      intArray0[0] = (-1890);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = (-628);
      intArray0[4] = (-628);
      intArray0[5] = 1;
      int int2 = 1678;
      intArray0[6] = 1678;
      intArray0[7] = 250;
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(8, intArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 1, 1678, 250}, intArray0);
      
      int int4 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int4);
      assertEquals(8, intArray0.length);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 1, 1678, 250}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int5 = 472;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 472;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-209.169042276), (-1755.1457643768504), 2088.060813140602, (-1.0));
      assertEquals(365034.0977763432, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination((-3107.515004202913), 8.4873549096, (-569.56917), 0.0, 3.834E-20, 8.0);
      assertEquals((-26374.58272757726), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-209.169042276), (-1755.1457643768504), 2088.060813140602, (-1.0));
      assertEquals(365034.0977763432, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-209.169042276);
      doubleArray0[1] = (-1755.1457643768504);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2132.6398644);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-209.169042276), (-1755.1457643768504), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {227.09304865256345, 1905.5468157474368, -0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination((-5509.1801121141), 365034.0977763432, (-1.0), 4.983191803254889E-7, (-5509.1801121141), (-2031.17191533));
      assertEquals((-1.9998484997927232E9), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-209.169042276), (-1755.1457643768504), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {227.09304865256345, 1905.5468157474368, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-209.169042276), (-1755.1457643768504), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {227.09304865256345, 1905.5468157474368, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1883.3219791874326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 601.489;
      double double0 = MathArrays.linearCombination(1883.3219791874326, 1.9933176091498834, (-6.032174644509064E-23), 601.489, 1883.3219791874326, (-1356.0628282418663));
      assertEquals((-2550148.870722166), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1105.0;
      doubleArray0[1] = 1105.0;
      doubleArray0[2] = 1105.0;
      doubleArray0[3] = 1105.0;
      doubleArray0[4] = 1105.0;
      doubleArray0[5] = 1105.0;
      doubleArray0[6] = 1105.0;
      doubleArray0[7] = 1105.0;
      doubleArray0[8] = 1105.0;
      MathArrays.scaleInPlace(1105.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(1221025.0, 0.0, 0.0, 0.0, 2.0, 1221025.0);
      assertEquals(2442050.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1285;
      intArray0[1] = 1046;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 250;
      intArray0[1] = 17;
      intArray0[2] = 250;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {250, 17, 250}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {250, 17, 250}, intArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 17, 717);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1883.3219791874326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 601.489;
      doubleArray0[6] = 3003.3299307408;
      doubleArray0[7] = (-3199.4463856);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-160.2), (-71.5), 0.0, 1883.3219791874326, 0.0, 601.489, 3003.3299307408, (-3199.4463856)}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2146619756, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      
      double double2 = MathArrays.linearCombination((-582.7), 0.0, 0.0, 0.0, 695.7740037669, 0.0, (double) 0, 1.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      boolean boolean3 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean3);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1105.0;
      doubleArray0[1] = 1105.0;
      doubleArray0[2] = 1105.0;
      doubleArray0[3] = 1105.0;
      doubleArray0[4] = 1105.0;
      doubleArray0[5] = 1105.0;
      doubleArray0[6] = 1105.0;
      doubleArray0[7] = 1105.0;
      doubleArray0[8] = 1105.0;
      MathArrays.scaleInPlace(1105.0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(1221025.0, 0.0, 1.0, 0.0, 2.0, 1221025.0);
      assertEquals(2442050.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0, 1221025.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1285;
      intArray0[1] = 1046;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 585;
      intArray0[6] = 0;
      intArray0[7] = 1102;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1285, 1046, 0, 0, 0, 585, 0, 1102}, intArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-503.66596988);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-503.66596988)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 287;
      intArray0[1] = 2;
      intArray0[2] = 5573;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2315);
      intArray0[6] = 93;
      intArray0[7] = 0;
      intArray0[8] = 536;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 536;
      intArray1[5] = 280;
      intArray1[6] = 536;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 164.353757802;
      doubleArray0[0] = 164.353757802;
      double double1 = (-1.0);
      doubleArray0[1] = (-1.0);
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 738.9658037726629;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {164.353757802, (-1.0), 0.0, 738.9658037726629}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {164.353757802, (-1.0), 0.0, 738.9658037726629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = 44;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 44);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(44, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {164.353757802, (-1.0), 0.0, 738.9658037726629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double3 = 0.0;
      double double4 = 1.304E19;
      double double5 = MathArrays.linearCombination(0.0, 738.9658037726629, 0.0, 0.0, 738.9658037726629, 1.304E19);
      assertEquals(9.636114081195523E21, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 721.8;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-3289.0);
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 721.8, 3.141592653589793, (-3289.0), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1443.6, 6.283185307179586, (-6578.0), Double.NaN}, doubleArray1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2815.80292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 248;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 134217729;
      intArray0[3] = (-2253);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(4, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {248, 0, 134217729, (-2253)}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 1678;
      intArray0[1] = (-628);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1678, (-628)}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {1678, (-628)}, intArray0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-160.2);
      doubleArray0[1] = (-71.5);
      doubleArray0[3] = (-160.2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2204.8245F);
      floatArray0[1] = (-903.0428F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-36.75331F);
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2204.8245F), (-903.0428F), 0.0F, 1.0F, (-36.75331F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 444.57F;
      float float0 = 335.91342F;
      floatArray0[1] = 335.91342F;
      float float1 = 0.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 335.91342F;
      floatArray1[1] = 335.91342F;
      floatArray1[2] = 1296.1381F;
      floatArray1[3] = 335.91342F;
      floatArray1[4] = 335.91342F;
      floatArray1[5] = (-2438.151F);
      floatArray1[6] = 335.91342F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {444.57F, 335.91342F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {335.91342F, 335.91342F, 1296.1381F, 335.91342F, 335.91342F, (-2438.151F), 335.91342F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1204.142432854);
      double double0 = (-852.3682605);
      doubleArray0[1] = (-852.3682605);
      double double1 = 3.141592653589793;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double2 = (-611.50228881);
      doubleArray0[7] = (-611.50228881);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1983));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2484.825;
      doubleArray0[1] = 2314.3177284;
      doubleArray0[2] = 2267.290194462;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 20.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 962.17488;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1763.149;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1222.441720743336);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[1][2];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 453.8335;
      doubleArray2[2] = 1222.441720743336;
      doubleArray2[3] = 3960.9114856741;
      doubleArray2[4] = (-11.390291);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1222.441720743336;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[0] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distance(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 516.3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 273.7914;
      doubleArray0[3] = 1132.515304010653;
      doubleArray0[4] = (-1831.3228651308);
      doubleArray0[5] = 3806.50515213;
      doubleArray0[6] = (-2248.50946028328);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {516.3, 0.0, 273.7914, 1132.515304010653, (-1831.3228651308), 3806.50515213, (-2248.50946028328)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-3959.2), doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {516.3, 0.0, 273.7914, 1132.515304010653, (-1831.3228651308), 3806.50515213, (-2248.50946028328)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int int0 = 1678;
      int int1 = 250;
      int[] intArray0 = new int[5];
      intArray0[0] = 250;
      intArray0[1] = 250;
      intArray0[2] = 1678;
      intArray0[3] = 250;
      intArray0[4] = 1;
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int2);
      assertEquals(5, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {250, 250, 1678, 250, 1}, intArray0);
      
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(5, intArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertArrayEquals(new int[] {250, 250, 1678, 250, 1}, intArray0);
      
      double[] doubleArray1 = MathArrays.scale((-0.16624879837036133), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1678);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1890);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-628);
      intArray0[5] = 17;
      intArray0[6] = 1678;
      intArray0[7] = 250;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 17, 1678, 250}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 17, 1678, 250}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) (-1890);
      doubleArray0[3] = (double) 250;
      doubleArray0[4] = 567.3319304563322;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1890);
      doubleArray0[7] = (double) 250;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2755.1888355093392, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1890.0), 250.0, 567.3319304563322, 0.0, (-1890.0), 250.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7591065.519315309, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1890.0), 250.0, 567.3319304563322, 0.0, (-1890.0), 250.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1678, (-1890));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1890);
      intArray0[0] = (-1890);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = (-628);
      intArray0[4] = (-628);
      intArray0[5] = 1;
      int int2 = 1678;
      intArray0[6] = 1678;
      intArray0[7] = 250;
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(8, intArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 1, 1678, 250}, intArray0);
      
      int int4 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int4);
      assertEquals(8, intArray0.length);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertArrayEquals(new int[] {(-1890), 0, 0, 0, (-628), 1, 1678, 250}, intArray0);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      MathArrays.scaleInPlace(705.268, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 705.268;
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection2, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathArrays.linearCombination((-209.169042276), (-1755.1457643768504), 2088.060813140602, (-1.0));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-209.169042276);
      doubleArray0[1] = (-1755.1457643768504);
      doubleArray0[2] = 2088.060813140602;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2076.43F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1114;
      intArray0[0] = 1114;
      int int1 = 1;
      intArray0[1] = 1;
      int int2 = 311;
      intArray0[2] = 311;
      int int3 = (-4336);
      intArray0[3] = (-4336);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-20.0);
      doubleArray0[0] = (-20.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2084.0009;
      doubleArray0[2] = 1831.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1311.366591;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 939.480775475;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-715.3275895436677);
      doubleArray0[2] = 1283.65952;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 511693.560362354, 1647781.7632866302}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1035.0464096));
      assertArrayEquals(new double[] {1.8244106387022192, 1305.0512645206818, (-2341.9220847593842)}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-680);
      intArray0[1] = 3157;
      intArray0[2] = 0;
      intArray0[3] = (-660);
      intArray0[4] = (-3217);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-569.56917);
      doubleArray0[0] = (-569.56917);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -569.569 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-3314.14);
      doubleArray0[0] = (-3314.14);
      double double1 = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1324.9750389;
      double double2 = (-387.22253344582236);
      doubleArray0[3] = (-387.22253344582236);
      double double3 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double4 = 826.2953421;
      doubleArray0[6] = 826.2953421;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 826.2953421;
      doubleArray3[1] = 1324.9750389;
      doubleArray2[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1131.514135971;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 1200L;
      longArray2[1] = 0L;
      longArray2[2] = (-582L);
      longArray2[3] = 0L;
      longArray2[4] = 1190L;
      longArray2[5] = 2510L;
      longArray2[6] = 0L;
      longArray2[7] = 905L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 100L;
      longArray1[2] = 1L;
      longArray1[3] = 0L;
      longArray1[4] = (-2714L);
      long long0 = 0L;
      longArray1[5] = 0L;
      longArray1[6] = (-2368L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,714 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-676.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-115.19F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 103.48F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1690);
      intArray0[1] = 204;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1012L;
      longArray0[1] = 2196L;
      longArray0[2] = 0L;
      longArray0[3] = (-3110L);
      long long0 = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 100L;
      longArray0[6] = (-2524L);
      longArray0[7] = (-3010L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,110 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = (-1.0);
      MathArrays.linearCombination((-1.0), (-152.6035), (-695.523789284), Double.NaN, (-152.6035), Double.NaN, 0.0, (-152.6035));
      double double1 = 3480.5137616282836;
      double double2 = 3242.36257;
      MathArrays.linearCombination(3480.5137616282836, 458.816675716641, (-152.6035), Double.NaN, (-695.523789284), 0.0, 3242.36257, (-1.0));
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("unbounded solution");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.unbounded solution
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-445);
      intArray0[1] = 2250;
      intArray0[2] = 0;
      intArray0[3] = (-720);
      intArray0[4] = 0;
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1380L);
      longArray1[1] = (long) (-445);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) (-445);
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) (-720);
      longArray1[8] = (long) 2250;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) (-720);
      longArray2[1] = (long) (-445);
      longArray2[2] = (long) (-720);
      longArray2[3] = (long) 2250;
      longArray2[4] = 736L;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) (-720);
      longArray3[2] = (long) (-445);
      longArray3[3] = 4014L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-1L);
      longArray4[1] = (long) 2250;
      longArray4[2] = (long) (-445);
      longArray4[3] = 4014L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 736L;
      longArray5[1] = (long) (-720);
      longArray5[2] = 0L;
      longArray5[3] = (long) 2250;
      longArray5[4] = 1023L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = (-1380L);
      longArray6[1] = (long) 2250;
      longArray6[2] = 602L;
      longArray6[3] = 736L;
      longArray6[4] = 736L;
      longArray6[5] = (long) 0;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 79;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-2208L);
      longArray1[1] = 448L;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 448L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 448L;
      longArray3[1] = (-2208L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (-2208L);
      longArray4[1] = 448L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = 448L;
      longArray5[3] = 448L;
      longArray5[4] = 448L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 448L;
      longArray6[1] = (-1034L);
      longArray6[2] = (long) 0;
      longArray6[3] = 448L;
      longArray6[4] = 0L;
      longArray6[5] = 448L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      longArray9[0] = (long) 0;
      longArray9[1] = 448L;
      longArray9[2] = (-1034L);
      longArray9[3] = 0L;
      longArray9[4] = 0L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,208 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[5];
      longArray1[0] = (-308L);
      longArray1[1] = 3695L;
      longArray1[2] = (-2674L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-2674L);
      longArray2[1] = (-2674L);
      longArray2[2] = (-673L);
      longArray2[3] = (-2674L);
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = (-308L);
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-308L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-267.67117477);
      doubleArray0[5] = 2661.9149757904934;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1433.5;
      doubleArray0[1] = 271.750644014;
      doubleArray0[2] = 275.9204734;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3187.90169);
      doubleArray0[5] = 2699.81981733016;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double double0 = MathArrays.linearCombination(0.0, (-1436.114194353671), 2699.81981733016, 0.0, 0.0, 271.750644014, 1433.5, (-3187.90169));
      assertEquals((-4569857.072615), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 966.198180338;
      doubleArray0[2] = (-1921.799322408096);
      doubleArray0[3] = 2841.851999013;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1540.9902728;
      doubleArray0[6] = (-1029.4);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, Double.NaN, 0.0, -0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }
}
