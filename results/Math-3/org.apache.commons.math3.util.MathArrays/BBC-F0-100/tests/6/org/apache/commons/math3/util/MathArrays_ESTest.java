/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:07:00 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q,#<h+uzdR9}&U/{*9)";
      stringArray0[1] = "F(pGM_l";
      stringArray0[2] = "]";
      stringArray0[3] = "@..)-CibB";
      stringArray0[4] = "";
      stringArray0[5] = "2-{q";
      stringArray0[6] = "F?35<zN";
      stringArray0[7] = "^xo9P=(P4nnt>L/JDZ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      FieldElement<Integer>[] fieldElementArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 727.5;
      doubleArray0[0] = Double.NaN;
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4.3466666666666665E18;
      double double0 = 8.399916792650531E7;
      doubleArray0[2] = 8.399916792650531E7;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-407.0);
      double double1 = 4277.6;
      doubleArray0[5] = 4277.6;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.3745366896198556E19, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 4.3466666666666665E18, 8.399916792650531E7, 1.304E19, (-407.0), 4277.6}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {(-1.0), 4.3466666666666665E18, 8.399916792650531E7, 1.304E19, (-407.0), 4277.6}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (4,346,666,666,666,666,500 >= 83,999,167.927)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 35;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {134217729, 35}, intArray0);
      assertArrayEquals(new int[] {134217729, 35}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 35;
      doubleArray0[1] = (double) 35;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 35;
      doubleArray0[5] = (double) 35;
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = (double) 35;
      double[][] doubleArray1 = new double[15][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 32760);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(32760, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2409.0964F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2409.0964F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2409.0964F);
      doubleArray0[1] = (double) (-2409.0964F);
      doubleArray0[2] = (double) (-2409.0964F);
      doubleArray0[3] = (double) (-2409.0964F);
      doubleArray0[4] = (double) (-2409.0964F);
      doubleArray0[5] = (double) (-2409.0964F);
      doubleArray0[6] = (double) (-2409.0964F);
      doubleArray0[7] = (-1180.2697367);
      doubleArray0[8] = (double) (-2409.0964F);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3504);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2409.096435546875), (-2409.096435546875), (-2409.096435546875), (-2409.096435546875), (-2409.096435546875), (-2409.096435546875), (-2409.096435546875), (-1180.2697367), (-2409.096435546875)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3504, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, Object> pair0 = new Pair<Object, Object>(class0, class0);
      assertNotNull(pair0);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 2144450479;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2144450479, (-1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2570.9020841005668;
      doubleArray0[1] = 1237.6719047158;
      doubleArray0[2] = 1054.20494924552;
      doubleArray0[3] = (-1900.410403351);
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 2703.7101971;
      doubleArray0[6] = 1766.2;
      doubleArray0[7] = (-4.503599627370496E15);
      doubleArray0[8] = 5206.8737625;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2570.9020841005668, 1237.6719047158, 1054.20494924552, (-1900.410403351), -0.0, 2703.7101971, 1766.2, (-4.503599627370496E15), 5206.8737625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6609537.526032638, 1531831.7437228365, 1111348.0750137495, 3611559.7011647103, 0.0, 7310048.829902522, 3119462.44, 2.028240960365167E31, 2.711153437861091E7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2570.9020841005668, 1237.6719047158, 1054.20494924552, (-1900.410403351), -0.0, 2703.7101971, 1766.2, (-4.503599627370496E15), 5206.8737625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.188657830630544E-32), (-1.0536536271685149E-32), (-8.974647193002266E-33), 1.6178555132180657E-32, 0.0, (-2.3017199026110752E-32), (-1.503599644796295E-32), 3.8340000000107603E-20, (-4.432710644204591E-32)}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-330);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-330)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3.8340000000107603E-20, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2570.9020841005668, 1237.6719047158, 1054.20494924552, (-1900.410403351), -0.0, 2703.7101971, 1766.2, (-4.503599627370496E15), 5206.8737625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.188657830630544E-32), (-1.0536536271685149E-32), (-8.974647193002266E-33), 1.6178555132180657E-32, 0.0, (-2.3017199026110752E-32), (-1.503599644796295E-32), 3.8340000000107603E-20, (-4.432710644204591E-32)}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-330)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Object, Object> pair0 = new Pair<Object, Object>("NUMERATOR", class0);
      assertNotNull(pair0);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8(JJx8";
      stringArray0[1] = "8(JJx8";
      stringArray0[2] = "8(JJx8";
      stringArray0[3] = "8(JJx8";
      stringArray0[4] = "8(JJx8";
      stringArray0[5] = "8(JJx8";
      stringArray0[6] = "8(JJx8";
      stringArray0[7] = "8(JJx8";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3368.9012845985453;
      doubleArray0[1] = (-2157.627);
      doubleArray0[2] = 0.6816387176513672;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3368.9012845985453, (-2157.627), 0.6816387176513672, 1.304E19}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertArrayEquals(new double[] {3368.9012845985453, (-2157.627), 0.6816387176513672, 1.304E19}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.6816387176513672;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 3368.9012845985453;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.6816387176513672;
      doubleArray1[6] = 1.700416E38;
      doubleArray1[7] = (-2157.627);
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.700416E38, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.6816387176513672, 1.304E19, 3368.9012845985453, 0.0, 0.6816387176513672, 1.700416E38, (-2157.627)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3368.9012845985453, (-2157.627), 0.6816387176513672, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6737.802569197091, (-4315.254), 1.3632774353027344, 2.608E19}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 760.8016008501338;
      doubleArray0[1] = 0.24740394949913025;
      doubleArray0[2] = (-3.676576299901389E-20);
      doubleArray0[3] = (-5.782521472392639E-17);
      doubleArray0[4] = 730.0531657686903;
      doubleArray0[5] = 931.1713147192;
      doubleArray0[6] = (-2291.859);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2689.143814516176, double0, 0.01);
      assertArrayEquals(new double[] {760.8016008501338, 0.24740394949913025, (-3.676576299901389E-20), (-5.782521472392639E-17), 730.0531657686903, 931.1713147192, (-2291.859)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3137.154918822156);
      doubleArray0[2] = (-919.841356721569);
      doubleArray0[3] = 8.0;
      doubleArray0[4] = 1375.62658;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-3137.154918822156), (-919.841356721569), 8.0, 1375.62658}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-8);
      intArray0[1] = (-1356);
      intArray0[2] = 1;
      intArray0[3] = 2146715666;
      intArray0[4] = 3502;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1356);
      intArray1[1] = 2146715666;
      intArray1[2] = (-1356);
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray1[5] = 1;
      intArray1[6] = 2146715666;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1528404), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-8), (-1356), 1, 2146715666, 3502}, intArray0);
      assertArrayEquals(new int[] {(-1356), 2146715666, (-1356), 1, 2, 1, 2146715666}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1761.973327);
      doubleArray0[1] = (-2006.1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = (-1761.973327);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1116.7035);
      double[] doubleArray1 = MathArrays.scale((-1116.7035), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1116.7035), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1247026.7069122503, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1.3925590882023842E9), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1116.7035), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1247026.7069122503, -0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<FieldElement<FieldElement<Integer>>> field0 = (Field<FieldElement<FieldElement<Integer>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3103), (-338));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2480.986);
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = 0.16666666666745392;
      doubleArray0[3] = 4.114596545734038E13;
      doubleArray0[4] = 1.0708593250394448E-7;
      doubleArray0[5] = 3.834E-20;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2480.986), 2.17333333333333325E18, 0.16666666666745392, 4.114596545734038E13, 1.0708593250394448E-7, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.17333333372282496E18, double0, 0.01);
      assertArrayEquals(new double[] {(-2480.986), 2.17333333333333325E18, 0.16666666666745392, 4.114596545734038E13, 1.0708593250394448E-7, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(3233.702748581098, 0.0, 3233.702748581098, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2216.2604394123);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[2][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2483.91;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-1169.306527);
      doubleArray0[3] = 2340.28963;
      doubleArray0[4] = 98.76743406;
      doubleArray0[5] = (-1911.37525);
      doubleArray0[6] = 1428.111068;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2483.91;
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 2483.91;
      doubleArray1[3] = (-1169.306527);
      doubleArray1[4] = 2340.28963;
      doubleArray1[5] = (-1169.306527);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2483.91, 1.34217729E8, (-1169.306527), 2340.28963, 98.76743406, (-1911.37525), 1428.111068}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2483.91, 1.34217729E8, 2483.91, (-1169.306527), 2340.28963, (-1169.306527)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<FieldElement<Integer>, String> pair0 = (Pair<FieldElement<Integer>, String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<Object, String> pair1 = new Pair<Object, String>(pair0);
      assertNotNull(pair1);
      
      Pair<Object, String> pair2 = new Pair<Object, String>(pair1, "i\"Xz-OIA denza");
      assertFalse(pair2.equals((Object)pair1));
      assertNotNull(pair2);
      
      Pair<Object, Object> pair3 = new Pair<Object, Object>(pair2);
      assertFalse(pair1.equals((Object)pair2));
      assertFalse(pair2.equals((Object)pair1));
      assertNotNull(pair3);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Object, Object>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertFalse(pair1.equals((Object)pair2));
      assertFalse(pair2.equals((Object)pair1));
      assertNotSame(pair1, pair2);
      assertNotSame(pair2, pair1);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-379);
      intArray0[1] = (-1379);
      intArray0[2] = 15;
      intArray0[3] = 6;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1379);
      intArray1[1] = 15;
      intArray1[2] = 15;
      intArray1[3] = (-379);
      intArray1[4] = 6;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2779, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-379), (-1379), 15, 6}, intArray0);
      assertArrayEquals(new int[] {(-1379), 15, 15, (-379), 6}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1758.2551009452525, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-379), (-1379), 15, 6}, intArray0);
      assertArrayEquals(new int[] {(-1379), 15, 15, (-379), 6}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 5137680.008746629);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 724.5;
      doubleArray1[1] = 94864.0;
      doubleArray1[2] = 3.32;
      doubleArray1[3] = 716844.6403029202;
      doubleArray1[4] = 1.2246467991473532E-16;
      doubleArray1[5] = 2566.214201081;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-606.243);
      doubleArray0[1] = (-606.243);
      doubleArray0[2] = (-606.243);
      doubleArray0[3] = (-606.243);
      doubleArray0[4] = (-606.243);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-606.243), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Integer, String> pair0 = new Pair<Integer, String>((Integer) null, "");
      assertNotNull(pair0);
      
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0);
      assertNotNull(pair1);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3725, 308);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(601.1207345855164, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1142);
      intArray0[0] = (-1142);
      intArray0[1] = (-4637);
      intArray0[2] = 297;
      intArray0[3] = 3330;
      intArray0[4] = 1;
      intArray0[5] = 3092;
      intArray0[6] = 295;
      intArray0[7] = 291;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-1142), (-4637), 297, 3330, 1, 3092, 295, 291}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1);
      intArray2[1] = 1;
      intArray2[2] = 295;
      intArray2[3] = 291;
      intArray2[4] = (-4637);
      intArray2[5] = 297;
      intArray2[6] = (-1142);
      int int2 = MathArrays.distance1(intArray1, intArray2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, int2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), 1, 295, 291, (-4637), 297, (-1142)}, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4.983191803254889E-7;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-4456.0);
      doubleArray0[3] = 681.3152;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.983191803254889E-7, 1.0, (-4456.0), 681.3152}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4832200548026713E-13, 1.0, 1.9855936E7, 464190.40175104}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4.983191803254889E-7, 1.0, (-4456.0), 681.3152}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2990.7F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 813.5749F;
      floatArray0[5] = (-964.02234F);
      floatArray0[6] = 2990.7F;
      floatArray0[7] = (-263.8F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2990.7F, 0.0F, 0.0F, 0.0F, 813.5749F, (-964.02234F), 2990.7F, (-263.8F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-703.3066F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-703.3066F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-703.3066F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 705.7160954131;
      doubleArray0[2] = 1799.0;
      doubleArray0[3] = 1661.83671;
      doubleArray0[4] = 243.0;
      doubleArray0[5] = 4.577421300679453E7;
      doubleArray0[6] = (-1678.9625443572168);
      doubleArray0[7] = 706.1367794;
      doubleArray0[8] = 997.2403789467;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1923.3063355;
      doubleArray0[1] = 1735.3535859625129;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1361.7025729572);
      doubleArray0[4] = (-0.2499999701976776);
      doubleArray0[5] = 0.9;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1923.3063355, 1735.3535859625129, 1.0, (-1361.7025729572), (-0.2499999701976776), 0.9}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,923.306 > 1,735.354)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[] fieldElementArray0 = MathArrays.buildArray(field0, 9);
      assertNotNull(fieldElementArray0);
      assertEquals(9, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[19];
      intArray0[0] = (-4448);
      intArray0[1] = (-4448);
      intArray0[10] = (-4448);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(19, intArray0.length);
      
      int int1 = new Integer((-4448));
      assertFalse(int1 == int0);
      assertEquals((-4448), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4448);
      doubleArray0[1] = (double) (-4448);
      doubleArray0[2] = (double) (-4448);
      doubleArray0[3] = (double) (-4448);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-4448);
      doubleArray0[6] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9946.030363919064, double0, 0.01);
      assertArrayEquals(new double[] {(-4448.0), (-4448.0), (-4448.0), (-4448.0), 0.0, (-4448.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 6.44245091586808E9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = 0.0F;
      floatArray0[2] = 0.0F;
      int[] intArray0 = new int[5];
      intArray0[0] = 1333;
      int int0 = 2;
      intArray0[1] = 2;
      intArray0[3] = (-1351);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[6] = ":awVf3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 824;
      intArray0[1] = (-3794);
      intArray0[2] = 2;
      intArray0[3] = 1025;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 824;
      intArray1[1] = (-3794);
      intArray1[2] = 12;
      intArray1[3] = 1025;
      intArray1[4] = 1025;
      intArray1[5] = 2;
      intArray1[6] = 824;
      intArray1[7] = 2;
      intArray1[8] = 824;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {824, (-3794), 2, 1025}, intArray0);
      assertArrayEquals(new int[] {824, (-3794), 12, 1025, 1025, 2, 824, 2, 824}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 1631L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1631L;
      longArray2[1] = 1631L;
      longArray2[2] = 1631L;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      intArray0[2] = 18;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {(-1194), (-1194), 18}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1194);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1194.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 3387.8964902808);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-101.603009622403);
      doubleArray0[1] = 2000.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-101.603009622403), 2000.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10323.171564330116, (-406412.038489612), 4000000.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 290;
      intArray0[1] = (-2538);
      intArray0[2] = 3171;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {290, (-2538), 3171}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {290, (-2538), 3171}, intArray0);
      assertArrayEquals(new int[] {290, (-2538), 3171}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1634L);
      longArray1[1] = (long) (-2538);
      longArray1[2] = (long) 3171;
      longArray1[3] = (long) 3171;
      longArray1[4] = (long) (-2538);
      longArray1[5] = (long) 290;
      longArray1[6] = (long) (-2538);
      longArray1[7] = (long) 3171;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 86L;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 290;
      longArray2[3] = (long) (-2538);
      longArray2[4] = (-1634L);
      longArray2[5] = (-2465L);
      longArray2[6] = (long) 3171;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-2538);
      longArray3[1] = 86L;
      longArray3[2] = (-1634L);
      longArray3[3] = (long) 3171;
      longArray3[4] = 1L;
      longArray3[5] = (long) 3171;
      longArray3[6] = (long) 290;
      longArray3[7] = (long) 290;
      longArray3[8] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 290;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) (-2538);
      longArray4[3] = (-1634L);
      longArray4[4] = (long) 290;
      longArray4[5] = 1L;
      longArray4[6] = 2185L;
      longArray4[7] = 86L;
      longArray4[8] = (long) (-2538);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-1634L);
      longArray5[1] = 349L;
      longArray5[2] = (long) (-2538);
      longArray5[3] = (long) 290;
      longArray5[4] = (-3222L);
      longArray5[5] = 1L;
      longArray5[6] = (-1634L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) (-2538);
      longArray7[1] = (-3222L);
      longArray7[2] = (long) (-2538);
      longArray7[3] = 585L;
      longArray7[4] = 2185L;
      longArray7[5] = (long) 3171;
      longArray7[6] = (long) 0;
      longArray7[7] = (-3222L);
      longArray7[8] = (long) 3171;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray8[0] = (long) 3171;
      longArray8[1] = (long) 0;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2243.58781710608);
      doubleArray0[1] = (-2243.58781710608);
      doubleArray0[5] = 1777.6252914446973;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,243.588 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1183);
      intArray0[1] = (-1183);
      intArray0[2] = 187;
      intArray0[3] = (-2283);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 131;
      intArray1[1] = (-1183);
      intArray1[2] = (-2283);
      intArray1[3] = 131;
      intArray1[4] = (-2283);
      intArray1[5] = 131;
      intArray1[6] = (-1183);
      intArray1[7] = 131;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3695.2526300646887, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1183), (-1183), 187, (-2283)}, intArray0);
      assertArrayEquals(new int[] {131, (-1183), (-2283), 131, (-2283), 131, (-1183), 131}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {131, (-1183), (-2283), 131, (-2283), 131, (-1183), 131}, intArray1);
      assertEquals(8, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1183), (-1183), 187, (-2283)}, intArray0);
      assertArrayEquals(new int[] {(-1183), (-1183), 187, (-2283)}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(22, doubleArray2.length);
      
      MathArrays.scaleInPlace(1.4699556E-39, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(22, doubleArray2.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 130;
      intArray0[1] = 130;
      intArray0[2] = 130;
      intArray0[3] = 130;
      intArray0[4] = 130;
      intArray0[5] = 202;
      int int0 = (-834);
      intArray0[6] = (-834);
      intArray0[7] = 130;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {130, 130, 130, 130, 130, 202, (-834), 130}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-834);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-834.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 130;
      intArray1[1] = (-834);
      intArray1[2] = 202;
      intArray1[3] = 130;
      intArray1[4] = 3730;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-6111.0);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 1.7976931348623157E308, (-6111.0), Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1260.9F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1260.9F;
      doubleArray0[1] = (double) 1260.9F;
      doubleArray0[2] = 1777.6252914446973;
      doubleArray0[3] = (double) 1260.9F;
      doubleArray0[4] = (double) 1260.9F;
      doubleArray0[5] = (double) 1260.9F;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1260.9000244140625, 1260.9000244140625, 1777.6252914446973, 1260.9000244140625, 1260.9000244140625, 1260.9000244140625}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1260.9000244140625, 1260.9000244140625, 1777.6252914446973, 1260.9000244140625, 1260.9000244140625, 1260.9000244140625}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.7784856593681216E7, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1260.9000244140625, 1260.9000244140625, 1777.6252914446973, 1260.9000244140625, 1260.9000244140625, 1260.9000244140625}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double0 = 356.2369761;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      double double1 = (-6111.0);
      doubleArray0[4] = (-6111.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (356.237 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2658.0096729935904;
      doubleArray4[1] = 1849.64613380346;
      try { 
        MathArrays.ebeSubtract(doubleArray4, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = 307;
      intArray0[0] = 307;
      intArray0[1] = 4604;
      intArray0[2] = 4604;
      intArray0[3] = 4604;
      intArray0[4] = (-1);
      intArray0[5] = 4604;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4604;
      intArray1[1] = 4604;
      intArray1[2] = 4604;
      intArray1[3] = 4604;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "elitism rate ({0})";
      stringArray0[1] = "#V";
      stringArray0[2] = ")iH#-?\"";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1183);
      intArray0[3] = 130;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1183), 0, 0, 130, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distanceInf(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2898.6023977);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-666.14685623098);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1382.1;
      doubleArray1[6] = 10.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2898.6023977), (-1.0), (-666.14685623098), 3.834E-20, (-1.0), 1382.1, 10.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2898.6023977), (-1.0), (-666.14685623098), 3.834E-20, (-1.0), 1382.1, 10.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-666.14685623098);
      doubleArray2[2] = 10.0;
      doubleArray2[3] = 1382.1;
      doubleArray2[4] = 10.0;
      doubleArray2[5] = 1382.1;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1295.591153);
      doubleArray2[8] = 1382.1;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 701.0728128249197;
      doubleArray0[5] = 1777.6252914446973;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 701.073)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 699.94541042267;
      doubleArray0[5] = 1777.6252914446973;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2488481.328395954, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1399.89082084534, 0.0, 0.0, 0.0, 3555.2505828893945, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2477.5707018673675, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1399.89082084534, 0.0, 0.0, 0.0, 3555.2505828893945, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      int[] intArray0 = new int[5];
      intArray0[0] = 1333;
      intArray0[1] = 2;
      intArray0[2] = 297;
      intArray0[3] = (-1351);
      intArray0[4] = (-1194);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1333, 2, 297, (-1351), (-1194)}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 2107.422795021891, 619.0, 1.5874010519681994, 4163.745505785, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(982.6012511683155, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-941);
      intArray0[1] = 1895;
      intArray0[2] = 257;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 1631L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1631L;
      longArray2[1] = 1631L;
      longArray2[2] = 1631L;
      longArray2[3] = 1631L;
      longArray2[4] = 1631L;
      longArray2[5] = 1631L;
      longArray2[6] = 1631L;
      longArray2[7] = (-1643L);
      longArray2[8] = 1631L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Pair<Object, Object>[][] pairArray0 = MathArrays.buildArray(field0, 308, 0);
      assertNotNull(pairArray0);
      assertEquals(308, pairArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 2136.7542;
      double double1 = MathArrays.linearCombination(247.0, 1335.09503, 1335.09503, 2136.7542, 14528.40221014035, 1335.09503);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.257933596976102E7, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 12;
      intArray0[2] = 313;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2141472277));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 699.94541042267;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2783);
      intArray0[1] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2783), 2}, intArray0);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.linearCombination(6111.0, 699.94541042267, 0.07490822288864472, (double) 0);
      assertEquals(4277366.403092937, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) (-2783);
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = 2139.8438541119185;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2898.6023977);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2898.6023977), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 0;
      integerArray0[8] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 699.94541042267;
      doubleArray0[5] = 1777.6252914446973;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3649875.2543556048, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3^|8Wn1*Djp";
      stringArray0[1] = "#btcs2A.v]yse";
      stringArray0[2] = "]*G)d";
      stringArray0[3] = "r_g=^_";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "";
      stringArray0[6] = "&d][I|)5o%|S;Z+";
      stringArray0[7] = "";
      stringArray0[8] = "0";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2698));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 699.94541042267;
      doubleArray0[5] = 1777.6252914446973;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 699.94541042267, 0.0, 0.0, 0.0, 1777.6252914446973, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      int[] intArray0 = new int[4];
      intArray0[0] = 2147483632;
      intArray0[1] = 2147483632;
      intArray0[2] = 2147483632;
      intArray0[3] = 2147483632;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2147483632, 2147483632, 2147483632, 2147483632}, intArray0);
      assertEquals(4, intArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 2147483632);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 726.4201105070175;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {726.4201105070175, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {726.4201105070175, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1183);
      doubleArray1[1] = (double) (-1183);
      doubleArray1[3] = (double) (-4448);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.9305076599121094;
      doubleArray1[6] = (double) (-4448);
      doubleArray1[7] = (double) (-4448);
      doubleArray1[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (0 > -4,448)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 712.4739522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3238.1143F;
      floatArray0[1] = 222.946F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = -0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {3238.1143F, 222.946F, 0.0F, -0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 726.4201105070175;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 726.4201105070175;
      doubleArray1[1] = 726.4201105070175;
      doubleArray1[2] = 726.4201105070175;
      doubleArray1[1] = 726.4201105070175;
      doubleArray1[4] = 726.4201105070175;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (0 < 726.42)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3^|8Wn1*Djp";
      stringArray0[1] = "#btcs2A.v]yse";
      stringArray0[2] = "]*G)d";
      stringArray0[3] = "r_g=^_";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "";
      stringArray0[6] = "&d][I|)5o%|S;Z+";
      stringArray0[7] = "";
      stringArray0[8] = "0";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2698));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 699.94541042267;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1777.6252914446973;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.scale(1777.6252914446973, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      double double0 = 0.9285714285714286;
      doubleArray0[0] = 0.9285714285714286;
      double double1 = 0.008333333333333333;
      doubleArray0[1] = 0.008333333333333333;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.9285714285714286, 0.008333333333333333}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8622448979591837, 0.015476190476190477, 6.944444444444444E-5}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.8623837784599321, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.9285714285714286, 0.008333333333333333}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8622448979591837, 0.015476190476190477, 6.944444444444444E-5}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 965.0;
      doubleArray0[2] = 6.44245141043404E9;
      doubleArray0[3] = 4150.893;
      doubleArray0[4] = 0.9166666666666666;
      doubleArray0[5] = 1.125;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = 1.3039999999999998E19;
      doubleArray0[8] = 3934.0309183;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 965.0, 6.44245141043404E9, 4150.893, 0.9166666666666666, 1.125, 0.5, 1.3039999999999998E19, 3934.0309183}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1243);
      int int0 = 536;
      intArray0[1] = 536;
      int int1 = (-2593);
      intArray0[2] = (-2593);
      int int2 = 2028179000;
      intArray0[3] = 2028179000;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1243), 536, (-2593), 2028179000}, intArray0);
      assertEquals(4, intArray0.length);
      
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 729.0363725347862;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {729.0363725347862, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {729.0363725347862, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 356.2369761;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-6111.0);
      doubleArray0[5] = (-167.3204914);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 356.2369761, 1.7976931348623157E308, (-6111.0), (-167.3204914)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-167.3204914), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 356.2369761, 1.7976931348623157E308, (-6111.0), (-167.3204914)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-59605.74589590206), (-59605.74589590206), Double.NEGATIVE_INFINITY, 1022495.5229454001, 27996.146842337475}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1183);
      intArray0[1] = (-4448);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(1046.737056762319, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "f_p{ak+vX*8";
      stringArray0[1] = "Mo{$Eu@j9tS~";
      stringArray0[2] = "R";
      stringArray0[3] = "R";
      stringArray0[4] = "R";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 139;
      intArray0[1] = 2;
      intArray0[2] = (-140);
      intArray0[3] = 1072;
      intArray0[4] = 271;
      intArray0[5] = 134217729;
      intArray0[6] = 307;
      intArray0[7] = (-1);
      intArray0[8] = (-388);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1072;
      doubleArray1[1] = (double) 134217729;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3.834E-20, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-6111.0);
      doubleArray0[5] = (-167.3204914);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 1.7976931348623157E308, (-6111.0), (-167.3204914), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1905.52F);
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1905.52F);
      floatArray1[1] = 1.4E-45F;
      floatArray1[2] = 1.4E-45F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-787.0F);
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1905.52F), 1.4E-45F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1905.52F), 1.4E-45F, 1.4E-45F, 0.0F, (-787.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 356.2369761, 0.0, 1.7976931348623157E308, (-6111.0), (-167.3204914), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-858.1086F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-858.1086F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "";
      stringArray0[2] = "em6q|kMz^z9*=v=gqX$";
      stringArray0[3] = "xG4C";
      stringArray0[4] = "LE9nBaM1P{7*Rk";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      long[] longArray0 = new long[2];
      longArray0[0] = 885L;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 885L;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) 885L;
      doubleArray1[5] = 726.4201105070175;
      doubleArray1[6] = 0.0;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {885.0, Double.NaN, 1.0, Double.NaN, 885.0, 726.4201105070175, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-11), (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-4448);
      Integer integer0 = new Integer((-4448));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-4448), (int)integer0);
      assertNotNull(integer0);
      
      int int1 = (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-4448);
      doubleArray0[2] = (double) (-4448);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-4448.0), (-4448.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-4448.0), (-4448.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-4448);
      doubleArray3[1] = (double) (-1);
      doubleArray3[2] = (double) (-4448);
      doubleArray3[3] = (double) (-4448);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2898.6023977);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2898.6023977), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2898.6023977), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 699.94541042267;
      doubleArray0[2] = 699.94541042267;
      double double2 = 1850.0060133404313;
      doubleArray0[3] = 1850.0060133404313;
      doubleArray0[4] = (-3084.60070282408);
      double double3 = 1777.6252914446973;
      doubleArray0[1] = 1777.6252914446973;
      doubleArray0[6] = (-900.2);
      doubleArray0[7] = 3720.229996381855;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1777.6252914446973;
      doubleArray2[1] = 699.94541042267;
      doubleArray2[2] = (-900.2);
      doubleArray2[4] = 699.94541042267;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-11), 1430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1735.0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, (-1735.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 256);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, (-1735.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(256, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1183);
      intArray0[1] = (-4448);
      intArray0[2] = (-4448);
      intArray0[3] = 130;
      intArray0[4] = (-4448);
      intArray0[5] = (-4448);
      intArray0[6] = (-4448);
      intArray0[7] = (-4448);
      intArray0[8] = (-4448);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1183), (-4448), (-4448), 130, (-4448), (-4448), (-4448), (-4448), (-4448)}, intArray0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-4448);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 130;
      floatArray1[1] = (float) (-4448);
      floatArray1[2] = (-703.3066F);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      long[] longArray0 = new long[2];
      longArray0[0] = 851L;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 851L;
      floatArray0[1] = (float) 851L;
      floatArray0[2] = (float) 851L;
      floatArray0[3] = (float) 851L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {851.0F, 851.0F, 851.0F, 851.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1006;
      intArray0[0] = 1006;
      int int1 = 1;
      intArray0[1] = 1;
      int int2 = 619;
      intArray0[2] = 619;
      intArray0[3] = 2146060360;
      intArray0[4] = 2147483632;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1006, 1, 619, 2146060360, 2147483632}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2147483632;
      doubleArray0[1] = (double) 1006;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.147483632E9, 1006.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2146060360;
      doubleArray1[2] = (-4297.896712);
      doubleArray1[3] = (double) 2146060360;
      doubleArray1[4] = (double) 1006;
      doubleArray1[5] = (double) 2146060360;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][6];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3720.229996381855;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-900.2);
      doubleArray2[4] = 3720.229996381855;
      doubleArray2[5] = 0.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(3720.229996381855, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 729.0363725347862;
      double double1 = Double.NaN;
      Double[] doubleArray0 = new Double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[2];
      longArray1[0] = 851L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 851L;
      longArray2[2] = 3073L;
      longArray2[3] = 0L;
      longArray2[4] = 851L;
      longArray0[1] = longArray2;
      longArray0[2] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 851L;
      floatArray0[1] = (float) 851L;
      floatArray0[2] = (float) 851L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 726.4201105070175;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 726.4201105070175;
      doubleArray1[1] = 726.4201105070175;
      doubleArray1[2] = 0.0;
      doubleArray1[1] = 726.4201105070175;
      doubleArray1[4] = 0.0;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = MathArrays.scale(20.0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(29056.8044202807, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3385.9F;
      floatArray0[2] = (-835.8191F);
      floatArray0[3] = 904.47687F;
      floatArray0[4] = 2349.04F;
      floatArray0[5] = (-360.585F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 2349.04F;
      floatArray1[2] = (-360.585F);
      floatArray1[3] = (-835.8191F);
      floatArray1[4] = (-360.585F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[2] = (-489);
      intArray0[3] = 4604;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1735.0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 4.69543F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2532.1948F;
      floatArray0[7] = Float.NEGATIVE_INFINITY;
      floatArray0[8] = 129.4273F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray1[2] = (double) 2532.1948F;
      doubleArray1[3] = (double) (-1.0F);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = 3.834E-20;
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-2134966648));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[8];
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1735.0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[2] = (-489);
      intArray0[3] = 4604;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3010225.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double1 = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, 3.834E-20, 1458.12071009207, (-693.0), 3.834E-20, 3.834E-20);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-2800), (-1082));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      long[] longArray0 = new long[2];
      longArray0[0] = 885L;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 885L;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) 885L;
      doubleArray1[5] = 726.4201105070175;
      doubleArray1[6] = 0.0;
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-11), (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 762.7656020768233;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 528;
      int[] intArray1 = new int[5];
      intArray1[0] = 528;
      intArray1[1] = 528;
      intArray1[2] = 528;
      intArray1[3] = 528;
      intArray1[4] = 528;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
      
      MathArrays.linearCombination((-2.6033824355191673E-8), (-3.940510424527919E-20), Double.NaN, 14.101419448852539, (double) 528, (double) 528);
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {528}, intArray2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1012.380002);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 164.4065;
      doubleArray0[3] = 0.0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1526.4982F);
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1526.4982F);
      floatArray1[1] = (-3823.175F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0708593250394448E-7;
      doubleArray0[1] = 1.0708593250394448E-7;
      doubleArray0[2] = 1.0708593250394448E-7;
      doubleArray0[3] = 1.0708593250394448E-7;
      doubleArray0[4] = 1.0708593250394448E-7;
      doubleArray0[5] = 1.0708593250394448E-7;
      doubleArray0[6] = 1.0708593250394448E-7;
      doubleArray0[7] = 1.0708593250394448E-7;
      doubleArray0[8] = 1.0708593250394448E-7;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.linearCombination(1.34217729E8, 1.0708593250394448E-7, 1.0708593250394448E-7, (-2072.57578789), (-0.7853981633974483), 1.0708593250394448E-7);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-4448);
      floatArray0[1] = (float) (-4448);
      floatArray0[2] = (-703.3066F);
      floatArray0[3] = (float) (-4448);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-703.3066F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {494640.1448943652}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {494640.1448943652}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 729.0363725347862;
      doubleArray0[1] = Double.NaN;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 2935890503282001226L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.scaleInPlace((-5.207000323380292E-8), doubleArray0);
      assertArrayEquals(new double[] {(-3.796092627544627E-5), Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1006;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1006;
      intArray0[0] = 1006;
      int int1 = 2147483632;
      int[] intArray1 = new int[3];
      intArray1[0] = 619;
      intArray1[1] = 619;
      intArray1[2] = 2147483632;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      double double0 = MathArrays.linearCombination((-607.1055), 0.0, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3950.9241942065278;
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3950.9241942065278;
      doubleArray1[1] = 3950.9241942065278;
      MathArrays.equals(doubleArray1, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1224);
      intArray0[1] = 802;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 188;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 729.0363725347862;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3712.16968), 3.32, (-3712.16968), 3.32);
      assertEquals((-24648.806675199998), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-24648.806675199998);
      doubleArray0[1] = (-3712.16968);
      doubleArray0[2] = (-3712.16968);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-49297.613350399995), (-7424.33936), (-7424.33936)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1183);
      intArray0[1] = (-4448);
      intArray0[2] = (-4448);
      intArray0[3] = 130;
      intArray0[4] = (-4448);
      intArray0[5] = (-4448);
      intArray0[6] = (-4448);
      intArray0[7] = (-4448);
      intArray0[8] = (-4448);
      MathArrays.distance(intArray0, intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-4448);
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 130;
      floatArray1[1] = (float) (-4448);
      floatArray1[2] = (-703.3066F);
      floatArray1[3] = (float) (-4448);
      floatArray1[4] = (float) (-4448);
      floatArray1[5] = (float) (-4448);
      floatArray1[6] = (float) (-4448);
      floatArray1[7] = (float) (-4448);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      long[][] longArray1 = new long[1][0];
      MathArrays.checkNonNegative(longArray1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1006;
      intArray0[1] = 1;
      intArray0[2] = 619;
      intArray0[3] = 2146060360;
      intArray0[4] = 2147483632;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2147483632;
      doubleArray0[1] = (double) 1006;
      doubleArray0[2] = (-491.56595983);
      doubleArray0[3] = (double) 2147483632;
      doubleArray0[4] = (double) 2147483632;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.141592653589793);
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0471974675771751, 4.905651603972915E-7, (-2.397068925744061E-7), 1.0471974675771751, 1.0471974675771751}, doubleArray1, 0.01);
      assertEquals(3.719550757232915E9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2503.3142406963298);
      doubleArray0[4] = Double.NaN;
      MathArrays.normalizeArray(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(".1 F=X<b>r%i-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection..1 F=X<b>r%i-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3950.9241942065278;
      MathArrays.equals(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3950.9241942065278;
      doubleArray0[1] = 987.7177197932411;
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 151;
      int int0 = new Integer(151);
      double double0 = MathArrays.linearCombination(0.0, 3096.3655157, (-170.5653675766422), 987.7177197932411);
      assertEquals((-168470.43593849704), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1956.7956949);
      doubleArray0[2] = 100.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 3,829,049.392)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1762.4;
      doubleArray0[1] = (-3607.889086976816);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1762.4;
      doubleArray1[2] = (-3607.889086976816);
      doubleArray1[3] = (-3607.889086976816);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-3607.889086976816);
      doubleArray1[6] = 0.0;
      doubleArray1[3] = Double.NaN;
      double double0 = MathArrays.linearCombination((-3607.889086976816), (-20.0), 0.0, (-1557.98296), 0.0, 749.83, 0.0, 1762.4);
      assertEquals(72157.78173953632, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2503.3142406963298);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 218.67097;
      doubleArray0[6] = 145.926292;
      doubleArray0[7] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1735.0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-489);
      intArray0[3] = 4604;
      intArray0[4] = (-2146370559);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2898.6023977);
      doubleArray0[1] = 1.0708593250394448E-7;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.linearCombination(1.0708593250394448E-7, (-641.52971316), (-1.0), 167.3204914, 0.0, 1.0708593250394448E-7);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = new Integer((-4448));
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4448);
      doubleArray0[2] = (-4448);
      doubleArray0[3] = 4.3466666666666665E18;
      doubleArray0[6] = (double) (-4448);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      int int0 = 9;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathArrays.linearCombination((-3712.16968), 3.32, (-3712.16968), 3.32);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-24648.806675199998);
      doubleArray0[1] = (-3712.16968);
      doubleArray0[2] = (-3712.16968);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 2146060360;
      MathArrays.distance(intArray0, intArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 1006);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 2649.5922, 0.0, 1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((-1822.21595645), 0.0, 100.0, Double.POSITIVE_INFINITY, (-1331.0274900344018), 2649.5922, 3291.5, 0.0);
      long[] longArray0 = new long[6];
      longArray0[0] = 10000L;
      longArray0[1] = (-1L);
      longArray0[2] = (-845L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 727.5;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.scale(727.5, doubleArray0);
      assertArrayEquals(new double[] {529256.25, Double.NaN, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer integer0 = new Integer(9);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 9;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 9;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 356.2369761;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-6111.0);
      doubleArray0[5] = (-167.3204914);
      doubleArray0[6] = (-1046.245526);
      doubleArray0[7] = 1507.8191;
      doubleArray0[8] = 1901.82709;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 876.41805;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2436.5866536907324;
      doubleArray0[4] = 2369.1;
      doubleArray0[5] = 2554.90168841489;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 876.41805;
      doubleArray1[1] = 2369.1;
      doubleArray1[2] = 2436.5866536907324;
      doubleArray1[3] = 2436.5866536907324;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(2.0, (-4645.91210009364), 1366.70891076235, (-178.33808731), (-670.2586966), 2.0, 1366.70891076235, (-670.2586966));
      long[] longArray0 = new long[8];
      longArray0[0] = 10000L;
      longArray0[1] = (-718L);
      longArray0[2] = 2876L;
      longArray0[3] = 0L;
      longArray0[4] = (-9223372036854775808L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -718 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = (-3712.16968);
      double double1 = 3.32;
      MathArrays.linearCombination((-3712.16968), 3.32, (-3712.16968), 3.32);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-24648.806675199998);
      doubleArray0[1] = (-3712.16968);
      doubleArray0[2] = (-3712.16968);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = (double) 0;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("start position ({0})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.start position ({0})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(1046.737056762319, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "R";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3950.9241942065278;
      doubleArray0[1] = 987.7177197932411;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2268.434373931699;
      doubleArray0[4] = (-829.89);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 987.7177197932411;
      doubleArray2[1] = (Double) 3950.9241942065278;
      doubleArray2[2] = (Double) 3950.9241942065278;
      doubleArray2[3] = (Double) 0.0;
      doubleArray2[4] = (Double) (-829.89);
      doubleArray2[5] = (Double) 987.7177197932411;
      doubleArray2[6] = (Double) 100.0;
      doubleArray2[7] = (Double) 3950.9241942065278;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[2];
      longArray1[0] = 885L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray2[2] = 3073L;
      longArray2[3] = 1L;
      longArray2[4] = 885L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 885L;
      longArray3[1] = 3073L;
      longArray3[2] = 885L;
      longArray3[3] = 885L;
      longArray3[4] = 1L;
      longArray3[5] = 3073L;
      longArray3[6] = 5648769086999809661L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int int0 = (-1080);
      int int1 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, (-1080), 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 729.0363725347862;
      doubleArray0[1] = Double.NaN;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 729.0363725347862;
      doubleArray1[1] = (Double) 729.0363725347862;
      doubleArray1[2] = (Double) Double.NaN;
      doubleArray1[3] = (Double) 729.0363725347862;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[1];
      longArray1[0] = (-160L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-160L);
      longArray2[1] = (-160L);
      longArray2[2] = (-160L);
      longArray2[3] = (-160L);
      longArray2[4] = (-160L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-160L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (-160L);
      longArray4[1] = (-160L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = (-160L);
      longArray6[1] = (-160L);
      longArray6[2] = (-160L);
      longArray6[3] = (-160L);
      longArray6[4] = (-160L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (-160L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -160 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "t%6(_`:WaJ=";
      stringArray0[2] = "(WMT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.linearCombination(347.8641632039, 0.0, 0.0, 0.0, (-1117.532104704), 271.43249814453);
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 1163L;
      long long0 = 891L;
      longArray0[2] = 891L;
      long long1 = 958L;
      longArray0[3] = 958L;
      longArray0[4] = (-97L);
      long long2 = 4503599627370495L;
      longArray0[5] = 4503599627370495L;
      longArray0[6] = 2084L;
      longArray0[7] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -97 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1012.380002);
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 164.4065;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 831.92529703;
      doubleArray0[7] = (-845.9);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 1430L;
      longArray0[1] = (-1008L);
      longArray0[2] = 1L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-2816L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,008 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = 1015.788F;
      floatArray0[4] = 913.1F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-628.3F);
      floatArray0[2] = (-628.3F);
      floatArray0[3] = (-628.3F);
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-628.3F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1735.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-801.39448404603);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.linearCombination((-801.39448404603), 1.304E19, 1943.351, 0.0, 0.0, 2042.2258);
      int[] intArray0 = new int[5];
      intArray0[0] = 1347;
      intArray0[1] = (-1129);
      intArray0[2] = 2395;
      intArray0[3] = (-2899);
      intArray0[4] = 250;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 699.94541042267;
      doubleArray0[2] = 699.94541042267;
      double double2 = 1850.0060133404313;
      doubleArray0[3] = 1850.0060133404313;
      doubleArray0[4] = (-3084.60070282408);
      double double3 = 1777.6252914446973;
      doubleArray0[5] = 1777.6252914446973;
      doubleArray0[6] = (-900.2);
      doubleArray0[7] = 3720.229996381855;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1777.6252914446973;
      doubleArray2[1] = 699.94541042267;
      doubleArray2[2] = (-900.2);
      doubleArray2[3] = 1850.0060133404313;
      doubleArray2[4] = 699.94541042267;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 1083.6646;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.32;
      doubleArray0[4] = (-5347.082);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1083.6646);
      assertArrayEquals(new double[] {(-5.111508051678246), (-276.95801641093436), -0.0, (-0.8485103365785889), 1366.5826347991913}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-622);
      intArray0[2] = 641;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 58;
      intArray0[7] = 0;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0, 731);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 731;
      doubleArray0[3] = (double) 58;
      MathArrays.normalizeArray(doubleArray0, (-1695.6034253));
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-454.868);
      doubleArray0[1] = 740.13;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[7];
      longArray1[0] = (-1904L);
      longArray1[1] = (-2516L);
      longArray1[2] = 0L;
      longArray1[3] = 881L;
      longArray1[4] = 1266L;
      longArray1[5] = 0L;
      longArray1[6] = (-1525L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2516L);
      longArray2[1] = 0L;
      longArray2[2] = (-1525L);
      longArray2[3] = 881L;
      longArray2[4] = 20L;
      longArray2[5] = 9007199254740990L;
      longArray2[6] = (-2516L);
      longArray2[7] = 1266L;
      longArray2[8] = (-2516L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 881L;
      longArray3[1] = 20L;
      longArray3[2] = 20L;
      longArray3[3] = 1266L;
      longArray3[4] = 881L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,904 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      intArray0[3] = (-1194);
      intArray0[4] = (-1194);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      long[][] longArray1 = new long[4][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1533.1183309);
      doubleArray0[2] = (-3534.567);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 974.112326478;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.304E19;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("Qnqi`/:~WGnH{H(PV*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Qnqi`/:~WGnH{H(PV*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1084.678144187026;
      doubleArray0[2] = (-95.5051127954);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.668E-20, 2169.356288374052, (-191.0102255908)}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 117;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-2376.2508803205687), 1.34217729E8, (-2376.2508803205687), (-2376.2508803205687), 1.34217729E8, (-2376.2508803205687));
      assertEquals((-6.378643468135088E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1956.7956949);
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-747.2234619);
      doubleArray0[5] = 2411.186832904263;
      doubleArray0[6] = 1.0E-5;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1956.7956949);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1041.3062798);
      doubleArray2[1] = 1.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1527);
      intArray0[1] = (-4448);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-4448);
      floatArray0[1] = (float) (-1527);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) (-4448);
      floatArray1[1] = (float) (-1527);
      floatArray1[2] = (float) (-1527);
      floatArray1[3] = (float) (-1527);
      floatArray1[4] = (float) (-4448);
      floatArray1[5] = (float) (-1527);
      floatArray1[6] = (float) (-4448);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1527.0F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2331729.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2503.3142406963298);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 218.67097;
      doubleArray0[6] = 145.926292;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 2649.5922, 0.0, 1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((-1822.21595645), 0.0, 100.0, Double.POSITIVE_INFINITY, (-1331.0274900344018), 2649.5922, 3291.5, 0.0);
      long[] longArray0 = new long[6];
      longArray0[0] = 10000L;
      longArray0[1] = (-1L);
      longArray0[2] = (-845L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-841L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 10000L;
      longArray0[1] = 0L;
      longArray0[2] = 1137L;
      longArray0[3] = 3073L;
      longArray0[4] = (-1L);
      longArray0[5] = (-1430L);
      longArray0[6] = 3133L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2882.983585);
      doubleArray0[1] = 0.0;
      double double0 = 3.32;
      doubleArray0[2] = 3.32;
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("g@b<3=ru");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.g@b<3=ru
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1639);
      intArray0[1] = 0;
      intArray0[2] = 235;
      int[] intArray1 = new int[1];
      intArray1[0] = (-1639);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1290.046;
      doubleArray0[3] = 0.0;
      double double2 = (-1688.7180288946836);
      doubleArray0[4] = (-1688.7180288946836);
      doubleArray0[5] = 2511.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1284.20251861);
      doubleArray0[4] = (-525.4559046944481);
      doubleArray0[5] = 1625.815038935279;
      doubleArray0[6] = 1227.95373;
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1284.20251861);
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-420.21);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 158.45408796;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1938.18093);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= -420.21)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1107.891;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3896.369779);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 210.759587939;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-1480.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1762.4;
      doubleArray0[1] = (-3607.889086976816);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1762.4;
      doubleArray1[2] = (-3607.889086976816);
      doubleArray1[3] = (-3607.889086976816);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 223;
      intArray0[0] = 223;
      int int1 = (-1150);
      intArray0[1] = (-1150);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 223;
      doubleArray0[1] = (double) (-1150);
      doubleArray0[2] = (double) 223;
      doubleArray0[3] = (double) 223;
      MathArrays.safeNorm(doubleArray0);
      String string0 = "0(|`zu`VyB&iHfusd";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("0(|`zu`VyB&iHfusd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.0(|`zu`VyB&iHfusd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1969.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-69.86);
      doubleArray0[4] = (-1326.251181);
      doubleArray0[5] = (-830.440224533996);
      doubleArray0[6] = 1822.49651579;
      doubleArray0[7] = 1778.17562671;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-170.5653675766422);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -170.565 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
