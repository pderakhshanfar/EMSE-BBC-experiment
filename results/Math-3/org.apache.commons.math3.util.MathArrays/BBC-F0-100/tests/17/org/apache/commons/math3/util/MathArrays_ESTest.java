/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:08:18 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 401;
      intArray0[2] = (-121);
      intArray0[3] = 265;
      intArray0[0] = 2147483501;
      intArray0[5] = (-6753);
      intArray0[6] = (-11);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483501;
      intArray1[1] = 965;
      intArray1[2] = (-6753);
      intArray1[3] = 61;
      intArray1[4] = 6;
      intArray1[5] = (-6753);
      intArray1[6] = 2147483501;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2147475977), int0);
      assertArrayEquals(new int[] {2147483501, 0, (-121), 265, 0, (-6753), (-11)}, intArray0);
      assertArrayEquals(new int[] {2147483501, 965, (-6753), 61, 6, (-6753), 2147483501}, intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<String, Integer> pair0 = new Pair<String, Integer>("", (Integer) 2147483501);
      assertNotNull(pair0);
      
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(pair0);
      assertNotNull(pair1);
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      Pair<Object, Integer>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-6753);
      intArray2[1] = (-2147475977);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = 1009;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1009);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1009, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      longArray0[4] = null;
      longArray0[5] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 295.7771F;
      floatArray0[2] = 1843.8347F;
      floatArray0[3] = 1074.37F;
      floatArray0[4] = (-404.2F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 2161.622F;
      floatArray0[7] = (-1883.7133F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.4E-45F), 295.7771F, 1843.8347F, 1074.37F, (-404.2F), (-1.0F), 2161.622F, (-1883.7133F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-404.2F);
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 295.7771F;
      doubleArray0[4] = (double) (-404.2F);
      doubleArray0[5] = (double) (-1883.7133F);
      doubleArray0[6] = (double) (-1.4E-45F);
      doubleArray0[7] = (double) (-1.0F);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-404.20001220703125), (-1.401298464324817E-45), 295.777099609375, (-404.20001220703125), (-1883.7132568359375), (-1.401298464324817E-45), (-1.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1990.6323182268284, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-404.20001220703125), (-1.401298464324817E-45), 295.777099609375, (-404.20001220703125), (-1883.7132568359375), (-1.401298464324817E-45), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 1.0F, 0.0F, (-1.4E-45F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-1.4E-45F);
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-1.4E-45F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1.401298464324817E-45), (-1.401298464324817E-45), (-1.401298464324817E-45)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2594);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2594)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(0.875, 2090.0959168, 0.875, 0.0, 0.875, (-2.192805694793476));
      assertEquals(1826.9152222170555, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2090.0959168;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("#7q-tU|9=&Y(EKF/cN}").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 8, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 4.3466666666666665E18;
      doubleArray0[2] = 1.073741824E9;
      doubleArray0[3] = 4.3466666666666665E18;
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = 4.3466666666666665E18;
      doubleArray0[6] = 4.3466666666666665E18;
      MathArrays.scaleInPlace(4.3466666666666665E18, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.889351111111111E37, 1.889351111111111E37, 4.6671977949866665E27, 1.889351111111111E37, 1.889351111111111E37, 1.889351111111111E37, 1.889351111111111E37}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4.627946167182666E37, double0, 0.01);
      assertArrayEquals(new double[] {1.889351111111111E37, 1.889351111111111E37, 4.6671977949866665E27, 1.889351111111111E37, 1.889351111111111E37, 1.889351111111111E37, 1.889351111111111E37}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5.207000323380292E-8);
      doubleArray0[1] = 3.6430013246656E7;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-1909.49878994095);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 3.6430013246656E7;
      doubleArray2[2] = 3.6430013246656E7;
      doubleArray1[6] = doubleArray2;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 1.304E19}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.8441344853345161E19;
      doubleArray1[2] = 1.8441344853345161E19;
      doubleArray1[3] = 1.8441344853345161E19;
      doubleArray1[4] = 0.0;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3.4500597096282264E19, double2, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.8441344853345161E19, 1.8441344853345161E19, 1.8441344853345161E19, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.071711169591716E7;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483631, 2147483631);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1663.9604F;
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      floatArray0[2] = (-1.4504069F);
      floatArray0[3] = (-2406.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1663.9604F, Float.NEGATIVE_INFINITY, (-1.4504069F), (-2406.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.4504069F);
      doubleArray0[1] = (double) 1663.9604F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (-219.5832);
      doubleArray0[4] = 2253.6184835470167;
      doubleArray0[5] = (double) (-2406.0F);
      doubleArray0[6] = (-388.921126149);
      doubleArray0[7] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[8] = (double) (-1.4504069F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1.4504069089889526), 1663.96044921875, Double.NEGATIVE_INFINITY, (-219.5832), 2253.6184835470167, (-2406.0), (-388.921126149), Double.NEGATIVE_INFINITY, (-1.4504069089889526)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.4504069089889526), 1663.96044921875, Double.NEGATIVE_INFINITY, (-219.5832), 2253.6184835470167, (-2406.0), (-388.921126149), Double.NEGATIVE_INFINITY, (-1.4504069089889526)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-10.751456F);
      floatArray0[6] = 200.737F;
      floatArray0[7] = (-2880.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, Float.NaN, 0.0F, Float.NEGATIVE_INFINITY, (-10.751456F), 200.737F, (-2880.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-3.4028235E38F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F), 0.0F, 3.4028235E38F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 401;
      intArray0[1] = 965;
      intArray0[2] = (-121);
      intArray0[3] = 265;
      intArray0[4] = 2147483501;
      int int0 = (-6753);
      intArray0[5] = (-6753);
      intArray0[6] = (-11);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483501;
      intArray1[1] = 965;
      intArray1[2] = (-6753);
      intArray1[3] = 61;
      intArray1[4] = 6;
      intArray1[5] = (-6753);
      intArray1[6] = 2147483501;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2147477649), int1);
      assertArrayEquals(new int[] {401, 965, (-121), 265, 2147483501, (-6753), (-11)}, intArray0);
      assertArrayEquals(new int[] {2147483501, 965, (-6753), 61, 6, (-6753), 2147483501}, intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2147483501);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2147483501, (int)integer0);
      
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>((Object) null, integer0);
      assertNotNull(pair0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 965);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 154;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {154}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 154;
      doubleArray0[1] = (double) 154;
      doubleArray0[2] = (double) 154;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 154;
      doubleArray0[5] = (double) 154;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {154.0, 154.0, 154.0, 0.0, 154.0, 154.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-95.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 474.40887F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, (-95.0F), (-1.0F), 474.40887F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 474.40887F;
      doubleArray0[3] = (double) (-95.0F);
      doubleArray0[4] = (double) (-95.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 474.40887F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 474.40887451171875, (-95.0), (-95.0), (-1.0), 474.40887451171875}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2145131127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-289.7278F);
      floatArray0[3] = (-534.643F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.5F, 0.0F, (-289.7278F), (-534.643F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-289.7278F);
      doubleArray0[1] = (double) 0.5F;
      doubleArray0[2] = (double) (-289.7278F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-534.643F);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) (-534.643F);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-289.7278137207031), 0.5, (-289.7278137207031), 0.0, (-534.6430053710938), 0.0, 0.0, (-534.6430053710938)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-289.7278137207031), 0.5, (-289.7278137207031), 0.0, (-534.6430053710938), 0.0, 0.0, (-534.6430053710938)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2243);
      intArray1[1] = 135;
      intArray1[2] = 632;
      intArray1[3] = (-2243);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2243, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2243), 135, 632, (-2243)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 10);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.9987994582857286E-8;
      doubleArray0[1] = 0.366272509098053;
      doubleArray0[2] = 1.7827257129423813E-8;
      doubleArray0[3] = 1002.8129405319;
      doubleArray0[4] = 7.848361555046424E-8;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1002.8129405319;
      doubleArray1[1] = (-3288.0);
      doubleArray1[2] = 1.7827257129423813E-8;
      doubleArray1[3] = 1002.8129405319;
      doubleArray1[4] = 1002.8129405319;
      doubleArray1[5] = 1.9987994582857286E-8;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 961.0372;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 7209.6601097185;
      doubleArray0[3] = 0.8414709568023682;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.26E18, double0, 0.01);
      assertArrayEquals(new double[] {961.0372, 3.26E18, 7209.6601097185, 0.8414709568023682}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {961.0372, 3.26E18, 7209.6601097185, 0.8414709568023682}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {923592.4997838399, 6.265962544E21, 1.06276E37, 4.700698391536462E22, 5.4863906384034202E18, 12133.439181489386, 0.708073371141893}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8414709568023682;
      doubleArray2[1] = 0.8414709568023682;
      doubleArray2[2] = 7209.6601097185;
      doubleArray2[3] = 961.0372;
      doubleArray2[4] = 728.0;
      doubleArray2[5] = 3.26E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.8414709568023682, 0.8414709568023682, 7209.6601097185, 961.0372, 728.0, 3.26E18}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2869);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 1.304E19}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.304E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(1.700416E38, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2.217342464E57, 0.0, 2.217342464E57}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2041.28767488);
      Integer[] integerArray0 = new Integer[19];
      Integer integer0 = new Integer(183);
      assertNotNull(integer0);
      assertEquals(183, (int)integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertEquals(2041.28767488, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 183;
      doubleArray1[2] = (double) 183;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 66978.0, 33489.0}, doubleArray2, 0.01);
      
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 66978.0, 33489.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3575.28175;
      doubleArray1[1] = (-2851.09524);
      doubleArray1[4] = (-3884.0083920758);
      doubleArray1[3] = 728.0;
      doubleArray1[4] = 3.26E18;
      doubleArray1[5] = 1829.4059977148731;
      doubleArray1[6] = 2.3132638317421913E7;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3575.28175, (-2851.09524), 0.0, 728.0, 3.26E18, 1829.4059977148731, 2.3132638317421913E7}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4624.24908;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3724.6986725252473);
      doubleArray0[4] = (-3440.5165292);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4624.24908, Double.NaN, Double.NaN, (-3724.6986725252473), (-3440.5165292), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4624.24908, Double.NaN, Double.NaN, (-3724.6986725252473), (-3440.5165292), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 143;
      intArray0[1] = 172;
      intArray0[2] = 2299;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2299;
      intArray1[1] = 2299;
      intArray1[2] = 1926;
      intArray1[3] = 0;
      intArray1[4] = 143;
      intArray1[5] = 2299;
      intArray1[6] = 172;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4656, int0);
      assertArrayEquals(new int[] {143, 172, 2299}, intArray0);
      assertArrayEquals(new int[] {2299, 2299, 1926, 0, 143, 2299, 172}, intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1346));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 401;
      intArray0[1] = 965;
      intArray0[2] = (-121);
      intArray0[3] = 265;
      intArray0[4] = 2147483501;
      intArray0[5] = (-6753);
      intArray0[6] = (-11);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483501;
      intArray1[1] = 965;
      intArray1[2] = (-6753);
      intArray1[3] = 61;
      intArray1[4] = 6;
      intArray1[5] = (-6753);
      intArray1[6] = 2147483501;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2147477649), int0);
      assertArrayEquals(new int[] {401, 965, (-121), 265, 2147483501, (-6753), (-11)}, intArray0);
      assertArrayEquals(new int[] {2147483501, 965, (-6753), 61, 6, (-6753), 2147483501}, intArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Integer>[] pairArray0 = MathArrays.buildArray(field0, 965);
      assertNotNull(pairArray0);
      assertEquals(965, pairArray0.length);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-6753);
      intArray2[1] = (-2147477649);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 3.4028234663852886E38;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(19);
      assertNotNull(integer0);
      assertEquals(19, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals(19, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-364));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-364), (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(2298);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2298, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("", (-48));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-48), (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((-886));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-886), (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(2867);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(2867, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = Integer.getInteger("", (int) integerArray0[2]);
      assertNotNull(integer7);
      assertEquals(7, integerArray0.length);
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertEquals(2298, (int)integer7);
      
      integerArray0[6] = integer7;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-357));
      assertNotNull(integer0);
      assertEquals((-357), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4437);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4437, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-811));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-811), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-811));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals((-811), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      assertNotNull(integer6);
      assertEquals(8, integerArray0.length);
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals((-811), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertNotNull(integer7);
      assertEquals(8, integerArray0.length);
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(4437, (int)integer7);
      
      integerArray0[7] = integer7;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) (int)integerArray0[5];
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 4437;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (int)integerArray0[6];
      doubleArray0[6] = (double) (int)integerArray0[0];
      doubleArray0[7] = (double) (int)integerArray0[5];
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-811.0), (-811.0), (-1.0), 4437.0, (-1.0), (-811.0), (-357.0), (-811.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)integerArray0[5];
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-811);
      floatArray0[4] = (float) (int)integerArray0[3];
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {(-811.0F), (-1.0F), (-1.0F), (-811.0F), (-811.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-326.14352F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 342.7366F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-326.14352F), 3.4028235E38F, 0.0F, 0.0F, 342.7366F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.4028235E38F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2786.0;
      doubleArray0[1] = 2385.4905971530425;
      doubleArray0[2] = 1890.0;
      doubleArray0[3] = (-980.4345182610911);
      doubleArray0[4] = 339.19444;
      doubleArray0[5] = (-1.0);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.8100767101830352E7, double0, 0.01);
      assertArrayEquals(new double[] {2786.0, 2385.4905971530425, 1890.0, (-980.4345182610911), 339.19444, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 98.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1.8100767101830352E7;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1890.0;
      doubleArray1[6] = 339.19444;
      doubleArray1[7] = 2786.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 3.4028234663852886E38;
      doubleArray4[1] = (-2033.63);
      doubleArray4[2] = 1.0E-5;
      doubleArray4[3] = 119.0;
      doubleArray4[4] = (-7.800414592973399E-9);
      doubleArray4[5] = (-1.0);
      try { 
        MathArrays.convolve(doubleArray4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 1001;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1001);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer((-1899));
      assertNotNull(integer0);
      assertEquals((-1899), (int)integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1899);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) (-1899);
      doubleArray0[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertArrayEquals(new double[] {(-1899.0), 1.304E19, (-1899.0), 1.304E19}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1899);
      intArray0[1] = (-1899);
      intArray0[2] = (-1899);
      intArray0[3] = (-1899);
      intArray0[4] = (-1899);
      intArray0[5] = (-1899);
      intArray0[6] = (-1899);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1899), (-1899), (-1899), (-1899), (-1899), (-1899), (-1899)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1899);
      longArray0[1] = (-1084L);
      longArray0[2] = (long) (-1899);
      longArray0[3] = (long) (-1899);
      longArray0[4] = (long) (-1899);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,899 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 469.5857F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.304E19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(183);
      assertNotNull(integer0);
      assertEquals(183, (int)integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2041.28767488, double0, 0.01);
      assertArrayEquals(new double[] {(-2041.28767488), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[2] = (double) 183;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 183.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = 183;
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (int) integerArray0[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {183, 183, 183, 183, 183}, intArray0);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2041.28767488), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 189;
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN}, doubleArray4, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1263), (-2326));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2041.28767488);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2041.28767488);
      doubleArray1[1] = (-2041.28767488);
      doubleArray1[2] = (-2041.28767488);
      doubleArray1[3] = (-2041.28767488);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 401;
      intArray0[1] = 965;
      intArray0[2] = (-121);
      intArray0[3] = 265;
      intArray0[4] = 2147483501;
      int int0 = (-6753);
      intArray0[5] = (-6753);
      intArray0[6] = (-11);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483501;
      intArray1[1] = 965;
      intArray1[2] = (-6753);
      intArray1[3] = 61;
      intArray1[4] = 6;
      intArray1[5] = (-6753);
      intArray1[6] = 2147483501;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2147477649), int1);
      assertArrayEquals(new int[] {401, 965, (-121), 265, 2147483501, (-6753), (-11)}, intArray0);
      assertArrayEquals(new int[] {2147483501, 965, (-6753), 61, 6, (-6753), 2147483501}, intArray1);
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 965);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-3376.6796261735544);
      doubleArray0[3] = 7.1042886E7;
      doubleArray0[4] = 397.2562573812;
      doubleArray0[5] = 1353.9211697193;
      doubleArray0[6] = 1.986821492305628E-8;
      doubleArray0[7] = (-1263.0);
      doubleArray0[8] = (-1174.6);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, (-3376.6796261735544), 7.1042886E7, 397.2562573812, 1353.9211697193, 1.986821492305628E-8, (-1263.0), (-1174.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1450.5577F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1533.8013F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1450.5577F), 1.0F, (-1533.8013F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2.147483647E9, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 2.147483647E9}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 2.147483647E9}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 4.6116860141324206E18}, doubleArray1, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.6116860141324206E18, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 2.147483647E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 4.6116860141324206E18}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = new Double(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SINGULAR_OPERATOR";
      stringArray0[1] = "zm8>{p~*Rj O#";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "O<mDxF[K[:";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 1;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 1;
      longArray5[1] = (long) 1;
      longArray5[2] = (-2016L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,016 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[1][3];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2697.07);
      doubleArray2[1] = (-2063.552022173132);
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 2.356194490192345;
      doubleArray2[4] = (-1097.303024);
      doubleArray2[5] = 2814.155453471;
      doubleArray2[6] = 0.07073719799518585;
      doubleArray2[7] = 0.041666666666666664;
      doubleArray2[8] = 1.625;
      doubleArray1[0] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = null;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(183);
      assertNotNull(integer0);
      assertEquals(183, (int)integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2041.28767488, double0, 0.01);
      assertArrayEquals(new double[] {(-2041.28767488), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 183;
      doubleArray1[2] = (double) 183;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 33489.0, 33489.0}, doubleArray2, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 183.0, 183.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[2] = 0.2668378838909766;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0, 0.07120245627941432, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 0.0, 0.07120245627941432, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[][] longArray0 = new long[1][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1973.749;
      doubleArray0[1] = 2350.08247332;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.144616111297097E7);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1973.749, 2350.08247332}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9789775.413717335, 1.1656385699253635E7}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.144183728149765E7, double0, 0.01);
      assertArrayEquals(new double[] {1973.749, 2350.08247332}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9789775.413717335, 1.1656385699253635E7}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 1;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (float) 1;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 1;
      floatArray1[7] = (float) 0;
      floatArray1[8] = (float) 1;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, (-1.0F), 1.0F, 0.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Integer integer1 = Integer.getInteger("&L9[?.?co^G", integer0);
      assertNotNull(integer1);
      assertEquals(134217729, (int)integer1);
      
      Integer integer2 = Integer.getInteger("&L9[?.?co^G", integer0);
      assertNotNull(integer2);
      assertEquals(134217729, (int)integer2);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer3 = new Integer(1480);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1480, (int)integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 2455.6F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-2245.6F);
      doubleArray0[5] = (double) 2455.6F;
      doubleArray0[6] = (double) 2455.6F;
      doubleArray0[8] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(4809.639936359261, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 6029971.839609385, 0.0, 1.0, 5042719.79859376, 6029971.839609385, 6029971.839609385, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-351);
      intArray0[1] = (-1878);
      intArray0[2] = (-1949);
      intArray0[3] = 703;
      intArray0[4] = 0;
      intArray0[5] = 721;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1878));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-660.8694396505);
      doubleArray0[1] = 1.4610352609933738E7;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.4610352609933738E7;
      doubleArray1[1] = (-660.8694396505);
      doubleArray1[2] = 1.4610352609933738E7;
      doubleArray1[3] = 1.4610352609933738E7;
      doubleArray1[4] = (-660.8694396505);
      doubleArray1[5] = 1.4610352609933738E7;
      doubleArray1[6] = 1.4610352609933738E7;
      doubleArray1[7] = (-660.8694396505);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-660.8694396505), 1.4610352609933738E7, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4610352609933738E7, (-660.8694396505), 1.4610352609933738E7, 1.4610352609933738E7, (-660.8694396505), 1.4610352609933738E7, 1.4610352609933738E7, (-660.8694396505)}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -660.869 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1436);
      intArray0[1] = 189;
      intArray0[2] = (-2145321024);
      intArray0[3] = (-2145321024);
      intArray0[4] = 189;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1436), 189, (-2145321024), (-2145321024), 189}, intArray0);
      
      double double2 = MathArrays.linearCombination((double) 189, (double) (-2145321024), (double) 189, 1.1921056801463227E-8, (double) 189, (double) 189);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-4.05465637815E11), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2455.6F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-2245.6F);
      doubleArray0[5] = (double) 2455.6F;
      doubleArray0[6] = (double) 2455.6F;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 1.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 1.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(4809.640144275028, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 1.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 1.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 6029971.839609385, 0.0, 1.0, 5042719.79859376, 6029971.839609385, 6029971.839609385, 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 2455.60009765625, 0.0, (-1.0), (-2245.60009765625), 2455.60009765625, 2455.60009765625, 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1734.2799334), doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      floatArray1[0] = (-2245.6F);
      floatArray1[2] = (float) 1;
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-2245.6F);
      floatArray1[5] = 2455.6F;
      floatArray1[6] = 2455.6F;
      floatArray1[7] = 2455.6F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 2455.6F, (-2245.6F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2245.6F), 0.0F, 1.0F, 1.0F, (-2245.6F), 2455.6F, 2455.6F, 2455.6F}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 2455.6F;
      floatArray2[3] = (-2245.6F);
      floatArray2[4] = (-2245.6F);
      floatArray2[5] = (-2245.6F);
      boolean boolean1 = MathArrays.equals(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 2455.6F, (-2245.6F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 2455.6F, (-2245.6F), (-2245.6F), (-2245.6F)}, floatArray2, 0.01F);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-2245.6F));
      assertNotNull(double0);
      assertEquals((-2245.60009765625), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2455.6F);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(2455.60009765625, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0F);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(595.962);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(595.962, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-173338.49757932578));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((-173338.49757932578), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2455.6F);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals(2455.60009765625, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[4]);
      assertNotNull(double7);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(595.962, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(595.962);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertEquals(595.962, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(3441);
      assertNotNull(integer0);
      assertEquals(3441, (int)integer0);
      
      Integer integer1 = new Integer(3441);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3441, (int)integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) (int)integerArray0[4];
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = (double) 3441;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (int)integerArray0[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3441.0, 3441.0, 3441.0, 3441.0, Double.NaN, 3441.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.04168701738764507;
      doubleArray0[2] = (-1087.23275216);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 407.6612;
      doubleArray0[5] = 1391.086897;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      doubleArray0[2] = 2350.08247332;
      MathArrays.scaleInPlace(2350.08247332, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {5522887.631405849, 5522887.631405849, 5522887.631405849}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer0 = new Integer((-1719));
      assertNotNull(integer0);
      assertEquals((-1719), (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((-1090));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1090), (int)integer2);
      
      Integer integer3 = new Integer(15);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(15, (int)integer3);
      
      Integer integer4 = new Integer(1021);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1021, (int)integer4);
      
      Integer integer5 = new Integer(543);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(543, (int)integer5);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      Integer integer6 = new Integer((-2326));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-2326), (int)integer6);
      
      Integer integer7 = Integer.getInteger("fsc ,/(sBC=Aaui&n", integer6);
      assertNotNull(integer7);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals((-2326), (int)integer7);
      
      Integer integer8 = Integer.getInteger("fsc ,/(sBC=Aaui&n", integer7);
      assertNotNull(integer8);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertEquals((-2326), (int)integer8);
      
      integerArray0[3] = integer8;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      intArray0[0] = 177;
      intArray0[1] = 1;
      intArray0[2] = 4013;
      intArray0[3] = 177;
      intArray0[4] = 177;
      intArray0[5] = 2604;
      intArray0[7] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3926);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3926, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {177, 1, 4013, 177, 177, 2604, 0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = 3441;
      Integer integer0 = new Integer(3441);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3441, (int)integer0);
      
      Integer integer1 = new Integer(3441);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3441, (int)integer1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-2425.69871), doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(2146847017);
      assertNotNull(integer0);
      assertEquals(2146847017, (int)integer0);
      
      Integer integer1 = new Integer(2089);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2089, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      long[][] longArray0 = new long[4][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Integer integer0 = new Integer((-2531));
      assertNotNull(integer0);
      assertEquals((-2531), (int)integer0);
      
      Integer integer1 = new Integer((-3205));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3205), (int)integer1);
      
      Integer integer2 = new Integer((-2147483647));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2147483647), (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer3 = new Integer((-2066));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-2066), (int)integer3);
      
      integerArray0[4] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[2];
      doubleArray0[1] = (double) (int)integerArray0[4];
      doubleArray0[2] = (double) (int)integerArray0[1];
      doubleArray0[3] = (double) (int)integerArray0[3];
      doubleArray0[4] = (double) (-2147483647);
      doubleArray0[5] = (double) (int)integerArray0[2];
      doubleArray0[6] = (double) (-2147483647);
      doubleArray0[7] = (double) (int)integerArray0[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 218);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(218, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3205.0), (-2066.0), (-2531.0), (-3205.0), (-2.147483647E9), (-3205.0), (-2.147483647E9), (-3205.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(226);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(226, (int)integer1);
      
      Integer integer2 = new Integer(226);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(226, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) (int)integerArray0[1];
      floatArray0[2] = (float) 226;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {226.0F, 226.0F, 226.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(540219901);
      assertNotNull(integer0);
      assertEquals(540219901, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(540219901, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(5, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(540219901, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(540219901, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-775));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-775), (int)integer4);
      
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3822.34909577;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3822.34909577, double0, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4610352609933738E7, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.4606530260837968E7, double1, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4610352609933738E7, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4610352609933738E7, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2146684644;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {2146684644}, intArray0);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2146684644}, intArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-660.8694396505);
      doubleArray0[1] = 1.4610352609933738E7;
      doubleArray0[2] = (-3376.6796261735544);
      doubleArray0[3] = (-0.3058015757857271);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-660.8694396505), 1.4610352609933738E7, (-3376.6796261735544), (-0.3058015757857271)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {436748.41626396583, (-1.931107108484626E10), 2.1346240784968634E14, (-9.866895957415991E10), 2466227.5960098803, 2065.1879012148656, 0.09351460375303379}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 286;
      Integer integer0 = new Integer(286);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(286, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(286);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(286, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1033.54358533651;
      doubleArray0[1] = (-1734.2799334);
      doubleArray0[2] = (-1773.965087179);
      doubleArray0[3] = (-1097.6);
      doubleArray0[4] = 2686.7016854;
      doubleArray0[5] = 0.9985313415527344;
      doubleArray0[6] = (-4420.69);
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 3372.2;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1033.54358533651, (-1734.2799334), (-1773.965087179), (-1097.6), 2686.7016854, 0.9985313415527344, (-4420.69), 3.834E-20, 3372.2}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6823.50474318075, double0, 0.01);
      assertArrayEquals(new double[] {1033.54358533651, (-1734.2799334), (-1773.965087179), (-1097.6), 2686.7016854, 0.9985313415527344, (-4420.69), 3.834E-20, 3372.2}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {1033.54358533651, (-1734.2799334), (-1773.965087179), (-1097.6), 2686.7016854, 0.9985313415527344, (-4420.69), 3.834E-20, 3372.2}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1068212.3427902476, 3007726.887393908, 3146952.130529997, 1204725.7599999998, 7218365.9463312, 0.9970648400631035, 1.9542500076099996E7, 1.4699556E-39, 1.1371732839999998E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1033.54358533651, (-1734.2799334), (-1773.965087179), (-1097.6), 2686.7016854, 0.9985313415527344, (-4420.69), 3.834E-20, 3372.2}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-1090));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1090), (int)integer1);
      
      Integer integer2 = new Integer((-1090));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1090), (int)integer2);
      
      Integer integer3 = new Integer((-2314));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-2314), (int)integer3);
      
      Integer integer4 = new Integer(1021);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1021, (int)integer4);
      
      Integer integer5 = new Integer(1021);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(1021, (int)integer5);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2245.6F);
      doubleArray0[1] = (double) (-2245.6F);
      doubleArray0[2] = (double) (-2314);
      doubleArray0[3] = (double) (int)integerArray0[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4491.2001953125), (-4491.2001953125), (-4628.0), (-2180.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2245.60009765625), (-2245.60009765625), (-2314.0), (-1090.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1284);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3921;
      intArray1[1] = 1580;
      intArray1[2] = 3921;
      intArray1[3] = (-1);
      intArray1[4] = 3921;
      intArray1[5] = 3921;
      intArray1[6] = (-1);
      intArray1[7] = 1421;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5908.453097046638, double1, 0.01);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1284)}, intArray0);
      assertArrayEquals(new int[] {3921, 1580, 3921, (-1), 3921, 3921, (-1), 1421}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double double0 = (-634.4);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-634.4), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-336);
      int int1 = 159;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-336), 159);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 2455.6F, (-2245.6F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(1989);
      assertNotNull(integer0);
      assertEquals(1989, (int)integer0);
      
      Integer integer1 = new Integer(500);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(500, (int)integer1);
      
      Integer integer2 = new Integer(500);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(500, (int)integer2);
      
      Integer integer3 = new Integer(1989);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(1989, (int)integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer3;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (int)integerArray0[2];
      doubleArray1[1] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.getInteger("8itx\"R", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(134217729);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(134217729, (int)integer3);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 3822.34909577, (double) 0, 1.9987994582857286E-8, (double) 0, (-1557.5));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = (-229);
      int[] intArray0 = new int[2];
      intArray0[0] = (-229);
      intArray0[1] = (-229);
      double double0 = MathArrays.linearCombination((-2839.0), 1.34217729E8, (double) 0.0F, (double) (-229), (double) 0.0F, 369.135931233, (-2839.0), (-3751.84351701));
      assertEquals((-3.810334811472552E11), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 369.135931233;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1847.5791;
      doubleArray1[1] = (double) (-229);
      doubleArray1[2] = (-3.810334811472552E11);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 3921;
      intArray0[2] = (-1284);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-1), 3921, (-1284)}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 724, (-973));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3822.34909577;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3822.34909577, double0, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(3822.34909577, double1, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(3822.34909577, double2, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.4610352609933738E7, double3, 0.01);
      assertArrayEquals(new double[] {3822.34909577, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = 1023L;
      longArray1[2] = 1023L;
      longArray1[3] = (-1L);
      longArray1[4] = 1023L;
      longArray1[5] = (long) 0;
      longArray1[6] = (-2596L);
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-2596L);
      longArray3[1] = 1023L;
      longArray3[2] = (-1L);
      longArray3[3] = (-1L);
      longArray3[4] = 1L;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 74;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {74}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 0.0, Double.NaN, (-1813.8665), (-1813.8665), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 448.4919593530355);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3342;
      long[] longArray0 = new long[3];
      longArray0[0] = 5007L;
      longArray0[1] = (long) 3342;
      longArray0[2] = 1526L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {5007L, 3342L, 1526L}, longArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 1526L, (-1830.1670593196), 793.8157148490359, (double) 3342, (double) 3342, (double) 3342L);
      assertEquals(1.1029061186503768E7, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 33;
      doubleArray0[1] = (double) 1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {33.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {33.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1089.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {33.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1089.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1122.0, 2.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 33);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {33.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {32.029411764705884, 0.9705882352941176}, doubleArray3, 0.01);
      
      long[][] longArray0 = new long[7][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 33;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 33;
      longArray3[1] = (long) 1;
      longArray3[2] = (long) 33;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 33;
      longArray4[1] = (long) 1;
      longArray4[2] = (long) 33;
      longArray4[3] = (long) 1;
      longArray4[4] = (long) 33;
      longArray4[5] = (long) 1;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) 1;
      longArray5[1] = (long) 33;
      longArray5[2] = (long) 1;
      longArray5[3] = (long) 1;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) 1;
      longArray6[1] = (long) 1;
      longArray6[2] = 3624L;
      longArray6[3] = (long) 1;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = (long) 1;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(1989);
      assertNotNull(integer0);
      assertEquals(1989, (int)integer0);
      
      Integer integer1 = new Integer(500);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(500, (int)integer1);
      
      Integer integer2 = new Integer(500);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(500, (int)integer2);
      
      Integer integer3 = new Integer(1989);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1989, (int)integer3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer3;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[2] = 0.2668378838909766;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.2668378838909766, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-336));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      Integer integer0 = new Integer((-221));
      assertNotNull(integer0);
      assertEquals((-221), (int)integer0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2041.28767488), (-2041.28767488), 0.0, (-2041.28767488), (-2041.28767488), (-2041.28767488), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-221);
      doubleArray2[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-221.0), 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      Integer integer0 = new Integer((-221));
      assertNotNull(integer0);
      assertEquals((-221), (int)integer0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-2041.28767488), (-2041.28767488), 0.0, (-2041.28767488), (-2041.28767488), (-2041.28767488), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-221);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-911.8436136177613);
      doubleArray0[1] = (-3312.4867436781);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-911.8436136177613), (-3312.4867436781)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1823.6872272355226), (-6624.9734873562)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-911.8436136177613), (-3312.4867436781)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-911.8436136177613);
      doubleArray2[1] = (-911.8436136177613);
      doubleArray2[2] = (-3312.4867436781);
      doubleArray2[3] = (-3312.4867436781);
      doubleArray2[4] = (-3312.4867436781);
      doubleArray2[5] = (-911.8436136177613);
      doubleArray2[6] = (-911.8436136177613);
      doubleArray2[7] = (-911.8436136177613);
      doubleArray2[8] = (-3312.4867436781);
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-1547.848359);
      doubleArray1[2] = 3822.34909577;
      doubleArray1[3] = (-1622.8667885961866);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-724.969);
      doubleArray1[7] = (-1622.8667885961866);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1547.848359), 3822.34909577, (-1622.8667885961866), 0.0, 0.0, (-724.969), (-1622.8667885961866)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray4, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2245.6F);
      doubleArray0[1] = (double) 2455.6F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 2455.6F;
      doubleArray0[4] = (double) (-2245.6F);
      doubleArray0[5] = (double) 2455.6F;
      doubleArray0[6] = (double) 2455.6F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,455.6 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int[] intArray0 = new int[2];
      intArray0[0] = (-229);
      intArray0[1] = (-229);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-229), (-229)}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-229);
      doubleArray0[2] = (double) (-229);
      doubleArray0[3] = (double) (-229);
      doubleArray0[4] = (double) (-229);
      doubleArray0[5] = 352.27767691759;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-229 <= -229)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      doubleArray0[2] = 2350.08247332;
      MathArrays.scaleInPlace(2350.08247332, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {5522887.631405849, 5522887.631405849, 5522887.631405849}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {5522887.631405849, 5522887.631405849, 5522887.631405849}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (-2596L);
      longArray2[3] = (long) 0;
      longArray2[4] = (-2596L);
      longArray2[5] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1023L;
      long[][] longArray4 = new long[5][7];
      assertFalse(longArray4.equals((Object)longArray0));
      
      longArray4[0] = longArray2;
      longArray4[1] = longArray2;
      longArray4[2] = longArray1;
      longArray4[3] = longArray3;
      longArray4[4] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(0.875, 2090.0959168, 0.875, 0.0, 0.875, (-1.0));
      assertEquals(1827.9589271999998, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2090.0959168;
      doubleArray1[1] = 2090.0959168;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,090.096 >= 2,090.096)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2090.0959168;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-720.2700098385994);
      doubleArray0[6] = 5522887.631405849;
      doubleArray0[7] = 2090.0959168;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 2090.0959168, Double.NaN, (-720.2700098385994), 5522887.631405849, 2090.0959168}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-720.2700098385994));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 2090.0959168, Double.NaN, (-720.2700098385994), 5522887.631405849, 2090.0959168}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, Double.NaN, (-0.27241019354227436), Double.NaN, 0.09387554475644853, (-719.8190649962713), (-0.27241019354227436)}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(4661);
      assertNotNull(integer0);
      assertEquals(4661, (int)integer0);
      
      Integer integer1 = Integer.getInteger("-cX8>pQ", integer0);
      assertNotNull(integer1);
      assertEquals(4661, (int)integer1);
      
      Integer integer2 = new Integer((-470));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-470), (int)integer2);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 2090.0959168, Double.NaN, (-720.2700098385994), 5522887.631405849, 2090.0959168}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 4368500.941424033, Double.NaN, 518788.8870728961, 3.050228778913571E13, 4368500.941424033}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      Integer integer0 = new Integer((-221));
      assertNotNull(integer0);
      assertEquals((-221), (int)integer0);
      
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3612.1526443539);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-172.9297F);
      floatArray0[2] = (-1774.46F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, (-172.9297F), (-1774.46F), 1.4E-45F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2966.93);
      doubleArray0[1] = (-873.765673636);
      doubleArray0[2] = 1220.7188;
      doubleArray0[3] = 610.8770495418645;
      doubleArray0[4] = 2225.22273887;
      doubleArray0[5] = (-360.5479);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1220.7188;
      doubleArray1[1] = 2225.22273887;
      doubleArray1[2] = (-873.765673636);
      doubleArray1[3] = (-873.765673636);
      doubleArray1[4] = 2225.22273887;
      doubleArray1[5] = (-360.5479);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-2084885.030228226), double0, 0.01);
      assertArrayEquals(new double[] {(-2966.93), (-873.765673636), 1220.7188, 610.8770495418645, 2225.22273887, (-360.5479)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1220.7188, 2225.22273887, (-873.765673636), (-873.765673636), 2225.22273887, (-360.5479)}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(1220.7188, (-2966.93), (-195810.8662544), -0.0, 397.0, 20.0, (-1329.6669259743), 2.092571258544922);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3616629.652076732), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-2084885.030228226), double2, 0.01);
      assertArrayEquals(new double[] {(-2966.93), (-873.765673636), 1220.7188, 610.8770495418645, 2225.22273887, (-360.5479)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1220.7188, 2225.22273887, (-873.765673636), (-873.765673636), 2225.22273887, (-360.5479)}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2966.93), (-873.765673636), 1220.7188, 610.8770495418645, 2225.22273887, (-360.5479)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1220.7188, 2225.22273887, (-873.765673636), (-873.765673636), 2225.22273887, (-360.5479)}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,966.93 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = 3737.9;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3737.9;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 369.135931233;
      doubleArray1[6] = 369.135931233;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 3737.9;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(464.5205395324, (-906.64700164334), (-906.64700164334), 1785.1545, 464.5205395324, 0.0, 20.0, (-911.8436136177613));
      assertEquals((-2057898.001536268), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-911.8436136177613);
      doubleArray1[2] = (-911.8436136177613);
      doubleArray1[3] = (-911.8436136177613);
      doubleArray1[4] = (-2058.29);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-911.8436136177613);
      doubleArray1[7] = 6264.852295126;
      doubleArray1[8] = (-906.64700164334);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 728, 728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0L;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = int0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = int0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray2, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3132.426147563;
      doubleArray0[1] = 3132.426147563;
      doubleArray0[2] = 3132.426147563;
      doubleArray0[3] = 3132.426147563;
      doubleArray0[4] = 3132.426147563;
      doubleArray0[5] = 3132.426147563;
      MathArrays.scaleInPlace(3132.426147563, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {9812093.569936378, 9812093.569936378, 9812093.569936378, 9812093.569936378, 9812093.569936378, 9812093.569936378}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3132.426147563;
      doubleArray1[1] = 3132.426147563;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 9812093.569936378);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3132.426147563, 3132.426147563, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4906046.784968189, 4906046.784968189, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.9624187139872756E7, double0, 0.01);
      assertArrayEquals(new double[] {3132.426147563, 3132.426147563, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6933767.981397916, double1, 0.01);
      assertArrayEquals(new double[] {3132.426147563, 3132.426147563, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4906046.784968189, 4906046.784968189, 0.0}, doubleArray2, 0.01);
      
      double double2 = MathArrays.linearCombination(3132.426147563, 1280.229295466514, 6933767.981397916, 9812093.569936378);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.8034784235928945E13, double2, 0.01);
      
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[5];
      longArray1[0] = 1837L;
      longArray1[1] = 5648769086999809661L;
      longArray1[2] = (-828L);
      longArray1[3] = 5007L;
      longArray1[4] = 1623L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1623L;
      longArray3[1] = 1L;
      longArray3[2] = (-2938L);
      longArray3[3] = 5007L;
      longArray3[4] = 5648769086999809661L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1837L;
      longArray4[1] = 1623L;
      longArray4[2] = 1L;
      longArray4[3] = (-828L);
      longArray4[4] = (-828L);
      longArray4[5] = 1L;
      longArray4[6] = (-33L);
      longArray4[7] = (-2938L);
      longArray4[8] = 5648769086999809661L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-2938L);
      longArray5[1] = 2512L;
      longArray5[2] = 1623L;
      longArray5[3] = 5648769086999809661L;
      longArray5[4] = (-33L);
      longArray5[5] = 5648769086999809661L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-828L);
      longArray6[1] = 1623L;
      longArray6[2] = 5648769086999809661L;
      longArray6[3] = 2512L;
      longArray6[4] = 5007L;
      longArray6[5] = (-33L);
      longArray6[6] = (-828L);
      longArray6[7] = 5648769086999809661L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      Integer integer0 = new Integer((-221));
      assertNotNull(integer0);
      assertEquals((-221), (int)integer0);
      
      Integer integer1 = new Integer(4100);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4100, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(632);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(632, (int)integer3);
      
      Integer integer4 = new Integer(829);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(829, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals(2, (int)integer6);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      integerArray0[2] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-2041.28767488);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      doubleArray0[6] = (-2041.28767488);
      doubleArray0[7] = (-2041.28767488);
      doubleArray0[8] = (-2041.28767488);
      double double2 = 0.9315965175628662;
      double double3 = 2870.0;
      double double4 = MathArrays.linearCombination((-2041.28767488), (-2281.414676324), (-2041.28767488), (-2041.28767488), (-2041.28767488), 0.9315965175628662, 2870.0, (-2041.28767488));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(2963481.74829266, double4, 0.01);
      
      double double5 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(3.333484297293597E7, double5, 0.01);
      assertArrayEquals(new double[] {(-2041.28767488), (-2041.28767488), 0.0, (-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488), (-2041.28767488)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      float[] floatArray0 = null;
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 4328.0F;
      floatArray1[2] = 880.75256F;
      floatArray1[3] = 1.4E-45F;
      floatArray1[4] = 215.16077F;
      MathArrays.equals(floatArray1, (float[]) null);
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, 0.0, Double.NaN, (-1813.8665), (-1813.8665), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkOrder(doubleArray0);
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2445.007F;
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, 0.0, Double.NaN, (-1813.8665), (-1813.8665), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      MathArrays.checkOrder(doubleArray0);
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3478.748;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-2048.2434F);
      floatArray0[5] = 5073.2F;
      floatArray0[6] = 1502.43F;
      floatArray0[7] = (-1618.6226F);
      floatArray0[8] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(3477.748, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {1.2101687647504E7}, doubleArray3, 0.01);
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 5007L;
      longArray2[1] = (-3283L);
      longArray2[2] = 2132L;
      longArray2[3] = (-7L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 5007L;
      longArray3[1] = (-7L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 2132L;
      longArray4[1] = (-7L);
      longArray4[2] = (-3283L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 2132L;
      longArray5[1] = 5007L;
      longArray5[2] = 5007L;
      longArray5[3] = (-3283L);
      longArray5[4] = 2132L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = (-3283L);
      longArray6[1] = 5007L;
      longArray6[2] = 2132L;
      longArray6[3] = (-7L);
      longArray6[4] = (-1L);
      longArray6[5] = (-7L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = 10000L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (-1547.848359);
      doubleArray1[2] = 3822.34909577;
      doubleArray1[3] = (-1622.8667885961866);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-724.969);
      doubleArray1[7] = (-1622.8667885961866);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      int[] intArray0 = new int[6];
      intArray0[0] = (-229);
      intArray0[1] = 179;
      intArray0[2] = 179;
      intArray0[3] = 262;
      intArray0[4] = (-229);
      intArray0[5] = 262;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-229), 179, 179, 262, (-229), 262}, intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-229);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 262;
      doubleArray0[3] = (double) 179;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 262;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {52441.0, 0.0, 68644.0, 32041.0, 0.0, 68644.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.scaleInPlace((-2425.69871), doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, (-3286.9863747), (-1538.9481195), 0.0, -0.0, -0.0, (-1958.4358545006), -0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      doubleArray0[2] = 2350.08247332;
      MathArrays.scaleInPlace(2350.08247332, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 124;
      intArray0[2] = (-3235);
      intArray0[3] = 291;
      intArray0[4] = 0;
      intArray0[5] = 2984;
      int[] intArray1 = new int[5];
      intArray1[0] = 124;
      intArray1[1] = 124;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2425.69871), doubleArray1);
      MathArrays.linearCombination(0.0, 0.0, 20.0, (-2425.69871), 668.88587, 1.0, 1951.601683612, 0.0);
      MathArrays.linearCombination(0.0, (-621.4511661003962), (-3584.332036), 1951.601683612);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("F,h[~l0>4SS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.F,h[~l0>4SS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3607.0);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-7214.0), Double.NaN, Double.NaN, Double.NaN, 7.668E-20, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 818.5402F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.304E19, Double.NaN, Double.NaN, Double.NaN, (-1.3860648738563903E-4), Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, 0.0, Double.NaN, (-1813.8665), (-1813.8665), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 1.7976931348623157E308;
      double[][] doubleArray2 = new double[2][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.7976931348623157E308;
      doubleArray0[0] = 1.7976931348623157E308;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2245.6F);
      floatArray0[3] = 2215.8428F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2245.6F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 2215.8428F;
      doubleArray0[4] = (double) (-2245.6F);
      doubleArray0[5] = 2467.42;
      doubleArray0[6] = 2090.0959168;
      doubleArray0[7] = 2467.42;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4491.2001953125), 0.0, 4431.685546875, (-4491.2001953125), 4934.84, 4180.1918336, 4934.84}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3132.426147563;
      doubleArray0[1] = 3132.426147563;
      doubleArray0[2] = 3132.426147563;
      doubleArray0[3] = 3132.426147563;
      doubleArray0[4] = 3132.426147563;
      doubleArray0[5] = 3132.426147563;
      MathArrays.scaleInPlace(3132.426147563, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3132.426147563;
      doubleArray1[1] = 3132.426147563;
      doubleArray1[2] = 3132.426147563;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.linearCombination(20.0, (-4132.333738792966), 0.0, 369.135931233, 2.9436280709809136E7, 2271.972, 369.135931233, 2271.972);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 203;
      intArray0[2] = 0;
      intArray0[3] = 223;
      intArray0[4] = (-32767);
      intArray0[5] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 203;
      doubleArray0[2] = (double) (-32767);
      doubleArray0[3] = (double) 223;
      doubleArray0[4] = (double) 203;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-32767);
      doubleArray1[1] = (double) (-32767);
      doubleArray1[2] = (double) (-32767);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1904.748312, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double1 = MathArrays.linearCombination((double) 1.0F, 2090.0959168, (double) 1.0F, 2090.0959168, (-660.7623440759), 1.0, 2990.0, 3158.35345);
      assertEquals(9446996.244989524, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-6.876070653178694), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2425.69871), doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 712, 1164);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1281.573343);
      doubleArray0[1] = 2748.436070713066;
      doubleArray0[2] = 3132.357855;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1835.73869582623;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 304;
      intArray0[1] = 0;
      intArray0[2] = (-4026);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2870.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-913.169);
      doubleArray0[3] = 1855.922815;
      doubleArray0[4] = 3089.998748783574;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2946.0685357667;
      doubleArray0[7] = (-405.9);
      doubleArray0[8] = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -913.169 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = (-2041.28767488);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2041.28767488);
      doubleArray0[1] = (-2041.28767488);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2041.28767488);
      doubleArray0[4] = (-2041.28767488);
      doubleArray0[5] = (-2041.28767488);
      doubleArray0[6] = (-2041.28767488);
      doubleArray0[7] = (-2041.28767488);
      doubleArray0[8] = (-2041.28767488);
      MathArrays.scale((-2041.28767488), doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 3342;
      intArray0[3] = 6;
      intArray0[4] = (-1);
      intArray0[5] = 74;
      intArray0[6] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = (double) (-1);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, (-1.0), 6.0, (-1.0), 1.7976931348623157E308, (-1.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0, (-3852.8209176943933), 0.0, 557.8927309890513);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1653.77);
      double double0 = (-2887.63882);
      doubleArray0[2] = (-2887.63882);
      doubleArray0[3] = 3690.1356;
      double double1 = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 2054.34;
      double double2 = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 118.40272;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(118.40272, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -195,810.866)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1518;
      intArray0[2] = (-602);
      intArray0[3] = 1010;
      intArray0[4] = 39;
      intArray0[5] = 821;
      intArray0[6] = 0;
      intArray0[7] = 2620;
      intArray0[8] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1497.8140122);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3132.426147563;
      doubleArray0[1] = 3132.426147563;
      doubleArray0[2] = 3132.426147563;
      doubleArray0[3] = 3132.426147563;
      doubleArray0[4] = 3132.426147563;
      doubleArray0[5] = 3132.426147563;
      MathArrays.scaleInPlace(3132.426147563, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3132.426147563;
      doubleArray1[1] = 3132.426147563;
      doubleArray1[2] = 3132.426147563;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2.9436280709809136E7;
      doubleArray2[1] = 2.9436280709809136E7;
      doubleArray2[2] = 20.0;
      doubleArray2[3] = 3132.426147563;
      doubleArray2[4] = 3132.426147563;
      doubleArray2[5] = 3132.426147563;
      doubleArray2[6] = 2.9436280709809136E7;
      doubleArray2[7] = 2.9436280709809136E7;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2090.0959168;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,090.096 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2562L;
      longArray0[1] = (-344L);
      longArray0[2] = 210L;
      longArray0[3] = 0L;
      longArray0[4] = 10000L;
      longArray0[5] = (-2498L);
      longArray0[6] = 10000L;
      longArray0[7] = 157L;
      longArray0[8] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -344 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 602;
      intArray0[0] = 602;
      int int1 = (-1976);
      intArray0[1] = (-1976);
      intArray0[2] = 549;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 602;
      doubleArray0[1] = (double) 549;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (602 >= 549)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4624.24908;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-3724.6986725252473);
      doubleArray0[4] = (-3440.5165292);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = 143;
      intArray0[1] = 172;
      intArray0[2] = 2299;
      int[] intArray1 = new int[7];
      intArray1[0] = 2299;
      intArray1[1] = 2299;
      intArray1[2] = 1926;
      intArray1[3] = 0;
      intArray1[4] = 143;
      intArray1[5] = 2299;
      intArray1[6] = 172;
      MathArrays.distance1(intArray0, intArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1346));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 177;
      int int1 = (-336);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 177, (-336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-911.8436136177613);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-292.607959);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-1 >= -292.608)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3112.366006622;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1157.283;
      doubleArray0[4] = (-3970.50196403);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 2127.732583516862;
      doubleArray0[7] = 1306.1864409;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-537.45873);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 1.304E19);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-537.45873);
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = (-537.45873);
      doubleArray2[4] = 1.304E19;
      doubleArray2[5] = (-2599.9343760638);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-537.45873);
      doubleArray2[8] = 1.304E19;
      try { 
        MathArrays.sortInPlace(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2912.6414072);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2912.6414072);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2912.6414072);
      MathArrays.equals(doubleArray0, doubleArray1);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      doubleArray0[2] = 2350.08247332;
      MathArrays.scaleInPlace(2350.08247332, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (-2596L);
      longArray2[3] = (long) 0;
      longArray2[4] = (-2596L);
      longArray2[5] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 1023L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-2596L);
      longArray4[1] = (-2596L);
      longArray4[2] = (-2596L);
      longArray4[3] = (-2596L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,596 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, 3.141592653589793, 1.304E19, 1.304E19, Double.NaN, 1.304E19, 2649.4326292530864, 3.834E-20);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 2090.0959168;
      doubleArray0[0] = 2090.0959168;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2090.0959168;
      doubleArray1[1] = 2090.0959168;
      double double2 = (-1510.533);
      doubleArray1[2] = (-1510.533);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2425.69871), doubleArray1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2455.6F;
      floatArray0[2] = (-2245.6F);
      floatArray0[3] = 2215.8428F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double0 = MathArrays.linearCombination(2467.42, 0.0, (double) 0.0F, 251.74174355343, (double) (-2245.6F), (double) (-2245.6F), (double) 2215.8428F, 0.0);
      assertEquals(5042719.79859376, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-2245.6F);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-20.0), 0.0, (-2245.60009765625)}, doubleArray0, 0.01);
      assertEquals(5043119.79859376, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      double double0 = MathArrays.linearCombination((-1538.9481195), (-1538.9481195), 4193.02181649843, 4193.02181649843, 4193.02181649843, (-4314.393826), 2280.691871, 2280.691871);
      assertEquals(7061001.241205727, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 630.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-695.6);
      doubleArray0[4] = (-1808.25256996);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2425.69871), doubleArray1);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(0.0, 0.0, 20.0, (-2425.69871), 668.88587, 1.0, 1951.601683612, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.copyOf(doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, 0.0, Double.NaN, (-1813.8665), (-1813.8665), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2445.007F;
      floatArray0[1] = 98.1684F;
      floatArray0[2] = 1432.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      MathArrays.scaleInPlace(2245.6001, doubleArray0);
      Integer integer0 = new Integer((-392));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(65);
      Integer integer3 = new Integer((-392));
      Integer integer4 = new Integer((-2146605689));
      Integer integer5 = new Integer((-2146605689));
      Integer integer6 = new Integer(2147);
      Integer integer7 = new Integer(1021);
      Integer.getInteger("fsc ,/(sBC=Aaui&n", integer7);
      Integer.getInteger("fsc ,/(sBC=Aaui&n", (Integer) null);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-392));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4093.145;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1208.256168761941);
      doubleArray0[3] = (-770.0);
      doubleArray0[4] = 1529.14478052;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      int int0 = 2;
      intArray0[0] = 2;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 154;
      intArray0[2] = 154;
      int int3 = (-491);
      intArray0[3] = (-491);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1526.26), (-1526.26), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathArrays.linearCombination(1904.748312, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      int int0 = 1;
      MathArrays.copyOf(doubleArray1, 1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-835);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-835));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-82.24833884);
      doubleArray0[1] = 2140.8607;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1757.44713;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2350.08247332;
      doubleArray0[1] = 2350.08247332;
      doubleArray0[2] = 2350.08247332;
      MathArrays.scaleInPlace(2350.08247332, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 124;
      intArray0[2] = (-3235);
      intArray0[3] = 291;
      intArray0[4] = 0;
      intArray0[5] = 2984;
      int[] intArray1 = new int[5];
      intArray1[0] = 124;
      intArray1[1] = 124;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
