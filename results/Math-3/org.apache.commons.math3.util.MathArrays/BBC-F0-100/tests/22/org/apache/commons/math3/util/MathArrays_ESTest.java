/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:10:13 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Double, Object> pair0 = new Pair<Double, Object>((Double) 0.0, class0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2144646813, 21);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int0 = 311;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 311);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2146660758;
      intArray0[1] = 97;
      int int0 = 322;
      intArray0[2] = 322;
      int int1 = 7;
      intArray0[3] = 7;
      int[] intArray1 = new int[5];
      intArray1[0] = 97;
      intArray1[1] = 97;
      intArray1[2] = 2146660758;
      intArray1[3] = 322;
      intArray1[4] = 97;
      MathArrays.distance1(intArray0, intArray1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.053914366419999E7;
      doubleArray0[1] = (-366.036);
      doubleArray0[2] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 4.053914366419999E7;
      doubleArray2[1] = (-366.036);
      doubleArray2[2] = (-915.0);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2867.3646603);
      doubleArray0[1] = 380.09907246;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1061.2923686719741;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1375.0894;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 311;
      MathArrays.buildArray(field0, 311);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2614.17757);
      doubleArray0[1] = (-2614.17757);
      doubleArray0[2] = (-2614.17757);
      doubleArray0[3] = (-2614.17757);
      doubleArray0[4] = (-2614.17757);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-32), 4306);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 8.0E298;
      doubleArray0[1] = 1036.323;
      doubleArray0[2] = 931.0668026645812;
      doubleArray0[3] = (-4550.239999268);
      doubleArray0[4] = (-541.0);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2480.187847;
      doubleArray0[7] = (-1317.127965172);
      doubleArray0[8] = 774.7535125557;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-681.9878852145936);
      doubleArray0[1] = (-681.9878852145936);
      doubleArray0[2] = (-681.9878852145936);
      doubleArray0[3] = (-681.9878852145936);
      doubleArray0[4] = (-681.9878852145936);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-681.9878852145936);
      doubleArray1[1] = 2325537.3778973683;
      doubleArray1[2] = (-681.9878852145936);
      doubleArray1[3] = 2325537.3778973683;
      doubleArray1[4] = (-681.9878852145936);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1019.8232F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 156.7F;
      floatArray0[3] = 469.82843F;
      floatArray0[4] = 2069.63F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2027.3851F);
      float[] floatArray1 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1723;
      intArray0[1] = 122;
      intArray0[2] = 2261;
      intArray0[3] = 122;
      intArray0[5] = 162;
      intArray0[6] = 1350;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 2261;
      doubleArray0[2] = (double) 122;
      doubleArray0[3] = (double) 1723;
      doubleArray0[4] = (double) 1350;
      doubleArray0[5] = (double) 1723;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H~Zbb73iZ";
      stringArray0[1] = "gNZC^QKn~j'";
      stringArray0[2] = "";
      stringArray0[3] = "[!]W RS";
      stringArray0[4] = "ghaorF<+>;=IzS<Bq.";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray1 = new int[1];
      intArray1[0] = 1723;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-12.63553F);
      floatArray1[1] = (-12.63553F);
      floatArray1[2] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[][] doubleArray1 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "+.pFB)MG$=k%#?Ub";
      stringArray0[2] = "}0}J&";
      stringArray0[3] = "y3w:5{Ep}D4D";
      stringArray0[4] = "+zKD";
      stringArray0[5] = "|n|Ha%JQG";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 4688.901F;
      floatArray0[1] = 1753.49F;
      floatArray0[2] = (-736.279F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 4688.901F;
      floatArray1[1] = (-736.279F);
      floatArray1[2] = 4688.901F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-26.146);
      doubleArray0[1] = 1.86285714285713869E18;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2291.0;
      doubleArray0[4] = (-208.512);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-3200.1977071078);
      doubleArray0[7] = 1530.5;
      doubleArray0[8] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathArrays.linearCombination(Double.NaN, Double.NaN, (-0.010714690733195933), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 419.917F;
      floatArray0[1] = 1334.0F;
      float[] floatArray1 = new float[5];
      floatArray1[0] = 419.917F;
      floatArray1[1] = 419.917F;
      floatArray1[2] = 1334.0F;
      floatArray1[3] = 1334.0F;
      floatArray1[4] = 3.4028235E38F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 419.917F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-26.146);
      doubleArray0[1] = 1.86285714285713869E18;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2291.0;
      doubleArray0[4] = (-208.512);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-3200.1977071078);
      doubleArray0[7] = 1530.5;
      doubleArray0[8] = 1.0;
      MathArrays.safeNorm(doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2645, 4306);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(401.1126560472818);
      int[] intArray0 = new int[1];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(0.0, (double) 0, (double) 0.0F, 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 528.825822144721;
      doubleArray0[1] = 2.608E18;
      doubleArray0[2] = 1165.86744934741;
      doubleArray0[3] = 1079.1348676;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 27);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1165.86744934741;
      doubleArray2[1] = (double) 27;
      doubleArray2[2] = 1079.1348676;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 27
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.linearCombination(1752.561354, 1752.561354, 3.834E-20, Double.NaN, 3.834E-20, 1.34217729E8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(61.685852794, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0[3], doubleArray0[1]);
      MathArrays.checkPositive(doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray1);
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1.0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[2];
      long long0 = 9218868437227405312L;
      longArray1[0] = 9218868437227405312L;
      longArray1[1] = 1073741824L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      Double double0 = new Double((-1.0));
      MathArrays.distance(intArray0, intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 456;
      intArray1[1] = 0;
      intArray1[2] = 1449;
      intArray1[3] = 78;
      intArray1[4] = 1024;
      intArray1[5] = (-3112);
      intArray1[6] = 13;
      intArray1[7] = (-1);
      intArray1[8] = 1363;
      MathArrays.distance(intArray0, intArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("G{Qpj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.G{Qpj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-697);
      intArray0[4] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      long[][] longArray1 = new long[1][1];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(3306.1, (double) 0, (double) 0, 3306.1, (double) (-697), (-2199.451));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.linearCombination(1.34217729E8, 1.34217729E8, (-1469.6321), 1.34217729E8, 1.34217729E8, 3.834E-20);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.8014201527234514E16;
      MathArrays.checkPositive(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      int[] intArray0 = new int[9];
      intArray0[0] = 4263;
      intArray0[1] = (-830);
      intArray0[2] = 2147482055;
      intArray0[3] = 2779;
      intArray0[4] = 228;
      intArray0[5] = 0;
      intArray0[6] = (-485);
      intArray0[7] = 1080;
      intArray0[8] = 1470;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(Double.NaN, (-5.7618793749770706E-8), 1.34217729E8, (-2789.847), 1.34217729E8, (-1417.3862));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (-0.33333333333333287);
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-0.33333333333333287));
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2298.6345999341;
      doubleArray2[1] = (-907.0781499778964);
      doubleArray2[2] = (-0.33333333333333287);
      doubleArray2[3] = (-0.33333333333333287);
      doubleArray2[4] = (double) 5;
      doubleArray2[5] = (double) 5;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.7168146928204135);
      doubleArray0[1] = (-639.96641659);
      double double0 = 1.34217729E8;
      doubleArray0[2] = 1.34217729E8;
      double double1 = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      double double2 = (-2027.2911885);
      doubleArray0[4] = (-2027.2911885);
      doubleArray0[5] = 485809.0;
      doubleArray0[6] = 2623.592872728486;
      doubleArray0[7] = (-2274.55270095556);
      MathArrays.safeNorm(doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 727.0;
      doubleArray0[4] = 1232.0;
      doubleArray0[5] = 727.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`S <m;[yR1";
      stringArray0[1] = "NOT_POSITIVE_STANDARD_DEVIATION";
      stringArray0[2] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "QGd+8'n88dRsQJ.PF";
      stringArray0[4] = "j#lV~SVSN>>_jXR";
      stringArray0[5] = "++i*-Tb^v}BP-CQ((";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-80.25F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      MathArrays.equals(floatArray1, floatArray0);
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      MathArrays.distance1(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 2137.9216F;
      MathArrays.equals(floatArray0, floatArray0);
      double[][] doubleArray2 = new double[3][9];
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) Float.NaN;
      doubleArray3[2] = 676.6668;
      doubleArray3[3] = (double) (-1.0F);
      doubleArray3[4] = (double) (-1.0F);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathArrays.linearCombination(727.0, 727.0, 727.0, 40.19140625);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 557748.15234375;
      doubleArray0[1] = 727.0;
      doubleArray0[2] = 727.0;
      doubleArray0[3] = 40.19140625;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 40.19140625;
      doubleArray1[1] = 40.19140625;
      doubleArray1[2] = 40.19140625;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1682.1);
      doubleArray2[2] = 1802.8615;
      doubleArray2[3] = 1258.009432;
      doubleArray2[4] = (-116.1727216743);
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.82842712474619;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.041666663879186654;
      doubleArray0[4] = 710.0;
      doubleArray0[5] = 7.848361555046424E-8;
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.normalizeArray(doubleArray1, 1.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<Double, FieldElement<String>> pair0 = new Pair<Double, FieldElement<String>>((Double) 0.0, fieldElement0);
      Pair<Double, FieldElement<String>> pair1 = new Pair<Double, FieldElement<String>>(pair0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 19, 4306);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.convolve(doubleArray1[1], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.650007086920087E-9;
      doubleArray0[1] = 1269.7058514351545;
      doubleArray0[2] = (-1618.21088);
      doubleArray0[3] = 1349196.3;
      doubleArray0[4] = 727.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,269.706 >= -1,618.211)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "uPXV27";
      stringArray0[2] = "uPXV27";
      stringArray0[3] = "P>e6";
      stringArray0[4] = "uPXV27";
      stringArray0[5] = "uPXV27";
      stringArray0[6] = "uPXV27";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[2] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      MathArrays.distanceInf(intArray1, intArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1624.1;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.linearCombination(doubleArray2, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      MathArrays.distanceInf(intArray1, intArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1624.1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 19, 4306);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1508.4047939967);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2949.5773191429066);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2949.5773191429066;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      MathArrays.distance(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      MathArrays.distanceInf(intArray1, intArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.linearCombination(1351563.0446944132, 1907.8107090787, (-415.14), 1.5955496460522372E11, 0.19999998807907104, 3.834E-20);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[6];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      MathArrays.linearCombination((-1083.1), (double) 0, 1.0708593250394448E-7, 1.0E-5, 5899.154638345777, (-1083.1));
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2092));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 2082;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2082;
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(intArray2, intArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      int[] intArray1 = new int[1];
      intArray1[0] = 2082;
      MathArrays.copyOf(intArray1);
      double[] doubleArray1 = new double[1];
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1359.4906F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 123;
      Integer integer0 = Integer.valueOf(123);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("L.q=ci*0x0'<", integer2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.linearCombination(1.34217729E8, 180.3673564732524, 1.34217729E8, 1.633123935319537E16, Double.NaN, 0.0);
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2351.3471315);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(1276.5159);
      doubleArray0[2] = double2;
      Double double3 = new Double((-622.640933697441));
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      Double double6 = new Double(1276.5159);
      doubleArray0[6] = double6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 2907);
      MathArrays.linearCombination((double) 2907, 285.91916, (double) 2907, (double) 2907, 285.91916, 285.91916);
      double[][] doubleArray4 = new double[9][0];
      doubleArray4[0] = doubleArray3;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray0;
      doubleArray4[3] = doubleArray0;
      double[] doubleArray5 = new double[7];
      doubleArray5[6] = (double) 2907;
      doubleArray5[1] = 9363565.764175106;
      doubleArray5[2] = 9363565.764175106;
      doubleArray4[4] = doubleArray5;
      doubleArray4[5] = doubleArray0;
      doubleArray4[6] = doubleArray1;
      doubleArray4[7] = doubleArray3;
      doubleArray4[8] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,907 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1, 2907);
      MathArrays.linearCombination((double) 2907, 285.91916, (double) 2907, (double) 2907, 285.91916, 285.91916);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = (-727);
      MathArrays.scale((-727), doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 530.9596213563;
      doubleArray0[1] = 530.9596213563;
      doubleArray0[2] = 530.9596213563;
      doubleArray0[3] = 530.9596213563;
      doubleArray0[4] = 530.9596213563;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = (-1967);
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1967);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[] doubleArray1 = null;
      MathArrays.equals(doubleArray0, (double[]) null);
      int[] intArray2 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "NUMBER_TOO_SMALL";
      stringArray0[1] = "fV>}%m9qw^vn6\f{";
      stringArray0[2] = "";
      stringArray0[3] = "zi&w\"8Q'[Ud[o@b:";
      stringArray0[4] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathArrays.linearCombination(0.0, 937.544112886232, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1508.4047939967;
      doubleArray0[3] = 2949.5773191429066;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 937.544112886232;
      doubleArray0[6] = 0.0;
      MathArrays.normalizeArray(doubleArray0, 2949.5773191429066);
      MathArrays.copyOf(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1952.7;
      doubleArray1[1] = 2949.5773191429066;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1508.4047939967;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "OUT_OF_RANGE_LEFT";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double[][] doubleArray0 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1967);
      floatArray0[1] = (float) 227;
      floatArray0[2] = (float) (-1967);
      floatArray0[3] = (float) (-1967);
      floatArray0[4] = (float) 227;
      floatArray0[5] = (float) 227;
      MathArrays.equals((float[]) null, floatArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1967);
      intArray0[1] = 227;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.distanceInf(intArray0, intArray1);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      boolean boolean0 = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 410;
      doubleArray0[1] = 3624.307390158347;
      doubleArray0[2] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (3,624.307 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1216.7151020847);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-890.04816F);
      floatArray0[1] = (-220.8895F);
      floatArray0[2] = (-220.8895F);
      floatArray0[3] = (-2358.8008F);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1129.584621;
      doubleArray0[6] = 1351563.0446944132;
      doubleArray0[8] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1162.5674366222431;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE";
      stringArray0[1] = "DECREASING";
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      MathArrays.distanceInf(intArray1, intArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "uPXV27";
      stringArray0[1] = "uPXV27";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "uPXV27";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-697);
      doubleArray0[1] = (double) (-697);
      doubleArray0[2] = (double) (-697);
      doubleArray0[3] = (double) (-697);
      doubleArray0[4] = (double) (-697);
      doubleArray0[5] = 1155.06202831223;
      doubleArray0[6] = (double) (-697);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 694);
      MathArrays.scale((-697.0), doubleArray0);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 694 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 30.777;
      doubleArray0[0] = 30.777;
      double double1 = 2912.7916884;
      doubleArray0[1] = 2912.7916884;
      doubleArray0[2] = (-868.0);
      doubleArray0[3] = 2171.47;
      doubleArray0[4] = 8502.62177880672;
      doubleArray0[5] = (-2820.15484324);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 4315;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 4315;
      doubleArray3[1] = (double) 4315;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      int[] intArray0 = new int[6];
      intArray0[0] = 191;
      intArray0[1] = 1130;
      intArray0[2] = 0;
      intArray0[3] = (-3082);
      intArray0[4] = 1417;
      intArray0[5] = 214;
      int[] intArray1 = new int[9];
      intArray1[0] = 1417;
      intArray1[1] = 1130;
      intArray1[2] = 214;
      intArray1[3] = 0;
      intArray1[4] = 1417;
      intArray1[5] = 214;
      intArray1[6] = 1130;
      intArray1[7] = 0;
      intArray1[8] = 214;
      MathArrays.distanceInf(intArray0, intArray1);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1161.215265156092;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray3 = new double[7][1];
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1680.38;
      doubleArray3[0] = doubleArray4;
      doubleArray3[0] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      MathArrays.linearCombination((double) 0, (double) 94, (-387.2), (double) 0);
      MathArrays.checkPositive(doubleArray2);
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 0;
      MathArrays.equals(doubleArray1, doubleArray5);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      intArray0[1] = 298;
      intArray0[2] = 410;
      intArray0[3] = 410;
      intArray0[4] = (-1967);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 410;
      doubleArray0[1] = (double) 410;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1058.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "p{N/:Vj['P";
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[1][8];
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1162.5674366222431;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.convolve(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "uPXV27";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = 1.1730463525082348E-7;
      doubleArray0[2] = 1.1730463525082348E-7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.1730463525082348E-7;
      doubleArray2[1] = 1.1730463525082348E-7;
      doubleArray2[2] = 1.1730463525082348E-7;
      doubleArray2[3] = 1.1730463525082348E-7;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.1730463525082348E-7;
      doubleArray2[6] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 14
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.linearCombination(0.45448755235593546, 0.45448755235593546, 0.45448755235593546, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.849991971321401);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2949.9009988003936);
      MathArrays.copyOf(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-896.3504503533422);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray0);
      MathArrays.linearCombination(0.0, 1665.708, 1665.708, 0.0, (-128.51324725549), 0.9305076599121094, 3.834E-20, 1567.771122154);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 330.510576;
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = 1.5830993332061267E-10;
      doubleArray0[6] = 3370.89223;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 330.510576;
      doubleArray1[1] = 3370.89223;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[1] = "'eZK?6";
      stringArray0[2] = "ILLEGAL_STATE";
      stringArray0[3] = "ILLEGAL_STATE";
      stringArray0[4] = "'eZK?6";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.equals(doubleArray0, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 45;
      intArray0[2] = 2167;
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray1 = new int[3];
      intArray1[0] = 4300;
      intArray1[1] = (-448);
      intArray1[2] = 2167;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.distanceInf(intArray2, intArray2);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray2);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 686;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 686, 686);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1[1], doubleArray1[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 1L;
      longArray2[1] = (-3109L);
      longArray2[2] = 9007199254740990L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-3109L);
      floatArray1[1] = (float) 9007199254740990L;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) 1L;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 9007199254740990L;
      floatArray1[7] = (-1.0F);
      floatArray1[8] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3109.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-614.6769545972518);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = new Double(530.9596213562907);
      try { 
        MathArrays.normalizeArray(doubleArray0, 2949.5773191429066);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      intArray0[1] = 227;
      intArray0[2] = 0;
      intArray0[3] = 310;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 227;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 310;
      MathArrays.equals((float[]) null, floatArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "p{N/:Vj['P";
      stringArray0[2] = "q/L-W=5X_u'4Cb<";
      stringArray0[3] = "NOT_POSITIVE_POISSON_MEAN";
      stringArray0[4] = "q/L-W=5X_u'4Cb<";
      stringArray0[5] = "m%|$kBf8B0PGElz";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[][] longArray0 = new long[7][5];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{LK2I;k5{$<";
      stringArray0[3] = "p{N/:Vj['P";
      stringArray0[4] = "p{N/:Vj['P";
      stringArray0[5] = "";
      stringArray0[8] = "";
      stringArray0[7] = "p{N/:Vj['P";
      stringArray0[8] = "q/L-8eX_u'4Cb<";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-482.53151376);
      doubleArray0[2] = 530.9596213562907;
      doubleArray0[3] = 840.51;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.8307188599677033E-8;
      doubleArray0[6] = 3294198.0;
      doubleArray0[7] = 2.608E18;
      doubleArray0[8] = 1884835.9599999997;
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[1] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[2] = ",}0sd?Aj2#^&7q:\"v[";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[5] = 1964.273663;
      doubleArray1[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 5 and 6 are not increasing (1,964.274 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2949.5773191429066);
      MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ILLEGAL_STATE";
      stringArray0[1] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[2] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[3] = "ILLEGAL_STATE";
      stringArray0[4] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[5] = "ILLEGAL_STATE";
      stringArray0[6] = "ILLEGAL_STATE";
      stringArray0[7] = "";
      stringArray0[8] = "ILLEGAL_STATE";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 1736.550465;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 2.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.0;
      MathArrays.scaleInPlace(2.0, doubleArray1);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[1] = "'eZK?6";
      stringArray0[2] = "ILLEGAL_STATE";
      stringArray0[3] = "ILLEGAL_STATE";
      stringArray0[4] = "'eZK?6";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = null;
      MathArrays.equals(doubleArray0, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 45;
      intArray0[2] = 2167;
      intArray0[3] = 2000;
      intArray0[5] = (-1);
      intArray0[6] = 4306;
      intArray0[7] = (-1315);
      intArray0[8] = 241;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.scaleInPlace((-379.4245286), doubleArray0);
      long[][] longArray0 = new long[1][9];
      MathArrays.checkRectangular(longArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2705;
      doubleArray0[1] = (double) 2705;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2705;
      doubleArray0[4] = (double) 2705;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      long[][] longArray0 = new long[7][7];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 2705;
      longArray1[1] = (long) 2705;
      longArray1[2] = (long) 2705;
      longArray1[3] = 10000L;
      longArray1[4] = (long) 2705;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (long) 2705;
      longArray2[1] = (long) 2705;
      longArray2[2] = 10000L;
      longArray2[3] = (long) 2705;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = (long) 2705;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (long) 2705;
      longArray3[1] = (long) 2705;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (long) 2705;
      longArray4[1] = 4503599627370495L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 4503599627370495L;
      longArray5[1] = 4503599627370495L;
      longArray5[2] = (long) 2705;
      longArray5[3] = 4503599627370495L;
      longArray5[4] = 10000L;
      longArray5[5] = 4503599627370495L;
      longArray5[6] = 4503599627370495L;
      longArray5[7] = 10000L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = (long) 2705;
      longArray6[1] = (long) 2705;
      longArray6[2] = 4503599627370495L;
      longArray6[3] = (long) 2705;
      longArray6[4] = (-9223372036854775808L);
      longArray6[5] = 10000L;
      longArray6[6] = (long) 2705;
      longArray6[7] = 10000L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "";
      stringArray0[2] = "S}";
      stringArray0[3] = "overflow, numerator too large after multiply: {0}";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",}0sd?Aj2#^&7q:\"v[";
      stringArray0[1] = "'eZK?6";
      stringArray0[2] = "ILLEGAL_STATE";
      stringArray0[3] = "ILLEGAL_STATE";
      stringArray0[4] = "'eZK?6";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "p{N/:Vj['P";
      stringArray0[2] = "q/L-W=5X_u'4Cb<";
      stringArray0[3] = "NOT_POSITIVE_POISSON_MEAN";
      stringArray0[4] = "q/L-W=5X_u'4Cb<";
      stringArray0[5] = ",sP/`";
      stringArray0[6] = "^";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1409.28);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 358.819;
      doubleArray0[3] = (-1155.9478542);
      doubleArray0[4] = (-2665.379);
      doubleArray0[5] = (-1574.78);
      doubleArray0[6] = 1456.342572;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-1849.534664);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 30.777;
      doubleArray0[1] = 2912.7916884;
      doubleArray0[2] = (-868.0);
      doubleArray0[3] = 2171.47;
      doubleArray0[4] = 8502.62177880672;
      doubleArray0[5] = (-2820.15484324);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4315);
      MathArrays.scale((-868.0), doubleArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NOT_POSITIVE_POISSON_MEAN";
      stringArray0[1] = "NOT_POSITIVE_POISSON_MEAN";
      stringArray0[2] = "";
      stringArray0[3] = "NOT_POSITIVE_POISSON_MEAN";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4315, 735);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      float[] floatArray0 = new float[11];
      floatArray0[0] = 255.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 255.0F;
      floatArray0[4] = 255.0F;
      floatArray0[5] = 255.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 2830.5684F;
      floatArray0[8] = 255.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.buildArray(field0, 4311, (-2334));
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1610.98354;
      doubleArray0[1] = 2408.1765167761;
      doubleArray0[2] = 1182.84068;
      doubleArray0[3] = (-2043.98573658579);
      doubleArray0[4] = 0.097;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = (-697);
      intArray0[3] = (-697);
      int int1 = 0;
      int int2 = 4315;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-697);
      doubleArray0[2] = (double) (-697);
      doubleArray0[3] = (double) (-697);
      doubleArray0[4] = (double) 4315;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-2820.15484324);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      double[] doubleArray2 = MathArrays.scale(3351.2003201965, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.checkPositive(doubleArray2);
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 530.9596213562907;
      doubleArray0[1] = 530.9596213562907;
      double[] doubleArray1 = MathArrays.scale(530.9596213562907, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 530.9596213562907;
      doubleArray4[1] = 530.9596213562907;
      doubleArray4[2] = 530.9596213562907;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray4, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = 0;
      double double0 = 330.510576;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 330.510576;
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = 1.5830993332061267E-10;
      doubleArray0[3] = 3370.89223;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (330.511 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int int0 = 4306;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 4306, (-2322));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      float[] floatArray0 = new float[11];
      floatArray0[0] = 255.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 255.0F;
      floatArray0[4] = 255.0F;
      floatArray0[5] = 255.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 2830.5684F;
      floatArray0[8] = 255.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.safeNorm(doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 4311, (-2334));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'eZK?6";
      stringArray0[2] = "ILLEGAL_STATE";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-5);
      intArray0[1] = 94;
      int int0 = 0;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-5);
      doubleArray0[1] = (double) (-5);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-5 >= -5)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1162.5674366222431;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray3 = new double[7][1];
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1680.38;
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 255.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 255.0F;
      floatArray0[4] = 255.0F;
      floatArray0[5] = 255.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 2830.5684F;
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 330.510576;
      doubleArray0[1] = 1.5830993332061267E-10;
      doubleArray0[2] = 1.5830993332061267E-10;
      doubleArray0[3] = 3370.89223;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 167.481046282781;
      doubleArray0[6] = 0.9285714285714286;
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q/L-W=5X_u'4Cb<";
      stringArray0[1] = "p{N/:Vj['P";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "NOT_POSITIVE_POISSON_MEAN";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      intArray0[1] = 227;
      intArray0[2] = 0;
      intArray0[3] = 410;
      intArray0[4] = (-1967);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[3] = 723;
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (-20L);
      longArray2[1] = (-3109L);
      longArray2[2] = 9007199254740990L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-20L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      MathArrays.copyOf(doubleArray0, 0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-293.0F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 370L;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 530.9596213562907;
      doubleArray0[1] = 530.9596213562907;
      double[] doubleArray1 = MathArrays.scale(530.9596213562907, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 530.9596213562907;
      doubleArray2[1] = 530.9596213562907;
      doubleArray2[2] = 530.9596213562907;
      doubleArray2[3] = 1680.38;
      doubleArray2[4] = 530.9596213562907;
      doubleArray2[5] = 530.9596213562907;
      doubleArray2[6] = 530.9596213562907;
      doubleArray2[7] = 530.9596213562907;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (530.96 <= 530.96)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 30.777;
      MathArrays.linearCombination((-3441.062), 30.777, (-2019.4535235), 1508.4047939967, 1738.9420429177305, 1937.8, (-1725.8259378543398), 1937.8);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1926);
      intArray0[1] = (-1926);
      intArray0[2] = 952;
      intArray0[3] = 952;
      intArray0[4] = (-1926);
      MathArrays.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 4315;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4315);
      double[] doubleArray2 = MathArrays.scale(4315, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray2);
      MathArrays.linearCombination((-868.0), 167.481046282781, (-1358.12286213), (-868.0));
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 2949.5773191429066;
      doubleArray3[1] = (-1358.12286213);
      doubleArray3[2] = 850.44895862388;
      doubleArray3[3] = (-1358.12286213);
      doubleArray3[4] = (double) 4315;
      doubleArray3[5] = 167.481046282781;
      doubleArray3[6] = (-1992.90639);
      doubleArray3[7] = 1033477.0961553861;
      doubleArray3[8] = (-3891.383437869);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.1666666505023083;
      double double0 = 0.9285714285714286;
      doubleArray0[2] = 0.9285714285714286;
      doubleArray0[3] = (-784.251875);
      doubleArray0[4] = 1.5830993332061267E-10;
      doubleArray0[5] = 330.510576;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2457;
      intArray0[1] = 2;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.1666666505023083;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 255.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 255.0F;
      floatArray0[4] = 255.0F;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 4317;
      intArray0[1] = 51;
      intArray0[2] = 2490;
      intArray0[3] = 1062;
      intArray0[4] = 2480;
      intArray0[5] = 76;
      intArray0[6] = 0;
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2949.5773191429066;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3370.89223;
      doubleArray0[5] = (-1183.39);
      doubleArray0[6] = 1508.4047939967;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-242.6356638101993));
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1461);
      intArray0[1] = (-2779);
      intArray0[2] = 748;
      intArray0[3] = (-887);
      intArray0[4] = (-1461);
      intArray0[5] = (-887);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distance1(doubleArray2, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 850.44895862388;
      doubleArray0[1] = 850.44895862388;
      int int0 = 4315;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4315);
      double[] doubleArray2 = MathArrays.scale(4315, doubleArray1);
      MathArrays.equals(doubleArray2, doubleArray0);
      MathArrays.linearCombination((-3109.0), 8502.62177880672, 1256.9192687209, (double) 4315);
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2758.9867717001416;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      int int0 = (-66);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-66));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.1666666505023083;
      doubleArray0[2] = 0.9285714285714286;
      doubleArray0[3] = (-784.251875);
      doubleArray0[4] = 1.5830993332061267E-10;
      doubleArray0[5] = 330.510576;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2457;
      intArray0[1] = 2;
      intArray0[2] = 667;
      intArray0[3] = (-787);
      intArray0[4] = 3174;
      MathArrays.copyOf(intArray0, 643);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 30.777;
      doubleArray0[1] = 2912.7916884;
      doubleArray0[2] = (-868.0);
      doubleArray0[3] = 2171.47;
      doubleArray0[4] = 8502.62177880672;
      doubleArray0[5] = (-2820.15484324);
      int int0 = 4315;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 4315);
      MathArrays.scale((-868.0), doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2171.47;
      doubleArray2[1] = (-2820.15484324);
      doubleArray2[2] = 8502.62177880672;
      MathArrays.equals(doubleArray2, doubleArray2);
      MathArrays.linearCombination((-868.0), 1508.4047939967, 167.481046282781, (-868.0));
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 1L;
      longArray2[1] = (-3109L);
      longArray2[2] = 9007199254740990L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-3109L);
      longArray3[1] = 1L;
      longArray3[2] = (-3109L);
      longArray3[3] = (-9223372036854775808L);
      longArray3[4] = 9007199254740990L;
      longArray3[5] = (-3109L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-3109L);
      doubleArray0[2] = (double) (-3109L);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-9223372036854775808L);
      doubleArray0[6] = (double) 1L;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,109 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double double0 = 1508.4047939967;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "EXP_FRAC_TABLE_B";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      int int0 = 0;
      int int1 = 723;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      double[][] doubleArray2 = new double[1][1];
      doubleArray2[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 1600.5124);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1600.5124;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1600.5124;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1600.5124;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      long long0 = 1L;
      longArray2[0] = 1L;
      long long1 = (-3109L);
      longArray2[1] = (-3109L);
      longArray2[2] = 9007199254740990L;
      boolean boolean0 = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 0.9285714285714286;
      doubleArray0[2] = (double) (-3109L);
      doubleArray0[3] = 3370.89223;
      doubleArray0[4] = (double) (-3109L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > 0.929)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1991.201037190854);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 370L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.linearCombination(1.0, 0.0, 1738.9420429177305, 0.0, 967.7620919, 0.0, 0.0, (-868.0));
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      intArray0[1] = 227;
      intArray0[2] = 0;
      intArray0[3] = 310;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 227;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 310;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-906);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-906));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-107.9);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-107.9);
      doubleArray2[1] = (-107.9);
      doubleArray2[2] = (-107.9);
      doubleArray2[3] = (-107.9);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      long[][] longArray0 = new long[2][0];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(12, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 723;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 1680.38;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.4047939967;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2949.5773191429066);
      MathArrays.copyOf(doubleArray1);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-107.9);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-215.8), Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray2.length);
      
      MathArrays.linearCombination((-3068.092802), (-2.6033824355191673E-8), (-107.9), 4.3466666666666665E18, (-3068.092802), 1.304E19, (-57.1), Double.NEGATIVE_INFINITY);
      double double0 = MathArrays.linearCombination((-2.6033824355191673E-8), (-510.9917), (-2895.04), (-2028.103208868474), 3.834E-20, 2949.5773191429066, (-20.0), (-510.9917));
      assertEquals(5881659.74781589, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 723;
      intArray0[5] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1472.448037795858);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-491.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 5114.867053662;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1299.70368030382;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2949.5773191429066;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2912.7916884;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 2,912.792)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = (-2680.992);
      doubleArray0[5] = 2319.46;
      doubleArray0[6] = 20.0;
      double double0 = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-3685.769);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0E-5, (-3.141592653589793), 1.0E-5, 20.0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("~VvD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.~VvD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = 2.0;
      double double1 = 0.0;
      double double2 = 1981.9;
      double double3 = 3.141592653589793;
      MathArrays.linearCombination(2.0, Double.NaN, 0.0, 1981.9, Double.NaN, 448.45647578461, 448.45647578461, 3.141592653589793);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 20.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 20.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-515.40028);
      doubleArray0[3] = (-3891.383437869);
      doubleArray0[4] = (-2019.4535235);
      doubleArray0[5] = (-2373.0497495671);
      doubleArray0[6] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-3,891.383 < -2,019.454)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 94;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 723;
      intArray0[5] = 0;
      intArray0[6] = (-2453);
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (-2453);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (long) 0;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = (long) 0;
      longArray3[1] = 2457L;
      longArray3[2] = (-3463L);
      longArray3[3] = (long) 0;
      longArray3[4] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 94;
      longArray4[2] = (long) 0;
      longArray4[3] = (-188L);
      longArray4[4] = (long) 723;
      longArray4[5] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (long) 0;
      longArray5[1] = 1L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,453 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[][] longArray0 = new long[8][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 723L;
      longArray2[1] = (-9223372036854775808L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-9223372036854775808L);
      longArray4[1] = 723L;
      longArray4[2] = (-9223372036854775808L);
      longArray4[3] = 723L;
      longArray4[4] = 723L;
      longArray4[5] = (-9223372036854775808L);
      longArray4[6] = 723L;
      longArray4[7] = (-9223372036854775808L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 723L;
      longArray5[1] = 723L;
      longArray5[2] = (-9223372036854775808L);
      longArray5[3] = 723L;
      longArray5[4] = 723L;
      longArray5[5] = (-9223372036854775808L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      longArray7[0] = 723L;
      longArray7[1] = 723L;
      longArray7[2] = 723L;
      longArray7[3] = (-9223372036854775808L);
      longArray7[4] = (-9223372036854775808L);
      longArray7[5] = (-9223372036854775808L);
      longArray7[6] = 723L;
      longArray7[7] = 723L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 850.44895862388;
      doubleArray0[1] = 850.44895862388;
      doubleArray0[2] = 850.44895862388;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 850.44895862388;
      doubleArray0[5] = 850.44895862388;
      doubleArray0[6] = 850.44895862388;
      doubleArray0[7] = 850.44895862388;
      double[] doubleArray1 = MathArrays.scale(850.44895862388, doubleArray0);
      assertArrayEquals(new double[] {723263.431224442, 723263.431224442, 723263.431224442, 0.0, 723263.431224442, 723263.431224442, 723263.431224442, 723263.431224442}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 747.81F;
      floatArray0[0] = 747.81F;
      float float1 = 1029.87F;
      floatArray0[1] = 1029.87F;
      float float2 = 3177.59F;
      floatArray0[2] = 3177.59F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int int0 = 113;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1991.201037190854);
      doubleArray0[1] = 0.0;
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = 370L;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-1L);
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = (long) 0;
      longArray3[2] = (-1L);
      longArray3[3] = (long) 0;
      longArray3[4] = 370L;
      longArray3[5] = (-1L);
      longArray3[6] = (-1L);
      longArray3[7] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 5071.41762583;
      doubleArray1[4] = (double) 0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-401.848345);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2016.6405452658905);
      doubleArray0[5] = 692.4174727082604;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray1[2] = 10000L;
      longArray1[3] = (-1514L);
      longArray1[4] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 1023L;
      longArray2[1] = 0L;
      longArray2[2] = (-1514L);
      longArray2[3] = 1L;
      longArray2[4] = 10000L;
      longArray2[5] = (-1514L);
      longArray2[6] = 1L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-1514L);
      longArray3[1] = 1L;
      longArray3[2] = (-1514L);
      longArray3[3] = (-1058L);
      longArray3[4] = 10000L;
      longArray3[5] = (-1514L);
      longArray3[6] = (-1L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 0L;
      longArray4[1] = (-1514L);
      longArray4[2] = 1023L;
      longArray4[3] = (-1058L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (-1514L);
      longArray5[1] = (-1058L);
      longArray5[2] = (-694L);
      longArray5[3] = (-1058L);
      longArray5[4] = 1L;
      longArray5[5] = (-1L);
      longArray5[6] = 1L;
      longArray5[7] = (-1514L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (-694L);
      longArray6[1] = 1L;
      longArray6[2] = 10000L;
      longArray6[3] = (-1L);
      longArray6[4] = (-1L);
      longArray6[5] = (-779L);
      longArray6[6] = 2916L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = (-779L);
      longArray7[1] = 1L;
      longArray7[2] = 10000L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 1023L;
      longArray8[1] = 0L;
      longArray8[2] = 2916L;
      longArray8[3] = 1L;
      longArray8[4] = 1L;
      longArray8[5] = 0L;
      longArray8[6] = 0L;
      longArray8[7] = (-694L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      longArray9[0] = (-1L);
      longArray9[1] = 394L;
      longArray9[2] = (-694L);
      longArray9[3] = 0L;
      longArray9[4] = 1L;
      longArray9[5] = 1167L;
      longArray9[6] = (-1L);
      longArray9[7] = 1L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,514 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4501.88894696);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-724.295067579263);
      doubleArray0[3] = 1485.622;
      doubleArray0[4] = 779.1917;
      doubleArray0[5] = (-1313.51396);
      doubleArray0[6] = 2053.9411;
      doubleArray0[7] = Double.NaN;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -724.295)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = -0.0F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) -0.0F;
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 19, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1905.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1914.37F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-395);
      intArray0[1] = 70;
      intArray0[2] = 0;
      intArray0[3] = (-697);
      intArray0[4] = 0;
      intArray0[5] = (-3436);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[1];
      longArray1[0] = 391L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 391L;
      longArray2[1] = 391L;
      longArray2[2] = 391L;
      longArray2[3] = 391L;
      longArray2[4] = 391L;
      longArray2[5] = 391L;
      longArray2[6] = 391L;
      longArray2[7] = 391L;
      longArray2[8] = 391L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 391L;
      longArray3[1] = 391L;
      longArray3[2] = 2173L;
      longArray3[3] = 391L;
      longArray3[4] = 391L;
      longArray3[5] = 391L;
      longArray3[6] = 391L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 2173L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 2173L;
      longArray5[1] = 2173L;
      longArray5[2] = 391L;
      longArray5[3] = 391L;
      longArray5[4] = 2173L;
      longArray5[5] = 2173L;
      longArray5[6] = 391L;
      longArray5[7] = 391L;
      longArray5[8] = 391L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = 2173L;
      longArray6[1] = 2173L;
      longArray6[2] = 2173L;
      longArray6[3] = 2173L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-20.0);
      doubleArray2[2] = 20.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertEquals(5.36870996E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1051.3943;
      doubleArray0[1] = (-2222.203);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 311.7173;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (-2379.73784266528);
      doubleArray0[6] = 2730.2243640155;
      doubleArray0[7] = (-4175.1);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 126);
      assertEquals(126, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 311;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2760.4937759052746);
      doubleArray0[1] = (-2760.4937759052746);
      doubleArray0[2] = (-2760.4937759052746);
      doubleArray0[3] = (-2760.4937759052746);
      doubleArray0[4] = (-2760.4937759052746);
      doubleArray0[5] = (-2760.4937759052746);
      MathArrays.scaleInPlace((-2760.4937759052746), doubleArray0);
      MathArrays.scaleInPlace(5.806936662121344E13, doubleArray0);
      assertArrayEquals(new double[] {4.425074976943955E20, 4.425074976943955E20, 4.425074976943955E20, 4.425074976943955E20, 4.425074976943955E20, 4.425074976943955E20}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-417);
      intArray0[2] = 1046;
      intArray0[3] = 1620;
      intArray0[4] = 230;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1579.0F);
      floatArray0[1] = 3235.5085F;
      floatArray0[2] = 1319.73F;
      floatArray0[3] = 588.00507F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1117.4536F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(945.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1559.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 653.558;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 440.346837742036;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-868.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-491.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 5114.867053662;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1299.70368030382;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -868 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[11];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 80.4821F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 1042.6632F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 80.4821F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 80.4821F;
      doubleArray0[3] = (double) 1042.6632F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 265.0;
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1081.816205571759, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-697);
      intArray0[4] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1756.8696);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1363.042657996);
      doubleArray0[4] = (-570.9179215);
      doubleArray0[5] = 0.0;
      MathArrays.copyOf(doubleArray0);
      long[] longArray0 = new long[8];
      long long0 = 0L;
      longArray0[0] = 0L;
      long long1 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 349L;
      longArray0[4] = 2539L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      long long2 = (-1073741824L);
      longArray0[7] = (-1073741824L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,073,741,824 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-167.481046282781);
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 797L;
      longArray0[1] = (-3317L);
      longArray0[2] = 0L;
      long long0 = 0L;
      longArray0[3] = 0L;
      long long1 = 0L;
      longArray0[4] = 0L;
      long long2 = (-2171L);
      longArray0[5] = (-2171L);
      longArray0[6] = 2788L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,317 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 127.8691042943;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 1680.38;
      doubleArray0[2] = 1937.8;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.copyOf(doubleArray1, 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 3197;
      intArray0[2] = 0;
      int int0 = 286;
      intArray0[3] = 286;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double double0 = 1.34217729E8;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) 286;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 2705;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2705);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 236;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2714.1433232);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-2225.487162523);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-2714.1433232);
      doubleArray1[2] = (-2714.1433232);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3.834E-20;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 410;
      intArray0[1] = 227;
      intArray0[2] = 0;
      intArray0[3] = 310;
      intArray0[4] = (-1967);
      int int0 = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 310;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.checkOrder(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("*f~/PYI\"EPq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.*f~/PYI\"EPq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2330.37013372;
      doubleArray0[6] = 970.20239355712;
      doubleArray0[7] = 2242.2565297250444;
      doubleArray0[8] = (-1996.668985823);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3789.18F);
      floatArray0[1] = (-1697.8934F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ASSYMETRIC_EIGEN_NOT_SUPPORTED";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 1L;
      longArray1[3] = (-1631L);
      longArray1[4] = 2244L;
      longArray1[5] = 0L;
      longArray1[6] = 3797L;
      longArray1[7] = 9218868437227405312L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = (-1631L);
      longArray3[2] = 9218868437227405312L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 1L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 2244L;
      longArray4[4] = 3797L;
      longArray4[5] = 0L;
      longArray4[6] = 9218868437227405312L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 4300L;
      longArray5[1] = 9218868437227405312L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 3609L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      longArray8[0] = 3609L;
      longArray8[1] = (-879L);
      longArray8[2] = 3797L;
      longArray8[3] = 1L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,631 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-107.9);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 522.1683161354;
      doubleArray0[3] = (-1476.2685281673917);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1508.4047939967;
      doubleArray0[6] = 1.7976931348623157E308;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
