/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:10:21 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[11];
      MathArrays.distance1(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.buildArray(field0, 0);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      longArray0[0] = null;
      longArray0[1] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(1757.4379);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2558.1;
      doubleArray0[1] = (-4351.706383864591);
      doubleArray0[2] = 1167.34739668249;
      doubleArray0[3] = (-3973.23276);
      doubleArray0[4] = 7675555.212273523;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.031;
      doubleArray0[7] = (-2090.854);
      doubleArray0[8] = (-8.0E298);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1174.61575397524);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-570.0);
      doubleArray1[1] = 2.608E18;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 3669.943327385789;
      doubleArray1[4] = 251.87137262726;
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = (-936.1838);
      doubleArray1[7] = 1.86285714285714278E18;
      doubleArray1[8] = 1.304E19;
      MathArrays.copyOf(doubleArray1);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2146805994;
      intArray0[1] = 3525;
      intArray0[2] = 1922;
      intArray0[3] = 34;
      intArray0[4] = 2146805994;
      intArray0[5] = (-1393);
      intArray0[6] = (-3297);
      int[] intArray1 = new int[7];
      intArray1[0] = (-276);
      intArray1[1] = 34;
      intArray1[2] = 2146805994;
      intArray1[3] = 34;
      intArray1[4] = 34;
      intArray1[5] = (-3297);
      intArray1[6] = 34;
      MathArrays.distance1(intArray0, intArray1);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146805994, 1181);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2146805994;
      intArray0[1] = 3525;
      intArray0[2] = 1922;
      intArray0[3] = 34;
      intArray0[4] = 129;
      intArray0[5] = (-1393);
      intArray0[6] = (-3297);
      int[] intArray1 = new int[7];
      intArray1[0] = (-276);
      intArray1[1] = 34;
      intArray1[2] = 2146805994;
      intArray1[3] = 34;
      intArray1[4] = 34;
      intArray1[5] = (-3297);
      intArray1[6] = 34;
      MathArrays.distance1(intArray0, intArray1);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2146805994, 1181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[19];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1676.6469);
      doubleArray0[1] = (-2395.3);
      doubleArray0[2] = (-0.16624882440418567);
      doubleArray0[3] = (-0.05417713522911072);
      doubleArray0[4] = 394.04541718446;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 42.851958;
      doubleArray0[7] = (-7.877917738262007E-9);
      doubleArray0[8] = 7.9811236313082;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2431);
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-684.8260990973545);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-292.29244184);
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-292.29244184);
      doubleArray2[1] = (-292.29244184);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1924.74496656805;
      doubleArray2[4] = (-292.29244184);
      doubleArray2[5] = (-292.29244184);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (-292.29244184);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1924.74496656805;
      doubleArray1[8] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (-0.1666666567325592);
      doubleArray0[2] = (-3674.0);
      doubleArray0[3] = 95.14776532514158;
      doubleArray0[4] = (-3546.54038842);
      doubleArray0[5] = (-442.830375);
      doubleArray0[6] = (-629.15);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2147483600);
      intArray0[1] = 28;
      intArray0[2] = 6;
      intArray0[3] = 99;
      intArray0[4] = 20;
      intArray0[5] = 8;
      intArray0[6] = (-337);
      MathArrays.distance1(intArray0, intArray0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1823);
      intArray0[1] = 5775;
      intArray0[2] = 305;
      intArray0[3] = 1120;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 305;
      doubleArray0[1] = (double) 305;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 305;
      doubleArray0[4] = (-2141.6576358337456);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 5775);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-2.2907643467362154E7), double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(12224.399947655282, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.7249995199969751;
      doubleArray0[1] = 67.4980725489;
      doubleArray0[2] = 1857.5468835944364;
      doubleArray0[3] = (-2.957007209750105E-8);
      doubleArray0[4] = 2054.39;
      doubleArray0[5] = 5.669184079525E-24;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2770.47923873714, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.5256243039958443, 4555.989797816567, 3450480.424751403, 8.743891638514101E-16, 4220518.2721, 3.213964812753972E-47}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 264;
      intArray0[2] = 555;
      intArray0[3] = 2;
      intArray0[4] = 96;
      intArray0[5] = (-3077);
      int[] intArray1 = new int[7];
      intArray1[0] = 96;
      intArray1[1] = (-3077);
      intArray1[2] = 264;
      intArray1[3] = (-3077);
      intArray1[4] = 96;
      intArray1[5] = 555;
      intArray1[6] = 1;
      MathArrays.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) (-3077);
      longArray1[1] = (long) (-3077);
      longArray1[2] = (long) 96;
      longArray1[3] = 1454L;
      longArray1[4] = (long) 96;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 1;
      longArray2[1] = (long) 555;
      longArray2[2] = (long) (-3077);
      longArray2[3] = (long) (-3077);
      longArray2[4] = (long) 264;
      longArray2[5] = (long) 96;
      longArray2[6] = (long) 264;
      longArray2[7] = (long) 264;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.7853981633974483;
      doubleArray1[1] = (-5554.638871281785);
      doubleArray1[2] = 1868.0620000502704;
      doubleArray1[3] = 3.32;
      doubleArray1[4] = 145.4915898888075;
      doubleArray1[8] = 1.0E-5;
      doubleArray1[6] = 1537.676694;
      doubleArray1[7] = (-1.0E-6);
      doubleArray1[8] = (-0.16624882440418567);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1329.91063784082);
      doubleArray0[1] = 7.0;
      doubleArray0[2] = (-1556.3001557252512);
      doubleArray0[3] = 1161.4757706;
      doubleArray0[4] = (-4.813899778443457E-9);
      doubleArray0[5] = 1.63E18;
      doubleArray0[6] = (-647.05334);
      doubleArray0[7] = 813.4703625669;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.63E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 178.55688F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-885.6F);
      floatArray0[3] = (-2915.0F);
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-885.6F);
      floatArray1[1] = Float.NaN;
      floatArray1[2] = Float.NaN;
      floatArray1[3] = (-885.6F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1322.115084123;
      doubleArray0[1] = (-2089.6412653771395);
      doubleArray0[2] = 3397.68;
      doubleArray0[3] = (-434.132051133);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 2912.2525387642813;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-838.9);
      doubleArray0[8] = (-127.0945);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-838.9);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.09090909090909091;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 632.803772;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 1.889351111111111E37;
      doubleArray0[6] = (-2631.0);
      doubleArray0[7] = 3780.83490241751;
      doubleArray0[8] = (-590.213525658);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.scale((-623.3915356404859), doubleArray1);
      long[] longArray0 = new long[6];
      longArray0[0] = 178L;
      longArray0[1] = 753L;
      longArray0[2] = (-1174L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1852L);
      longArray0[5] = 1073741824L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,174 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 2.2860509143963117E-8;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 675.6498F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1539.40112;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 351.1339788;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.9921976327896118;
      doubleArray0[6] = 4067.0;
      doubleArray0[7] = 850.4451821873373;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[4];
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.ebeAdd(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.1111111111111111;
      doubleArray0[1] = 5902.507123109408;
      doubleArray0[2] = 1.7288317580095326E22;
      doubleArray0[3] = 0.1428571343421936;
      doubleArray0[4] = (-2511.73020858);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1.7288317580095326E22;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      assertArrayEquals(new double[] {0.1111111111111111, 5902.507123109408}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "M";
      stringArray0[2] = "";
      stringArray0[3] = "CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR";
      stringArray0[4] = "[6!BM";
      stringArray0[5] = "v Rs\"";
      stringArray0[6] = "eI!{e*O<0c+6j";
      stringArray0[7] = "'";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1891.6058206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-297.499078957);
      doubleArray0[1] = (-1.7288317580095326E22);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-297.499078957);
      doubleArray1[1] = (-297.499078957);
      MathArrays.convolve(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 127, (-295));
      assertEquals(127, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4414.503826179733);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[1] = doubleArray0;
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) (-4414.503826179733);
      doubleArray2[1] = (Double) (-4414.503826179733);
      doubleArray2[2] = (Double) (-4414.503826179733);
      doubleArray2[3] = (Double) (-4414.503826179733);
      doubleArray2[5] = (Double) (-4414.503826179733);
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 569);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Double double0 = new Double((-1522.627039));
      Object object1 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 4013.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2051.4382F;
      floatArray0[1] = 2642.0967F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2299.076F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2642.0967F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2642.0967F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.4E-45F;
      floatArray1[2] = (-1477.2584F);
      float float0 = 1261.0F;
      floatArray1[3] = 1261.0F;
      floatArray1[4] = (-3563.681F);
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray1 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 0.0, Double.NaN, (-846.33295));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.scale((-2.5857668567479893E-8), doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[5];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",WZ1Zt>iM\"SS]R";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "8CBU!/";
      stringArray0[5] = "DECREASING";
      stringArray0[6] = " j>w1OshYT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 339.034;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 3663.7361847491266);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 351.1339788;
      Double double0 = new Double(1511.833280326);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 351.1339788;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 351.1339788;
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 351.1339788;
      doubleArray1[5] = (Double) 351.1339788;
      Double double1 = new Double((double) doubleArray1[3]);
      doubleArray1[6] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(96409.8568721149);
      doubleArray0[0] = double0;
      Double double1 = new Double(96409.8568721149);
      doubleArray0[1] = double1;
      Double double2 = new Double(Double.NaN);
      doubleArray0[2] = double2;
      Double double3 = new Double(96409.8568721149);
      doubleArray0[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double(3.834E-20);
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[][] longArray0 = new long[2][4];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double(Double.NaN);
      doubleArray1[0] = double0;
      Double double1 = new Double(30.510239043);
      doubleArray1[1] = double1;
      Double double2 = new Double((-519.1077354714));
      doubleArray1[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2164.108119;
      doubleArray2[1] = 30.510239043;
      doubleArray2[2] = (double) doubleArray1[0];
      doubleArray2[3] = (double) doubleArray1[0];
      doubleArray2[4] = (double) doubleArray1[1];
      doubleArray2[5] = 30.510239043;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[0][1];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {181238.34745215822}, doubleArray2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double double0 = MathArrays.distance1(doubleArray4, doubleArray1);
      assertEquals(301.03018740000005, double0, 0.01);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      int[] intArray0 = new int[6];
      intArray0[0] = (-611);
      intArray0[1] = (-611);
      intArray0[2] = (-611);
      intArray0[3] = (-611);
      intArray0[4] = (-611);
      intArray0[5] = 1;
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = (-611);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = (-611);
      intArray1[5] = 1;
      intArray1[6] = 1;
      MathArrays.distance(intArray0, intArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-611);
      MathArrays.equals(floatArray0, floatArray0);
      Double double0 = new Double((-242.288771456188));
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 351.1339788;
      doubleArray1[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 351.1339788;
      doubleArray1[1] = (Double) 351.1339788;
      Double double0 = new Double(351.1339788);
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 351.1339788;
      doubleArray1[4] = (Double) 351.1339788;
      doubleArray1[5] = (Double) 351.1339788;
      doubleArray1[6] = (Double) 351.1339788;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) doubleArray1[3];
      doubleArray2[1] = (double) doubleArray1[4];
      doubleArray2[2] = (double) doubleArray1[1];
      doubleArray2[3] = (double) doubleArray1[0];
      doubleArray2[4] = (double) doubleArray1[6];
      doubleArray2[5] = (double) doubleArray1[5];
      doubleArray2[6] = (double) doubleArray1[1];
      doubleArray2[7] = (double) doubleArray1[1];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertEquals(1053.4019364, double1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 1106.38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[26];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.2599210498948732;
      doubleArray0[1] = 1.2599210498948732;
      doubleArray0[2] = 1.2599210498948732;
      doubleArray0[3] = 1.2599210498948732;
      doubleArray0[4] = 1.2599210498948732;
      doubleArray0[5] = 1.2599210498948732;
      doubleArray0[6] = 1.2599210498948732;
      MathArrays.scaleInPlace(1.2599210498948732, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2146050352;
      intArray0[1] = (-2983);
      intArray0[2] = (-611);
      intArray0[3] = 73;
      intArray0[4] = 2146050352;
      intArray0[5] = (-611);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      MathArrays.equals(floatArray0, floatArray0);
      Double double0 = new Double((-611));
      Double[] doubleArray1 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathArrays.linearCombination((-1325.791225467433), (-882.769503571025), (-1325.791225467433), 517.0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2983);
      intArray0[1] = (-2146575235);
      intArray0[2] = 2146050352;
      intArray0[3] = (-611);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2146575235);
      floatArray0[1] = (float) (-611);
      MathArrays.equals(floatArray0, floatArray0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 484933.9983780438;
      Double double0 = new Double((-882.769503571025));
      doubleArray0[1] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (double) (-611.0F);
      doubleArray1[2] = (double) (-611);
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = (-4461.906662763112);
      doubleArray1[5] = (-882.769503571025);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathArrays.linearCombination((-1325.791225467433), (-882.769503571025), (-1325.791225467433), 517.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1325.791225467433);
      doubleArray0[1] = 484933.9983780438;
      doubleArray0[2] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      int[] intArray0 = new int[4];
      int int0 = (-2983);
      intArray0[0] = (-2983);
      int[] intArray1 = new int[3];
      intArray1[0] = (-2983);
      intArray1[1] = (-2983);
      intArray1[2] = 731;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[17];
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2146575235);
      intArray0[1] = (-611);
      intArray0[2] = (-2146575235);
      intArray0[3] = (-2146575235);
      intArray0[4] = (-2146575235);
      intArray0[5] = (-611);
      intArray0[6] = 2146050352;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-2146575235);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false, false);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      
      Double double1 = new Double(2146050352);
      Double[] doubleArray3 = new Double[9];
      doubleArray3[0] = double1;
      doubleArray3[1] = (Double) (-2.146575235E9);
      Double double2 = new Double(2146050352);
      doubleArray3[2] = double2;
      doubleArray3[3] = (Double) (-2.146575235E9);
      Double double3 = new Double(22.0);
      doubleArray3[4] = double3;
      doubleArray3[5] = double1;
      doubleArray3[6] = (Double) (-2.146575235E9);
      doubleArray3[7] = (Double) (-2.146575235E9);
      doubleArray3[8] = double1;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 339.034;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[1];
      MathArrays.safeNorm(doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 339.034;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[0];
      MathArrays.safeNorm(doubleArray2);
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(0.0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (339.034 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[3];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 367;
      intArray0[1] = 245;
      intArray0[2] = 0;
      intArray0[3] = 134217729;
      intArray0[4] = 53;
      intArray0[5] = 1500;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3375.0153771113987;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      MathArrays.linearCombination(3375.0153771113987, 3.834E-20, (-3559.830078125), 3375.0153771113987);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-767.501F);
      floatArray0[1] = (-2078.0F);
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-767.501F);
      floatArray1[1] = (-767.501F);
      floatArray1[2] = (-2078.0F);
      floatArray1[3] = (-2078.0F);
      floatArray1[4] = (-2078.0F);
      floatArray1[5] = (-2078.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.distance(doubleArray2, doubleArray1);
      MathArrays.scaleInPlace((-4760.991628578157), doubleArray2);
      MathArrays.scale((-2078.0F), doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (-2363L);
      longArray0[1] = (-2249L);
      longArray0[2] = (-2520L);
      longArray0[3] = 4607182418800017408L;
      longArray0[4] = 2442L;
      longArray0[5] = (-3200L);
      longArray0[6] = (-1L);
      longArray0[7] = 4398046511103L;
      longArray0[8] = 188L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,363 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1112;
      intArray0[1] = 1112;
      intArray0[2] = 1112;
      intArray0[3] = 1112;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1112;
      intArray0[7] = 1112;
      intArray0[8] = 1112;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      // Undeclared exception!
      try { 
        MathArrays.scale(1112, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-297.499078957);
      doubleArray0[1] = (-1.7288317580095326E22);
      doubleArray0[2] = 148.625;
      doubleArray0[3] = 5.0614674548127384E-8;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.8494064815594213E-5);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[17];
      float float0 = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 80.6F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 340;
      intArray0[1] = 140;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1601.8887948), doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      intArray0[2] = 4;
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 1264;
      intArray1[2] = 134217729;
      intArray1[3] = 134217729;
      intArray1[4] = (-2146998077);
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 134217729;
      intArray1[8] = 0;
      MathArrays.distanceInf(intArray0, intArray1);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray2 = new int[8];
      intArray2[0] = 134217729;
      intArray2[1] = (-2146998077);
      intArray2[2] = (-2146998077);
      intArray2[3] = 0;
      intArray2[4] = 1264;
      intArray2[5] = 0;
      intArray2[6] = (-2146998077);
      intArray2[7] = (-2146998077);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-205);
      intArray0[2] = (-205);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 351.1339788;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 351.1339788);
      double[] doubleArray2 = MathArrays.scale(1.34217729E8, doubleArray1);
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray0);
      assertEquals(4.712840485813617E10, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(351.1339788, doubleArray2);
      MathArrays.checkPositive(doubleArray3);
      assertArrayEquals(new double[] {351.1339788}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3559.830078125;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray0);
      MathArrays.checkOrder(doubleArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-930.923835172);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-930.923835172));
      double[] doubleArray2 = MathArrays.scale((-930.923835172), doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray2);
      MathArrays.scale((-930.923835172), doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-453);
      doubleArray1[1] = 2823.87;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 2823.87;
      doubleArray0[4] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 351.1339788;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1289.0;
      doubleArray0[1] = (double) (-3559.83F);
      doubleArray0[2] = 1289.0;
      doubleArray0[3] = 1289.0;
      doubleArray0[4] = 1289.0;
      doubleArray0[5] = (double) (-3559.83F);
      doubleArray0[6] = (double) (-3559.83F);
      doubleArray0[7] = 1289.0;
      doubleArray0[8] = 1289.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1289.0;
      doubleArray1[1] = (double) (-3559.83F);
      doubleArray1[2] = (double) (-3559.83F);
      doubleArray1[3] = 1289.0;
      doubleArray1[4] = 1289.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double(782.0175168778503);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1123.7961F);
      floatArray0[1] = 2244.992F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2244.992F;
      doubleArray0[1] = (double) (-1123.7961F);
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1123.7961F);
      doubleArray2[1] = 3.141592653589793;
      double double2 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(4495.725821169215, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2244.991943359375, (-1123.796142578125)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1289.0;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1289.0;
      doubleArray2[1] = 1289.0;
      doubleArray2[2] = 1289.0;
      doubleArray2[3] = 1289.0;
      doubleArray2[4] = 1289.0;
      doubleArray2[5] = (-862.33);
      doubleArray2[6] = 1289.0;
      doubleArray2[7] = 1289.0;
      doubleArray2[8] = 1289.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3168;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3168;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3168;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathArrays.linearCombination(0.0, (double) (-3559.83F), (-3071.266477005308), Double.NaN, 2201.9779119336, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3071.266477005308);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 782.0175168778503;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (782.018 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-205);
      intArray0[2] = (-205);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) 0, 65.3, 1446.98922487, 0.16666666666745392, (double) 0, 3.834E-20, 1289.0, 0.0);
      assertEquals(241.16487081280582, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = 2396.8837495592848;
      doubleArray3[3] = 1.44888888888888883E18;
      doubleArray3[4] = 1.44888888888888883E18;
      doubleArray3[5] = 2396.8837495592848;
      doubleArray3[6] = 2396.8837495592848;
      doubleArray3[7] = Double.NaN;
      MathArrays.scaleInPlace(2396.8837495592848, doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 5745051.708901376, 3.4728182326947857E21, 3.4728182326947857E21, 5745051.708901376, 5745051.708901376, Double.NaN}, doubleArray3, 0.01);
      
      double double0 = new Double(Double.NaN);
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2396.8837495592848;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = 1.44888888888888883E18;
      double[] doubleArray5 = MathArrays.copyOf(doubleArray4);
      assertArrayEquals(new double[] {2396.8837495592848, Double.NaN, 1.44888888888888883E18}, doubleArray5, 0.01);
      
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = Double.NaN;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = 1.44888888888888883E18;
      doubleArray7[2] = Double.NaN;
      doubleArray7[3] = 1.44888888888888883E18;
      doubleArray7[4] = Double.NaN;
      doubleArray7[5] = Double.NaN;
      doubleArray7[6] = Double.NaN;
      doubleArray7[7] = 2396.8837495592848;
      doubleArray7[8] = 1.44888888888888883E18;
      double double1 = MathArrays.distance1(doubleArray6, doubleArray7);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1802;
      intArray0[1] = 174;
      intArray0[2] = (-737);
      intArray0[3] = 289;
      intArray0[4] = 58;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (-7278142539171889152L);
      longArray0[1] = (long) (-737);
      longArray0[2] = (long) 1802;
      longArray0[3] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,278,142,539,171,889,152 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2474.8362F);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      int int0 = 304;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-694);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 304, (-694));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MathArrays.linearCombination(3.141592653589793, (-286.35888263472), 3.141592653589793, 782.0175168778503, 0.0, 3.141592653589793);
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3559.83F);
      doubleArray0[1] = (double) (-3559.83F);
      doubleArray0[2] = (double) (-3559.83F);
      doubleArray0[3] = (double) (-3559.83F);
      doubleArray0[4] = (double) (-3559.83F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      MathArrays.scaleInPlace(1240.0, doubleArray1);
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double double1 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1325.791225467433), (-882.769503571025), (-1325.791225467433), 517.0);
      assertEquals(484933.9983780438, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1325.791225467433);
      doubleArray0[1] = 484933.9983780438;
      doubleArray0[2] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2983);
      intArray0[1] = (-2146575235);
      intArray0[2] = 2146050352;
      intArray0[3] = (-611);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1.7288317580095326E22), 6.323539338849691E24, 1.700416E38}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2146575235);
      floatArray0[1] = (float) (-611);
      MathArrays.equals(floatArray0, floatArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1.7288317580095326E22);
      Double double2 = new Double((-882.769503571025));
      doubleArray1[1] = double2;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2907.302F);
      floatArray0[1] = (-1752.77F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2161.89F;
      floatArray0[4] = 1851.5988F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      Double double0 = new Double(3.834E-20);
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1798);
      Integer integer0 = new Integer((-1798));
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.linearCombination(3.141592653589793, (-286.35888263472), 3.141592653589793, 782.0175168778503, 0.0, 3.141592653589793);
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 289.2786707286;
      MathArrays.linearCombination((-2509.6031968627), 289.2786707286, 4011.0, (-1801.87));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1112;
      intArray0[1] = 1112;
      intArray0[2] = 1112;
      intArray0[3] = 1112;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1112;
      intArray0[7] = 1112;
      intArray0[8] = 1112;
      MathArrays.distance(intArray0, intArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[5];
      longArray1[0] = 1023L;
      longArray1[1] = 0L;
      longArray1[2] = 577L;
      longArray1[3] = 0L;
      longArray1[4] = (-2972L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray0[1] = longArray2;
      double double0 = MathArrays.linearCombination(609.37653932, 1.304E19, (double) 1023L, (-68.6));
      assertEquals(7.9462700727328E21, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 382.48780206282;
      doubleArray0[1] = 2.800552834259E-8;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(1.44888888888888883E18, doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-8.723185874879999E20)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 80.6F;
      MathArrays.linearCombination(1285.7, 1250.045709, 0.0, (double) 0.0F, 305.744, (-2527.4));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 305.744;
      doubleArray0[1] = 2242.90701138;
      doubleArray0[5] = (-286.35888263472);
      doubleArray0[3] = 1250.045709;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 305.744;
      doubleArray0[6] = (-2.957007209750105E-8);
      doubleArray0[7] = (-2527.4);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,242.907 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[5];
      longArray1[1] = 0L;
      longArray1[2] = 577L;
      longArray1[3] = 0L;
      longArray1[4] = (-2972L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 577L;
      doubleArray1[1] = (double) 0L;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {577.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray3);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, (-5125.216534881487));
      assertArrayEquals(new double[] {(-5125.216534881487), -0.0, -0.0}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3316.7F);
      floatArray0[1] = 762.25867F;
      floatArray0[2] = (-1214.1489F);
      floatArray0[3] = (-663.7718F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-1409.17F);
      floatArray0[6] = 3088.9438F;
      floatArray0[7] = (-1202.1567F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathArrays.scale(729.801435103, doubleArray2);
      assertArrayEquals(new double[] {1.3226800606628121E8}, doubleArray3, 0.01);
      
      double double0 = MathArrays.linearCombination(2118.8, (-372.9), (-301.0301874), (-301.0301874), 1.34217729E8, (-301.0301874));
      assertEquals((-4.040428759461869E10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1259L;
      longArray0[2] = 9007199254740990L;
      longArray0[3] = (-4363L);
      longArray0[4] = 2147483647L;
      longArray0[5] = (-2030L);
      longArray0[6] = (-1L);
      longArray0[4] = (-1334L);
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<FieldElement<String>, Object> pair0 = new Pair<FieldElement<String>, Object>(fieldElement0, class0);
      Pair<String, String> pair1 = new Pair<String, String>("", "");
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 338, 528);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals((float[]) null, floatArray0);
      long[][] longArray0 = new long[9][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.scale(7675.7525728, doubleArray0);
      MathArrays.distanceInf(doubleArray2, doubleArray1);
      MathArrays.scale((-286.35888263472), doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2527.4);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2527.4);
      doubleArray1[2] = 0.0;
      doubleArray1[0] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray1);
      double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 2754993.0496549187;
      doubleArray0[3] = (-1967.46);
      doubleArray0[4] = 1856.994813117;
      doubleArray0[5] = 4.438921624363781E-8;
      doubleArray0[6] = 687.185887566;
      doubleArray0[7] = 6387750.760000001;
      doubleArray0[8] = 196.6851184870907;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.linearCombination(1856.994813117, Double.NaN, (-1.0), 2754993.0496549187, 1.0, 6387750.760000001);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      MathArrays.scale(1.304E19, doubleArray2);
      MathArrays.linearCombination(Double.NaN, 4.438921624363781E-8, 1727.188, 3.834E-20, 6387750.760000001, Double.NaN);
      int[] intArray0 = new int[4];
      intArray0[0] = 2619;
      intArray0[1] = 1500;
      intArray0[2] = 333;
      intArray0[3] = 1000;
      int[] intArray1 = new int[3];
      intArray1[0] = 1500;
      intArray1[1] = 2619;
      intArray1[2] = 1500;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2458.4;
      doubleArray0[2] = (-1794.81304);
      doubleArray0[3] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1794.81304);
      doubleArray1[2] = 1801.0;
      doubleArray1[3] = 1801.0;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      MathArrays.copyOf(doubleArray0, 189);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = 1736.4F;
      floatArray0[0] = 1736.4F;
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 4394L;
      longArray1[2] = 1003L;
      longArray1[3] = 4368491638549381120L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 4368491638549381120L;
      longArray2[1] = (-1560L);
      longArray2[2] = 4394L;
      longArray2[3] = 4368491638549381120L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 1003L;
      longArray3[1] = 1003L;
      longArray3[2] = (-1560L);
      longArray3[3] = (-1560L);
      longArray3[4] = 4368491638549381120L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 1003L;
      longArray4[1] = 4394L;
      longArray4[2] = 1003L;
      longArray4[3] = 4368491638549381120L;
      longArray4[4] = 1L;
      longArray4[5] = 1003L;
      longArray4[6] = 1003L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 4368491638549381120L;
      longArray6[1] = (-1560L);
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = (-1560L);
      longArray6[5] = (-1560L);
      longArray6[6] = 4394L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 4368491638549381120L;
      longArray7[1] = 4394L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      MathArrays.scaleInPlace(1.44888888888888883E18, doubleArray2);
      MathArrays.distance(doubleArray3, doubleArray2);
      MathArrays.copyOf(doubleArray2);
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {2.625942278640159E23}, doubleArray2, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 289.2786707286, 0.0, (-932.169), 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 289.2786707286;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 1.0, 2.800552834259E-8, 382.48780206282);
      assertEquals(1.0711772981365259E-5, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double double0 = new Double(289.2786707286);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 289.2786707286;
      doubleArray0[2] = 289.2786707286;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5530.22);
      doubleArray0[5] = (-932.169);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (289.279 >= 289.279)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.OrderDirection.values();
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1259L;
      longArray0[2] = 9007199254740990L;
      longArray0[3] = (-4363L);
      longArray0[4] = 2147483647L;
      longArray0[5] = (-2030L);
      longArray0[6] = (-1L);
      longArray0[4] = (-1334L);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 338, 528);
      assertEquals(338, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      doubleArray0[0] = 351.1339788;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1449.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 351.1339788;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1289.0;
      doubleArray1[3] = 351.1339788;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-205);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination((double) (-205), 351.1339788, 114944.053156, 1.0);
      assertEquals(42961.58750199999, double0, 0.01);
      
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 351.1339788;
      doubleArray3[1] = (-1449.0);
      MathArrays.scaleInPlace((-1064.946376), doubleArray3);
      assertArrayEquals(new double[] {(-373938.8582135209), 1543107.2988240002}, doubleArray3, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2397.2525);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 205;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 205);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 205
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-2146536392);
      intArray0[0] = (-2146536392);
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = 1112;
      intArray0[4] = 1112;
      intArray0[5] = 1841;
      int[] intArray1 = new int[9];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-2146536392);
      intArray1[3] = (-2146536392);
      intArray1[4] = 0;
      intArray1[5] = 1841;
      intArray1[6] = 1112;
      intArray1[7] = 0;
      intArray1[8] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 351.1339788;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1449.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1289.0;
      doubleArray1[3] = 351.1339788;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-205);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(0.0, (double) (-205), (-2592.022110732), 100.0, (-1449.0), 0.0, 100.0, (-2749.027317447));
      assertEquals((-534104.9428179), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1891.7138631;
      doubleArray0[3] = 114944.053156;
      doubleArray0[4] = (-1594.9);
      doubleArray0[5] = 90.4088;
      doubleArray0[6] = (-4037.079);
      doubleArray0[7] = 289.2786707286;
      doubleArray0[8] = 3146.77664228;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1560L);
      longArray1[1] = (long) 0;
      long[] longArray2 = new long[1];
      longArray2[0] = (-1560L);
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 0;
      longArray3[1] = (-1560L);
      longArray3[2] = (-1560L);
      longArray3[3] = (-1560L);
      longArray3[4] = (-1560L);
      longArray3[5] = 0L;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = 0L;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-1560L);
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-1560L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (long) 0;
      longArray4[1] = (-1560L);
      longArray4[2] = (-1560L);
      longArray4[3] = (-1560L);
      longArray4[4] = (-1560L);
      double double0 = MathArrays.linearCombination((double) (-1560L), 0.7249995199969751, (double) 0, (double) (-1560L));
      assertEquals((-1130.9992511952812), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MathArrays.linearCombination((-3907.2), 225.0, 0.7249995199969751, 8.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 941;
      intArray0[1] = 2;
      intArray0[2] = 941;
      intArray0[3] = 941;
      intArray0[4] = 302;
      intArray0[5] = 941;
      intArray0[6] = 941;
      intArray0[8] = 941;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 609.37653932;
      doubleArray0[0] = 609.37653932;
      doubleArray0[1] = (-535.392870938995);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = 1327.0;
      doubleArray0[4] = 1327.0;
      doubleArray0[5] = (-579.723);
      double double2 = 2266.293311498466;
      double double3 = 117.849;
      double double4 = 180.4207663948;
      MathArrays.linearCombination(609.37653932, (-579.723), 2266.293311498466, 0.0, 117.849, 180.4207663948, 339.034, 1.997844754509471E-9);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3432, 3432);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 339.034;
      doubleArray0[2] = 0.0;
      MathArrays.linearCombination(822.1, 2813.99337, 1273.9418971, 822.1, 3068.3, 1.7976931348623157E308, 2813.99337, 3068.3);
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = 744.82524842;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1669.9;
      double double0 = 905.95497677044;
      doubleArray0[4] = 905.95497677044;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-862.13473);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      double double0 = (-1517.02889);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1517.02889);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-244.5806F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-244.5806F);
      floatArray1[4] = 651.485F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 537;
      intArray0[2] = 248;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = (-808);
      intArray0[6] = 347;
      int[] intArray1 = MathArrays.copyOf(intArray0, 8);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 347;
      doubleArray0[1] = (double) 248;
      doubleArray0[2] = (double) 248;
      doubleArray0[3] = (double) (-808);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 8;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1909);
      MathArrays.distance(intArray0, intArray1);
      MathArrays.copyOf(intArray0);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,909 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.7827257129423813E-8;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 351.1339788;
      doubleArray1[1] = (-138.3679079758075);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = (-453);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-453);
      doubleArray0[2] = 0.16666666666745392;
      doubleArray0[3] = (double) (-453);
      doubleArray0[4] = (double) (-453);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-453);
      doubleArray2[1] = (double) (-453);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-453);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2458.4;
      doubleArray0[2] = (-1794.81304);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1801.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-1560L);
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[6] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      doubleArray0[0] = 351.1339788;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1449.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 351.1339788;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1289.0;
      doubleArray1[3] = 351.1339788;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-205);
      MathArrays.distance1(intArray0, intArray0);
      double double0 = MathArrays.linearCombination(0.0, (double) (-205), (-2592.022110732), 100.0, (-1449.0), 0.0, 100.0, (-2749.027317447));
      assertEquals((-534104.9428179), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-453);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-453), (-453));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2458.4;
      doubleArray0[2] = (-1794.81304);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1801.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1794.81304);
      doubleArray2[1] = 1801.0;
      doubleArray2[2] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-1856.0);
      doubleArray0[2] = 3.32;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 609.37653932;
      doubleArray0[1] = (-535.392870938995);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 1327.0;
      doubleArray0[5] = (-579.723);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1763.7354, Double.NaN, (-2274.83), 2700.807, 1763.7354, Double.NaN, Double.NaN, 375.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.0, 331.3, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-713);
      intArray0[1] = (-1486);
      intArray0[2] = 11;
      intArray0[3] = 0;
      intArray0[4] = (-117);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 2;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 331.3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      MathArrays.copyOf(doubleArray0);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(865.7496323, doubleArray0);
      assertArrayEquals(new double[] {286822.85318099003, 0.0, 1731.4992646}, doubleArray1, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2395.9510578593745;
      doubleArray0[0] = 2395.9510578593745;
      doubleArray0[1] = 2266.0596024;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = 744.82524842;
      doubleArray0[3] = 744.82524842;
      double double3 = 0.0;
      doubleArray0[4] = 0.0;
      double double4 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (0 <= 744.825)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[9];
      longArray1[0] = 1L;
      longArray1[1] = 1259L;
      longArray1[2] = 9007199254740990L;
      longArray1[3] = (-4363L);
      longArray1[4] = 2147483647L;
      longArray1[5] = (-2030L);
      longArray1[6] = (-1L);
      longArray1[7] = (-1375L);
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,363 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 2.0;
      doubleArray0[0] = 2.0;
      double double1 = (-2397.2525);
      doubleArray0[1] = (-2397.2525);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      int int0 = 189;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1096;
      intArray0[1] = 0;
      intArray0[2] = (-1154);
      intArray0[3] = 0;
      intArray0[4] = 4415;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1684.0;
      doubleArray0[2] = (-882.400504);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 674.087128492203;
      doubleArray0[5] = (-905.6);
      doubleArray0[6] = (-795.27291);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-531);
      intArray0[1] = 3;
      intArray0[2] = 892;
      intArray0[3] = 1669;
      intArray0[4] = 0;
      intArray0[5] = (-2980);
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 3);
      assertArrayEquals(new int[] {(-531), 3, 892}, intArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double double0 = 289.2786707286;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 289.2786707286, 0.0, (-932.169), 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 289.2786707286;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5530.22);
      doubleArray0[5] = (-932.169);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (289.279 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 351.1339788;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1449.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1289.0;
      doubleArray1[3] = 351.1339788;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-205);
      MathArrays.distance1(intArray0, intArray0);
      double double0 = MathArrays.linearCombination(0.0, (double) (-205), (-2592.022110732), 100.0, (-1449.0), 0.0, 100.0, (-2749.027317447));
      assertEquals((-534104.9428179), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = (-1560L);
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-1560L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (long) 0;
      longArray4[1] = (-1560L);
      longArray4[2] = (-1560L);
      longArray4[3] = (-1560L);
      longArray4[4] = (-1560L);
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,560 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 1532;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 1532, 1532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3559.83F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.0301874);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 2, (-1051));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-453);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-453), (-453));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2458.4;
      doubleArray0[2] = (-1794.81304);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1801.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, true, false);
      MathArrays.normalizeArray(doubleArray0, 1.2508685408554042E7);
      double[] doubleArray2 = null;
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-838.3605238234834);
      doubleArray0[1] = (-2576.174);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3385.38);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2300.087276;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 1206.77393667;
      doubleArray0[8] = (-1127.5448741);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 754.494);
      assertArrayEquals(new double[] {143.05641502460787, 439.5939532539342, 0.17063830053945667, 577.6754898802658, -0.0, (-392.4829838690682), Double.NaN, (-205.9218536886787), 192.40234109839963}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1341.2131F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-1582.28347);
      doubleArray0[3] = (-764.1196);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1400.58;
      doubleArray0[6] = 3.32;
      doubleArray0[7] = 153.2104;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2.0, (-1582.28347), (-764.1196), 1.0, 1400.58, 3.32, 153.2104}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-930.923835172);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(3.141592653589793, (-286.35888263472), 3.141592653589793, 782.0175168778503, 0.0, 3.141592653589793);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-286.35888263472);
      doubleArray0[1] = 1557.1575240265686;
      doubleArray0[2] = 2242.90701138;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 339.034;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.scale((-2805.82653215995), doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-2146634303));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(3217.641503, doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2020.26;
      doubleArray0[3] = 2251.4604;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 3389.343987;
      doubleArray0[6] = (-1225.335);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 131;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1112;
      intArray0[5] = 1841;
      intArray0[6] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2527.4);
      doubleArray0[0] = (-2527.4);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,527.4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.linearCombination((-1517.02889), 1354.38, (-1517.02889), 0.0, 0.0, 0.0, 0.0, (-1517.02889));
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-3037);
      intArray0[1] = 2;
      intArray0[2] = (-4146);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 773;
      intArray0[6] = 0;
      intArray0[7] = 52;
      intArray0[8] = 956;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-3037), 2, (-4146), 0, 1, 773, 0, 52, 956}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathArrays.linearCombination(310.43578797315, 310.43578797315, 6.283185307179586, 6.283185307179586);
      assertEquals(96409.8568721149, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-987.8881244183987);
      doubleArray0[3] = (-1883.402482099729);
      doubleArray0[4] = (-88.28069);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-279.537832926238);
      doubleArray0[7] = (-126.95347102642528);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-1856.0);
      doubleArray0[2] = 3.32;
      doubleArray0[3] = 1.7976931348623157E308;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3.32, 1.34217729E8, (-1856.0), 1.7976931348623157E308}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2273.977428275);
      doubleArray0[1] = (-2273.977428275);
      doubleArray0[2] = (-2273.977428275);
      double[] doubleArray1 = MathArrays.scale((-2273.977428275), doubleArray0);
      assertArrayEquals(new double[] {5170973.344304183, 5170973.344304183, 5170973.344304183}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[0];
      MathArrays.scale(1.0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(2.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1416;
      intArray0[1] = 0;
      intArray0[2] = 245;
      intArray0[3] = (-1);
      intArray0[4] = 587;
      intArray0[5] = (-993);
      intArray0[6] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 587;
      doubleArray0[1] = (double) (-993);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][9];
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 587;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 245;
      doubleArray2[7] = (double) 245;
      doubleArray2[8] = (double) 1416;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 2754993.0496549187;
      doubleArray0[3] = (-1967.46);
      doubleArray0[4] = 1856.994813117;
      doubleArray0[5] = 4.438921624363781E-8;
      doubleArray0[6] = 687.185887566;
      doubleArray0[7] = 6387750.760000001;
      doubleArray0[8] = 196.6851184870907;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.linearCombination(1856.994813117, Double.NaN, (-1.0), 2754993.0496549187, 1.0, 6387750.760000001);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 6387750.760000001, 2754993.0496549187, 4.438921624363781E-8, 196.6851184870907, 1856.994813117, (-1967.46), 3.834E-20, 687.185887566}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3416;
      intArray0[1] = 14;
      intArray0[2] = (-2147483647);
      intArray0[3] = 2143965354;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = (-3019);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = (-4827);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-4827));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2602.2791;
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(2602.2791, 2602.2791, 2701.029171581, (-2183.30066109));
      MathArrays.linearCombination(0.0, 874697.7383606384, 2602.2791, 2701.029171581, 0.0, 2602.2791);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray2);
      MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 609.37653932;
      doubleArray0[1] = (-535.392870938995);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 1327.0;
      doubleArray0[5] = (-579.723);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.linearCombination(0.0, 4419.983, 0.0, 1236.6, 0.0, 2729.554041);
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      MathArrays.distance(doubleArray0, doubleArray2);
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      MathArrays.distanceInf(doubleArray2, doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2458.4;
      doubleArray0[2] = (-1794.81304);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1801.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1349L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-25L);
      longArray1[4] = 696L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 0L;
      longArray2[1] = (-25L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1349L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
