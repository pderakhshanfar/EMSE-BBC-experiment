/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:04:52 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2996.55F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = 891.0284F;
      floatArray0[5] = (-2210.4F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2996.55F), 1.4E-45F, 891.0284F, (-2210.4F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 891.0284F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(891.0283813476562, double0, 0.01);
      assertArrayEquals(new double[] {1.401298464324817E-45, 891.0283813476562, 1.401298464324817E-45, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][3];
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-2124.183382874);
      doubleArray0[2] = 2.17333333333333325E18;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1976.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1859.409;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, (-2124.183382874), 2.17333333333333325E18, 1.304E19, 1976.0, Double.NaN, 1859.409}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1859.409, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, (-2124.183382874), 2.17333333333333325E18, 1.304E19, 1976.0, Double.NaN, 1859.409}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = (-3257.229);
      doubleArray0[2] = (-1985.096342534401);
      doubleArray0[3] = (-2106.3405115);
      doubleArray0[4] = 2.608E18;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 3.2451855365842673E32;
      doubleArray0[7] = (-2270.5879345);
      doubleArray0[8] = 3295.652845440574;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3.2451855365842673E32, double0, 0.01);
      assertArrayEquals(new double[] {(-6.663542893624021E-14), (-3257.229), (-1985.096342534401), (-2106.3405115), 2.608E18, (-1.0), 3.2451855365842673E32, (-2270.5879345), 3295.652845440574}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 621.728626);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 1319.6882155;
      doubleArray0[2] = (-2437.8554);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1389.430862);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1836.5221);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.317238918096083E19, double0, 0.01);
      assertArrayEquals(new double[] {1.86285714285714278E18, 1319.6882155, (-2437.8554), 1.304E19, (-1389.430862), 3.834E-20, (-1836.5221)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 108;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2271.9786);
      doubleArray0[1] = 2577.1;
      doubleArray0[2] = 2222.429855006;
      doubleArray0[3] = 576.62544;
      doubleArray0[4] = (-5596.8626);
      doubleArray0[5] = (-3.940510424527919E-20);
      doubleArray0[6] = 1843.628597378;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2271.9786), 2577.1, 2222.429855006, 576.62544, (-5596.8626), (-3.940510424527919E-20), 1843.628597378}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5161886.75885796, 6641444.409999999, 4939194.46042199, 332496.89805519365, 3.1324870963278763E7, 1.55276224058132E-39, 3398966.4050699715}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2271.9786), 2577.1, 2222.429855006, 576.62544, (-5596.8626), (-3.940510424527919E-20), 1843.628597378}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5161886.75885796, 6641444.409999999, 4939194.46042199, 332496.89805519365, 3.1324870963278763E7, 1.55276224058132E-39, 3398966.4050699715}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1.5249785754236267E11), double0, 0.01);
      assertArrayEquals(new double[] {(-2271.9786), 2577.1, 2222.429855006, 576.62544, (-5596.8626), (-3.940510424527919E-20), 1843.628597378}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5161886.75885796, 6641444.409999999, 4939194.46042199, 332496.89805519365, 3.1324870963278763E7, 1.55276224058132E-39, 3398966.4050699715}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 2487.0172280718125;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-384.36);
      doubleArray0[3] = (-1175.6);
      doubleArray0[4] = 404.742434;
      doubleArray0[5] = (-1119.0);
      double[] doubleArray1 = new double[13];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertEquals(13, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 404.742434;
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {404.742434}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (-28.07782663780939);
      doubleArray0[1] = 2.0217439756338078E-10;
      doubleArray0[2] = (-2375.9628191567194);
      doubleArray0[3] = 1603.772815061442;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.0217439756338078E-10;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2087.5876066129804;
      doubleArray1[1] = 8146885.82471853;
      doubleArray1[2] = (-1547.09);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-4365.38899);
      doubleArray1[5] = 2369.0781722440997;
      doubleArray1[6] = 0.5;
      doubleArray1[7] = (-1795.39206);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-5127.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5127.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1883.71975;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1883.71975}, doubleArray1, 0.01);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 270, (-2146731537));
      assertEquals(270, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4641.05065711047);
      doubleArray0[1] = (-482.1676);
      doubleArray0[2] = 1234.297052;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2309.1232);
      doubleArray0[5] = (-626.0441);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-4641.05065711047), (-482.1676), 1234.297052, 1.0, (-2309.1232), (-626.0441)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4641.05065711047), (-482.1676), 1234.297052, 1.0, (-2309.1232), (-626.0441)}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-4641.05065711047), (-482.1676), 1234.297052, 1.0, (-2309.1232), (-626.0441)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4641.05065711047), (-482.1676), 1234.297052, 1.0, (-2309.1232), (-626.0441)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4641.05065711047), (-482.1676), 1234.297052, 1.0, (-2309.1232), (-626.0441)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 938.9549F;
      floatArray0[1] = (-998.8138F);
      floatArray0[2] = (-786.5717F);
      floatArray0[3] = 4191.063F;
      floatArray0[4] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {938.9549F, (-998.8138F), (-786.5717F), 4191.063F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1462);
      assertEquals(0, doubleArray0.length);
      assertEquals(1462, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,462
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 194;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1575.7F;
      floatArray0[1] = (-78.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3069.756F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3069.756F);
      floatArray1[1] = 1575.7F;
      floatArray1[2] = 1575.7F;
      floatArray1[3] = (-3069.756F);
      floatArray1[4] = 1575.7F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1575.7F, (-78.0F), 0.0F, 0.0F, (-3069.756F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3069.756F), 1575.7F, 1575.7F, (-3069.756F), 1575.7F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      MathArrays.scaleInPlace(3.145894820876798E-6, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3.1458948208767983E-4}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(979.19653, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "xNLN)&1Drww";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(2946.5, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-146.55731181);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (-3401.91017);
      doubleArray0[3] = 1521.3657342997;
      doubleArray0[4] = 327.1797861112;
      doubleArray0[5] = 1155.68;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 327.1797861112;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(3095.5532, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-313.97F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3341.0F;
      floatArray0[4] = 2546.282F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-313.97F), Float.NaN, 0.0F, 3341.0F, 2546.282F}, floatArray0, 0.01F);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2126221433), 2684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 594.60595804;
      doubleArray0[1] = 5203.7121568761;
      doubleArray0[2] = 1.525958893095318E7;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {594.60595804, 5203.7121568761, 1.525958893095318E7}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2019.834F;
      floatArray0[1] = (-2546.1F);
      floatArray0[2] = 1034.69F;
      floatArray0[3] = (-2501.6313F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-4743.0557F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2019.834F, (-2546.1F), 1034.69F, (-2501.6313F), Float.NaN, (-4743.0557F)}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {594.60595804, 5203.7121568761, 1.525958893095318E7}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 310.4467F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 310.4467F;
      floatArray1[1] = 310.4467F;
      floatArray1[2] = 310.4467F;
      floatArray1[3] = 310.4467F;
      floatArray1[4] = 310.4467F;
      floatArray1[5] = 310.4467F;
      floatArray1[6] = 310.4467F;
      floatArray1[7] = 310.4467F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {310.4467F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {310.4467F, 310.4467F, 310.4467F, 310.4467F, 310.4467F, 310.4467F, 310.4467F, 310.4467F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1746.97377948);
      doubleArray1[1] = (-1746.97377948);
      doubleArray1[2] = (-1746.97377948);
      doubleArray1[3] = (-1746.97377948);
      doubleArray1[4] = (-1746.97377948);
      doubleArray1[5] = 1.34217729E8;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1746.97377948), (-1746.97377948), (-1746.97377948), (-1746.97377948), (-1746.97377948), 1.34217729E8, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1746.97377948);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.304E19, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-799.5F);
      floatArray0[2] = 1074.4601F;
      floatArray0[3] = 78.821F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, (-799.5F), 1074.4601F, 78.821F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 78.821F;
      doubleArray0[1] = (double) 78.821F;
      doubleArray0[2] = (double) 78.821F;
      doubleArray0[3] = (-2854.2750086);
      doubleArray0[4] = (double) (-799.5F);
      doubleArray0[5] = (double) Float.NaN;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {78.82099914550781, 78.82099914550781, 78.82099914550781, (-2854.2750086), (-799.5), Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.839016491287043E-15;
      doubleArray2[1] = 8200013.821335171;
      doubleArray2[2] = 5301844.578779444;
      doubleArray2[3] = 2063.6259921885;
      doubleArray2[4] = (-3183.275668198);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1746.97377948);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1746.97377948), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1746.97377948), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((double) (-1), 0.32107417517713954, (-1746.97377948), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1369.4312912, 1369.4312912, (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3135), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "points {0} and {1} are not strictly decreasing ({2} <= {3})";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "k\u0005_p{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2046.903F);
      floatArray0[1] = (-2485.5F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1590.7F;
      floatArray0[4] = (-1.4E-45F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-2046.903F), (-2485.5F), 0.0F, 1590.7F, (-1.4E-45F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3212.910487);
      doubleArray0[1] = (-3212.910487);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3212.910487), (-3212.910487)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3212.910487), (-3212.910487)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-3212.910487);
      doubleArray2[1] = 1543.0;
      doubleArray2[2] = (-3212.910487);
      doubleArray2[3] = (-3212.910487);
      doubleArray2[4] = (-3212.910487);
      doubleArray2[5] = 1543.0;
      doubleArray2[6] = (-3212.910487);
      doubleArray2[7] = 1543.0;
      doubleArray2[8] = (-3212.910487);
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-3212.910487);
      doubleArray3[1] = 1543.0;
      doubleArray3[2] = 1543.0;
      doubleArray3[3] = 1543.0;
      doubleArray3[4] = 1595.8488390303833;
      doubleArray3[5] = (-3212.910487);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace(2848.738798304925, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qI;EfMv";
      stringArray0[1] = "}y i4RZT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, (-111.83716331), 1263.23876);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-141277.03950164188), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qI;EfMv";
      stringArray0[1] = "}y i4RZT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2854.2750086);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-2854.2750086), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8146885.82471853, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {8146885.82471853, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.637174864099973E13, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2854.2750086);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 2559.19982881577;
      try { 
        MathArrays.normalizeArray(doubleArray2, 6.52E18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[2][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = new Double(1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.0, 1.304E19, (-1375.3), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.7920872E22), double2, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1375.3);
      doubleArray0[1] = (-1.7920872E22);
      doubleArray0[2] = 1.304E19;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      long[] longArray1 = new long[15];
      longArray1[0] = (-420L);
      longArray1[1] = (-485L);
      longArray1[2] = (-3315L);
      longArray1[3] = 1145L;
      longArray1[4] = (-2497L);
      longArray1[5] = 937L;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -420 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-173L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = 279.66;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(328.84755677973345, double0, 0.01);
      assertArrayEquals(new double[] {(-173.0), 0.0, (-1.0), (-1.0), 279.66}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1671.704752147189), 0.7214844226837158, (double) 0L, 0.0, 0.0, 279.66, 328.84755677973345, (double) 0L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1206.108938000539), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (double) (-173L), 2476.85175, (-173.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-428495.35274999996), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 1717986918, 1717986918);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2901.54846964);
      doubleArray0[1] = (-375.7);
      doubleArray0[2] = 0.19999954120254515;
      doubleArray0[3] = (-165.922071);
      doubleArray0[4] = 771.0;
      doubleArray0[5] = 3209.1865464176;
      doubleArray0[6] = 1376.589;
      doubleArray0[7] = 1913.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2901.54846964), (-375.7), 0.19999954120254515, (-165.922071), 771.0, 3209.1865464176, 1376.589, 1913.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2901.54846964), (-375.7), 0.19999954120254515, (-165.922071), 771.0, 3209.1865464176, 1376.589, 1913.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2210);
      intArray0[1] = 18;
      intArray0[2] = (-853);
      intArray0[3] = 99;
      intArray0[4] = 125;
      intArray0[5] = 2145593257;
      intArray0[6] = 8;
      intArray0[7] = 3694;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145593257;
      intArray1[1] = 125;
      intArray1[2] = 3694;
      intArray1[3] = 99;
      intArray1[4] = (-461);
      intArray1[5] = 3694;
      intArray1[6] = 99;
      intArray1[7] = 3694;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-3776935), int0);
      assertArrayEquals(new int[] {2145593257, 125, 3694, 99, (-461), 3694, 99, 3694}, intArray1);
      assertArrayEquals(new int[] {(-2210), 18, (-853), 99, 125, 2145593257, 8, 3694}, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#RI2`3;6&";
      stringArray0[1] = "Ic9`";
      stringArray0[2] = "FAILED_BRACKETING";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[4] = "";
      stringArray0[5] = "EXP_FRAC_TABLE_A";
      stringArray0[6] = "b%!?\"QE=K@h7)7ROY1";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[8] = "`}}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3579.8624737922846;
      doubleArray0[1] = (-947.7979079921);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "QQ$z\"cMX@[w*Jh+Gs";
      stringArray0[1] = "#mFs'*vmVle0u";
      stringArray0[2] = "";
      stringArray0[3] = "D#S";
      stringArray0[4] = "m?B9Vk}`QS}5`Xw,QKv";
      stringArray0[5] = "HnD-l~bks}:T'^+g/I";
      stringArray0[6] = "qI;EfMv";
      stringArray0[7] = "";
      stringArray0[8] = "}y i4RZT";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Wy986s(t1?D%~";
      stringArray0[1] = "sBN#e%f#32bNF*3EO-";
      stringArray0[2] = "[KVWRF}QbED>7RMYE3#";
      stringArray0[3] = "gDA@|6lf";
      stringArray0[4] = "";
      stringArray0[5] = "58&uz\"x&5F";
      stringArray0[6] = "zmoPo;(m3#7NmyWL";
      stringArray0[7] = "e";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1750.08F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2461.39F;
      floatArray0[5] = (-1391.77F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1.0F, 1750.08F, 0.0F, 0.0F, 2461.39F, (-1391.77F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[1] = (double) 2;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "}y i4RZT";
      stringArray0[2] = "}y i4RZT";
      stringArray0[3] = "qI;EfMv";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`J.lP#y}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`J.lP#y}";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(1462.3893540261156, 1462.3893540261156, 1.8014398509481984E16, 1.8014398509481984E16, 1805.2096903324, 3.834E-20);
      assertEquals(3.2451855365842673E32, double0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 113, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "};4#ucF";
      stringArray0[1] = " W~ik<4";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2848.738798304925, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2848.738798304925);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2848.738798304925);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-2848.738798304925), Double.NaN, (-2848.738798304925)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2848.738798304925), Double.NaN, (-2848.738798304925)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8115312.740967787, Double.NaN, Double.NaN, Double.NaN, 8115312.740967787}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.linearCombination(1.34217729E8, 2145.2634051, (-2854.2750086), (-1462.3893540261156), 647.02436928339, 11.199560892180942);
      assertEquals(2.879365636471039E11, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.32107417517713954;
      doubleArray1[1] = (-1462.3893540261156);
      doubleArray1[2] = (-1042.82957817);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-1462.3893540261156);
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2316.173326358087, double2, 0.01);
      assertArrayEquals(new double[] {0.32107417517713954, (-1462.3893540261156), (-1042.82957817), 3.834E-20, 0.0, (-1462.3893540261156)}, doubleArray1, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.321 >= -1,462.389)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-291.429557365);
      doubleArray0[2] = (-1454.325);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2256.706622400058;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-291.429557365), (-1454.325), 1.0, 2256.706622400058}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-291.429557365), (-1454.325), 1.0, 2256.706622400058}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w9jCOeT^1bi}";
      stringArray0[1] = "J6pQmtV4*";
      stringArray0[2] = "GUSX";
      stringArray0[3] = "mutation rate ({0})";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.math3.fraction.BigFraction";
      stringArray0[6] = "";
      stringArray0[7] = "B'h";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8146885.82471853, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = new Double(1.0);
      assertEquals(1.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 771;
      intArray1[1] = 771;
      intArray1[2] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 771;
      doubleArray0[1] = (double) 771;
      doubleArray0[2] = (double) 771;
      doubleArray0[1] = (double) 771;
      doubleArray0[4] = (double) 771;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 771;
      intArray1[1] = (-43);
      intArray1[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {771, (-43), 0}, intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-43);
      doubleArray0[1] = 247.88397;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-43);
      doubleArray1[1] = (double) (-43);
      doubleArray1[2] = (double) (-43);
      doubleArray1[3] = (double) 771;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-43);
      doubleArray1[6] = (double) 771;
      doubleArray1[7] = (double) 771;
      doubleArray1[8] = (double) (-43);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double[] doubleArray1 = MathArrays.scale((-0.3058015757857271), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {872.8417953556998, -0.0, -0.0}, doubleArray1, 0.01);
      
      int int0 = 2;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 2;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 2;
      integerArray0[3] = (Integer) 2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3727.1168039556997, double2, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {872.8417953556998, -0.0, -0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) int0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.6299605249474366;
      doubleArray0[1] = 4962.0;
      doubleArray0[2] = (-1335.86);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 695.8746863501;
      doubleArray2[1] = (-1335.86);
      doubleArray2[2] = 0.6299605249474366;
      doubleArray2[3] = (-1335.86);
      doubleArray2[4] = 596291.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {695.8746863501, (-1335.86), 0.6299605249474366, (-1335.86), 596291.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale((-3.407674677170238), doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {695.8746863501, (-1335.86), 0.6299605249474366, (-1335.86), 596291.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2371.314547159018), 4552.176294244634, (-2.14670052848025), 4552.176294244634, (-2031965.7409245186)}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1335.86);
      doubleArray4[1] = (-3.407674677170238);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray4.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1335.86), (-3.407674677170238)}, doubleArray4, 0.01);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.6299605249474366, 4962.0, (-1335.86)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "N2(:p:H?*~]3F0I,U<~";
      stringArray0[3] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.986821492305628E-8;
      doubleArray0[1] = 1589.265;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.973642984611256E-8, 3178.53}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5051526.480450001, double0, 0.01);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.973642984611256E-8, 3178.53}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1670.05));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0878149541980306E-8), (-1670.049999979122)}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.986821492305628E-8, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.973642984611256E-8, 3178.53}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 651;
      intArray0[1] = 1771;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1271;
      intArray0[5] = 1412;
      intArray0[6] = 16;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {651, 1771, 0, 0, 1271, 1412, 16}, intArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1589.265;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1589.265, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1589.265}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 531;
      intArray0[1] = (-139);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 531;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {531, (-139), (-1), (-1), 531}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 531;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {1589.265}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-1);
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-1), 28}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-862.1496871970215), 2907.91635509331, 36163.0, (double) 0, (double) 28, (double) 28, (double) 28, (-862.1496871970215));
      assertEquals((-2530415.3671803167), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8146885.82471853, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 771;
      intArray1[1] = (-43);
      intArray1[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {771, (-43), 0}, intArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1234;
      intArray1[5] = 2;
      intArray1[6] = 531;
      intArray1[7] = (-139);
      intArray1[8] = (-1);
      double double2 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {8, 0, 0, 0, 1234, 2, 531, (-139), (-1)}, intArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 2;
      integerArray0[1] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = new Integer(133);
      assertEquals(133, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2854.2750086);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(8146885.82471853, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.32534526074117E10), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.32534526074117E10), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.4072305816514206E20, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 8146885.82471853;
      doubleArray2[1] = (Double) 8146885.82471853;
      doubleArray2[2] = (Double) 8146885.82471853;
      doubleArray2[3] = (Double) 8146885.82471853;
      doubleArray2[4] = (Double) 8146885.82471853;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[][] doubleArray3 = new double[2][5];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2.32534526074117E10), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5.4072305816514206E20, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {(-2.32534526074117E10), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.4072305816514206E20, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray2.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      int[] intArray0 = new int[3];
      intArray0[0] = 28;
      intArray0[1] = 28;
      intArray0[2] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {28, 28, 28}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 28;
      intArray1[1] = 0;
      intArray1[2] = 28;
      intArray1[3] = 28;
      intArray1[4] = 28;
      intArray1[5] = 28;
      intArray1[6] = 0;
      int int1 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(28, int1);
      assertArrayEquals(new int[] {28, 28, 28}, intArray0);
      assertArrayEquals(new int[] {28, 0, 28, 28, 28, 28, 0}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {28, 28, 28}, intArray2);
      assertArrayEquals(new int[] {28, 28, 28}, intArray0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2128.6928280678);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2128.6928280678, -0.0, -0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2128.6928280678, -0.0, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[5];
      intArray0[1] = 858;
      intArray0[2] = 858;
      intArray0[3] = 858;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 858, 858, 858, 0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 5.669184079525E-24);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 771;
      intArray1[1] = (-43);
      intArray1[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.linearCombination((-2854.2750086), (-1874.4247166355), (-2854.2750086), 858.0);
      assertEquals(2901155.6668160446, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-43);
      intArray0[1] = (-43);
      intArray0[2] = 0;
      intArray0[3] = 771;
      intArray0[4] = (-43);
      intArray0[5] = (-43);
      intArray0[6] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-43), (-43), 0, 771, (-43), (-43), 0}, intArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2854.2750086, double2, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8146885.82471853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "NOT_POSITIVE_UPPER_BOUND";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double[] doubleArray1 = MathArrays.scale((-0.3058015757857271), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {872.8417953556998, -0.0, -0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2854.2750086, double1, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 2);
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1744);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-716.5576563904666);
      doubleArray0[1] = (double) 133;
      doubleArray0[3] = (double) 858;
      doubleArray0[6] = 2128.6928280678;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2408.036758689345, double0, 0.01);
      assertArrayEquals(new double[] {(-716.5576563904666), 133.0, 0.0, 858.0, 0.0, 0.0, 2128.6928280678}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 106;
      intArray0[1] = 301;
      intArray0[2] = (-276);
      int int0 = 134217729;
      intArray0[3] = 134217729;
      intArray0[4] = 5596;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {106, 301, (-276), 134217729, 5596}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-276);
      doubleArray0[1] = (double) 5596;
      doubleArray0[2] = (double) 301;
      doubleArray0[3] = (double) 106;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-276.0), 5596.0, 301.0, 106.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertEquals(4, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-276.0), 5596.0, 301.0, 106.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 5596;
      floatArray0[2] = (float) (-276);
      floatArray0[3] = (float) 134217729;
      floatArray0[4] = (float) 5596;
      floatArray0[5] = (float) 301;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, 5596.0F, (-276.0F), 1.34217728E8F, 5596.0F, 301.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3195.42);
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 4398046511103L;
      longArray1[2] = 10000L;
      longArray1[3] = 4398046511103L;
      longArray1[4] = 1195L;
      longArray0[2] = longArray0[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 182;
      floatArray0[1] = (-1839.0F);
      floatArray0[2] = (float) (-2477L);
      floatArray0[3] = (float) 182;
      longArray1[3] = 4398046511103L;
      floatArray0[5] = (float) 4398046511103L;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1195L;
      floatArray1[1] = (float) (-2477L);
      floatArray1[2] = (float) (-2477L);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1195.0F, (-2477.0F), (-2477.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {182.0F, (-1839.0F), (-2477.0F), 182.0F, 0.0F, 4.3980465E12F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 405L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {405.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 405L;
      floatArray1[1] = 811.63F;
      floatArray1[2] = (float) 405L;
      floatArray1[3] = (float) 0L;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {405.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {405.0F, 811.63F, 405.0F, 0.0F}, floatArray1, 0.01F);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2346);
      intArray0[1] = 646;
      intArray0[2] = 0;
      intArray0[3] = 459;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-2346), 646, 0, 459}, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 771;
      intArray1[1] = (-43);
      intArray1[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {771, (-43), 0}, intArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-1), 0, (-1), 28}, intArray0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, (-1), 0, (-1), 28}, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double double0 = MathArrays.linearCombination((-2854.2750086), 1.304E19, (-1.7920872E22), (-2854.2750086));
      assertEquals(5.111387733580736E25, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2854.2750086);
      doubleArray2[1] = (-1375.3);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double2 = MathArrays.linearCombination(1.0, 1.304E19, (-608.0), 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-7.915279999999999E21), double2, 0.01);
      
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, (-1), (-757), 858, 28}, intArray0);
      
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1);
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 28;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1141;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1141;
      intArray1[1] = 1210;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1210.0, double0, 0.01);
      assertArrayEquals(new int[] {1141, 0}, intArray0);
      assertArrayEquals(new int[] {1141, 1210}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 1970);
      assertEquals(2, intArray0.length);
      assertEquals(1970, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1141, 0}, intArray0);
      
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 1970;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 1141;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 1141;
      longArray2[2] = (long) 1141;
      longArray2[3] = (long) 1210;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1210;
      longArray3[1] = (long) 1970;
      longArray3[2] = (long) 1141;
      longArray3[3] = 4398046511103L;
      longArray3[4] = (long) 1141;
      longArray3[5] = 1195L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 1210;
      longArray4[1] = (long) 1141;
      longArray4[2] = (long) 1210;
      longArray4[3] = 4398046511103L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1195L;
      longArray6[1] = (long) 1141;
      longArray6[2] = (long) 1141;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (-2477L);
      longArray7[1] = (long) 1141;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,477 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, (-1), (-757), 858, 28}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 858;
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.34216871E8}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {858.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[1] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, 28, (-757), 858, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 28;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(28.0, double0, 0.01);
      assertArrayEquals(new double[] {28.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.986821492305628E-8;
      doubleArray0[2] = 1.986821492305628E-8;
      doubleArray0[3] = 1589.265;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1589.265;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.986821492305628E-8, 1.986821492305628E-8, 1589.265, (-1.0), 1.0, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.973642984611256E-8, 3.973642984611256E-8, 3178.53, (-2.0), 2.0, 3178.53}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.0103056960900001E7, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.986821492305628E-8, 1.986821492305628E-8, 1589.265, (-1.0), 1.0, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.973642984611256E-8, 3.973642984611256E-8, 3178.53, (-2.0), 2.0, 3178.53}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(143.8132177, (double) (-173L), 3685.2, (-200.01535115837927), (double) (-173L), (-200.01535115837927));
      assertEquals((-727373.6030005596), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1141;
      intArray0[1] = 1210;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1141;
      intArray1[1] = 1210;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1141, 1210}, intArray0);
      assertArrayEquals(new int[] {1141, 1210}, intArray1);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 1970);
      assertEquals(2, intArray0.length);
      assertEquals(1970, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1141, 1210}, intArray0);
      
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 1970;
      longArray1[1] = (long) 1210;
      longArray1[2] = (long) 1141;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1210;
      longArray2[1] = (long) 1141;
      longArray2[2] = (long) 1141;
      longArray2[3] = (long) 1210;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1210;
      longArray3[1] = (long) 1970;
      longArray3[2] = (long) 1141;
      longArray3[3] = 4398046511103L;
      longArray3[4] = (long) 1141;
      longArray3[5] = 1195L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 1210;
      longArray4[1] = (long) 1141;
      longArray4[2] = (long) 1210;
      longArray4[3] = 4398046511103L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 1195L;
      longArray6[1] = (long) 1141;
      longArray6[2] = (long) 1141;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-2477L);
      longArray7[1] = (long) 1141;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,477 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, (-1), (-757), 858, 28}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "K\"E&ZDaMVHH26";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1589.0;
      doubleArray0[1] = 1589.0;
      doubleArray0[2] = 1589.0;
      doubleArray0[3] = 1.986821492305628E-8;
      doubleArray0[4] = 1589.0;
      doubleArray0[5] = 1.986821492305628E-8;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1589.0, 1589.0, 1589.0, 1.986821492305628E-8, 1589.0, 1.986821492305628E-8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3178.0, 3178.0, 3178.0, 3.973642984611256E-8, 3178.0, 3.973642984611256E-8}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.0099684E7, double0, 0.01);
      assertArrayEquals(new double[] {1589.0, 1589.0, 1589.0, 1.986821492305628E-8, 1589.0, 1.986821492305628E-8}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1141;
      intArray0[1] = 1141;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1141;
      intArray1[1] = 1210;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(69.0, double0, 0.01);
      assertArrayEquals(new int[] {1141, 1141}, intArray0);
      assertArrayEquals(new int[] {1141, 1210}, intArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[1] = (double) 2;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray4);
      assertEquals(3, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0}, doubleArray4, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray5 = new double[4][6];
      doubleArray5[0] = doubleArray2;
      doubleArray5[1] = doubleArray4;
      doubleArray5[2] = doubleArray4;
      doubleArray5[3] = doubleArray2;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray5);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray5.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double2 = MathArrays.linearCombination(1.0, 1.304E19, (-1375.3), 1.304E19);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.7920872E22), double2, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1375.3);
      doubleArray0[1] = (-1.7920872E22);
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.7920872E22), (-1375.3), 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (double) 405L;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3.141592653589793;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.141592653589793, 405.0, 1.0, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0, -0.0}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0, -0.0}, doubleArray2, 0.01);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.986821492305628E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.986821492305628E-8, 0.0}, doubleArray0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1234;
      intArray0[5] = 2;
      intArray0[6] = 531;
      intArray0[7] = (-139);
      intArray0[8] = (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1141;
      intArray0[0] = 1141;
      int int1 = 1210;
      intArray0[1] = 1210;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1141;
      intArray1[1] = 1210;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1141, 1210}, intArray0);
      assertArrayEquals(new int[] {1141, 1210}, intArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      long[][] longArray1 = new long[7][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      double double1 = MathArrays.linearCombination((double) 0, 0.0, 0.0, 3.834E-20, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(766.3395434510686, 766.3395434510686, 0.0, 766.3395434510686, 0.0, 766.3395434510686, (-143.8132177), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(587276.2958567922, double1, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1141;
      intArray0[1] = 1210;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1210;
      doubleArray0[1] = (double) 1141;
      doubleArray0[2] = (double) 1141;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1210.0, 1141.0, 1141.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, (-1), (-757), 858, 28}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-173L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = 279.66;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(328.84907723756805, double0, 0.01);
      assertArrayEquals(new double[] {(-173.0), (-1.0), (-1.0), (-1.0), 279.66}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1671.704752147189), 0.7214844226837158, (double) (-1L), 1.0E-5, 1.0E-5, 279.66, 328.84907723756805, (double) (-1L));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1534.955228638107), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(1.0E-5, (double) (-173L), 2476.85175, (-173.0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-428495.35448), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2854.2750086);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1234;
      intArray0[5] = 2;
      intArray0[6] = 531;
      intArray0[7] = (-139);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 3007.17;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-2854.2750086);
      doubleArray1[5] = (-2854.2750086);
      doubleArray1[6] = 3007.17;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      int int0 = 28;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-780);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 133;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {133.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = (-2410.62864764);
      double double1 = MathArrays.linearCombination(1170.412, 1170.412, 0.0, 0.0, 1170.412, (-2410.62864764), 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1451564.4469976278), double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      double double2 = 949.5741652173114;
      doubleArray0[0] = 949.5741652173114;
      doubleArray0[1] = (-2410.62864764);
      doubleArray0[2] = (-1451564.4469976278);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {133, (-1), (-757), 858, 28}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-3.5997360512765566E-9), (-1.0), (double) 28, 1990475.1818176564);
      assertEquals(5.573330509089438E7, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      longArray0[4] = 1145L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 4419L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 1023L, 1145L, 0L, 0L, 4419L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-3026.4F);
      floatArray0[2] = (float) 405L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-3026.4F), 405.0F}, floatArray0, 0.01F);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-572), (-572));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.scale((-1.0), doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0, -0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0}, doubleArray3, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(2854.2750086, double0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2854.2750086);
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = 1.0;
      Double double1 = new Double(2.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2854.2750086, double2, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2854.2750086, -0.0}, doubleArray3, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146319069);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathArrays.linearCombination(595.8707982836, 595.8707982836, 595.8707982836, Double.NaN, 595.8707982836, Double.NaN, (-209.5351948), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1.0129027912496858E-9), Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-2530.19), Double.NaN, 757.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1256551444530487;
      doubleArray0[1] = (-2777.562686);
      doubleArray0[2] = 405.974267;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2777.562686);
      doubleArray1[1] = 405.974267;
      doubleArray1[2] = 0.1256551444530487;
      doubleArray1[3] = 0.1256551444530487;
      doubleArray1[4] = (-2777.562686);
      doubleArray1[5] = 405.974267;
      doubleArray1[6] = 0.1256551444530487;
      doubleArray1[7] = 3.1660099222737955E-7;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathArrays.linearCombination(766.3395434510686, 965.69, 0.0, 766.3395434510686, 0.0, 965.69, (-143.8132177), 0.0);
      assertEquals(740046.4337152625, double0, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 766.3395434510686, 1.304E19, 0.0, 0.0, 740046.4337152625);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-143.8132177);
      doubleArray0[1] = 928.689354771921;
      doubleArray0[2] = 766.3395434510686;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-143.8132177);
      doubleArray0[5] = 766.3395434510686;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-143.8132177), 928.689354771921, 766.3395434510686, 0.0, (-143.8132177), 766.3395434510686}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-143.8132177), 928.689354771921, 766.3395434510686, 0.0, (-143.8132177), 766.3395434510686}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-143.8132177), 928.689354771921, 766.3395434510686, 0.0, (-143.8132177), 766.3395434510686}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 28;
      intArray0[1] = 28;
      intArray0[2] = 28;
      intArray0[3] = 28;
      intArray0[4] = 28;
      intArray0[5] = 28;
      intArray0[6] = 28;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {28, 28, 28, 28, 28, 28, 28}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2309.191;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1809.57);
      doubleArray0[3] = (-1390.9329355);
      doubleArray0[4] = (-2639.489483);
      long[] longArray0 = new long[3];
      longArray0[0] = 1145L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1145L, 0L, 0L}, longArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 1145L;
      doubleArray1[3] = (double) 1145L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2309.191, 0.0, (-1809.57), (-1390.9329355), (-2639.489483), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1145.0, 1145.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(1.304E19, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.49308E22, 1.49308E22}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2347.7707598037305);
      doubleArray0[1] = (-1176.094);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1621.0770857908328;
      doubleArray0[1] = 1621.0770857908328;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1589.265;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, Double.NaN, 1589.265}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, Double.NaN, 1589.265}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1621.0770857908328;
      MathArrays.checkPositive(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1621.0770857908328}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1621.0770857908328;
      doubleArray2[1] = 1621.0770857908328;
      doubleArray2[2] = 1621.0770857908328;
      doubleArray2[3] = 1621.0770857908328;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false);
      assertEquals(4, doubleArray2.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, 1621.0770857908328, 1621.0770857908328}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(1.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, Double.NaN, 1589.265}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, Double.NaN, 1589.265}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2, 0);
      assertEquals(0, doubleArray4.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1621.0770857908328, 1621.0770857908328, 1621.0770857908328, 1621.0770857908328}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      int int0 = (-1043);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, 393, (-1043));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      longArray0[4] = 1145L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 4419L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 1023L, 1145L, 0L, 0L, 4419L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-3026.4F);
      floatArray0[2] = (float) 405L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-3026.4F), 405.0F}, floatArray0, 0.01F);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-572), (-572));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2347.7707598037305);
      doubleArray0[1] = (-1176.094);
      doubleArray0[0] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2586.8334;
      doubleArray0[7] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "points {3} and {2} are not strictly decreasing ({1} <= {0})";
      stringArray0[1] = "K\"E&ZDaMVHH26";
      stringArray0[2] = "L2:Hr y@}Wtd$9-W/L";
      stringArray0[3] = "\"H =&MVg)^e:9Un";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      longArray0[4] = 1145L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 4419L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {405L, 0L, 0L, 1023L, 1145L, 0L, 0L, 4419L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double2 = MathArrays.linearCombination(1.0, 1.304E19, (-1375.3), 1.304E19);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.7920872E22), double2, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1375.3);
      doubleArray0[1] = (-1.7920872E22);
      doubleArray0[2] = 1.304E19;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      long[] longArray1 = new long[6];
      longArray1[0] = (-420L);
      longArray1[1] = (-485L);
      longArray1[2] = (-3315L);
      longArray1[3] = 1145L;
      longArray1[4] = (-2497L);
      longArray1[5] = 1247L;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -420 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = 858;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-757);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 141;
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[4] = 0;
      intArray1[5] = 858;
      intArray1[6] = (-757);
      intArray1[7] = 141;
      intArray1[8] = 43;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2655, int1);
      assertArrayEquals(new int[] {(-1), (-757), (-1), (-1), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {141, (-1), (-1), 0, 0, 858, (-757), 141, 43}, intArray1);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(8146885.82471853, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.32534526074117E10), 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 173.5;
      doubleArray0[1] = 1562.1370091543606;
      doubleArray0[2] = (-1247.859083048201);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {173.5, 1562.1370091543606, (-1247.859083048201), 1.0, 1.0E-5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {173.5, 1562.1370091543606, (-1247.859083048201), 1.0, 1.0E-5, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {173.5, 1562.1370091543606, (-1247.859083048201), 1.0, 1.0E-5, 0.0}, doubleArray0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 359;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 359);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2854.2750086);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2854.2750086), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[][] longArray0 = new long[6][8];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = (-173L);
      longArray1[2] = (-141L);
      longArray1[3] = 344L;
      longArray1[4] = 0L;
      longArray1[5] = 165L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 165L;
      longArray2[2] = 0L;
      longArray2[3] = 1023L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 344L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-141L);
      longArray4[1] = 1023L;
      longArray4[2] = (-173L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 1023L;
      longArray6[1] = (-1L);
      longArray6[2] = 1023L;
      longArray6[3] = 903L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3327.8021110628206);
      doubleArray0[1] = 909.266;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4013.06);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3151.74813664;
      doubleArray0[6] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      int int0 = (-4405);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-4405));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.linearCombination((-1077.67353), (-1077.67353), 0.0, 0.0, (-1077.67353), (-3078.52328));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.scaleInPlace((-596.0), doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3361.492F);
      floatArray0[1] = 2816.2007F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3045.42F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-203.6735F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 25;
      intArray0[2] = (-786);
      intArray0[3] = 0;
      intArray0[4] = 54;
      intArray0[5] = 1299;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-786);
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-786);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1299;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 1299;
      doubleArray2[6] = (double) (-786);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3101);
      intArray0[1] = 1119;
      int int0 = (-1351);
      intArray0[2] = (-1351);
      intArray0[3] = 0;
      intArray0[4] = 1000;
      intArray0[5] = 0;
      int int1 = (-3845);
      intArray0[6] = (-3845);
      MathArrays.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("9aNH6i  As9l{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.9aNH6i  As9l{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.linearCombination(0.0, 1.0, (-1701.399380200072), (-1.0), (-1.0), (-1.0));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1843.0;
      doubleArray0[1] = (-1481.61);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.normalizeArray(doubleArray0, 1843.0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 988.423564317, 12.666235372, (-393.0), 3495.5158, 1843.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,481.61 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3195.42);
      doubleArray0[1] = (-1746.97377948);
      doubleArray0[2] = 2988.696395366754;
      doubleArray0[3] = 454.2;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = (-1);
      intArray0[2] = (-757);
      intArray0[3] = 858;
      intArray0[4] = 28;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1420.66961469);
      doubleArray0[0] = (-1420.66961469);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1589.265;
      MathArrays.distance(doubleArray1, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      int int0 = (-853);
      int int1 = 127;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Double>>) null, (-853), 127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 599;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3123);
      MathArrays.distance1(intArray0, intArray0);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) (-3123);
      longArray1[1] = (long) (-3123);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (long) (-3123);
      longArray2[1] = (long) 0;
      longArray2[2] = (long) (-3123);
      longArray2[3] = (long) (-3123);
      longArray2[4] = 0L;
      longArray2[5] = (long) (-3123);
      longArray2[6] = (long) (-3123);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (long) (-3123);
      longArray3[1] = 0L;
      longArray3[2] = (long) (-3123);
      longArray3[3] = (long) (-3123);
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = (long) 0;
      longArray3[8] = (long) (-3123);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = 0L;
      longArray4[2] = (long) (-3123);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (long) (-3123);
      longArray5[1] = 0L;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) (-3123);
      longArray5[4] = (long) (-3123);
      longArray5[5] = (long) (-3123);
      longArray5[6] = (long) (-3123);
      longArray5[7] = 0L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = (long) (-3123);
      longArray6[3] = (long) (-3123);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3872.629;
      doubleArray0[2] = (-2511.10553);
      doubleArray0[3] = (-557.137773974595);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3089.334545;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-557.137773974595), 0.0, 2.0, 0.0, 0.0, (-781.0), 809.0452020500697, 3089.334545);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 76;
      intArray0[4] = 0;
      intArray0[5] = 3740;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 10000L;
      longArray2[1] = (-1L);
      longArray2[2] = 2915L;
      longArray2[3] = 1L;
      longArray2[4] = 0L;
      longArray2[5] = (-1L);
      longArray2[6] = 2147483647L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 1L;
      longArray3[1] = 10000L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 1L;
      longArray4[1] = 2915L;
      longArray4[2] = 1L;
      longArray4[3] = 2915L;
      longArray4[4] = 0L;
      longArray4[5] = 2915L;
      longArray4[6] = (-1344L);
      longArray4[7] = 10000L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (-1344L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      longArray0[4] = 1145L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 4419L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (-2511.10553);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3089.334545;
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 2.0, 0.0, 0.0, (-781.0), 809.0452020500697, 3089.334545);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 76;
      intArray0[4] = 0;
      intArray0[5] = 3740;
      MathArrays.copyOf(intArray0);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2496.567685);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2376.142179);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(3446.578282965458, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3266);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 16;
      intArray0[5] = 116;
      intArray0[6] = 709;
      intArray0[7] = 0;
      intArray0[8] = (-785);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2347.7707598037305);
      doubleArray0[1] = (-1176.094);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2586.8334;
      doubleArray0[7] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2253.0);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = (-2253.0);
      doubleArray1[5] = (-2253.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray1[8] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2253.0;
      doubleArray2[1] = 2253.0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-173.6662168125681);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1449.199623578612);
      doubleArray0[3] = 2781.45723076;
      doubleArray0[4] = 1261.748628837065;
      doubleArray0[5] = 985.3617;
      doubleArray0[6] = (-1679.41);
      doubleArray0[7] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -1,449.2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3195.42);
      doubleArray0[1] = (-1746.97377948);
      doubleArray0[2] = 2988.696395366754;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-3,195.42 < -1,746.974)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = (-6.032174644509064E-23);
      doubleArray0[2] = 510300.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(510300.00001567707, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1023L;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.linearCombination((-42.29708413163058), Double.NaN, 3.834E-20, 2754.0, Double.NaN, 5.041914939880371);
      MathArrays.safeNorm(doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[4][9];
      long[] longArray1 = new long[9];
      longArray1[0] = (-1722L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = (-2215L);
      longArray1[5] = 1023L;
      longArray1[6] = 0L;
      longArray1[7] = 1502L;
      longArray1[8] = 2050L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-1722L);
      longArray2[1] = 0L;
      longArray2[2] = 1502L;
      longArray2[3] = 0L;
      longArray2[4] = 2050L;
      longArray2[5] = (-2699L);
      longArray2[6] = 0L;
      longArray2[7] = (-1722L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 1023L;
      longArray3[3] = (-2699L);
      longArray3[4] = 0L;
      longArray3[5] = 1502L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray3[8] = (-1722L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = (-1722L);
      longArray4[1] = 1023L;
      longArray4[2] = (-745L);
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,722 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2128.6928280678;
      doubleArray0[1] = 2128.6928280678;
      doubleArray0[2] = 2128.6928280678;
      doubleArray0[3] = 2128.6928280678;
      doubleArray0[4] = 2128.6928280678;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 2128.6928280678;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1589.265;
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(1589.265, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      MathArrays.checkPositive(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray2 = MathArrays.scale((-303.50001), doubleArray1);
      assertArrayEquals(new double[] {(-482341.94339265)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1, 213);
      assertEquals(213, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray1, (-150.7));
      assertArrayEquals(new double[] {(-150.7)}, doubleArray4, 0.01);
      
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 213;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 320.8;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 3026.16393802;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 320.8;
      doubleArray1[1] = (double) 405L;
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-795.68635558936);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1019.3639969694518);
      doubleArray0[7] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination((-3502.158507317), 0.0, (-1039.375), (-1730.0), 2848.4120777, (-795.68635558936));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (0 > -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1843.0;
      doubleArray0[1] = (-1481.61);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1843.0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 975.7908312872047, 12.666235372, (-393.0), 3495.5158, 1843.0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<FieldElement<Double>>>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathArrays.linearCombination(766.3395434510686, 766.3395434510686, 0.0, 766.3395434510686, 0.0, 766.3395434510686, (-143.8132177), 0.0);
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(0.0, 766.3395434510686, 1.304E19, 0.0, 0.0, 587276.2958567922);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-143.8132177);
      doubleArray0[1] = 928.689354771921;
      doubleArray0[2] = 766.3395434510686;
      doubleArray0[3] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 40;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-108);
      intArray0[5] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 40;
      intArray1[1] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2854.2750086);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2128.6928280678;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-666.55045365);
      doubleArray0[1] = (-867.16);
      doubleArray0[2] = (-1533.1385473816);
      MathArrays.copyOf(doubleArray0, 0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection.values();
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1883.2869612272004;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-867.16);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2309.191;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1809.57);
      doubleArray0[3] = (-1390.9329355);
      doubleArray0[4] = (-2639.489483);
      doubleArray0[5] = 3026.16393802;
      doubleArray0[6] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathArrays.linearCombination(766.3395434510686, 965.69, 0.0, 766.3395434510686, 0.0, 965.69, (-143.8132177), 0.0);
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.linearCombination(0.0, 766.3395434510686, 1.304E19, 0.0, 0.0, 740046.4337152625);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-143.8132177);
      doubleArray0[1] = 928.689354771921;
      doubleArray0[2] = 766.3395434510686;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-143.8132177);
      doubleArray0[5] = 766.3395434510686;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray2);
      double[] doubleArray3 = MathArrays.scale(3.834E-20, doubleArray2);
      int int0 = 2;
      MathArrays.copyOf(doubleArray3, 2);
      MathArrays.safeNorm(doubleArray3);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3625.6F);
      floatArray0[1] = 2756.6086F;
      floatArray0[2] = (-328.8F);
      floatArray0[3] = (-635.01965F);
      floatArray0[4] = 27.205269F;
      floatArray0[5] = 2441.0188F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 952.348F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 493.13965184;
      doubleArray0[1] = (-1149.69058);
      doubleArray0[2] = (-245.5234740364);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[7][2];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1621.0770857908328;
      doubleArray0[0] = 1621.0770857908328;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1589.265;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-548.3);
      doubleArray0[1] = 2452.160524;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 2452.160524;
      doubleArray1[2] = (-548.3);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathArrays.linearCombination((-1627.1539226525904), (-1627.1539226525904), (-1627.1539226525904), (-1627.1539226525904), (-1627.1539226525904), 0.0, 0.0, (-1627.1539226525904));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
