/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:15:50 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2145749962);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2145749962));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 0;
      Pair<Object, Object>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = (-926);
      intArray0[1] = 134217729;
      intArray0[3] = 1073741824;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8;
      intArray1[1] = (-926);
      intArray1[2] = 1073741824;
      intArray1[3] = 134217729;
      intArray1[4] = 8;
      intArray1[5] = 1073741824;
      intArray1[6] = 8;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {8, 134217729, 0, 1073741824}, intArray0);
      assertArrayEquals(new int[] {8, (-926), 1073741824, 134217729, 8, 1073741824, 8}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals((-2147482722), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[15];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(15, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0992790123457242E36;
      doubleArray0[1] = 1898.3283527;
      doubleArray0[2] = 1155.0108980892;
      doubleArray0[3] = 2.2860509143963117E-8;
      doubleArray0[4] = 2.608E18;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 23.50632);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0992790123457242E36, 1898.3283527, 1155.0108980892, 2.2860509143963117E-8, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.506319999999995, 2.1256209137144594E-32, 1.293303825470764E-32, 2.5597666634149426E-43, 2.9202636809815325E-17}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0992790123457242E36, 1898.3283527, 1155.0108980892, 2.2860509143963117E-8, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.506319999999995, 2.1256209137144594E-32, 1.293303825470764E-32, 2.5597666634149426E-43, 2.9202636809815325E-17}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0992790123457242E36, 1898.3283527, 1155.0108980892, 2.2860509143963117E-8, 2.608E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.506319999999995, 2.1256209137144594E-32, 1.293303825470764E-32, 2.5597666634149426E-43, 2.9202636809815325E-17}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(23.506319999999995, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2699.824503157699);
      doubleArray0[1] = 337.0;
      doubleArray0[2] = 2248.48195706;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 212);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2699.824503157699), 337.0, 2248.48195706}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(212, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2113.8F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1550.87F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2113.8F, (-1.0F), (-1550.87F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-599);
      intArray0[1] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-599), 134217729}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-599), 134217729}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(134217729, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Pair<Object, Object> pair0 = new Pair<Object, Object>(object0, object1);
      assertNotNull(pair0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4580.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = 4580.2;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      doubleArray0[3] = (double) 1771;
      intArray0[1] = 1771;
      intArray0[2] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1771, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 1771.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 3136441.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 1771.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 3136441.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(2.0273404587492978E11, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double3 = new Double(0.4342944622039795);
      assertEquals(0.4342944622039795, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 1771);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 1771.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 3136441.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 1771.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1651899.3143003823, 0.0, 2.097365184E7, 3134670.0, 2025067.4943062926, 2.097365184E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 3136441.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1771, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 1771.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 3136441.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.3153223395347595;
      doubleArray0[1] = (-11.34);
      doubleArray0[2] = (-972.337662306306);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 36.3419;
      doubleArray0[6] = 0.9808930158615112;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-972.337662306306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.6725170580355583E-9;
      doubleArray0[1] = (-2575.913492);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5.2160000000006775E19;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.6725170580355583E-9, (-2575.913492), 0.0, 5.2160000000006775E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {3.6725170580355583E-9, (-2575.913492), 0.0, 5.2160000000006775E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.6725170580355583E-9, (-2575.913492), 0.0, 5.2160000000006775E19}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "SAME_SIGN_AT_ENDPOINTS";
      stringArray0[2] = "y3@!^PY-`iVx";
      stringArray0[3] = "sht\"ygWwZbE/ZS}(a|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1.9699272335463627E-8, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2592, (-439));
      assertEquals(2592, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-204);
      floatArray0[1] = (float) (-204);
      floatArray0[2] = (float) (-204);
      floatArray0[3] = (float) (-204);
      floatArray0[4] = (float) (-204);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-204.0F), (-204.0F), (-204.0F), (-204.0F), (-204.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.875;
      doubleArray0[0] = 0.875;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.875, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.109375, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = MathArrays.linearCombination((-1970.2791143481), (-1970.2791143481), (-1970.2791143481), 0.109375, 0.109375, 459.49876);
      assertEquals(3881834.546835076, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.875}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.875}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.669921875}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.875}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.669921875}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-0.205078125)}, doubleArray4, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double[] doubleArray5 = MathArrays.ebeDivide(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertArrayEquals(new double[] {0.875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.875}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.669921875}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-0.205078125)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-4.266666666666667)}, doubleArray5, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.17440512875E8}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertArrayEquals(new double[] {1.17440512875E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.765625}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.875}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.669921875}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      
      Field<FieldElement<Pair<Integer, String>>> field0 = (Field<FieldElement<Pair<Integer, String>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 286;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 286, 286);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 3764.7004F;
      floatArray0[3] = 15.858072F;
      floatArray0[4] = (-1684.087F);
      floatArray0[5] = 1039.0F;
      floatArray0[6] = (-2326.0F);
      floatArray0[7] = 3199.47F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 3764.7004F, 15.858072F, (-1684.087F), 1039.0F, (-2326.0F), 3199.47F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3774L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,774 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[5] = "M&zY5(V#2a^";
      stringArray0[6] = "t52_2GwG{7'ekD";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.7379375002158283;
      doubleArray0[1] = 1.304E19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.7379375002158283, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1556.3206522957944);
      doubleArray0[1] = 162.909365;
      doubleArray0[2] = 2681.31383;
      doubleArray0[3] = (-1.0935780855997672);
      doubleArray0[4] = (-3749.855918614);
      doubleArray0[5] = (-1537.0);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 3.26E18;
      doubleArray0[8] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 23.29026678102722;
      doubleArray0[1] = (-135.23352187172748);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 6.52E18;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1537.0);
      doubleArray0[4] = (-1537.0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3062.5273F;
      floatArray0[1] = (-1793.1936F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 3062.5273F;
      floatArray1[2] = 3062.5273F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {3062.5273F, (-1793.1936F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 3062.5273F, 3062.5273F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1537.0), 0.0, 0.0, (-1537.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.917E-20, -0.0, -0.0, 1.917E-20, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1537.0), 0.0, 0.0, (-1537.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.917E-20, -0.0, -0.0, 1.917E-20, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals((-5.892858E-17), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-4637.6213807419);
      doubleArray0[2] = 690.4235783;
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = (-936.27846);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1604.313264387);
      doubleArray0[7] = (-1.0129027912496858E-9);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, (-1452.47589914406), 1.304E19, 1.304E19, 1.0708593250394448E-7, 1.304E19, 1.0708593250394448E-7, 1.0708593250394448E-7);
      assertEquals(1.7004159999999998E38, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1452.47589914406);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.7004159999999998E38;
      doubleArray0[3] = 1.7004159999999998E38;
      doubleArray0[4] = (-1452.47589914406);
      doubleArray0[6] = (-1452.47589914406);
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.7004159999999998E38;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1452.47589914406), 1.304E19, 1.7004159999999998E38, 1.7004159999999998E38, (-1452.47589914406), 0.0, (-1452.47589914406), 1.304E19, 1.7004159999999998E38}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.9452069060030394E38, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1452.47589914406), 1.304E19, 1.7004159999999998E38, 1.7004159999999998E38, (-1452.47589914406), 0.0, (-1452.47589914406), 1.304E19, 1.7004159999999998E38}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8.674243719167997E76, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1452.47589914406), 1.304E19, 1.7004159999999998E38, 1.7004159999999998E38, (-1452.47589914406), 0.0, (-1452.47589914406), 1.304E19, 1.7004159999999998E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.9699272335463627E-8;
      doubleArray0[1] = 912.859;
      doubleArray0[2] = 1405.16;
      double double0 = 3.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-5301.0);
      double double1 = 1141.0790267482764;
      doubleArray0[5] = 1141.0790267482764;
      doubleArray0[6] = 2.1733333333333335E18;
      double double2 = 1647.1857543377;
      doubleArray0[7] = 1647.1857543377;
      double double3 = (-485.5602);
      doubleArray0[8] = (-485.5602);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1537.0);
      double double0 = MathArrays.linearCombination(0.7249995199969751, Double.NaN, (-0.010714690733195933), 2346.3584671332333, 1.34217729E8, (-1537.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2088.15787;
      doubleArray0[1] = 6294.4957;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 583.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 6294.4957, 2088.15787, 583.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.9, (-3447.42), 1.304E19, 1.304E19, 1.304E19, 3.834E-20, 876.0, 118.326419);
      assertEquals(1.700416E38, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 6294.4957, 2088.15787, 583.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 6294.4957, 2088.15787, 583.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "n]EK~v900'=";
      stringArray0[1] = "3";
      stringArray0[2] = ">%";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 224107.55999999997;
      doubleArray0[1] = 224107.55999999997;
      doubleArray0[2] = 224107.55999999997;
      doubleArray0[3] = 224107.55999999997;
      doubleArray0[4] = 224107.55999999997;
      doubleArray0[5] = 224107.55999999997;
      doubleArray0[6] = 224107.55999999997;
      doubleArray0[7] = 224107.55999999997;
      doubleArray0[8] = 224107.55999999997;
      double[] doubleArray1 = MathArrays.scale(224107.55999999997, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10, 5.022419844915359E10}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997, 224107.55999999997}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5403022766113281;
      doubleArray0[1] = 570.8666405;
      MathArrays.scaleInPlace(570.8666405, doubleArray0);
      assertArrayEquals(new double[] {308.4405455036106, 325888.72123575624}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.5403022766113281, doubleArray0);
      assertArrayEquals(new double[] {166.65112893484076, 176078.41800563358}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      int int0 = (-1753);
      intArray0[0] = (-1753);
      intArray0[1] = 3755;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1753), 3755}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3755;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 3755;
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1753), 3755}, intArray0);
      assertArrayEquals(new int[] {3755, 0, 0, 3755}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(9263, int2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1373);
      intArray0[1] = (-1373);
      intArray0[2] = (-1373);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1373);
      doubleArray0[1] = (double) (-1373);
      doubleArray0[2] = (double) (-1373);
      doubleArray0[3] = (double) (-1373);
      doubleArray0[4] = (double) (-1373);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1373);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(2977.0309174478193, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-665.48359915655), (-1274.02998), (-0.7853981633974483), 0.041666663879186654);
      assertEquals(847846.0237988262, double0, 0.01);
      
      double[] doubleArray0 = new double[23];
      doubleArray0[11] = 1.304E19;
      doubleArray0[1] = (-1274.02998);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(1.8441344853345161E19, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1274.02998;
      doubleArray0[2] = 2164933.6882828004;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1311.1331191);
      doubleArray0[6] = 4.686941984434271E12;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 6.172159604760766E13;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1274.02998, 2164933.6882828004, 3.834E-20, 3.834E-20, (-1311.1331191), 4.686941984434271E12, 3.834E-20, 6.172159604760766E13}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.1360256E7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1274.02998, 2164933.6882828004, 3.834E-20, 3.834E-20, (-1311.1331191), 4.686941984434271E12, 3.834E-20, 6.172159604760766E13}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2.1794345548860764E-4, 0.3703469591257575, 6.558677750607735E-27, 6.558677750607735E-27, (-2.2429054815665338E-4), 801777.3112075722, 6.558677750607735E-27, 1.0558478318451816E7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 12;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(12, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((double) 12, (double) 12, (-3447.42), 1282.0, (-3474.056812066479), (double) 12, (-3474.056812066479), 1.304E19);
      assertEquals((-4.5301700829346886E22), double0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination((-268.605893947283), 2053.0, 327.898, 327.898, 1285.76244958, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 2191;
      intArray0[2] = 1;
      intArray0[3] = 4547;
      intArray0[4] = 1612;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), 2191, 1, 4547, 1612}, intArray0);
      assertArrayEquals(new int[] {(-1), 2191, 1, 4547, 1612}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*e=/Nt$MU/\"hd";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "got {0}x{1} but expected {2}x{3}";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean2);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1376);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1376)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1376);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1376.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1376.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1376);
      floatArray0[1] = (float) (-1376);
      floatArray0[2] = (float) (-1376);
      floatArray0[3] = (float) (-1376);
      floatArray0[4] = (float) (-1376);
      floatArray0[5] = (float) (-1376);
      floatArray0[6] = (float) (-1376);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1376);
      floatArray1[1] = (float) (-1376);
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1376.0F), (-1376.0F), (-1376.0F), (-1376.0F), (-1376.0F), (-1376.0F), (-1376.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1376.0F), (-1376.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-3447.42);
      double double1 = (-3474.056812066479);
      double double2 = 1.304E19;
      double double3 = 606.8860673;
      double double4 = MathArrays.linearCombination(1.304E19, 606.8860673, (-1896.0), (-1988.9115), 6.172159604760766E13, (-3447.42), (-1896.0), 1405.16);
      assertEquals(7.913581537327355E21, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3474.056812066479);
      doubleArray0[1] = 6.172159604760766E13;
      doubleArray0[2] = 606.8860673;
      double double5 = (-2236.0);
      doubleArray0[3] = (-2236.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1282.0;
      doubleArray0[6] = 3.834E-20;
      double double6 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3474.056812066479), 6.172159604760766E13, 606.8860673, (-2236.0), 1.304E19, 1282.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.304000000014607E19, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      double double7 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3474.056812066479), 6.172159604760766E13, 606.8860673, (-2236.0), 1.304E19, 1282.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.7004160000380955E38, double7, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("U_mFJ5!YY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.U_mFJ5!YY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1274.02998), (-1274.02998), (-1537.0), (-352.492712));
      assertEquals(2164933.6882828004, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1274.02998);
      doubleArray0[2] = (-352.492712);
      doubleArray0[3] = 2164933.6882828004;
      doubleArray0[4] = (-1537.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1274.02998), (-352.492712), 2164933.6882828004, (-1537.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.01745329052209854;
      doubleArray1[2] = 1.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1730);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.01745329052209854, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(1730, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1730;
      intArray0[1] = 1730;
      intArray0[2] = 1730;
      intArray0[3] = 2;
      intArray0[4] = 1730;
      intArray0[5] = 1730;
      intArray0[6] = 1730;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1730;
      intArray1[1] = 1730;
      intArray1[2] = 2;
      intArray1[3] = 2;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8d.He)plzV!15_{B _";
      stringArray0[1] = "8d.He)plzV!15_{B _";
      stringArray0[2] = "8d.He)plzV!15_{B _";
      stringArray0[3] = "8d.He)plzV!15_{B _";
      stringArray0[4] = "]uiQ`|thK-ZQ!c@Ab!";
      stringArray0[5] = "8d.He)plzV!15_{B _";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-470.968809161187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2917);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2917, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2917;
      intArray0[1] = 2917;
      intArray0[2] = 2917;
      intArray0[3] = 1;
      intArray0[4] = (-1596);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2917, 2917, 2917, 1, (-1596)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-1537.0);
      double double1 = MathArrays.linearCombination((-1274.02998), 1.304E19, (-1537.0), (-352.492712));
      assertEquals((-1.66133509392E22), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-352.492712);
      doubleArray0[3] = (-1.66133509392E22);
      doubleArray0[4] = (-1537.0);
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.304E19, (-352.492712), (-1.66133509392E22), (-1537.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.6613356056818185E22, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1.0;
      double[][] doubleArray0 = new double[6][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2382.26623071;
      doubleArray1[1] = (-1274.02998);
      doubleArray0[4] = doubleArray1;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 453.460898652, 453.460898652, 272.2180688649, (-268.605893947283), (-268.605893947283));
      assertEquals(5.913130118422081E21, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-758.83716F);
      floatArray0[1] = 1384.7329F;
      floatArray0[2] = (-3196.5051F);
      floatArray0[3] = 1314.15F;
      floatArray0[4] = 2708.6958F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1384.7329F;
      floatArray1[1] = 2708.6958F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-3196.5051F);
      floatArray1[4] = 2708.6958F;
      floatArray1[5] = 1384.7329F;
      floatArray1[6] = (-758.83716F);
      floatArray1[7] = 1314.15F;
      floatArray1[8] = 1384.7329F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-758.83716F), 1384.7329F, (-3196.5051F), 1314.15F, 2708.6958F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1384.7329F, 2708.6958F, 0.0F, (-3196.5051F), 2708.6958F, 1384.7329F, (-758.83716F), 1314.15F, 1384.7329F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1405.16;
      MathArrays.scaleInPlace(1405.16, doubleArray0);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 1974474.6256000001;
      doubleArray1[1] = (Double) 1974474.6256000001;
      doubleArray1[2] = (Double) 1974474.6256000001;
      doubleArray1[3] = (Double) 1974474.6256000001;
      doubleArray1[4] = (Double) 1974474.6256000001;
      doubleArray1[5] = (Double) 1974474.6256000001;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-2700.0), 56.836761215071, (double) doubleArray1[4], 1.0, 1.01, 1.01, 6.123233995736766E-17, 632.9);
      assertEquals(6, doubleArray1.length);
      assertEquals(1821016.3904193083, double0, 0.01);
      
      double[][] doubleArray2 = new double[8][8];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 56.836761215071;
      doubleArray3[1] = 1821016.3904193083;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(132.3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.scale((-1.0), doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3585;
      intArray0[1] = (-220);
      intArray0[2] = (-1073741824);
      intArray0[3] = (-1651);
      intArray0[4] = (-1842);
      intArray0[5] = 2842;
      intArray0[6] = (-103);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {3585, (-220), (-1073741824), (-1651), (-1842), 2842, (-103)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1405.16;
      MathArrays.scaleInPlace(1405.16, doubleArray0);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 1974474.6256000001;
      doubleArray1[1] = (Double) 1974474.6256000001;
      doubleArray1[2] = (Double) 1974474.6256000001;
      doubleArray1[3] = (Double) 1974474.6256000001;
      doubleArray1[4] = (Double) 1974474.6256000001;
      doubleArray1[5] = (Double) 1974474.6256000001;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-2700.0), 56.836761215071, (double) doubleArray1[4], 1.0, 1.01, 1.01, 6.123233995736766E-17, 632.9);
      assertEquals(6, doubleArray1.length);
      assertEquals(1821016.3904193083, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(632.9, (-1648.46982334), 1.01, 1.732932929708785E7, 353.87667017176, 353.87667017176, 1405.16, 353.87667017176);
      assertEquals(1.7081788078417245E7, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.8985500471382607E12}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(1.01, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1994219.3718560003}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145809849, 2145809849);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      int int0 = (-1527);
      intArray0[0] = (-1527);
      intArray0[1] = (-2721);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2721);
      intArray1[1] = (-2721);
      intArray1[2] = 1771;
      intArray1[3] = 1771;
      intArray1[4] = (-1527);
      intArray1[5] = (-1527);
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1527), (-2721)}, intArray0);
      assertArrayEquals(new int[] {(-2721), (-2721), 1771, 1771, (-1527), (-1527)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1194.0, double1, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2721);
      doubleArray2[1] = 1285.76244958;
      doubleArray2[2] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4725.6;
      doubleArray0[2] = 1.7976931348623157E308;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 4725.6, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 4725.6, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 4725.6, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-994.5F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-994.5F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[4][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2699L);
      longArray2[1] = 2376L;
      longArray2[2] = 113236205062349959L;
      longArray2[3] = (-277L);
      longArray2[4] = 1016L;
      longArray2[5] = (-2699L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-277L);
      longArray3[1] = (-2699L);
      longArray3[2] = 1016L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-2699L);
      longArray4[1] = 2376L;
      longArray4[2] = (-277L);
      longArray4[3] = (-277L);
      longArray4[4] = 113236205062349959L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 149);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(149, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 149;
      intArray0[1] = 149;
      intArray0[2] = 149;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 149;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1653.73272249);
      doubleArray0[1] = (-2049.618759525695);
      doubleArray0[2] = (-3238.0869446);
      doubleArray0[3] = (-2374.49285);
      doubleArray0[4] = 688.44704;
      doubleArray0[5] = 1405.16;
      doubleArray0[6] = 2770.5369;
      doubleArray0[7] = (-1363.095205716);
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,653.733 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-873.0F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-873.0F);
      floatArray1[4] = (-873.0F);
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), (-873.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-873.0F), (-873.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1045.92544);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      double double0 = MathArrays.linearCombination((-268.605893947283), (-268.605893947283), 272.2180688649, 253.21, (-268.605893947283), 1.304E19);
      assertEquals((-3.5026208570725703E21), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-268.605893947283);
      doubleArray0[1] = (-3.5026208570725703E21);
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = 272.2180688649;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = 253.21;
      doubleArray0[7] = 272.2180688649;
      doubleArray0[8] = (double) 12;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 453.460898652, 453.460898652, 272.2180688649, (-268.605893947283), (-268.605893947283));
      assertEquals(5.913130118422081E21, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[5];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[][] longArray1 = new long[8][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      longArray1[7] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(8, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2228);
      intArray0[1] = 793;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) (-2699L);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-2699.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-2699.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 7284601.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 24);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(24, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = -0.0;
      doubleArray1[5] = (double) 24;
      doubleArray1[6] = -0.0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = -0.0;
      doubleArray2[2] = (double) 24;
      doubleArray2[3] = (double) 24;
      doubleArray2[4] = -0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 30;
      intArray0[1] = 2147029211;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(2147029211, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((double) 2147029211, (double) (-1L), (-3447.42), 1282.0, (-3474.056812066479), (double) 30, (-3474.056812066479), 1.304E19);
      assertEquals((-4.530170082934903E22), double0, 0.01);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1L);
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertEquals(1.0, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertTrue(boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1, 860);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(860, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {30, 2147029211, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1274.02998), 1.304E19, (-1537.0), (-352.492712));
      assertEquals((-1.66133509392E22), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-352.492712);
      doubleArray0[2] = 1.304E19;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.304E19, (-352.492712), 1.304E19}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-352.492712);
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[4] = "";
      stringArray0[5] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[6] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[7] = "\"K}g+UyU";
      stringArray0[8] = "$VALUES";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1771;
      intArray0[1] = 9;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, 9}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[0];
      int int0 = 24;
      int[] intArray1 = MathArrays.copyOf(intArray0, 24);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(24, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 1285.76244958;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = (-1537.1485565476);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 1285.76244958, 0.0, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(5.216E17, (-1703.17448), 3651.4564111048, 1.86285714285714278E18, 1.34217729E8, 5.216E17, 1653185.0767499623, 1.8087997435171328E16);
      assertEquals(7.004378401967661E25, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1285.76244958;
      doubleArray1[1] = 2943.44572219562;
      doubleArray1[2] = 3651.4564111048;
      doubleArray1[3] = 1.86285714285714278E18;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 5.216E17;
      doubleArray1[6] = 3651.4564111048;
      doubleArray1[7] = 5.216E17;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 2943.44572219562, 3651.4564111048, 1.86285714285714278E18, 0.0, 5.216E17, 3651.4564111048, 5.216E17}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(2.00358924300712832E18, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[4] = "";
      stringArray0[5] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[6] = "@";
      stringArray0[7] = "\"K}g+UyU";
      stringArray0[8] = "$VALUES";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1771;
      intArray0[1] = 9;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, 9}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[2][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2557.31796221183);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((double) 149, (-3859.37), 0.0, 1.304E19, 4073.329568, 1.8907899530097182E15);
      assertEquals(7.7018106224712407E18, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(2184.257783801, 2483.0, 1337.84854744989, 2350.467010963522, (-2478.3), (double) 149);
      assertEquals(8198814.253624316, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 2147029211;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(2147029211, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((double) 2147029211, (double) (-1L), (-3447.42), 1282.0, (-3474.056812066479), (double) 12, (-3474.056812066479), 1.304E19);
      assertEquals((-4.530170082934903E22), double0, 0.01);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1L);
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertEquals(1.0, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertTrue(boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1, 860);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(860, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {12, 2147029211, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2699L);
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2699L);
      doubleArray0[1] = (double) (-2699L);
      doubleArray0[2] = (double) (-2699L);
      doubleArray0[3] = (double) (-2699L);
      doubleArray0[4] = (double) (-2699L);
      doubleArray0[5] = (double) (-2699L);
      doubleArray0[6] = (-969250.1688638467);
      doubleArray0[7] = (double) (-2699L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "maximal number of iterations ({0}) exceeded";
      stringArray0[1] = "maximal number of iterations ({0}) exceeded";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2422.5478666615), 0.0, 0.4342944622039795, 1.4180924647572888E15);
      assertEquals(6.158697043372825E14, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 192.485;
      doubleArray0[1] = (-302.776664225594);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1395.569637545);
      doubleArray0[4] = 1.4180924647572888E15;
      doubleArray0[5] = (-1395.569637545);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {192.485, (-302.776664225594), 1.0, (-1395.569637545), 1.4180924647572888E15, (-1395.569637545), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2.0109862386014023E30, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {192.485, (-302.776664225594), 1.0, (-1395.569637545), 1.4180924647572888E15, (-1395.569637545), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 134217729;
      double double0 = (-1.0);
      double double1 = (-1.0);
      double double2 = 0.0;
      double double3 = 6.283185307179586;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "n[pQ:`wzja`g5";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "bo%xDpwLBUEots96:?q";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "";
      stringArray0[5] = "}QzrP";
      stringArray0[6] = "RX<;]8Vw";
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2429.9748384;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 16;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2429.9748384, Double.NaN, 16.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 16;
      integerArray0[1] = (Integer) 16;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2429.9748384, Double.NaN, 16.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3607.802408643582, 0.9285714285714286, 0.0, 0.9285714285714286);
      assertEquals(3350.102236597612, double0, 0.01);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.9285714285714286;
      doubleArray2[1] = 0.9285714285714286;
      doubleArray2[2] = 0.9285714285714286;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 3350.102236597612;
      doubleArray2[5] = 0.9285714285714286;
      doubleArray2[6] = 0.0;
      doubleArray1[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "";
      stringArray0[2] = "$VALUES";
      stringArray0[3] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[4] = "";
      stringArray0[5] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[6] = "@";
      stringArray0[7] = "}g+UyU";
      stringArray0[8] = "$VALUES";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1771;
      intArray0[1] = 9;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, 9}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3920.9231005;
      doubleArray0[1] = 3920.9231005;
      doubleArray0[2] = 3920.9231005;
      doubleArray0[3] = 3920.9231005;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3920.9231005;
      doubleArray0[6] = 3920.9231005;
      doubleArray0[7] = 3920.9231005;
      doubleArray0[8] = 3920.9231005;
      double[] doubleArray1 = MathArrays.scale(3920.9231005, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 0.0, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 0.0, 1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][7];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7841.846201, 7841.846201, 7841.846201, 7841.846201, 7841.846201, 7841.846201, 7841.846201, 7841.846201, 0.0}, doubleArray3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1270));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 24);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(24, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-8);
      MathArrays.scaleInPlace((-303.7468548), doubleArray0);
      assertArrayEquals(new double[] {2429.9748384}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) 12;
      floatArray0[3] = (-1150.4F);
      floatArray0[4] = (float) 2147029211;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 12.0F, (-1150.4F), 2.14702925E9F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0F);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2429.9748384}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3920.9231005;
      doubleArray0[1] = 3920.9231005;
      doubleArray0[2] = 3920.9231005;
      doubleArray0[3] = 3920.9231005;
      int int0 = (-2015);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2015);
      intArray0[1] = 1807;
      intArray0[2] = (-2015);
      intArray0[3] = 586;
      intArray0[4] = 2239;
      intArray0[5] = (-2015);
      int int1 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2015), 1807, (-2015), 586, 2239, (-2015)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 266.8042293, 4724.6, 1.34217729E8);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-975.099F);
      floatArray0[3] = (-654.1083F);
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-975.099F), (-654.1083F), 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2699L);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2699L);
      floatArray0[1] = 1178.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-2699L);
      floatArray0[4] = (float) (-2699L);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2699L);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) (-2699L);
      floatArray1[4] = (float) (-2699L);
      floatArray1[5] = 1178.0F;
      floatArray1[6] = 1178.0F;
      floatArray1[7] = (float) (-2699L);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2699.0F), 1178.0F, 0.0F, (-2699.0F), (-2699.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2699.0F), 0.0F, 0.0F, (-2699.0F), (-2699.0F), 1178.0F, 1178.0F, (-2699.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2015));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1537.1485565476);
      doubleArray0[1] = 1423.548749799631;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1537.1485565476);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1537.1485565476), 1423.548749799631, 0.0, 16.0, 1.0, (-1537.1485565476)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1537.1485565476), 1423.548749799631, 0.0, 16.0, 1.0, (-1537.1485565476)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2362825.6848963704, 2026491.0430560922, 0.0, 256.0, 1.0, 2362825.6848963704}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1689.0;
      doubleArray0[1] = (-390.5077);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1689.0, (-390.5077)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3005217.26375929, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-390.5077);
      doubleArray1[1] = 3005217.26375929;
      doubleArray1[2] = (-390.5077);
      doubleArray1[3] = 1689.0;
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-390.5077), 3005217.26375929, (-390.5077), 1689.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(9.0313339601104E12, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray1 = new long[4][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(4, longArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 266.8042293;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2535L;
      doubleArray0[4] = (double) 2535L;
      doubleArray0[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(15, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(3594.945687597014, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2535L;
      doubleArray1[1] = 3594.945687597014;
      doubleArray1[2] = 266.8042293;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 2535L;
      doubleArray1[6] = 3594.945687597014;
      doubleArray1[7] = (double) 0L;
      doubleArray1[8] = (double) 2535L;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 15
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 149;
      longArray0[1] = (long) 149;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {149L, 149L}, longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = 1423.548749799631;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1537.1485565476);
      doubleArray3[1] = (-1537.1485565476);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[1] = "}g+UyU";
      stringArray0[2] = "@";
      stringArray0[3] = "";
      stringArray0[4] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination(0.0, 0.008336750013465571, (double) 0.0F, 877.3817426815, (-1177.88170808211), 877.3817426815, (double) (-1.0F), (double) 0.0F);
      assertEquals((-1033451.9057097435), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1033451.9057097435), 877.3817426815, 1.34217729E8, (double) (-1.0F));
      assertEquals((-1.0409495630091319E9), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long long0 = (-2074L);
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-781.0154), 2462.90422452849, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      MathArrays.scaleInPlace((-1152.57341), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 450088.791420257, (-1419338.9602841036), -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 450088.791420257, (-1419338.9602841036), -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "n[pQ:`wzja`g5";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "bo%xDpwLBUEots96:?q";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "";
      stringArray0[5] = "}QzrP";
      stringArray0[6] = "RX<;]8Vw";
      stringArray0[7] = "maximal number of iterations ({0}) exceeded";
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = 2483L;
      longArray1[2] = (-1L);
      longArray1[3] = (long) 16;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 2147029211;
      intArray0[2] = 13;
      intArray0[3] = 586;
      intArray0[4] = (-2015);
      int[] intArray1 = MathArrays.copyOf(intArray0, 586);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {12, 2147029211, 13, 586, (-2015)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(586, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 586;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 586;
      doubleArray0[3] = (double) 12;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {586.0, 12.0, 586.0, 12.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(687080.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {586.0, 12.0, 586.0, 12.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 4499201580859392L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4499201580859392L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-390.5077);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 4499201580859392L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (-1973.2);
      doubleArray1[5] = (-390.5077);
      doubleArray1[6] = 1231.452112264245;
      doubleArray1[7] = 20.15324228;
      doubleArray1[8] = (-1830.3988963135407);
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-390.5077), 0.0, 4.499201580859392E15, 0.0, (-1973.2), (-390.5077), 1231.452112264245, 20.15324228, (-1830.3988963135407)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.4992015808581605E15, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-390.5077), 0.0, 4.499201580859392E15, 0.0, (-1973.2), (-390.5077), 1231.452112264245, 20.15324228, (-1830.3988963135407)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(0L, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 266.8042293;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2535L;
      doubleArray0[4] = (double) 2535L;
      doubleArray0[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 266.8042293, 0.0, 2535.0, 2535.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 266.8042293, 0.0, 2535.0, 2535.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3594.945687597014, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2535L;
      doubleArray1[1] = 3594.945687597014;
      doubleArray1[2] = 266.8042293;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 2535L;
      doubleArray1[6] = 3594.945687597014;
      doubleArray1[7] = (double) 0L;
      doubleArray1[8] = (double) 2535L;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1231.452112264245;
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2248.48195706;
      doubleArray0[0] = 2248.48195706;
      doubleArray0[1] = 0.0;
      double double1 = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      double double2 = 0.0;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2248.48195706, 0.0, (-1.0), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {2248.48195706, 0.0, (-1.0), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4496.96391412, 0.0, (-2.0), 0.0, (-2.0), 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-2141998484);
      intArray0[2] = (-836);
      intArray0[3] = 1296;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), (-2141998484), (-836), 1296}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.linearCombination(1.304E19, 2844.622359, (double) 0, (double) 0);
      assertEquals(3.709387556136E22, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) (-836);
      doubleArray0[2] = (double) (-2141998484);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-836);
      doubleArray0[6] = (double) (-2141998484);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1296;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 981L;
      longArray3[1] = 2535L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 2535L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 981L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 2535L;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-294.6), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 4499201580859392L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {4499201580859392L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1668970.5685593607, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 4499201580859392L;
      doubleArray1[2] = 1231.452112264245;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = 2337.32669;
      doubleArray1[5] = 0.0;
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-390.5077), 1231.452112264245, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4.499201580859392E15, 1231.452112264245, 0.0, 2337.32669, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals((-1.75697286117624883E18), double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      long long0 = 3525L;
      longArray3[0] = 3525L;
      longArray3[1] = 2535L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 2535L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 3525L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3525L;
      doubleArray0[1] = (double) 2535L;
      doubleArray0[2] = (double) 2535L;
      doubleArray0[3] = (double) 3525L;
      doubleArray0[4] = (double) 3525L;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3525.0, 2535.0, 2535.0, 3525.0, 3525.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7080.206564783262, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-59), (-59));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4725.6;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2747.646550852721);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      MathArrays.scaleInPlace((-2747.646550852721), doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 7549561.568412853, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 4.348321461218936E7);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 7549561.568412853, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 4.348321461218936E7, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distance(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 7549561.568412853, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 4.348321461218936E7, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(3.5933653043776505E7, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(0.0, 342.769, 0.9, 342.769, (-1191.057944392441), 0.9);
      assertEquals((-763.4600499531969), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1b4x.TOrG#3o%XX>Yn";
      stringArray0[1] = "}g+UyU";
      stringArray0[2] = "@";
      stringArray0[3] = "";
      stringArray0[4] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination(0.0, 0.008336750013465571, (double) 0.0F, 877.3817426815, (-1177.88170808211), 877.3817426815, (double) (-1.0F), (double) 0.0F);
      assertEquals((-1033451.9057097435), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 343.0;
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 343.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      double double0 = 4580.2;
      doubleArray0[2] = 4580.2;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = 4580.2;
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1771;
      intArray0[1] = (-2721);
      intArray0[2] = 1771;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, (-2721), 1771}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double4 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1.9717940886392978E11, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Integer integer0 = new Integer(1771);
      assertEquals(1771, (int)integer0);
      assertNotNull(integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1771, 1771);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {16}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "n[pQ:`wzja`g5";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "bo%xDpwLBUEots96:?q";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "";
      stringArray0[5] = "}QzrP";
      stringArray0[6] = "RX;C8CVw";
      stringArray0[7] = "maximal number of iterations ({0}) exceeded";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2699L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RX<;]8Vw";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1752;
      intArray0[1] = 1751;
      intArray0[2] = 2;
      intArray0[3] = 1197;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1752, 1751, 2, 1197}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 1752;
      longArray1[1] = (long) 1197;
      longArray1[2] = (long) 1197;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1751;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 2;
      longArray3[1] = (long) 2;
      longArray3[2] = (long) 1197;
      longArray3[3] = (long) 1751;
      longArray3[4] = (long) 1752;
      longArray3[5] = (long) 1751;
      longArray3[6] = (long) 0;
      longArray3[7] = (long) 2;
      longArray3[8] = 3075L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 1751;
      longArray4[1] = 981L;
      longArray4[2] = (long) 1197;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 2;
      longArray5[2] = 981L;
      longArray5[3] = (long) 1197;
      longArray5[4] = (long) 1197;
      longArray5[5] = 3075L;
      longArray5[6] = 2535L;
      longArray5[7] = (long) 1197;
      longArray5[8] = (long) 2;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1405.16;
      MathArrays.scaleInPlace(1405.16, doubleArray0);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 1974474.6256000001;
      doubleArray1[1] = (Double) 1974474.6256000001;
      doubleArray1[2] = (Double) 1974474.6256000001;
      doubleArray1[3] = (Double) 1974474.6256000001;
      doubleArray1[4] = (Double) 1974474.6256000001;
      doubleArray1[5] = (Double) 1974474.6256000001;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(1974474.6256000001, (-5154.635), (double) doubleArray1[4], 6.123233995736766E-17, 4.57994862077201E-17, 2248.48195706, (-798.340065), (-2700.0));
      assertEquals(6, doubleArray1.length);
      assertEquals((-1.0175540493554157E10), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) doubleArray1[4], 1926.77569627, 1926.77569627, 2248.48195706, (-2700.0), 3.834E-20, (-904.5353638684), (-798.340065));
      assertEquals(6, doubleArray1.length);
      assertEquals(3.809424168717438E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1974474.6256000001}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.8985500471382607E12}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2248.48195706;
      doubleArray3[1] = 4.57994862077201E-17;
      doubleArray3[2] = 3.834E-20;
      doubleArray3[3] = 4.348321461218936E7;
      doubleArray3[4] = (double) doubleArray1[4];
      doubleArray3[5] = 3.834E-20;
      doubleArray3[6] = 1231.452112264245;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, false);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {2248.48195706, 4.57994862077201E-17, 3.834E-20, 4.348321461218936E7, 1974474.6256000001, 3.834E-20, 1231.452112264245}, doubleArray3, 0.01);
      assertEquals(7, doubleArray3.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1021.7016004188);
      doubleArray0[1] = 4915.591939;
      doubleArray0[2] = (-4542.1273);
      doubleArray0[3] = 4190.27613;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7962.176381248609, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int0 = 3053;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 3053);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3053, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3053;
      intArray0[1] = 3053;
      intArray0[2] = 3053;
      intArray0[3] = 3053;
      intArray0[4] = 3053;
      intArray0[5] = 3053;
      intArray0[6] = 3053;
      intArray0[7] = 3053;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053}, intArray1);
      assertArrayEquals(new int[] {3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7962.176381248609, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1021.7016004188), 4915.591939, (-4542.1273), 4190.27613}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-9.787593555594858E-4), 2.0343429894293348E-4, (-2.201611566456977E-4), 2.3864775708707292E-4}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2940);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2166.0);
      doubleArray0[1] = (-685.329);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2166.0), (-685.329)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2166.0), (-685.329)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace((-2166.0), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4691556.0, 1484422.6139999998}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {4691556.0, 1484422.6139999998}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {4691556.0, 1484422.6139999998}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2166.0), (-685.329)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      int int0 = (-668);
      intArray0[0] = (-668);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-668)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[3][6];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {4691556.0, 1484422.6139999998}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (-668);
      doubleArray4[1] = (double) (-668);
      doubleArray4[2] = (double) (-668);
      doubleArray4[3] = (-685.329);
      double[] doubleArray5 = MathArrays.normalizeArray(doubleArray4, 948.6814441381);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertArrayEquals(new double[] {(-668.0), (-668.0), (-668.0), (-685.329)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {235.64212659895864, 235.64212659895864, 235.64212659895864, 241.75506434122414}, doubleArray5, 0.01);
      assertEquals(4, doubleArray4.length);
      assertEquals(4, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,166 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.scale(4.165314589651396E15, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      double double0 = MathArrays.linearCombination(4.165314589651396E15, 158.0093, 158.0093, 158.0093, 1282.0, 158.0093, 2248.48195706, 2248.48195706);
      assertEquals(6.5815844259588749E17, double0, 0.01);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 6.5815844259588749E17;
      doubleArray3[1] = 158.0093;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {6.5815844259588749E17, 158.0093}, doubleArray3, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(6.5815844259588749E17, double1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.5815844259588749E17, 158.0093}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 4.165314589651396E15;
      doubleArray4[1] = 158.0093;
      doubleArray4[2] = 2499.0;
      doubleArray4[3] = 1282.0;
      doubleArray4[4] = 6.5815844259588749E17;
      try { 
        MathArrays.checkOrder(doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,165,314,589,651,396 >= 158.009)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 898.5, 898.5, 0.0, 3.834E-20, 296.06145560042);
      assertEquals(4.57994862077201E-17, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 296.06145560042;
      doubleArray0[1] = 898.5;
      doubleArray0[2] = 296.06145560042;
      doubleArray0[3] = 898.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4.57994862077201E-17;
      doubleArray0[6] = 4.57994862077201E-17;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 4.57994862077201E-17;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 898.5;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 4.57994862077201E-17, 0.0, 0.0, 898.5, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      int int0 = 134217729;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(19, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4580.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = (-1537.1485565476);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1771;
      intArray0[1] = 1771;
      intArray0[2] = (-649);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, 1771, (-649)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2362825.6848963704}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2362825.6848963704}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9.746289638340973E10, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-649), 1771);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3920.9231005;
      doubleArray0[1] = 3920.9231005;
      doubleArray0[2] = 3920.9231005;
      doubleArray0[3] = 3920.9231005;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3920.9231005;
      doubleArray0[6] = 3920.9231005;
      doubleArray0[7] = 3920.9231005;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3920.9231005, 3920.9231005, 3920.9231005, 3920.9231005, 0.0, 3920.9231005, 3920.9231005, 3920.9231005, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 0.0, 1.5373637960034534E7, 1.5373637960034534E7, 1.5373637960034534E7, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1764, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination(-0.0, (-2422.5478666615), 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1395.569637545);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RX<;]8Vw";
      stringArray0[1] = "RX<;]8Vw";
      stringArray0[2] = "}QzrP";
      stringArray0[3] = "";
      stringArray0[4] = "NOT_POWER_OF_TWO_CONSIDER_PADDING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1274.02998), 1.304E19, (-1537.0), (-352.492712));
      assertEquals((-1.66133509392E22), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-352.492712);
      doubleArray0[3] = (-1.66133509392E22);
      doubleArray0[4] = (-1537.0);
      doubleArray0[5] = 1.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.304E19, (-352.492712), (-1.66133509392E22), (-1537.0), 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.7600359947061755E44, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = (-2721);
      int[] intArray0 = new int[2];
      intArray0[0] = 1771;
      int int1 = 19;
      intArray0[1] = 19;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, 19}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int int2 = 16;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 16, (-585));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      long long0 = 981L;
      longArray3[0] = 981L;
      longArray3[1] = 2535L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 2535L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 981L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 2535L;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-38), (-38));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "o5\"";
      stringArray0[1] = "INCREASING";
      stringArray0[2] = "o5\"";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "o5\"";
      stringArray0[5] = "o5\"";
      stringArray0[6] = "INCREASING";
      stringArray0[7] = "o5\"";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4725.6;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2747.646550852721);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      MathArrays.scaleInPlace((-2747.646550852721), doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 7549561.568412853, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.5707963267948966);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 7549561.568412853, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, 1.5707963267948968, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = (-1537.1485565476);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 0.0, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (-649);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-649)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 0.0, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 0.0, 0.0, 2026491.0430560922, 2362825.6848963704}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 0.0, 0.0, 1423.548749799631, (-1537.1485565476)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 0.0, 0.0, 2026491.0430560922, 2362825.6848963704}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(2364362.833452918, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-649);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -649 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4580.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = 4580.2;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1771;
      intArray0[1] = (-2721);
      intArray0[2] = 1771;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, (-2721), 1771}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1.9717940886392978E11, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1771, 1771);
      assertEquals(1771, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1651899.3143003823, 0.0, 2.097365184E7, 0.0, 2025067.4943062926, 2.097365184E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1771, (-2721), 1771}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1285.76244958, 0.0, 4580.2, 0.0, 1423.548749799631, 4580.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1653185.0767499623, 0.0, 2.097823204E7, 0.0, 2026491.0430560922, 2.097823204E7}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 4.348321461218936E7;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 712.19027598);
      MathArrays.normalizeArray(doubleArray0, 712.19027598);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2699L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-2074L);
      longArray1[4] = (-476L);
      longArray1[5] = 593L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-756.849);
      doubleArray0[1] = (-2079.444408714);
      doubleArray0[2] = (-575.6380056);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1664.07);
      doubleArray0[5] = 663.2443391973095;
      doubleArray0[6] = (-672.323038);
      doubleArray0[7] = (-3103.5470117328);
      doubleArray0[8] = -0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      assertArrayEquals(new double[] {(-756.849), (-2079.444408714)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4725.6;
      doubleArray0[2] = 1.7976931348623157E308;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2774.67540693202;
      MathArrays.checkOrder(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[8][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 0L;
      longArray3[1] = 3218L;
      longArray3[2] = (-1L);
      longArray3[3] = (-1626L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = (-1L);
      longArray4[1] = 0L;
      longArray4[2] = (-1626L);
      longArray4[3] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-1626L);
      longArray5[1] = (-1626L);
      longArray5[2] = 338L;
      longArray5[3] = 3218L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[4];
      longArray6[0] = 338L;
      longArray6[1] = (-1L);
      longArray6[2] = (-1L);
      longArray6[3] = 3218L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 0L;
      longArray7[1] = 338L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      longArray8[0] = 3218L;
      longArray8[1] = 3218L;
      longArray8[2] = 1L;
      longArray8[3] = (-1626L);
      longArray8[4] = 3218L;
      longArray8[5] = (-1626L);
      longArray8[6] = 0L;
      longArray8[7] = 0L;
      longArray8[8] = (-1L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3920.9231005;
      doubleArray0[1] = 3920.9231005;
      doubleArray0[2] = 3920.9231005;
      doubleArray0[3] = 3920.9231005;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3920.9231005;
      doubleArray0[6] = 3920.9231005;
      doubleArray0[7] = 3920.9231005;
      doubleArray0[8] = 3920.9231005;
      double[] doubleArray1 = MathArrays.scale(3920.9231005, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][7];
      doubleArray2[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = 1590L;
      longArray0[2] = (-364L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-914.38974082);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3.141592653589793);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-445.477719);
      doubleArray0[2] = 2131.3;
      doubleArray0[3] = 487.64576;
      doubleArray0[4] = 4.563614019980605E7;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 487.64576;
      doubleArray1[1] = 4.563614019980605E7;
      doubleArray1[2] = (-445.477719);
      doubleArray1[3] = (-4.9E-324);
      doubleArray1[4] = 4.563614019980605E7;
      doubleArray1[5] = 2131.3;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(4.563658567752505E7, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6.4539248443496734E7, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-445.477719), 2131.3, 487.64576, 4.563614019980605E7}, doubleArray2, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4725.6;
      doubleArray0[2] = 1.7976931348623157E308;
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2920.7459), doubleArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-2920.7459), 4190.27613, 2287.94799296, Double.NaN, (-1.0), (-1341.9621), 1.7976931348623157E308, Double.NaN);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3920.9231005;
      doubleArray0[1] = 3920.9231005;
      doubleArray0[2] = 3920.9231005;
      doubleArray0[3] = 3920.9231005;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3920.9231005;
      doubleArray0[6] = 3920.9231005;
      doubleArray0[7] = 3920.9231005;
      doubleArray0[8] = 3920.9231005;
      double[] doubleArray1 = MathArrays.scale(3920.9231005, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      MathArrays.equals(doubleArray2, doubleArray1);
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray2);
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray3);
      MathArrays.equals(doubleArray4, doubleArray3);
      double[][] doubleArray5 = new double[0][2];
      MathArrays.sortInPlace(doubleArray2, doubleArray5);
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 4.348321461218936E7;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray6, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (43,483,214.612 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-253.85);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 4190.27613;
      double double1 = 3.141592653589793;
      doubleArray0[5] = 3.141592653589793;
      double double2 = (-2747.646550852721);
      doubleArray0[6] = (-2747.646550852721);
      double double3 = 2851.993284;
      doubleArray0[7] = 2851.993284;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equals(doubleArray3, doubleArray2);
      double[][] doubleArray5 = new double[1][9];
      doubleArray5[0] = doubleArray4;
      MathArrays.sortInPlace(doubleArray0, doubleArray5);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-253.85 < 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 453.460898652, 453.460898652, 272.2180688649, (-268.605893947283), 2482.461957147465);
      assertEquals(5.91313011842208E21, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-253.85);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 4190.27613;
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = (-2747.646550852721);
      doubleArray0[7] = 2851.993284;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equals(doubleArray3, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Xk>5>yKom@(rRUW gT";
      stringArray0[1] = "";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "m(AgO|{#?PAx#";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(doubleArray4);
      double[] doubleArray5 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2337.32669;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double double2 = 0.0;
      MathArrays.linearCombination(1231.452112264245, 0.0, 0.0, 0.0, 523.02345179, 0.0, (-390.5077), (-3.141592653589793));
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("Yjcw`5PNC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.Yjcw`5PNC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-3559.099);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 20.0;
      double[] doubleArray1 = MathArrays.scale(20.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 400.0, 0.0, 20.0, 0.0, (-71181.98000000001), 20.0, 0.0, 400.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2248.48195706;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,248.482 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 204L;
      longArray0[2] = 0L;
      longArray0[3] = (-618L);
      longArray0[4] = 1228L;
      longArray0[5] = 2011L;
      longArray0[6] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -618 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double double0 = 503.264523139;
      doubleArray0[2] = 503.264523139;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 503.264523139;
      doubleArray3[2] = (-2002.8869454911555);
      doubleArray3[3] = 503.264523139;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 503.264523139;
      doubleArray3[6] = 503.264523139;
      doubleArray3[7] = 503.264523139;
      doubleArray1[7] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1520);
      intArray0[1] = (-675);
      intArray0[2] = 265;
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-675);
      doubleArray0[1] = (double) (-1520);
      doubleArray0[2] = (double) (-1520);
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1520);
      doubleArray2[1] = (double) (-675);
      doubleArray2[2] = (double) 265;
      doubleArray2[3] = (double) (-675);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) (-675);
      doubleArray2[6] = (double) (-1520);
      doubleArray2[7] = (double) (-1520);
      doubleArray2[8] = (double) (-1520);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 790.915;
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2345.952523270342;
      doubleArray1[1] = 514.09236525052;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1692.8389075209168);
      doubleArray1[4] = (-1.0);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 898.5, 898.5, 0.0, 3.834E-20, 296.06145560042);
      assertEquals(4.57994862077201E-17, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 296.06145560042;
      doubleArray0[1] = 898.5;
      doubleArray0[2] = 296.06145560042;
      doubleArray0[3] = 898.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4.57994862077201E-17;
      doubleArray0[6] = 4.57994862077201E-17;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 4.57994862077201E-17;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 898.5;
      doubleArray1[6] = 4.57994862077201E-17;
      doubleArray1[7] = 296.06145560042;
      doubleArray1[8] = 4.57994862077201E-17;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(15, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1218);
      intArray0[1] = 3728;
      intArray0[2] = 0;
      intArray0[3] = 1381;
      intArray0[4] = 237;
      intArray0[5] = 258;
      intArray0[6] = 20;
      intArray0[7] = 108;
      intArray0[8] = 915;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[6];
      longArray1[0] = (-2699L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-2074L);
      longArray1[4] = (-476L);
      longArray1[5] = 593L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 593L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = 593L;
      longArray3[2] = (-476L);
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2557.31796221183);
      doubleArray0[1] = (-1661.732737258);
      doubleArray0[2] = (-2557.31796221183);
      doubleArray0[3] = (-2557.31796221183);
      MathArrays.scaleInPlace((-2557.31796221183), doubleArray0);
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4.276996710643963E13, 1.805892148503522E13, 4.276996710643963E13, 4.276996710643963E13}, doubleArray3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 0L;
      longArray2[1] = 2535L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 981L;
      longArray3[1] = 2535L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 2535L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 981L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 2535L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = 2535L;
      longArray6[2] = 981L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray0[7] = longArray8;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2781.2);
      doubleArray0[1] = 3214.847820024;
      doubleArray0[2] = (-527.325);
      doubleArray0[3] = (-1635.1483193998);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,214.848 >= -527.325)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1250.5045864087);
      doubleArray0[3] = (-425.745401133028);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-4217.30711998);
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-1444L);
      longArray4[1] = 933L;
      longArray4[2] = (-1607L);
      longArray4[3] = 0L;
      longArray4[4] = 3209L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = 0L;
      longArray5[1] = 343L;
      longArray5[2] = 0L;
      longArray5[3] = 933L;
      longArray5[4] = 3209L;
      longArray5[5] = 3209L;
      longArray5[6] = 2147483647L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-849L);
      longArray6[1] = 343L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = (-1607L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,444 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = 12.0;
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-390.5077);
      doubleArray0[2] = 1231.452112264245;
      MathArrays.scaleInPlace((-1152.57341), doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1152.57341);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-390.5077);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.9699272335463627E-8;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = (-2251);
      intArray0[2] = (-1981);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 134217729;
      intArray0[6] = 895;
      intArray0[7] = 0;
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2&np3|ckL^Q|+7X^";
      stringArray0[1] = "o5\"";
      stringArray0[2] = "]_)S+D<XW";
      stringArray0[3] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2&np3|ckL^Q|+7X^";
      stringArray0[1] = "o5\"";
      stringArray0[2] = "]_)S+D<XW";
      stringArray0[3] = "INCREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-864.6770471881);
      doubleArray0[2] = 1079.82535;
      doubleArray0[3] = 1203.0982792629566;
      doubleArray0[4] = (-1830.3988963135407);
      doubleArray0[5] = (-1973.2);
      doubleArray0[6] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1096);
      intArray0[1] = (-5495);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-394);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination(-0.0, (-2422.5478666615), 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1395.569637545);
      doubleArray0[1] = 2768.399;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = -0.0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9611647.636438482, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 11;
      int int1 = 297;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 11, 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1285.76244958;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4580.2;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1423.548749799631;
      doubleArray0[5] = (-1537.1485565476);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1771;
      intArray0[1] = (-2721);
      intArray0[2] = (-649);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-649), 1771);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 799.6;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 712.19027598);
      MathArrays.normalizeArray(doubleArray0, 712.19027598);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 186;
      intArray0[0] = 186;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distanceInf(intArray1, intArray1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Double, String>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 279.732437;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-675.41);
      doubleArray0[4] = (-984.69385);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 2208.0;
      doubleArray0[7] = 158.22174803278;
      doubleArray0[8] = 1264.006895925;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1009L);
      longArray1[1] = 2382L;
      longArray1[2] = 0L;
      longArray1[3] = (-2152L);
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-2152L);
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 2382L;
      longArray2[4] = (-2152L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,009 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 2398;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 2398);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-175.46098634443);
      doubleArray0[4] = 936.33867236356;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathArrays.linearCombination((-1589.30130790084), (-1589.30130790084), (-1.0), (-1052.77083), 1.304E19, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2238;
      intArray0[1] = 0;
      intArray0[2] = (-1493);
      intArray0[3] = 159;
      intArray0[4] = (-1384);
      intArray0[5] = 134217729;
      intArray0[6] = 559;
      intArray0[7] = 3839;
      intArray0[8] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2238, 0, (-1493), 159, (-1384), 134217729, 559, 3839, (-1)}, intArray1);
  }
}
