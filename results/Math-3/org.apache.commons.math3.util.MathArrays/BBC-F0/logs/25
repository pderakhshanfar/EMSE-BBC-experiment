* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.math3.util.MathArrays
* Starting Client-0
* Connecting to master process on port 12815
* Analyzing classpath: 
  - subjects/buggy-versions/Math-3/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.util.MathArrays
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2071
* Using seed 265869762
* Starting evolution
* Initial Number of Goals in DynaMOSA = 814 / 2071
* Search finished after 304s and 96 generations, 60544 statements, best individual has fitness: 168.0
* Minimizing test suite
[MASTER] 08:16:13.317 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 413
* Number of covered goals: 397
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 255
* Number of covered goals: 247
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 63
* Number of covered goals: 63
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 982
* Number of covered goals: 931
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 71%
* Total number of goals: 86
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 97%
* Total number of goals: 255
* Number of covered goals: 247
* Generated 174 tests with total length 3179
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:16:59.392 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6925166666666667% of time used, but only 26/174 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 08:17:43.998 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_170_1605601061638/org/apache/commons/math3/util/MathArrays_170_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_170_1605601061638/org/apache/commons/math3/util/MathArrays_170_tmp__ESTest_scaffolding.java]]
[MASTER] 08:17:43.998 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-3/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 08:17:43.998 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 08:17:44.003 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.apache.commons.math3.Field<java.lang.String> cannot be converted to org.apache.commons.math3.Field<org.apache.commons.math3.FieldElement<org.apache.commons.math3.FieldElement>>: 61
[MASTER] 08:17:44.009 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_170_1605601061638/org/apache/commons/math3/util/MathArrays_170_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 08:17:44.022 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 08:17:44.034 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_170_1605601061638/org/apache/commons/math3/util/MathArrays_170_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 08:17:43 GMT 2020
4:  */
5: 
6: package org.apache.commons.math3.util;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import org.apache.commons.math3.Field;
13: import org.apache.commons.math3.FieldElement;
14: import org.apache.commons.math3.util.MathArrays;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class MathArrays_170_tmp__ESTest extends MathArrays_170_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Class<FieldElement> class0 = FieldElement.class;
26:       Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
27:       doReturn(class0).when(field0).getRuntimeClass();
28:       double[] doubleArray0 = new double[5];
29:       doubleArray0[0] = (double) 2131214832;
30:       doubleArray0[1] = (double) 2131214832;
31:       doubleArray0[2] = (double) 2131214832;
32:       doubleArray0[3] = (double) 2131214832;
33:       doubleArray0[4] = (double) 2131214832;
34:       boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
35:       assertTrue(boolean0);
36:       assertEquals(5, doubleArray0.length);
37:       assertArrayEquals(new double[] {2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9}, doubleArray0, 0.01);
38:       
39:       int[] intArray0 = new int[5];
40:       intArray0[0] = 2131214832;
41:       intArray0[1] = 2131214832;
42:       intArray0[2] = 2131214832;
43:       intArray0[3] = (-1);
44:       intArray0[4] = 4;
45:       int int0 = MathArrays.distance1(intArray0, intArray0);
46:       assertEquals(0, int0);
47:       assertEquals(5, intArray0.length);
48:       assertArrayEquals(new int[] {2131214832, 2131214832, 2131214832, (-1), 4}, intArray0);
49:       
50:       double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
51:       assertFalse(doubleArray1.equals((Object)doubleArray0));
52:       assertEquals(9, doubleArray1.length);
53:       assertEquals(5, doubleArray0.length);
54:       assertNotNull(doubleArray1);
55:       assertNotSame(doubleArray1, doubleArray0);
56:       assertNotSame(doubleArray0, doubleArray1);
57:       assertArrayEquals(new double[] {4.542076660136788E18, 9.0841533202735759E18, 1.3626229980410364E19, 1.8168306640547152E19, 2.271038330068394E19, 1.8168306640547152E19, 1.3626229980410364E19, 9.0841533202735759E18, 4.542076660136788E18}, doubleArray1, 0.01);
58:       assertArrayEquals(new double[] {2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9}, doubleArray0, 0.01);
59:       
60:       // Undeclared exception!
61:       MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, 2131214832);
62:   }
63: }
RegularFileObject[/tmp/EvoSuite_170_1605601061638/org/apache/commons/math3/util/MathArrays_170_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 08:17:43 GMT 2020
5:  */
6: 
7: package org.apache.commons.math3.util;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class MathArrays_170_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.util.MathArrays"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MathArrays_170_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.math3.util.Precision",
84:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
85:       "org.apache.commons.math3.util.MathArrays",
86:       "org.apache.commons.math3.util.MathArrays$1",
87:       "org.apache.commons.math3.util.MathArrays$2",
88:       "org.apache.commons.math3.util.MathArrays$3",
89:       "org.apache.commons.math3.exception.util.ArgUtils",
90:       "org.apache.commons.math3.exception.MathArithmeticException",
91:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
92:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
93:       "org.apache.commons.math3.exception.NotPositiveException",
94:       "org.apache.commons.math3.exception.MathInternalError",
95:       "org.apache.commons.math3.exception.MathIllegalStateException",
96:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
97:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
98:       "org.apache.commons.math3.util.MathUtils",
99:       "org.apache.commons.math3.exception.MathIllegalNumberException",
100:       "org.apache.commons.math3.util.Pair",
101:       "org.apache.commons.math3.exception.util.LocalizedFormats",
102:       "org.apache.commons.math3.util.FastMath",
103:       "org.apache.commons.math3.exception.DimensionMismatchException",
104:       "org.apache.commons.math3.FieldElement",
105:       "org.apache.commons.math3.exception.util.Localizable",
106:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
107:       "org.apache.commons.math3.exception.util.ExceptionContext",
108:       "org.apache.commons.math3.exception.NullArgumentException",
109:       "org.apache.commons.math3.exception.NoDataException",
110:       "org.apache.commons.math3.Field",
111:       "org.apache.commons.math3.exception.NotFiniteNumberException"
112:     );
113:   } 
114:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
115:     mock(Class.forName("org.apache.commons.math3.Field", false, MathArrays_170_tmp__ESTest_scaffolding.class.getClassLoader()));
116:   }
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MathArrays_170_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.math3.util.MathArrays",
123:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
124:       "org.apache.commons.math3.util.MathArrays$1",
125:       "org.apache.commons.math3.util.MathArrays$2",
126:       "org.apache.commons.math3.util.MathArrays$3",
127:       "org.apache.commons.math3.exception.util.LocalizedFormats",
128:       "org.apache.commons.math3.util.FastMath",
129:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
130:       "org.apache.commons.math3.exception.MathIllegalNumberException",
131:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
132:       "org.apache.commons.math3.exception.util.ExceptionContext",
133:       "org.apache.commons.math3.exception.util.ArgUtils",
134:       "org.apache.commons.math3.util.MathUtils",
135:       "org.apache.commons.math3.exception.NullArgumentException",
136:       "org.apache.commons.math3.util.Precision",
137:       "org.apache.commons.math3.exception.DimensionMismatchException",
138:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
139:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
140:       "org.apache.commons.math3.exception.NotPositiveException",
141:       "org.apache.commons.math3.util.Pair",
142:       "org.apache.commons.math3.exception.MathArithmeticException",
143:       "org.apache.commons.math3.exception.NoDataException"
144:     );
145:   }
146: }

[MASTER] 08:17:44.036 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Class<FieldElement> class0 = FieldElement.class;
Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
doReturn(class0).when(field0).getRuntimeClass();
double[] doubleArray0 = new double[5];
doubleArray0[0] = (double) 2131214832;
doubleArray0[1] = (double) 2131214832;
doubleArray0[2] = (double) 2131214832;
doubleArray0[3] = (double) 2131214832;
doubleArray0[4] = (double) 2131214832;
boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
assertTrue(boolean0);
assertEquals(5, doubleArray0.length);
assertArrayEquals(new double[] {2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9}, doubleArray0, 0.01);

int[] intArray0 = new int[5];
intArray0[0] = 2131214832;
intArray0[1] = 2131214832;
intArray0[2] = 2131214832;
intArray0[3] = (-1);
intArray0[4] = 4;
int int0 = MathArrays.distance1(intArray0, intArray0);
assertEquals(0, int0);
assertEquals(5, intArray0.length);
assertArrayEquals(new int[] {2131214832, 2131214832, 2131214832, (-1), 4}, intArray0);

double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
assertFalse(doubleArray1.equals((Object)doubleArray0));
assertEquals(9, doubleArray1.length);
assertEquals(5, doubleArray0.length);
assertNotNull(doubleArray1);
assertNotSame(doubleArray1, doubleArray0);
assertNotSame(doubleArray0, doubleArray1);
assertArrayEquals(new double[] {4.542076660136788E18, 9.0841533202735759E18, 1.3626229980410364E19, 1.8168306640547152E19, 2.271038330068394E19, 1.8168306640547152E19, 1.3626229980410364E19, 9.0841533202735759E18, 4.542076660136788E18}, doubleArray1, 0.01);
assertArrayEquals(new double[] {2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9, 2.131214832E9}, doubleArray0, 0.01);

MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, 2131214832);

[MASTER] 08:18:04.480 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'MathArrays_ESTest' to results/Math-3/org.apache.commons.math3.util.MathArrays/BBC-F0/tests/25
* Done!

* Computation finished
