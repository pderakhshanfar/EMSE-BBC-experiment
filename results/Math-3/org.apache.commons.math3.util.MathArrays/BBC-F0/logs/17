* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.math3.util.MathArrays
* Starting Client-0
* Connecting to master process on port 11721
* Analyzing classpath: 
  - subjects/buggy-versions/Math-3/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.util.MathArrays
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2071
* Using seed 4018751541
* Starting evolution
* Initial Number of Goals in DynaMOSA = 814 / 2071
* Search finished after 303s and 281 generations, 157936 statements, best individual has fitness: 165.0
* Minimizing test suite
[MASTER] 08:11:44.470 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 413
* Number of covered goals: 404
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 98%
* Total number of goals: 255
* Number of covered goals: 250
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 982
* Number of covered goals: 927
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 86
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 98%
* Total number of goals: 255
* Number of covered goals: 250
* Generated 187 tests with total length 3149
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:12:33.669 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6966166666666667% of time used, but only 17/187 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 08:12:50.530 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_5_1605600769911/org/apache/commons/math3/util/MathArrays_5_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_5_1605600769911/org/apache/commons/math3/util/MathArrays_5_tmp__ESTest_scaffolding.java]]
[MASTER] 08:12:50.550 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-3/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 08:12:50.551 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 08:12:50.556 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable Double
  location: class org.apache.commons.math3.util.MathArrays_5_tmp__ESTest: 28
[MASTER] 08:12:50.571 [logback-2] ERROR JUnitAnalyzer - Diagnostic: illegal start of type: 28
[MASTER] 08:12:50.573 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_5_1605600769911/org/apache/commons/math3/util/MathArrays_5_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 08:12:49 GMT 2020
4:  */
5: 
6: package org.apache.commons.math3.util;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.apache.commons.math3.util.MathArrays;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class MathArrays_5_tmp__ESTest extends MathArrays_5_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       double[] doubleArray0 = new double[3];
22:       doubleArray0[0] = 1.304E19;
23:       doubleArray0[1] = -0.0;
24:       doubleArray0[2] = 1097.6;
25:       MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
26:       MathArrays.safeNorm(doubleArray0);
27:       Double[] doubleArray1 = new Double[2];
28:       doubleArray1[0] = (Double) -0.0;
29:       doubleArray1[1] = (Double) 1097.6;
30:       MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
31:       MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
32:       double[] doubleArray2 = new double[4];
33:       doubleArray2[0] = -0.0;
34:       doubleArray2[1] = 1.304E19;
35:       doubleArray2[2] = (-3400.5562661316);
36:       doubleArray2[3] = (-4524.837197);
37:       MathArrays.convolve(doubleArray2, doubleArray0);
38:       double[] doubleArray3 = new double[4];
39:       doubleArray3[0] = (-4524.837197);
40:       doubleArray3[1] = (double) doubleArray1[0];
41:       doubleArray3[2] = -0.0;
42:       doubleArray3[3] = 1901.99448222107;
43:       MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
44:       try { 
45:         MathArrays.checkPositive(doubleArray3);
46:         fail("Expecting exception: IllegalArgumentException");
47:       
48:       } catch(IllegalArgumentException e) {
49:          //
50:          // -4,524.837 is smaller than, or equal to, the minimum (0)
51:          //
52:          verifyException("org.apache.commons.math3.util.MathArrays", e);
53:       }
54:   }
55: }
RegularFileObject[/tmp/EvoSuite_5_1605600769911/org/apache/commons/math3/util/MathArrays_5_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 08:12:49 GMT 2020
5:  */
6: 
7: package org.apache.commons.math3.util;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class MathArrays_5_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.util.MathArrays"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MathArrays_5_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.math3.util.Precision",
82:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
83:       "org.apache.commons.math3.util.MathArrays",
84:       "org.apache.commons.math3.util.MathArrays$1",
85:       "org.apache.commons.math3.util.MathArrays$2",
86:       "org.apache.commons.math3.util.MathArrays$3",
87:       "org.apache.commons.math3.exception.util.ArgUtils",
88:       "org.apache.commons.math3.exception.MathArithmeticException",
89:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
90:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
91:       "org.apache.commons.math3.exception.NotPositiveException",
92:       "org.apache.commons.math3.exception.MathInternalError",
93:       "org.apache.commons.math3.exception.MathIllegalStateException",
94:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
95:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
96:       "org.apache.commons.math3.util.MathUtils",
97:       "org.apache.commons.math3.exception.MathIllegalNumberException",
98:       "org.apache.commons.math3.util.Pair",
99:       "org.apache.commons.math3.exception.util.LocalizedFormats",
100:       "org.apache.commons.math3.util.FastMath",
101:       "org.apache.commons.math3.exception.DimensionMismatchException",
102:       "org.apache.commons.math3.FieldElement",
103:       "org.apache.commons.math3.exception.util.Localizable",
104:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
105:       "org.apache.commons.math3.exception.util.ExceptionContext",
106:       "org.apache.commons.math3.exception.NullArgumentException",
107:       "org.apache.commons.math3.exception.NoDataException",
108:       "org.apache.commons.math3.Field",
109:       "org.apache.commons.math3.exception.NotFiniteNumberException"
110:     );
111:   } 
112: 
113:   private static void resetClasses() {
114:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MathArrays_5_tmp__ESTest_scaffolding.class.getClassLoader()); 
115: 
116:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
117:       "org.apache.commons.math3.util.MathArrays",
118:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
119:       "org.apache.commons.math3.util.MathArrays$1",
120:       "org.apache.commons.math3.util.MathArrays$2",
121:       "org.apache.commons.math3.util.MathArrays$3",
122:       "org.apache.commons.math3.exception.util.LocalizedFormats",
123:       "org.apache.commons.math3.util.Precision",
124:       "org.apache.commons.math3.util.FastMath",
125:       "org.apache.commons.math3.util.MathUtils",
126:       "org.apache.commons.math3.util.Pair",
127:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
128:       "org.apache.commons.math3.exception.MathIllegalNumberException",
129:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
130:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
131:       "org.apache.commons.math3.exception.util.ExceptionContext",
132:       "org.apache.commons.math3.exception.util.ArgUtils",
133:       "org.apache.commons.math3.exception.DimensionMismatchException",
134:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
135:       "org.apache.commons.math3.exception.NotPositiveException",
136:       "org.apache.commons.math3.exception.NullArgumentException",
137:       "org.apache.commons.math3.exception.MathArithmeticException",
138:       "org.apache.commons.math3.exception.NoDataException"
139:     );
140:   }
141: }

[MASTER] 08:12:50.583 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
double[] doubleArray0 = new double[3];
doubleArray0[0] = 1.304E19;
doubleArray0[1] = -0.0;
doubleArray0[2] = 1097.6;
MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
MathArrays.safeNorm(doubleArray0);
Double[] doubleArray1 = new Double[2];
doubleArray1[0] = (Double) -0.0;
doubleArray1[1] = (Double) 1097.6;
MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
double[] doubleArray2 = new double[4];
doubleArray2[0] = -0.0;
doubleArray2[1] = 1.304E19;
doubleArray2[2] = (-3400.5562661316);
doubleArray2[3] = (-4524.837197);
MathArrays.convolve(doubleArray2, doubleArray0);
double[] doubleArray3 = new double[4];
doubleArray3[0] = (-4524.837197);
doubleArray3[1] = (double) doubleArray1[0];
doubleArray3[2] = -0.0;
doubleArray3[3] = 1901.99448222107;
MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
MathArrays.checkPositive(doubleArray3);

[MASTER] 08:13:40.532 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'MathArrays_ESTest' to results/Math-3/org.apache.commons.math3.util.MathArrays/BBC-F0/tests/17
* Done!

* Computation finished
