/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:08:20 GMT 2020
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 899.962;
      doubleArray0[1] = 1.2599210498948732;
      doubleArray0[2] = (-3528.90338256176);
      doubleArray0[3] = 1234.438176148061;
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = 0.7853981633974483;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = (-2962.51454312764);
      doubleArray0[8] = 962.399725418;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2335);
      assertArrayEquals(new double[] {899.962, 1.2599210498948732, (-3528.90338256176), 1234.438176148061, (-1.7976931348623157E308), 0.7853981633974483, 1.34217729E8, (-2962.51454312764), 962.399725418}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2335, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(3308.23208786188, doubleArray1);
      assertArrayEquals(new double[] {899.962, 1.2599210498948732, (-3528.90338256176), 1234.438176148061, (-1.7976931348623157E308), 0.7853981633974483, 1.34217729E8, (-2962.51454312764), 962.399725418}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2335, doubleArray1.length);
      assertEquals(2335, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 1.34219524727E8;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 235.0096899;
      doubleArray0[4] = (-2193.1649);
      doubleArray0[5] = 1.801439883018622E16;
      doubleArray0[6] = (-1359.58034);
      doubleArray0[7] = 1414.01;
      doubleArray0[8] = 2539.713432;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3120259278341677E19, double0, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, 1.34219524727E8, 1.304E19, 235.0096899, (-2193.1649), 1.801439883018622E16, (-1359.58034), 1414.01, 2539.713432}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (134,219,524.727 < 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Double, Object>> field0 = (Field<Pair<Double, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2336));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(184);
      assertEquals(184, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1184));
      assertEquals((-1184), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) 184;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {184.0, 184.0, 184.0, 184.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integerArray0[2]).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (int) integerArray0[0]);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3.4028235E38F;
      doubleArray0[1] = (double) 3099.0005F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-1504.457548);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) Float.POSITIVE_INFINITY;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3099.00048828125, 0.0, (-1504.457548), 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {3.4028234663852886E38, 3099.00048828125, 0.0, (-1504.457548), 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(184);
      assertEquals(184, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1184));
      assertEquals((-1184), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[1];
      doubleArray0[1] = (double) 184;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {184.0, 184.0, 184.0, 184.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, (int) integerArray0[0]);
      assertEquals(184, objectArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 864.601364716411;
      doubleArray0[1] = 0.9285714285714286;
      doubleArray0[2] = 293.3100616721599;
      doubleArray0[3] = (-3391.32);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1.801439879060574E16;
      doubleArray0[6] = 1.375;
      doubleArray0[7] = 757.28144628;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {864.601364716411, 0.9285714285714286, 293.3100616721599, (-3391.32), 3.834E-20, 1.801439879060574E16, 1.375, 757.28144628}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {747535.5198694804, 0.8622448979591837, 86030.79227812626, 1.1501051342400001E7, 1.4699556E-39, 3.2451856378697754E32, 1.890625, 573475.1888799284}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.2451856378697754E32, double0, 0.01);
      assertArrayEquals(new double[] {864.601364716411, 0.9285714285714286, 293.3100616721599, (-3391.32), 3.834E-20, 1.801439879060574E16, 1.375, 757.28144628}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {747535.5198694804, 0.8622448979591837, 86030.79227812626, 1.1501051342400001E7, 1.4699556E-39, 3.2451856378697754E32, 1.890625, 573475.1888799284}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 40.19140625;
      doubleArray0[1] = 9.755392680573412E-9;
      doubleArray0[2] = 1.3421120592516217E8;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1872.8518732206662);
      doubleArray0[5] = 0.041666666666666664;
      doubleArray0[6] = 340.16499;
      doubleArray0[7] = (-1215.461);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-288.8F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-288.8F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 2147483516;
      intArray0[2] = 199;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 199;
      intArray1[1] = (-175);
      intArray1[2] = 199;
      intArray1[3] = 2147483516;
      intArray1[4] = 199;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2013266161), int0);
      assertArrayEquals(new int[] {134217729, 2147483516, 199}, intArray0);
      assertArrayEquals(new int[] {199, (-175), 199, 2147483516, 199}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 987);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[7];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5262.052);
      doubleArray0[1] = 2.6080000000000004E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-0.010714690733195933);
      doubleArray0[4] = 2.147483646E9;
      doubleArray0[5] = (-3864.413);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-5262.052), 2.6080000000000004E19, 1.304E19, (-0.010714690733195933), 2.147483646E9, (-3864.413)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10524.104), 5.216000000000001E19, 2.608E19, (-0.021429381466391867), 4.294967292E9, (-7728.826)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.9158326426597265E19, double0, 0.01);
      assertArrayEquals(new double[] {(-5262.052), 2.6080000000000004E19, 1.304E19, (-0.010714690733195933), 2.147483646E9, (-3864.413)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-89.787);
      doubleArray0[3] = 5.281121611792326E7;
      doubleArray0[4] = 0.99;
      doubleArray0[5] = (-469.005870577);
      doubleArray0[6] = (-386.8977799200261);
      doubleArray0[7] = 5.041914939880371;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, (-89.787), 5.281121611792326E7, 0.99, (-469.005870577), (-386.8977799200261), 5.041914939880371}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[11][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-836.9319), 0.0, 0.0, 0.0, (-11133.586684331858));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1824L;
      longArray0[1] = 3427L;
      longArray0[2] = 2807L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1824L, 3427L, 2807L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2807L;
      doubleArray0[2] = (double) 3427L;
      doubleArray0[3] = (double) 3427L;
      doubleArray0[4] = (double) 3427L;
      doubleArray0[5] = (double) 1824L;
      doubleArray0[6] = (double) 1824L;
      doubleArray0[7] = (double) 3427L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2807L);
      assertArrayEquals(new double[] {Double.NaN, 390.7776124584635, 477.09115706988047, 477.09115706988047, 477.09115706988047, 253.92887963100728, 253.92887963100728, 477.09115706988047}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2807.0, 3427.0, 3427.0, 3427.0, 1824.0, 1824.0, 3427.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2572;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2572;
      floatArray0[7] = (float) 2572;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2572.0F, 0.0F, 2572.0F, 0.0F, 2572.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1562.0F;
      floatArray0[1] = (-335.0F);
      floatArray0[2] = 0.5F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1222.9937F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2227.0F);
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1562.0F;
      floatArray1[3] = 940.9868F;
      floatArray1[4] = (-2227.0F);
      floatArray1[5] = (-335.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {1562.0F, (-335.0F), 0.5F, 0.0F, (-1222.9937F), 0.0F, (-2227.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1562.0F, 940.9868F, (-2227.0F), (-335.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 143);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2572);
      assertEquals(2572.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1590.74365836);
      assertEquals(1590.74365836, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      Double double2 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = doubleArray0[1];
      Double double3 = new Double(2950.2041445022996);
      assertEquals(2950.2041445022996, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[6] = double3;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = (double) doubleArray0[6];
      doubleArray1[2] = (double) doubleArray0[5];
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1590.74365836, 2950.2041445022996, 1590.74365836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 482.3906725968;
      doubleArray0[1] = 739.2920558151;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1836.303672255;
      doubleArray0[4] = (-899.962);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 739.2920558151;
      doubleArray1[1] = 739.2920558151;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {482.3906725968, 739.2920558151, 3.834E-20, 1836.303672255, (-899.962)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {739.2920558151, 739.2920558151}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(1.44888888888888883E18, (-336.0), 739.2920558151, 0.003, (-2551.7471), 1836.303672255, (-899.962), 3.834E-20);
      assertEquals((-4.8682666666667134E20), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2227.3743023975358, double1, 0.01);
      assertArrayEquals(new double[] {482.3906725968, 739.2920558151, 3.834E-20, 1836.303672255, (-899.962)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-101);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-101)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-2551.7471);
      doubleArray2[2] = (-899.962);
      doubleArray2[3] = 0.003;
      doubleArray2[4] = (-336.0);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals((-1584093.6185682027), double2, 0.01);
      assertArrayEquals(new double[] {482.3906725968, 739.2920558151, 3.834E-20, 1836.303672255, (-899.962)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2551.7471), (-899.962), 0.003, (-336.0)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-1030);
      intArray0[2] = 14;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 14;
      intArray1[1] = (-1030);
      intArray1[2] = 16;
      intArray1[3] = (-1030);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(12, int0);
      assertArrayEquals(new int[] {2, (-1030), 14}, intArray0);
      assertArrayEquals(new int[] {14, (-1030), 16, (-1030)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1477);
      intArray0[1] = (-1786);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1477);
      intArray1[1] = (-1477);
      intArray1[2] = (-1786);
      intArray1[3] = (-1786);
      intArray1[4] = (-1477);
      intArray1[5] = (-1477);
      intArray1[3] = (-1786);
      intArray1[7] = (-1786);
      intArray1[8] = (-1786);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(309, int0);
      assertArrayEquals(new int[] {(-1477), (-1786)}, intArray0);
      assertArrayEquals(new int[] {(-1477), (-1477), (-1786), (-1786), (-1477), (-1477), 0, (-1786), (-1786)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1786);
      doubleArray0[1] = (double) (-1786);
      doubleArray0[2] = (double) (-1477);
      doubleArray0[3] = (double) (-1786);
      doubleArray0[4] = (double) (-1786);
      doubleArray0[5] = (double) (-1786);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(3437.76178, (-1.0), 0.16666666666666666, (-3261.2422691), (-1.0), 489.0, 2485.16315058512, 2485.16315058512);
      assertEquals(6171565.582867977, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3404.7377266662;
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 3733.9);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 960.3389F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-952.121F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1811.8706F;
      floatArray0[6] = 3.4028235E38F;
      floatArray0[7] = 2045.2373F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2045.2373F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-952.121F);
      floatArray1[6] = 0.5F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 960.3389F, 0.0F, (-952.121F), (-1.0F), 1811.8706F, 3.4028235E38F, 2045.2373F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2045.2373F, 3.4028235E38F, 0.0F, 0.0F, (-952.121F), 0.5F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(5281.692312317, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      Double[] doubleArray2 = new Double[8];
      Double double0 = new Double(183.573670935);
      assertEquals(183.573670935, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double(183.573670935);
      assertEquals(183.573670935, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double((-390.191755));
      assertEquals((-390.191755), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray2[3] = double3;
      doubleArray2[4] = double2;
      Double double4 = Double.valueOf(3282.02489);
      assertEquals(3282.02489, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray2[5] = double4;
      Double double5 = new Double(2669.389948829396);
      assertEquals(2669.389948829396, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray2[6] = double5;
      Double double6 = new Double((double) doubleArray2[0]);
      assertEquals(183.573670935, (double)double6, 0.01);
      assertEquals(8, doubleArray2.length);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      
      doubleArray2[7] = double6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, doubleArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1153.0267F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = 1204.6775F;
      floatArray0[3] = 0.5F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1153.0267F), -0.0F, 1204.6775F, 0.5F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 3404.7377266662;
      doubleArray3[1] = 3733.9;
      doubleArray3[2] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3404.7377266662, 3733.9, Double.NaN}, doubleArray3, 0.01);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1293L;
      longArray2[1] = 663L;
      longArray2[2] = 0L;
      longArray2[3] = 785L;
      longArray2[4] = (-1071L);
      longArray2[5] = 1052L;
      longArray2[6] = (-2805L);
      longArray2[7] = (-1546L);
      longArray2[8] = (-2145318844L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,071 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(1536);
      assertEquals(1536.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1590.74365836);
      assertEquals(1590.74365836, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(1590.74365836, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1536);
      assertEquals(1536.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((double) doubleArray0[3], (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2572;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2572;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 2572;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2572.0F, 0.0F, 2572.0F, 0.0F, 2572.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2572);
      assertEquals(2572.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1590.74365836);
      assertEquals(1590.74365836, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(1590.74365836, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2572);
      assertEquals(2572.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1057.0));
      assertEquals((-1057.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      doubleArray0[6] = double6;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = (double) doubleArray0[6];
      doubleArray1[2] = (double) doubleArray0[5];
      doubleArray1[3] = (double) doubleArray0[4];
      doubleArray1[4] = (double) doubleArray0[4];
      doubleArray1[5] = (double) doubleArray0[2];
      doubleArray1[6] = (double) 2572;
      doubleArray1[7] = (double) 2572;
      double double7 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.258594253069816E19, double7, 0.01);
      assertArrayEquals(new double[] {2572.0, 1.304E19, (-1057.0), 1.304E19, 1.304E19, 1590.74365836, 2572.0, 2572.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      double double8 = MathArrays.linearCombination(3294198.0, (double) doubleArray0[6], 1.304E19, 0.3936265707015991, (-1.0), 0.04168701738764507, (-902.7), 0.0);
      assertEquals(4.295634705289048E25, double8, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double8, double7, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (double) doubleArray0[2];
      doubleArray2[3] = (double) doubleArray0[2];
      doubleArray2[4] = 0.04168701738764507;
      doubleArray2[5] = (-902.7);
      doubleArray2[6] = (-1.0);
      double double9 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertEquals(1.304E19, double9, 0.01);
      assertArrayEquals(new double[] {2572.0, 1.304E19, (-1057.0), 1.304E19, 1.304E19, 1590.74365836, 2572.0, 2572.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1590.74365836, (-1.0), 1590.74365836, 1590.74365836, 0.04168701738764507, (-902.7), (-1.0)}, doubleArray2, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[2][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = 0.0F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 935.7334664489543;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 15.464144944794121;
      long[] longArray0 = new long[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 15.464144944794121}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 15.464144944794121}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(15.464144944794121, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 15.464144944794121}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 1852628642;
      // Undeclared exception!
      MathArrays.buildArray(field0, 1852628642, 1852628642);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 935.7334664489543;
      double[] doubleArray1 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 935.7334664489543}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.111;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.111);
      assertArrayEquals(new double[] {3294198.0, 0.111, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.11099999625978779, 3.740212210934633E-9, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(3294198.0, double0, 0.01);
      assertArrayEquals(new double[] {3294198.0, 0.111, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.11099999625978779, 3.740212210934633E-9, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(365655.96567900083, double1, 0.01);
      assertArrayEquals(new double[] {3294198.0, 0.111, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.11099999625978779, 3.740212210934633E-9, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3294198.0, 0.111, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.11099999625978779, 3.740212210934633E-9, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3294198.0, 0.111, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.11099999625978779, 3.740212210934633E-9, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[4];
      longArray1[0] = (-901L);
      longArray1[1] = (-5034868814120038111L);
      longArray1[2] = (-163L);
      longArray1[3] = 2543L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-163L);
      longArray2[1] = (-901L);
      longArray2[2] = (-163L);
      longArray2[3] = 4294967295L;
      longArray2[4] = (-901L);
      longArray2[5] = 2543L;
      longArray2[6] = (-5034868814120038111L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-5034868814120038111L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-163L);
      longArray4[1] = 2543L;
      longArray4[2] = (-163L);
      longArray4[3] = (-901L);
      longArray4[4] = 4294967295L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2091.948495317392;
      doubleArray0[1] = 1572.35265400067;
      doubleArray0[2] = 0.7675435543060303;
      doubleArray0[3] = (-2672.8588367844386);
      doubleArray0[4] = 1.0851740463204E13;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2091.948495317392, 1572.35265400067, 0.7675435543060303, (-2672.8588367844386), 1.0851740463204E13}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1202.187F);
      floatArray0[1] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1202.187F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1202.187F);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = 0.7675435543060303;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 2091.948495317392;
      doubleArray1[5] = 2091.948495317392;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 0.07692307692307693;
      doubleArray2[3] = 0.7675435543060303;
      doubleArray2[4] = 6.52E18;
      doubleArray2[5] = 1.25;
      doubleArray2[6] = 0.7675435543060303;
      doubleArray2[7] = 1572.35265400067;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2572);
      assertEquals(2572.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1590.74365836);
      assertEquals(1590.74365836, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(1590.74365836, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2572);
      assertEquals(2572.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1057.0));
      assertEquals((-1057.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2950.2041445022996);
      assertEquals(2950.2041445022996, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      doubleArray0[6] = double6;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = (double) doubleArray0[6];
      doubleArray1[2] = (double) doubleArray0[5];
      doubleArray1[3] = (double) doubleArray0[4];
      doubleArray1[4] = (double) doubleArray0[4];
      doubleArray1[5] = (double) doubleArray0[2];
      doubleArray1[6] = (double) 2572;
      doubleArray1[7] = (double) 2572;
      doubleArray1[8] = (-453.440263653);
      double double7 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.8441344853345161E19, double7, 0.01);
      assertArrayEquals(new double[] {2572.0, 2950.2041445022996, (-1057.0), 1.304E19, 1.304E19, 1590.74365836, 2572.0, 2572.0, (-453.440263653)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      double double8 = MathArrays.linearCombination(3294198.0, (double) doubleArray0[6], 2950.2041445022996, 0.3936265707015991, (-1.0), 0.04168701738764507, (-902.7), (-453.440263653));
      assertEquals(9.71896707417424E9, double8, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double8, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0.0F;
      doubleArray0[5] = doubleArray1;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-2749.10414489128), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2783.98, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1174.10633478515;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 1174.10633478515;
      doubleArray2[1] = (Double) 1174.10633478515;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      intArray0[2] = (-1039);
      intArray0[3] = (-1039);
      intArray0[5] = (-1039);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1039);
      intArray1[2] = (-1039);
      intArray1[3] = (-1039);
      intArray1[5] = (-1039);
      intArray1[6] = (-1039);
      intArray1[7] = (-1039);
      intArray1[8] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(1039.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), 0, (-1039)}, intArray0);
      assertArrayEquals(new int[] {(-1039), 0, (-1039), (-1039), 0, (-1039), (-1039), (-1039), (-1039)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double1 = MathArrays.linearCombination(Double.NEGATIVE_INFINITY, 0.0, (-1785.32), (-2590.3662569));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(1378525.6853826188, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1174.10633478515;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1174.10633478515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 1174.10633478515;
      doubleArray2[1] = (Double) 1174.10633478515;
      Double double0 = new Double(1174.10633478515);
      assertEquals(1174.10633478515, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[2] = double0;
      doubleArray2[3] = (Double) 1174.10633478515;
      doubleArray2[4] = (Double) 1174.10633478515;
      doubleArray2[5] = (Double) 1174.10633478515;
      doubleArray2[6] = (Double) 1174.10633478515;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1174.10633478515;
      doubleArray3[1] = (double) doubleArray2[0];
      doubleArray3[2] = (double) doubleArray2[1];
      doubleArray3[3] = (double) doubleArray2[2];
      doubleArray3[4] = (double) doubleArray2[0];
      doubleArray3[5] = 4118.59689;
      doubleArray3[6] = (double) doubleArray2[3];
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-9.007199254740992E15);
      doubleArray1[1] = (-610.46403364851);
      doubleArray1[2] = 359.8227655;
      doubleArray1[3] = 935.7334664489543;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 852;
      intArray0[1] = 611;
      intArray0[2] = (-1675);
      intArray0[3] = (-470);
      intArray0[4] = 483;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {852, 611, (-1675), (-470), 483}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2567;
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1039);
      intArray1[1] = (-1039);
      intArray1[2] = 2567;
      intArray1[3] = (-1039);
      intArray1[4] = 2567;
      intArray1[5] = (-1806);
      intArray1[6] = (-1039);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Double, Object> pair0 = new Pair<Double, Object>((Double) null, object0);
      assertNotNull(pair0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 161;
      intArray0[1] = 161;
      intArray0[2] = 161;
      intArray0[3] = 161;
      intArray0[4] = 161;
      int[] intArray1 = new int[13];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 161;
      intArray1[1] = 161;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      Double double0 = new Double(0.16666666666666666);
      assertEquals(0.16666666666666666, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[4];
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 6.283185307179586;
      doubleArray1[2] = (Double) 6.283185307179586;
      doubleArray1[3] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.47841760435743}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(39.47841760435743, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.47841760435743}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      double double2 = MathArrays.linearCombination(0.0, 39.47841760435743, 3.834E-20, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-77), (-77));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2514.6528524678));
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2514.652767650348), (-8.481745226900965E-5), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.42139774436342E14, 1.4913060640784068E7, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.42139774436342E14, 1.4913060640784068E7, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.42139774436342E14, 1.4913060640784068E7, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[19];
      longArray0[0] = 728L;
      int[] intArray0 = new int[9];
      intArray0[0] = 4426;
      intArray0[1] = (-364);
      intArray0[2] = 2;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 444;
      intArray0[5] = 2735;
      intArray0[6] = (-2146136417);
      intArray0[7] = (-226);
      intArray0[8] = 1;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.47841760435743}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(39.47841760435743, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.47841760435743}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-77), (-77));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 728L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {728L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      intArray0[2] = (-1039);
      intArray0[3] = (-1039);
      intArray0[4] = 2223;
      intArray0[5] = (-1039);
      intArray0[6] = (-1039);
      intArray0[7] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), 2223, (-1039), (-1039), (-1039)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double double1 = MathArrays.linearCombination(6.2250743703568405, (-1473.80495175989), 882.4612853924161, (-3005.71));
      assertEquals((-2661597.2555489447), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-2749.10414489128), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2783.98, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 6.283185307179586;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {39.47841760435743, 78.95683520871486, 118.4352528130723, 78.95683520871486, 39.47841760435743}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(10.882796185405306, double0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2142758090, (-1792));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination(0.0, (-1111.06167765), 0.0, (double) 1.0F, 0.0, (double) 1.0F, (double) 1.0F, 1.34217729E8);
      assertEquals(1.34217729E8, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (-383.0);
      doubleArray0[8] = (double) 1.0F;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = 1111.012453003103;
      doubleArray1[4] = (double) 1.0F;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2514.6528524678));
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2514.652767650348), (-8.481745226900965E-5), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) 0.11111095942313305;
      doubleArray2[1] = (Double) 3294198.0;
      doubleArray2[2] = (Double) 0.11111095942313305;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(0.097, (-1.0), Double.NEGATIVE_INFINITY, (-2096.85654145), 0.11111095942313305, 1.304E19);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[2][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(6.283185307179586, (double) 0, 3.834E-20, 6.283185307179586, (-2173.2499778762485), 0.0, (-2173.2499778762485), 0.0);
      assertEquals(2.4089732467726534E-19, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1039);
      intArray1[1] = (-1);
      intArray1[2] = (-1039);
      intArray1[3] = 2835;
      intArray1[4] = (-1039);
      intArray1[5] = (-1039);
      intArray1[6] = (-1039);
      intArray1[7] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(3809.4978671735726, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1039), (-1), (-1039), 2835, (-1039), (-1039), (-1039), (-1039)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double1 = MathArrays.linearCombination(3.4028234663852886E38, 3099.00048828125, 6.52E18, (double) 2835);
      assertEquals(1.0545351583862905E42, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.283185307179586;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.linearCombination((-1962.0), (double) (-1039), 0.0, (double) (-1039));
      assertEquals(2038518.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 20.0;
      doubleArray1[1] = 49.0611;
      doubleArray1[2] = (-1739.655659993347);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 20.0;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = 2038518.0;
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(4.1555586663328066E12, double2, 0.01);
      assertArrayEquals(new double[] {20.0, 49.0611, (-1739.655659993347), 0.0, 20.0, 20.0, 2038518.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-166320.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 453.52;
      doubleArray0[3] = 4543.6003708233;
      doubleArray0[4] = 2104.06975;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.99;
      doubleArray0[7] = 833.7;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-166320.0), Double.NaN, 453.52, 4543.6003708233, 2104.06975, 1.0, 0.99, 833.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1395.52864;
      doubleArray0[1] = (-1755.6585451281344);
      doubleArray0[2] = (-3766.806738);
      doubleArray0[3] = (-1004.4100000000001);
      doubleArray0[4] = (-267.9615);
      doubleArray0[5] = 0.041666666666666664;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1395.52864, (-1755.6585451281344), (-3766.806738), (-1004.4100000000001), (-267.9615), 0.041666666666666664}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1395.52864, (-1755.6585451281344), (-3766.806738), (-1004.4100000000001), (-267.9615), 0.041666666666666664}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3047);
      assertEquals(3047, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3047);
      assertEquals(3047, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals(3047, (int)integer4);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(744);
      assertEquals(744, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("org.apache.commons.math3.util.MathArrays$OrderDirection");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertEquals(3047, (int)integer7);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer4));
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(22);
      assertEquals(22, (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[7];
      Double double0 = new Double(402.344053);
      assertEquals(402.344053, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 3.834E-20;
      doubleArray2[4] = (Double) 3.834E-20;
      doubleArray2[5] = (Double) 0.0;
      Double double1 = new Double(388.732738838533);
      assertEquals(388.732738838533, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[6] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination((-1040.8947019179411), (double) doubleArray2[1], (-902.7), (double) doubleArray2[6]);
      assertEquals((-350909.04334954376), double2, 0.01);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(385.10166639331);
      assertEquals(385.10166639331, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double(2567.0);
      assertEquals(2567.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      Double double2 = new Double(2567.0);
      assertEquals(2567.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.668E-20, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      int int0 = 199;
      double[] doubleArray3 = new double[22];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 199;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 199;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 3.834E-20;
      doubleArray3[6] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 22 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2514.6528524678));
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2514.652767650348), (-8.481745226900965E-5), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = (-0.16624879837036133);
      double double2 = MathArrays.linearCombination((-0.16624879837036133), 0.0, 1558.5454565440389, (-2221.3250733370996));
      assertEquals((-3462036.1005568905), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = (-0.16624879837036133);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-902.7);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-902.7)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -902.7 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1593L);
      doubleArray1[1] = (double) (-1593L);
      doubleArray1[2] = (double) (-1593L);
      doubleArray1[3] = (double) 10L;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1593.0), (-1593.0), (-1593.0), 10.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-136);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-136));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-2514.652767650348);
      Double double1 = Double.valueOf((-2514.652767650348));
      assertEquals((-2514.652767650348), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2192);
      intArray0[1] = 0;
      intArray0[2] = (-4181);
      intArray0[3] = 268;
      intArray0[4] = 134217729;
      intArray0[5] = 11;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double((-0.16666666666666666));
      assertEquals((-0.16666666666666666), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Double, Object> pair0 = new Pair<Double, Object>(double0, object0);
      assertNotNull(pair0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Integer integer0 = new Integer(1852628642);
      assertEquals(1852628642, (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 161;
      floatArray0[1] = (float) 161;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 161;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 161.0F;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 161;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 161.0F;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {161.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 161.0, 0.0, 161.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(2212.45973226494, (-2822.0), (double) 1852628642, 1807.02063353011, 0.0, 161.0);
      assertEquals(3.347731938801503E12, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertEquals(227.6883835420683, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 161.0, 0.0, 161.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {161.0F, 161.0F, 0.0F, 161.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(161.0, double3, 0.01);
      assertArrayEquals(new double[] {161.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 161.0, 0.0, 161.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4538.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-4538.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = 6.283185307179586;
      Double[] doubleArray3 = new Double[8];
      Double double0 = new Double((-4538.0));
      assertEquals((-4538.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray3[0] = double0;
      doubleArray3[1] = (Double) 6.283185307179586;
      doubleArray3[2] = (Double) 6.283185307179586;
      doubleArray3[3] = (Double) 6.283185307179586;
      doubleArray3[4] = (Double) 6.283185307179586;
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      
      doubleArray6[0] = (-3005.71);
      doubleArray6[1] = (double) doubleArray3[4];
      doubleArray6[2] = (double) doubleArray3[0];
      doubleArray6[3] = (double) doubleArray3[3];
      doubleArray6[4] = (double) doubleArray3[1];
      doubleArray6[5] = (double) doubleArray3[2];
      try { 
        MathArrays.ebeMultiply(doubleArray6, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.11111095942313305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2589L);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray1 = new long[7][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 1744L;
      longArray2[2] = 1744L;
      longArray2[3] = (-2589L);
      longArray2[4] = (-456L);
      longArray2[5] = 1744L;
      longArray2[6] = (-2589L);
      longArray2[7] = 0L;
      longArray1[4] = longArray2;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[][] longArray0 = new long[2][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 39.47841760435743, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (6.283 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      intArray0[2] = (-1039);
      intArray0[3] = (-1039);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1039);
      intArray1[1] = (-1039);
      intArray1[2] = (-1039);
      intArray1[3] = (-1039);
      intArray1[4] = (-1039);
      intArray1[5] = (-1039);
      intArray1[6] = (-1039);
      intArray1[7] = (-1039);
      intArray1[8] = 283;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039)}, intArray0);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), (-1039), (-1039), (-1039), (-1039), 283}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double1 = MathArrays.linearCombination((-4.068233003401932E-9), (double) (-1039), (double) (-1039), 1034.7843);
      assertEquals((-1075140.887695773), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.668E-20, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 199;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {199}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 199;
      longArray1[2] = (long) 199;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 199;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 199;
      longArray4[1] = (long) 199;
      longArray4[2] = 0L;
      longArray4[3] = (long) 0;
      longArray4[4] = (long) 199;
      longArray4[5] = (long) 199;
      longArray4[6] = (long) 199;
      longArray4[7] = (long) 0;
      longArray4[8] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (long) 199;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 199;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (long) 0;
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = 0L;
      longArray7[1] = (long) 0;
      longArray7[2] = (long) 0;
      longArray7[3] = 0L;
      longArray7[4] = (long) 199;
      longArray7[5] = (long) 199;
      longArray7[6] = 0L;
      longArray7[7] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (long) 0;
      longArray8[1] = 0L;
      longArray8[2] = (long) 0;
      longArray8[3] = (-456L);
      longArray8[4] = (long) 199;
      longArray8[5] = 1744L;
      longArray8[6] = 0L;
      longArray8[7] = (long) 199;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-186.792449044), (-186.792449044), (-186.792449044), (-186.792449044));
      assertEquals(69782.83803971067, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2589L);
      longArray0[2] = (-1593L);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1580;
      intArray0[1] = 2145128666;
      intArray0[2] = 143;
      intArray0[3] = 1312;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = 2047;
      intArray0[6] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1580, 2145128666, 143, 1312, Integer.MIN_VALUE, 2047, 1}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, (-1744.024923022), (-1744.024923022), (-4403.0492817), 0.0, 4237.3983756930875, Double.NaN, (-4403.0492817));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4403.0492817);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray3 = new Double[7];
      doubleArray3[0] = (Double) 6.283185307179586;
      doubleArray3[1] = (Double) 6.283185307179586;
      Double double0 = new Double(6.283185307179586);
      assertEquals(6.283185307179586, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray3[2] = double0;
      doubleArray3[3] = (Double) 6.283185307179586;
      doubleArray3[4] = (Double) 6.283185307179586;
      doubleArray3[5] = (Double) 6.283185307179586;
      doubleArray3[6] = (Double) 6.283185307179586;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray4);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      intArray0[2] = (-1039);
      intArray0[3] = (-1039);
      intArray0[4] = (-1039);
      intArray0[5] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), (-1039), (-1039)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double1 = MathArrays.linearCombination(1117.479212119, (double) (-1039), 1542.041336469674, 628.3129515559696);
      assertEquals((-192176.35785306824), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1039);
      floatArray0[1] = (float) (-1039);
      floatArray0[2] = (float) (-1039);
      floatArray0[3] = (float) (-1039);
      floatArray0[4] = (float) (-1039);
      floatArray0[5] = (float) (-1039);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1039.0F), (-1039.0F), (-1039.0F), (-1039.0F), (-1039.0F), (-1039.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), (-1039), (-1039)}, intArray0);
      assertArrayEquals(new int[] {(-1039), (-1039)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 628.3129515559696;
      doubleArray0[1] = (double) (-1039.0F);
      doubleArray0[2] = (double) (-1039.0F);
      doubleArray0[3] = (double) (-1039);
      doubleArray0[4] = (double) (-1039.0F);
      doubleArray0[5] = (double) (-1039);
      doubleArray0[6] = (-2585.0);
      doubleArray0[7] = (double) (-1039);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1039.0F));
      assertArrayEquals(new double[] {628.3129515559696, (-1039.0), (-1039.0), (-1039.0), (-1039.0), (-1039.0), (-2585.0), (-1039.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.70236841006725, (-131.79858949745548), (-131.79858949745548), (-131.79858949745548), (-131.79858949745548), (-131.79858949745548), (-327.9108314253344), (-131.79858949745548)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4237.3983756930875, (-1744.024923022), (-4403.0492817), 4237.3983756930875, 3099.00048828125, 4237.3983756930875, 3099.00048828125, 4237.3983756930875);
      assertEquals(215797.02027622575, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kFQ=%:OyN3|";
      stringArray0[1] = "qjT*}h=W";
      stringArray0[2] = "kFQ=%:OyN3|";
      stringArray0[3] = "kFQ=%:OyN3|";
      stringArray0[4] = "qjT*}h=W";
      stringArray0[5] = "qjT*}h=W";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-2589L);
      longArray0[2] = (-1593L);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kFQ=%:OyN3|";
      stringArray0[1] = "kFQ=%:OyN3|";
      stringArray0[2] = "";
      stringArray0[3] = "qjT*}h=W";
      stringArray0[4] = "kFQ=%:OyN3|";
      stringArray0[5] = "kFQ=%:OyN3|";
      stringArray0[6] = "qjT*}h=W";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2097;
      intArray0[1] = 354;
      intArray0[2] = 2105;
      intArray0[3] = 2097;
      intArray0[4] = (-1574);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2097, 354, 2105, 2097, (-1574)}, intArray1);
      assertArrayEquals(new int[] {2097, 354, 2105, 2097, (-1574)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2097, 354, 2105, 2097, (-1574)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2097, 354, 2105, 2097, (-1574)}, intArray1);
      assertArrayEquals(new int[] {2097, 354, 2105, 2097, (-1574)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-910.89);
      long long0 = 2799L;
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 2799L;
      longArray1[3] = 4503599627370495L;
      longArray1[4] = 2799L;
      longArray1[5] = 1722L;
      longArray1[6] = 2799L;
      longArray1[7] = (-1593L);
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,593 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2514.6528524678));
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2514.652767650348), (-8.481745226900965E-5), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) 0.11111095942313305;
      doubleArray2[1] = (Double) 3294198.0;
      doubleArray2[2] = (Double) 0.11111095942313305;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((double) doubleArray2[1], 1.883511811213715E-8, (-159.639376044962), (double) doubleArray2[0]);
      assertEquals((-17.675637625651287), double0, 0.01);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 199;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {199}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination(3099.00048828125, 0.0, 0.0, 2585.0, (double) 199, 3.834E-20);
      assertEquals(7.62966E-18, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 199;
      longArray0[1] = (long) 199;
      longArray0[2] = (long) 199;
      longArray0[3] = (-1686L);
      longArray0[4] = (long) 199;
      longArray0[5] = (long) 199;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,686 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0E-5, 1.0E-5, 1.0E-5, 1129.4543, 1.34217729E8, 1129.4543);
      assertEquals(1.5159279115529602E11, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1442.067639573884, 1120.42494, (-1504.457548), 1.34217729E8);
      assertEquals((-2.0192325974091995E11), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1082;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 746;
      intArray0[4] = 38;
      intArray0[5] = 1160;
      intArray0[6] = 2135748764;
      intArray0[7] = 1;
      intArray0[8] = 373;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {1082, 2, 1, 746, 38, 1160, 2135748764, 1, 373}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1160;
      floatArray0[1] = (float) 38;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1160;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1160.0F, 38.0F, 2.0F, 1160.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 746;
      doubleArray0[1] = 1120.42494;
      doubleArray0[2] = (double) 1160.0F;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (double) 38;
      doubleArray0[5] = (double) 38;
      doubleArray0[6] = (double) 38;
      doubleArray0[7] = (-2.0192325974091995E11);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 373);
      assertArrayEquals(new double[] {746.0, 1120.42494, 1160.0, 1.34217729E8, 38.0, 38.0, 38.0, (-2.0192325974091995E11)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(373, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 2117;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2117);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2117, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = 812.5;
      MathArrays.scaleInPlace(812.5, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 812.5;
      doubleArray4[1] = 812.5;
      doubleArray4[2] = 812.5;
      doubleArray4[3] = 812.5;
      doubleArray4[4] = (double) 2117;
      doubleArray4[5] = 2925.0;
      doubleArray4[6] = 812.5;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = (-2589L);
      longArray1[2] = (-1593L);
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1593L);
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1593.0)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-4538.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2991.1F);
      floatArray0[1] = 3099.0005F;
      floatArray0[2] = (-2991.1F);
      floatArray0[3] = 3099.0005F;
      floatArray0[4] = 3099.0005F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3.4028235E38F;
      floatArray0[8] = (-2991.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2991.1F), 3099.0005F, (-2991.1F), 3099.0005F, 3099.0005F, 0.0F, 0.0F, 3.4028235E38F, (-2991.1F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3099.0005F;
      doubleArray2[1] = (double) (-2991.1F);
      doubleArray2[2] = (double) 3099.0005F;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 806L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 156L;
      longArray1[5] = 0L;
      longArray1[6] = 2147483647L;
      longArray1[7] = (-559L);
      longArray1[8] = (-1427L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-859);
      intArray0[4] = 0;
      double double0 = MathArrays.linearCombination(923.7154146, 1903.2, 1903.2, 3.834E-20, (-2511.497934617), 1880.5211863);
      assertEquals((-2964909.8983292403), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$OrderDirection");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$OrderDirection
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray1 = new double[0][9];
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 675.882;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3294198.0);
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 3.834E-20, 675.882}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3293522.1455792263, 0.11108816333342547, 3.833213397054686E-20, 675.7433326103587}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 806L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 156L;
      longArray0[5] = 0L;
      longArray0[6] = 2147483647L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 806L;
      floatArray0[2] = (float) 0L;
      floatArray0[4] = (float) 2147483647L;
      floatArray0[5] = (float) 2147483647L;
      floatArray0[6] = -0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 806.0F, 0.0F, 0.0F, 2.14748365E9F, 2.14748365E9F, -0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "qjT*}h=W";
      stringArray0[2] = "kFQ=%:OyN3|";
      stringArray0[3] = "kFQ=%:OyN3|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2027;
      int int0 = MathArrays.distanceInf(intArray1, intArray2);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2027}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.linearCombination(0.0, 1903.2, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2514.6528524678));
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2514.652767650348), (-8.481745226900965E-5), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      try { 
        MathArrays.normalizeArray(doubleArray0, 1313.071716428595);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2145.3949, 20.0, 20.0, 2145.3949);
      assertEquals(85815.79599999999, double0, 0.01);
      
      Double double1 = new Double(20.0);
      assertEquals(20.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2145.3949);
      assertEquals(2145.3949, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "9X?8_waM }~b#gNG";
      stringArray0[2] = "";
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) doubleArray0[5];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = (double) doubleArray0[2];
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) doubleArray0[3];
      doubleArray1[5] = (double) doubleArray0[0];
      doubleArray1[6] = 2145.3949;
      double double3 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {20.0, 2145.3949, 2145.3949, 2145.3949, 20.0, 2145.3949, 2145.3949}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertNotEquals(double3, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {20.0, 2145.3949, 2145.3949, 2145.3949, 20.0, 2145.3949, 2145.3949}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      MathArrays.scaleInPlace((-1665.328521923), doubleArray0);
      assertArrayEquals(new double[] {(-6.384869553052781E-17), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3294198.0;
      doubleArray0[1] = 0.11111095942313305;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 675.882;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3294198.0);
      assertArrayEquals(new double[] {3294198.0, 0.11111095942313305, 3.834E-20, 675.882}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3293522.1455792263, 0.11108816333342547, 3.833213397054686E-20, 675.7433326103587}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2447.0237F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-4533.518F);
      floatArray0[3] = (-4181.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2934.483F;
      floatArray0[6] = (-2188.5254F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2447.0237F, 0.0F, (-4533.518F), (-4181.0F), 0.0F, 2934.483F, (-2188.5254F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 4280.0;
      doubleArray0[2] = (-2096.85654145);
      doubleArray0[3] = (-2838.9168603);
      doubleArray0[4] = (-2103.3207573861);
      doubleArray0[5] = (-1180.8468303);
      doubleArray0[6] = (-384.7048451018);
      doubleArray0[7] = 3.814697265625E-6;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2103.3207573861));
      assertArrayEquals(new double[] {3.834E-20, 4280.0, (-2096.85654145), (-2838.9168603), (-2103.3207573861), (-1180.8468303), (-384.7048451018), 3.814697265625E-6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.8646918382377122E-20, 2081.6069555705294, (-1019.8203648401599), (-1380.7264211885347), (-1022.9642799931728), (-574.3128447233394), (-187.1038040667266), 1.8553038227852522E-6}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-18);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-18));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 1120.42494;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1120.42494;
      doubleArray0[1] = 1120.42494;
      doubleArray0[2] = 1120.42494;
      doubleArray0[3] = 1120.42494;
      doubleArray0[4] = 1120.42494;
      MathArrays.scaleInPlace(1120.42494, doubleArray0);
      assertArrayEquals(new double[] {1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = (-551);
      intArray0[0] = (-551);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-551)}, intArray0);
      assertArrayEquals(new int[] {(-551)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {(-551)}, intArray0);
      assertArrayEquals(new int[] {(-551)}, intArray1);
      assertArrayEquals(new int[] {(-551)}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037, 1255352.0461740037}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long long0 = (-1593L);
      long long1 = (-2589L);
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = (-2589L);
      longArray1[2] = (-1593L);
      longArray1[3] = 4503599627370495L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,589 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 991.13029, 0.0, 3.834E-20, (-1744.024923022), 3.834E-20, 991.13029);
      assertEquals((-2.886598023006348E-17), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 991.13029;
      doubleArray0[4] = (-2.886598023006348E-17);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 991.13029;
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Double[] doubleArray3 = new Double[8];
      doubleArray3[0] = (Double) (-2.886598023006348E-17);
      doubleArray3[1] = (Double) 3.834E-20;
      doubleArray3[2] = (Double) (-2.886598023006348E-17);
      doubleArray3[3] = (Double) 0.0;
      doubleArray3[4] = (Double) 0.0;
      doubleArray3[5] = (Double) 991.13029;
      doubleArray3[6] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "qjT*}h=W";
      stringArray0[2] = "kFQ=%:OyN3|";
      stringArray0[3] = "kFQ=%:OyN3|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2027;
      int int0 = MathArrays.distanceInf(intArray1, intArray2);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2027}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.linearCombination(1028.686049939259, 1903.2, 0.0, 0.0, 0.0, 1028.686049939259);
      assertEquals(1957795.2902443977, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1903.2;
      doubleArray2[2] = (double) 2027;
      doubleArray2[3] = (double) 2027;
      doubleArray2[4] = 1903.2;
      doubleArray2[5] = 1028.686049939259;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.9104924319549628;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.9104924319549628, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.668E-20, 1.8209848639099255, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.9104924319549628;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3.834E-20;
      doubleArray3[1] = 0.9104924319549628;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 433.0692935857564;
      doubleArray3[5] = 646.3;
      doubleArray3[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[7][5];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray1;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray1;
      doubleArray4[5] = doubleArray1;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = 433.0692935857564;
      doubleArray5[1] = 646.3;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-303.9865465);
      doubleArray5[4] = 646.3;
      doubleArray5[5] = 646.3;
      doubleArray5[6] = 0.9104924319549628;
      doubleArray4[6] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-4274));
      assertEquals((-4274), (int)integer0);
      assertNotNull(integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("9|gn|4a[RMXz").when(field0).getZero();
      int int0 = 161;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 161, 161);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.668E-20, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[20];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (0 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 806L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 156L;
      longArray1[5] = 0L;
      longArray1[6] = 2147483647L;
      longArray1[7] = (-559L);
      longArray1[8] = (-1427L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1197.4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1197.4}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-305.0), (-0.2499999701976776), (-305.0), (double) (-1427L), 3.834E-20, (double) 0L, 1963.89, (-3.43338934259355E-8));
      assertEquals(435311.2499234823, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, (-1744.024923022), (-1744.024923022), (-4403.0492817), 0.0, 4237.3983756930875, Double.NaN, (-4403.0492817));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4403.0492817);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4403.0492817)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray3 = new Double[6];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) (-4403.0492817);
      doubleArray3[2] = (Double) (-4403.0492817);
      doubleArray3[3] = (Double) (-4403.0492817);
      doubleArray3[4] = (Double) (-4403.0492817);
      doubleArray3[5] = (Double) 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4280.0;
      doubleArray0[2] = 5298.219996;
      doubleArray0[3] = (-2822.0);
      doubleArray0[4] = (-1601.1);
      doubleArray0[5] = 73.967334978628;
      doubleArray0[6] = 148.1716;
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = 2.893485277253286E-8;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 4280.0, 5298.219996, (-2822.0), (-1601.1), 73.967334978628, 148.1716, 6.283185307179586, 2.893485277253286E-8}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-902.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-902.7)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-577);
      intArray0[0] = (-577);
      int int1 = (-4228);
      intArray0[1] = (-4228);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-577), (-4228)}, intArray0);
      assertArrayEquals(new int[] {(-577), (-4228)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray1, (-4228));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.0E-5, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = 1.0E-5;
      doubleArray1[2] = 1.0E-5;
      doubleArray1[3] = 1.0E-5;
      doubleArray1[4] = 1.0E-5;
      doubleArray1[5] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0E-5, 1.0E-5, 1.0E-5, 1.0E-5, 1.0E-5, 1.0E-5}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2651.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2145.3949, 20.0, 20.0, 2145.3949);
      assertEquals(85815.79599999999, double0, 0.01);
      
      Double double1 = new Double(20.0);
      assertEquals(20.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2145.3949);
      assertEquals(2145.3949, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "9X?8_waM }~b#gNG";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "KF";
      stringArray0[5] = "9X?8_waM }~b#gNG";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.15;
      doubleArray0[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.15, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.15, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = (-826.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 204.768F;
      floatArray0[6] = 4364.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 4364.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 4364.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 204.768F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {4364.0F, 0.0F, 0.0F, 0.0F, 4364.0F, 0.0F, 204.768F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.4E-45F, (-826.0F), (-1.0F), 0.0F, 0.0F, 204.768F, 4364.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-4538.0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1039);
      intArray0[1] = (-1039);
      intArray0[2] = (-1039);
      intArray0[3] = (-1039);
      intArray0[4] = (-1039);
      intArray0[5] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1039), (-1039), (-1039), (-1039), (-1039), (-1039)}, intArray0);
      assertEquals(6, intArray0.length);
      
      double double1 = MathArrays.linearCombination(675.882, 1.86285714285714278E18, (double) (-1039), (double) (-1039));
      assertEquals(1.2590716114285722E21, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1039);
      floatArray0[1] = (float) (-1039);
      floatArray0[2] = (float) (-1039);
      floatArray0[3] = (float) (-1039);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1039.0F), (-1039.0F), (-1039.0F), (-1039.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, (-4538.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 161, 161);
      assertEquals(161, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 161;
      floatArray0[1] = (float) 161;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 161;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {161.0F, 161.0F, 0.0F, 161.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 161;
      intArray0[1] = 161;
      intArray0[2] = 161;
      intArray0[3] = 161;
      intArray0[4] = 161;
      intArray0[5] = 161;
      intArray0[6] = 161;
      intArray0[7] = (-1039);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {161, 161, 161, 161, 161, 161, 161, (-1039)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 161, (double) 161, 49.0611, (double) 161.0F);
      assertEquals(33819.8371, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 20.0;
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(400.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3116.4922F;
      floatArray0[4] = (-2991.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, 0.0F, 3116.4922F, (-2991.1F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 3116.4922F;
      doubleArray0[3] = (double) 3.4028235E38F;
      doubleArray0[4] = (double) (-2991.1F);
      int[] intArray0 = new int[3];
      intArray0[0] = (-455);
      intArray0[1] = (-1490);
      intArray0[2] = (-667);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-455), (-1490), (-667)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-301.5399F);
      floatArray1[1] = (float) (-667);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) (-1490);
      floatArray1[4] = (float) (-1490);
      floatArray1[5] = 1464.85F;
      floatArray1[6] = (float) 0;
      floatArray1[7] = Float.NEGATIVE_INFINITY;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, 0.0F, 3116.4922F, (-2991.1F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-301.5399F), (-667.0F), 0.0F, (-1490.0F), (-1490.0F), 1464.85F, 0.0F, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-853.0);
      doubleArray0[1] = 1428.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-595);
      intArray0[1] = (-595);
      intArray0[2] = (-595);
      intArray0[3] = (-595);
      intArray0[4] = (-595);
      intArray0[5] = (-595);
      intArray0[6] = (-595);
      intArray0[7] = (-595);
      intArray0[0] = (-595);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-595), (-595), (-595), (-595), (-595), (-595), (-595), (-595), 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2766793.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1428.0, 0.0, (-853.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 182;
      intArray0[1] = 182;
      intArray0[2] = 0;
      intArray0[3] = 182;
      intArray0[4] = 5232;
      intArray0[5] = 0;
      intArray0[6] = 0;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {182, 182, 0, 182, 5232, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 182;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 182L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4620.0;
      doubleArray0[2] = 2636.82;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3034.828119355;
      doubleArray0[5] = (-79.72);
      doubleArray0[6] = 191.1003630508287;
      doubleArray0[7] = (-1288.5291958117);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4620.0, 2636.82, 3.834E-20, 3034.828119355, (-79.72), 191.1003630508287, (-1288.5291958117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 4620.0, 2636.82, 3.834E-20, 3034.828119355, (-79.72), 191.1003630508287, (-1288.5291958117)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-4612L);
      longArray0[1] = 1L;
      longArray0[2] = (-2709L);
      longArray0[3] = (-556L);
      longArray0[4] = (-1716L);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 15
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3116.4922F;
      floatArray0[4] = (-2991.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, 0.0F, 3116.4922F, (-2991.1F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3.4028235E38F;
      doubleArray1[1] = (double) 3116.4922F;
      double[][] doubleArray2 = new double[6][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.668E-20, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3116.4922F;
      floatArray0[4] = (-2991.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3116.4922F, (-2991.1F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 3116.4922F;
      doubleArray0[3] = (double) 3.4028235E38F;
      doubleArray0[4] = (double) (-2991.1F);
      doubleArray0[5] = (double) 3116.4922F;
      doubleArray0[6] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 6.283185307179586, 3116.4921875, 3.4028234663852886E38, (-2991.10009765625), 3116.4921875, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = Double.valueOf((-404.6));
      assertEquals((-404.6), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-404.6));
      assertEquals((-404.6), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = (-3.141592653589793);
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {6.283185307179586, (-3.141592653589793)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 688;
      int int1 = (-4181);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 688, (-4181));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3116.4922F;
      floatArray0[4] = (-2991.1F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 3.4028235E38F, 0.0F, 3116.4922F, (-2991.1F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 3116.4922F;
      doubleArray0[3] = (double) 3.4028235E38F;
      doubleArray0[4] = (double) (-2991.1F);
      doubleArray0[5] = (double) 3116.4922F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 3.4028235E38F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-939.6481712);
      doubleArray0[6] = (-104.117856);
      doubleArray0[7] = (-1254.7365320857248);
      doubleArray0[8] = 1689.5;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 806L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 156L;
      longArray1[5] = 0L;
      longArray1[6] = 2147483647L;
      longArray1[7] = (-559L);
      longArray1[8] = (-1427L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-859);
      intArray0[4] = 0;
      intArray0[5] = 199;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-859), 0, 199}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-2653.15345);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= -2,653.153)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 543.408;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 543.408}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      int int0 = 413;
      intArray0[0] = 413;
      intArray0[1] = 0;
      int int1 = (-691);
      intArray0[2] = (-691);
      int int2 = 1288;
      intArray0[3] = 1288;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {413, 0, (-691), 1288}, intArray1);
      assertArrayEquals(new int[] {413, 0, (-691), 1288}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 543.408}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1288;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3066.349268497);
      doubleArray2[3] = 543.408;
      doubleArray2[4] = (double) 413;
      doubleArray2[5] = (double) (-691);
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-691);
      doubleArray3[1] = (double) (-691);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1700;
      intArray0[1] = 221;
      intArray0[2] = 2;
      intArray0[3] = 59;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 42;
      intArray0[7] = (-1295);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {1700, 221, 2, 59, 0, 0, 42, (-1295)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 161;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 161, 161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-49.1006127);
      doubleArray0[3] = 2514.053748511025;
      doubleArray0[4] = (-2774.6510514988404);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1271.802;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-49.1006127), 2514.053748511025, (-2774.6510514988404), 0.0, Double.NEGATIVE_INFINITY, 0.0, 1271.802}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1271.802, 0.0, (-49.1006127), 0.0, (-2774.6510514988404), 0.0, 2514.053748511025, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1504.457548);
      doubleArray0[1] = (-36.0);
      doubleArray0[2] = 1.7976931348623157E308;
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1853.073);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 991.13029, 0.0, 3.834E-20, (-1744.024923022), 3.834E-20, 991.13029);
      assertEquals((-2.886598023006348E-17), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 991.13029;
      doubleArray0[4] = (-2.886598023006348E-17);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 991.13029;
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 991.13029, (-2.886598023006348E-17), 0.0, 991.13029, 3.834E-20}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double[] doubleArray3 = new Double[8];
      doubleArray3[0] = (Double) (-2.886598023006348E-17);
      doubleArray3[1] = (Double) 3.834E-20;
      doubleArray3[2] = (Double) (-2.886598023006348E-17);
      doubleArray3[3] = (Double) 0.0;
      doubleArray3[4] = (Double) 0.0;
      doubleArray3[5] = (Double) 991.13029;
      doubleArray3[6] = (Double) 0.0;
      doubleArray3[7] = (Double) 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1708.3107184, 1708.3107184, (-1563.0), (-1563.0), 3.834E-20, 3.834E-20);
      assertEquals(5361294.510600324, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 250.6F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 250.6F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1563.0);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 250.6F;
      doubleArray0[3] = (double) 250.6F;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1563.0), (-1.0), 250.60000610351562, 250.60000610351562, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2442969.0, 1.0, 62800.36305908207, 62800.36305908207, 1.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 253;
      intArray0[2] = 0;
      intArray0[3] = 645;
      intArray0[4] = 2191;
      intArray0[5] = 308;
      intArray0[6] = 13;
      intArray0[7] = 1588;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 253, 0, 645, 2191, 308, 13, 1588}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-191.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-191.0);
      doubleArray0[3] = (-191.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-191.0);
      MathArrays.scaleInPlace((-191.0), doubleArray0);
      assertArrayEquals(new double[] {36481.0, -0.0, 36481.0, 36481.0, -0.0, 36481.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1619.53017955;
      doubleArray0[1] = 186.40375606;
      doubleArray0[2] = (-2489.4529933);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2489.4529933);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-910.89);
      doubleArray0[3] = 1807.02063353011;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2023.6215461650827, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-910.89), 1807.02063353011}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-910.89), 1807.02063353011}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 5232;
      intArray0[2] = 182;
      intArray0[3] = 0;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {0, 5232, 182, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 182;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {182L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1120.42494;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = (-3036.7553638177865);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,120.425 >= -20)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 51.9933190665735;
      doubleArray0[3] = 599.9420209539;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1021;
      intArray0[1] = 134217729;
      intArray0[2] = (-866);
      intArray0[3] = (-2255);
      intArray0[4] = 125;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {1021, 134217729, (-866), (-2255), 125, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6296.6288939889;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1478.0419884454);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-649.339);
      doubleArray0[7] = 297.815880826482;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {6296.6288939889, 0.0, (-1478.0419884454), 0.0, 0.0, 0.0, (-649.339), 297.815880826482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1129.4543;
      doubleArray0[1] = 148.1716;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 88.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1900.0;
      doubleArray0[6] = 1570.996352;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,129.454 >= 148.172)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(2145.3949, 20.0, 20.0, 2145.3949);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1075L);
      longArray0[1] = 1665L;
      longArray0[2] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,075 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4620.0;
      doubleArray0[2] = (-2370.325226991613);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3034.828119355;
      doubleArray0[5] = (-79.72);
      doubleArray0[6] = 191.1003630508287;
      doubleArray0[7] = (-1288.5291958117);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[7];
      longArray1[0] = (-4612L);
      longArray1[1] = 1L;
      longArray1[2] = (-2709L);
      longArray1[3] = (-556L);
      longArray1[4] = (-1716L);
      longArray1[5] = 0L;
      longArray1[6] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = (-1716L);
      longArray2[1] = (-1444L);
      longArray2[2] = (-556L);
      longArray2[3] = (-556L);
      longArray2[4] = (-556L);
      longArray2[5] = (-1716L);
      longArray2[6] = (-556L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-2709L);
      longArray3[1] = 9007199254740990L;
      longArray3[2] = (-2110L);
      longArray3[3] = (-1444L);
      longArray3[4] = 0L;
      longArray3[5] = (-1716L);
      longArray3[6] = (-556L);
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,612 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-4538.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = Double.valueOf((-404.6));
      doubleArray0[0] = double0;
      Double double1 = new Double((-404.6));
      doubleArray0[1] = double1;
      Double double2 = new Double((-3.141592653589793));
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "KF";
      stringArray0[2] = "";
      stringArray0[3] = "9X?8_waM }~b#gNG";
      stringArray0[4] = "numerator format";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2627.017633962199;
      doubleArray0[1] = 2686.66415036;
      doubleArray0[2] = 1156.0;
      doubleArray0[3] = 155.0;
      doubleArray0[4] = (-1145.64859741058);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,627.018 <= 2,686.664)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2111.09556209;
      doubleArray0[1] = 2111.09556209;
      doubleArray0[2] = 2111.09556209;
      doubleArray0[3] = 2111.09556209;
      doubleArray0[4] = 2111.09556209;
      doubleArray0[5] = 2111.09556209;
      doubleArray0[6] = 2111.09556209;
      double[] doubleArray1 = MathArrays.scale(2111.09556209, doubleArray0);
      assertArrayEquals(new double[] {4456724.4722760925, 4456724.4722760925, 4456724.4722760925, 4456724.4722760925, 4456724.4722760925, 4456724.4722760925, 4456724.4722760925}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1680.0;
      doubleArray0[5] = 1975.0;
      doubleArray0[6] = 20.0;
      doubleArray0[7] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 1680.0, (-1.0), (-1.0), 1975.0, Double.NaN, 0.0, 20.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 3355);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Field<Pair<Double, Object>> field0 = (Field<Pair<Double, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2336));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3.834E-20;
      doubleArray2[3] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray2);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray3 = new double[3][2];
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 7.668E-20;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 7.668E-20;
      doubleArray4[3] = 0.0;
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 7.668E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1718.6719789926;
      doubleArray0[1] = (-1026.2);
      doubleArray0[2] = 94.272953;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4015807.2010416808, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-4110);
      intArray0[1] = (-530);
      intArray0[2] = 168;
      intArray0[3] = (-1187);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1866;
      intArray0[8] = 629;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int int0 = 2146908670;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-77), 2146908670);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = (-1887);
      intArray0[2] = (-1887);
      MathArrays.distanceInf(intArray0, intArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1569.226264911955;
      doubleArray0[1] = (-1182.3895);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 728L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.ebeDivide(doubleArray1, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray1, doubleArray1);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "qjT*}h=W";
      stringArray0[2] = "kFQ=%:OyN3|";
      stringArray0[3] = "w#7c)JWSo*l";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = new int[1];
      intArray2[0] = 2027;
      MathArrays.distanceInf(intArray1, intArray2);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(boolean1 == boolean0);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(1028.686049939259, 1903.2, 0.0, 0.0, 0.0, 1028.686049939259);
      assertEquals(1957795.2902443977, double2, 0.01);
  }
}
