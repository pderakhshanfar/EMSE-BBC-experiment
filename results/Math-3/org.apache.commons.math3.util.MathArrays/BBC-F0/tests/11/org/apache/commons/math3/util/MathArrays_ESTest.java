/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:10:34 GMT 2020
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray((double[]) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3003.3), 0.0, 0.0, 0.1256551444530487, 0.1256551444530487, 0.0, 0.0, 2.925681159240093E-8);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-538.906855068839);
      doubleArray0[2] = (-3894.73);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.26E18;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 1448.68347046272;
      doubleArray0[7] = 118.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, (-538.906855068839), (-3894.73), 3.834E-20, 3.26E18, 3.834E-20, 1448.68347046272, 118.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(22, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.34217729E8, (-538.906855068839), (-3894.73), 3.834E-20, 3.26E18, 3.834E-20, 1448.68347046272, 118.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(22, doubleArray2.length);
      assertEquals(3.4645976E55, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, (-538.906855068839), (-3894.73), 3.834E-20, 3.26E18, 3.834E-20, 1448.68347046272, 118.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2176.292109982994);
      doubleArray0[1] = (-3179.204506584143);
      doubleArray0[2] = 9372.5616;
      doubleArray0[3] = (-1604.81665);
      doubleArray0[4] = 3.814697265625E-6;
      doubleArray0[5] = 966.8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4268.836111358;
      doubleArray0[1] = (-5.207000323380292E-8);
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-3.5997360512765566E-9);
      doubleArray0[4] = (-3363.0826381405427);
      doubleArray0[5] = 1542.783698705;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3191.0155984));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4268.836111358, (-5.207000323380292E-8), 1.304E19, (-3.5997360512765566E-9), (-3363.0826381405427), 1542.783698705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0446259676653815E-12), 1.2742039304279411E-23, (-3191.0155983999994), 8.808906357167418E-25, 8.22979229832415E-13, (-3.7753426744822855E-13)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1.3040000000000004E19, double0, 0.01);
      assertArrayEquals(new double[] {4268.836111358, (-5.207000323380292E-8), 1.304E19, (-3.5997360512765566E-9), (-3363.0826381405427), 1542.783698705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0446259676653815E-12), 1.2742039304279411E-23, (-3191.0155983999994), 8.808906357167418E-25, 8.22979229832415E-13, (-3.7753426744822855E-13)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3191.0155983999994, double1, 0.01);
      assertArrayEquals(new double[] {4268.836111358, (-5.207000323380292E-8), 1.304E19, (-3.5997360512765566E-9), (-3363.0826381405427), 1542.783698705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0446259676653815E-12), 1.2742039304279411E-23, (-3191.0155983999994), 8.808906357167418E-25, 8.22979229832415E-13, (-3.7753426744822855E-13)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 389.00516F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 389.00516F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(504.0, 1503.201, 1503.201, (double) 389.00516F, (-3962.322364), 504.0, 1503.201, (double) 389.00516F);
      assertEquals((-69891.2840257632), double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 504.0;
      doubleArray0[2] = (-3962.322364);
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 504.0, (-3962.322364), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 504.0, (-3962.322364), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1993.406360679962;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 802.2287439835501;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2911.7546810771946;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.309555519924771E7, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.0, 2911.7546810771946}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 802.2287439835501;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 802.2287439835501;
      doubleArray1[5] = 1.309555519924771E7;
      doubleArray1[6] = (-2583.9361129812);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals((-7523788.07257742), double1, 0.01);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.0, 2911.7546810771946}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 802.2287439835501, 0.0, 802.2287439835501, 1.309555519924771E7, (-2583.9361129812)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 10;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {4, 10}, intArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1290.0);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2930.78794;
      doubleArray0[1] = (-1640.8);
      doubleArray0[2] = 1355.676498394;
      doubleArray0[3] = (-844.65);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3178.0478134;
      doubleArray0[6] = 120.5;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2930.78794, (-1640.8), 1355.676498394, (-844.65), 3.834E-20, 3178.0478134, 120.5}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4893.622700444302, double1, 0.01);
      assertArrayEquals(new double[] {2930.78794, (-1640.8), 1355.676498394, (-844.65), 3.834E-20, 3178.0478134, 120.5}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 18;
      intArray1[1] = 134217729;
      intArray1[2] = 2146529004;
      intArray1[3] = (-1357);
      intArray1[4] = 88;
      intArray1[5] = 1359;
      intArray1[6] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals((-2014217739), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {18, 134217729, 2146529004, (-1357), 88, 1359, 2}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 175.75F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 175.75F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-149);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1780.434F);
      floatArray1[3] = (float) (-149);
      floatArray1[4] = (float) (-149);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-149.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1780.434F), (-149.0F), (-149.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-149.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3970502.5825440004;
      doubleArray1[1] = (-539.13418157);
      doubleArray1[2] = (-2048.05079);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 199.36;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      double[][] doubleArray2 = new double[3][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-1572.3), (-1465.714406));
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 202;
      intArray0[1] = 8;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {202, 8}, intArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2145761526);
      intArray0[1] = (-651);
      intArray0[2] = 283;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 49;
      intArray0[7] = (-1897);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-651);
      intArray1[3] = 0;
      intArray1[4] = (-651);
      intArray1[5] = 283;
      intArray1[6] = 49;
      intArray1[7] = 283;
      intArray1[8] = (-1897);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(2145761526, int0);
      assertArrayEquals(new int[] {(-2145761526), (-651), 283, 1, 2, 0, 49, (-1897)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-651), 0, (-651), 283, 49, 283, (-1897)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[1][4];
      doubleArray0[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1469.39407168, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-0.49999999999999994);
      doubleArray0[2] = 681.8729469875431;
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {Double.NaN, (-0.49999999999999994), 681.8729469875431}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3383.0);
      doubleArray0[1] = 5.0;
      doubleArray0[2] = 1930.6687222;
      doubleArray0[3] = 1.25;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.304E19;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.700416E38, double0, 0.01);
      assertArrayEquals(new double[] {(-3383.0), 5.0, 1930.6687222, 1.25, (-1.0), 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-770.89623);
      doubleArray1[2] = (-3383.0);
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = (-3383.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 5.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 701.8366399474803;
      doubleArray2[1] = Double.NaN;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray2.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {701.8366399474803, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 1771.4, Double.NaN, 701.8366399474803, 701.8366399474803, (-1873.1269043846805), (-1873.1269043846805));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3683;
      intArray1[1] = 288;
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3683, 288}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-149);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-149));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1243.2;
      doubleArray0[2] = 2827.56445;
      doubleArray0[3] = (-3831.55883487036);
      doubleArray0[4] = 1.9868161777724352E-8;
      doubleArray0[5] = 4.9E-324;
      doubleArray0[6] = (-1295.043168);
      doubleArray0[7] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1243.2, 2827.56445, (-3831.55883487036), 1.9868161777724352E-8, 4.9E-324, (-1295.043168), 1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t=+@P= Q2F";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "t=+@P= Q2F";
      stringArray0[3] = "function is not polynomial";
      stringArray0[4] = "t=+@P= Q2F";
      stringArray0[5] = "t=+@P= Q2F";
      stringArray0[6] = "t=+@P= Q2F";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.608E18;
      doubleArray2[1] = 0.7853981633974483;
      doubleArray2[2] = -0.0;
      doubleArray2[3] = 840.0;
      boolean boolean0 = MathArrays.equals(doubleArray2, (double[]) null);
      assertEquals(4, doubleArray2.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2.608E18, 0.7853981633974483, -0.0, 840.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.700416E38;
      doubleArray0[5] = (-2170.417);
      doubleArray0[6] = 3365.1241303;
      doubleArray0[7] = (-498.3695);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-498.3695);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, -0.0, Double.NaN, (-1.0), 1.700416E38, (-2170.417), 3365.1241303, (-498.3695)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-498.3695)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 498.3695, (-8.47435471712E40), 1081669.6350815, (-1677075.230255546), 248372.15853025002}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, Double.NaN, (-1.0), 1.700416E38, (-2170.417), 3365.1241303, (-498.3695)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-498.3695)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 498.3695, (-8.47435471712E40), 1081669.6350815, (-1677075.230255546), 248372.15853025002}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.NaN, -0.0, Double.NaN, (-1.0), 1.700416E38, (-2170.417), 3365.1241303, (-498.3695)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-498.3695)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 498.3695, (-8.47435471712E40), 1081669.6350815, (-1677075.230255546), 248372.15853025002}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, Double.NaN, (-498.3695), (-1.4409928350666321E79), (-2.347674164364684E9), (-5.643566325661366E9), (-1.2378110846064144E8)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1594.7714F;
      floatArray0[3] = 2982.876F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3535.6553F);
      floatArray0[6] = 2606.016F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1594.7714F, 2982.876F, 0.0F, (-3535.6553F), 2606.016F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.304E19;
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.304E19;
      double double1 = (-1193.2395781607177);
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale((-1193.2395781607177), doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 63;
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {63.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(3.6725170580355583E-9);
      assertEquals(3.6725170580355583E-9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination(557.5, 508.166418105111, 1.34217729E8, 508.166418105111);
      assertEquals(6.8205225894910576E10, double2, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3793.67834027378;
      doubleArray0[1] = 557.5;
      doubleArray0[2] = 6.8205225894910576E10;
      doubleArray0[3] = 15876.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3793.67834027378, 557.5, 6.8205225894910576E10, 15876.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7587.35668054756, 1115.0, 1.3641045178982115E11, 31752.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 88;
      intArray0[1] = 1;
      intArray0[2] = 223;
      intArray0[3] = 2141;
      intArray0[4] = 74;
      intArray0[5] = (-1628);
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {88, 1, 223, 2141, 74, (-1628)}, intArray0);
      assertNotEquals(double3, double2, 0.01);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 557.5;
      doubleArray2[1] = (Double) 15876.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray2.length);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {3793.67834027378, 557.5, 6.8205225894910576E10, 15876.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {7587.35668054756, 1115.0, 1.3641045178982115E11, 31752.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2105252745;
      intArray0[1] = 2708;
      intArray0[2] = (-564);
      intArray0[3] = 1631;
      intArray0[4] = (-2145685446);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray0);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray0);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-2145685446);
      intArray2[1] = 1631;
      intArray2[2] = (-564);
      intArray2[3] = 2708;
      intArray2[4] = 2105252745;
      int int0 = MathArrays.distance1(intArray1, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(88060364, int0);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray0);
      assertArrayEquals(new int[] {2105252745, 2708, (-564), 1631, (-2145685446)}, intArray1);
      assertArrayEquals(new int[] {(-2145685446), 1631, (-564), 2708, 2105252745}, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      
      Double double1 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int1 == int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(3.194134624589264E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      Double double1 = new Double(6.52E18);
      assertEquals(6.52E18, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double((-242.7304));
      assertEquals((-242.7304), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-242.7304), Double.NaN, 3.834E-20, Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2088;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {2088}, intArray0);
      assertNotEquals(double3, double2, 0.01);
      
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      Double double4 = new Double(715.61039167);
      assertEquals(715.61039167, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray2[2] = double4;
      doubleArray2[3] = double0;
      doubleArray2[5] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(6, doubleArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2625.3296F;
      floatArray0[1] = (-1190.79F);
      floatArray0[2] = (-2454.057F);
      floatArray0[3] = (-997.1236F);
      floatArray0[4] = (-156.86678F);
      floatArray0[5] = (-808.95807F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2625.3296F, (-1190.79F), (-2454.057F), (-997.1236F), (-156.86678F), (-808.95807F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(258.1957, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 1374;
      floatArray0[2] = (float) 1374;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1374.0F, 1374.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(4710709.953888999, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double[] doubleArray3 = new Double[5];
      Double double1 = new Double(0.008333333333329196);
      assertEquals(0.008333333333329196, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray3[0] = double1;
      Double double2 = new Double(1621.3);
      assertEquals(1621.3, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray3[1] = double2;
      Double double3 = new Double(1621.3);
      assertEquals(1621.3, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray3[2] = double3;
      Double double4 = new Double((double) doubleArray3[0]);
      assertEquals(5, doubleArray3.length);
      assertEquals(0.008333333333329196, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray3[3] = double4;
      Double double5 = new Double(1277.13683);
      assertEquals(1277.13683, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray3[4] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray3.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1111);
      intArray0[1] = 1690;
      intArray0[2] = 3282;
      intArray0[3] = (-5667);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1111), 1690, 3282, (-5667)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 15876.0;
      doubleArray0[2] = (-1570.0982);
      doubleArray0[3] = (-1570.0982);
      doubleArray0[4] = (-2487.508059893302);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.304E19, 15876.0, (-1570.0982), (-1570.0982), (-2487.508059893302), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.304E19, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 5;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(5, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1936.6948934));
      assertEquals((-1936.6948934), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-1936.6948934));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      Double double0 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      double double3 = MathArrays.linearCombination(0.06666666666666667, 604.414106068, 0.0, (-344.070835671747));
      assertEquals(40.29427373786667, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.003;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.003}, doubleArray0, 0.01);
      
      double double0 = 5.206150291559893E-8;
      double double1 = 909.33267921;
      double double2 = MathArrays.linearCombination(5.206150291559893E-8, (-21.57953589708042), 0.003, 0.003, 909.33267921, 0.003, 0.003, 561.89);
      assertEquals(4.413675914166929, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 909.33267921;
      doubleArray1[1] = 561.89;
      doubleArray1[2] = 561.89;
      doubleArray1[3] = 5.206150291559893E-8;
      doubleArray1[4] = 0.003;
      doubleArray1[5] = (-21.57953589708042);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {909.33267921, 561.89, 561.89, 5.206150291559893E-8, 0.003, (-21.57953589708042)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = (-2170.417);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2170.417);
      int int0 = (-13);
      Integer integer0 = new Integer((-13));
      assertEquals((-13), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int[] intArray0 = new int[11];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 63;
      doubleArray1[2] = (double) 63;
      doubleArray1[3] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 63.0, 63.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 63;
      doubleArray2[1] = (double) 63;
      MathArrays.scaleInPlace(63.0, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {3969.0, 3969.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int[] intArray0 = new int[11];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 63;
      doubleArray1[2] = (double) 63;
      doubleArray1[3] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 63.0, 63.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1054.1735F);
      doubleArray2[1] = (double) (-1054.1735F);
      MathArrays.scaleInPlace(63.0, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-66412.92810058594), (-66412.92810058594)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1778.6659F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2124.0F;
      floatArray0[7] = (-2557.0F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1778.6659F, (-1.0F), 0.0F, 0.0F, 0.0F, 2124.0F, (-2557.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray3 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.11113807559013367, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      double double0 = 15876.0;
      doubleArray1[1] = 15876.0;
      doubleArray1[2] = (-1570.0982);
      doubleArray1[3] = 194.1633;
      doubleArray1[4] = (-2487.508059893302);
      doubleArray1[5] = (-356.2784049772212);
      doubleArray1[6] = 0.07692307692307693;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(1.304E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 15876.0, (-1570.0982), 194.1633, (-2487.508059893302), (-356.2784049772212), 0.07692307692307693}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int[] intArray0 = new int[11];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 63;
      doubleArray1[2] = (double) 63;
      doubleArray1[3] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 63.0, 63.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1054.1735F);
      doubleArray3[1] = (double) (-1054.1735F);
      MathArrays.scaleInPlace(63.0, doubleArray3);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {(-66412.92810058594), (-66412.92810058594)}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(306.119878482);
      assertEquals(306.119878482, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      int int0 = 5;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 5, 5);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Double
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 670.5508;
      doubleArray0[1] = 4.3466666666666665E18;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {670.5508, 4.3466666666666665E18}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 63;
      floatArray0[2] = (float) 63;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 63;
      floatArray0[5] = (float) 63;
      floatArray0[6] = 1.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 63;
      floatArray1[1] = (float) 63;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 63.0F, 63.0F, 1.0F, 63.0F, 63.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {63.0F, 63.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 63.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 63;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {63.0, 1.0, 63.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {92}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 92;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {92.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8464.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {92.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {92.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8464.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {778688.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2625.3296F;
      float float0 = (-1190.79F);
      floatArray0[1] = (-1190.79F);
      floatArray0[2] = (-2454.057F);
      floatArray0[3] = (-997.1236F);
      floatArray0[4] = (-156.86678F);
      floatArray0[5] = (-808.95807F);
      floatArray0[6] = (-1054.1735F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2625.3296F, (-1190.79F), (-2454.057F), (-997.1236F), (-156.86678F), (-808.95807F), (-1054.1735F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2625.3296F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, 4.23719669792332E-8, 4.23719669792332E-8, 3506347.5098975, (-1514.43), 4.23719669792332E-8, 2402.249362580848, 0.1111111111111111);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1591.6233113);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      double[][] doubleArray3 = new double[1][7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = doubleArray0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3089.56F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3089.56F);
      floatArray1[1] = (-3089.56F);
      floatArray1[2] = (-3089.56F);
      floatArray1[3] = (-3089.56F);
      floatArray1[4] = (-3089.56F);
      floatArray1[5] = (-3089.56F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-3089.56F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3089.56F), (-3089.56F), (-3089.56F), (-3089.56F), (-3089.56F), (-3089.56F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double(3246L);
      assertEquals(3246.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = 2147483647L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double double1 = MathArrays.linearCombination((double) doubleArray0[0], (-468.8588061797248), (double) 2147483647L, (-4161.836807), (-4161.836807), (-1309.3734), (double) 3246L, (-468.8588061797248));
      assertEquals(7, doubleArray0.length);
      assertEquals((-8.937474078948154E12), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1875L;
      longArray0[1] = 3232L;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "NUMBER_OF_INTERPOLATION_POINTS";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-522.0);
      doubleArray0[1] = (double) 3232L;
      doubleArray0[2] = (double) 1875L;
      doubleArray0[3] = (double) 1875L;
      doubleArray0[4] = (double) 3232L;
      doubleArray0[5] = (double) 3232L;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1875L;
      doubleArray1[1] = (-1303.3765840720794);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-522.0), 3232.0, 1875.0, 1875.0, 3232.0, 3232.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1875.0, (-1303.3765840720794)}, doubleArray1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3232L;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 63;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][6];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1374;
      double[] doubleArray0 = new double[4];
      long[][] longArray1 = new long[1][7];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1993.406360679962;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 802.2287439835501;
      doubleArray0[5] = 0.3930083904764517;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2148.776403195165, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.3930083904764517, 0.0}, doubleArray0, 0.01);
      
      Double double1 = new Double(802.2287439835501);
      assertEquals(802.2287439835501, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-998.2484923824084), 3506347.5098975, 3099.9608480622965, 0.0);
      assertEquals((-3.5002061155239906E9), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {92}, intArray0);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double double0 = 4.6116860141324206E18;
      Double double1 = new Double(4.6116860141324206E18);
      assertEquals(4.6116860141324206E18, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int int0 = (-13);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-13), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 1.304E19;
      Double double1 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double double2 = 1153.11;
      Double double3 = new Double(1153.11);
      assertEquals(1153.11, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1493.429;
      doubleArray0[1] = 1493.429;
      double[] doubleArray1 = MathArrays.scale(1493.429, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2230330.1780410004, 2230330.1780410004}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double double0 = new Double(1493.429);
      assertEquals(1493.429, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination(Double.NaN, 3199.68190375, 3793.67834027378, 1493.429);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 531L;
      longArray0[1] = 2543L;
      longArray0[2] = 2543L;
      longArray0[3] = (-2630L);
      longArray0[4] = (-271L);
      longArray0[5] = (-2837L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,630 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 92;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 92;
      doubleArray1[1] = 715.1943251;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = (double) 92;
      doubleArray1[4] = (double) 92;
      doubleArray1[5] = (double) 92;
      doubleArray1[6] = (double) 92;
      doubleArray1[7] = (double) 92;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1493.429;
      doubleArray0[1] = 1493.429;
      double[] doubleArray1 = MathArrays.scale(1493.429, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2230330.1780410004, 2230330.1780410004}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-2630L);
      longArray0[4] = 531L;
      int[] intArray0 = new int[1];
      intArray0[0] = (-848);
      double double0 = MathArrays.linearCombination(1174.44569589, (double) (-2630L), 1268.2048422126793, 9.41353253285644, 9.41353253285644, 1268.2048422126793, 1268.2048422126793, 1268.2048422126793);
      assertEquals((-1456572.083298023), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2170.417);
      Double double0 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.linearCombination(3199.68190375, 3793.67834027378, 3793.67834027378, 1.86285714285714278E18);
      assertEquals(7.067080793881454E21, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1153.11);
      assertEquals(1153.11, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      int[] intArray0 = new int[8];
      intArray0[0] = 986;
      intArray0[1] = 2034;
      intArray0[2] = 610;
      intArray0[3] = 113;
      intArray0[4] = (-3782);
      intArray0[5] = 1188;
      intArray0[6] = 2388;
      intArray0[7] = 2424;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {986, 2034, 610, 113, (-3782), 1188, 2388, 2424}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double3 = MathArrays.distanceInf(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double3, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double4 = MathArrays.linearCombination(1.3040000000134222E19, (double) 2388, (double) 1188, (double) doubleArray1[0]);
      assertEquals(9, doubleArray1.length);
      assertEquals(4.6631040000320525E22, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 3595.32;
      MathArrays.scaleInPlace(1048.75377, doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {1048.75377, 0.0, 3770605.4043564005, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 185.170258, 0.0, 2796.028113053989, 0.0, (-1.0));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-286);
      intArray0[1] = (-948);
      intArray0[2] = 1720;
      intArray0[3] = 134217729;
      intArray0[4] = (-2871);
      intArray0[5] = 1120;
      intArray0[6] = 1015;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-286), (-948), 1720, 134217729, (-2871), 1120, 1015}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2146406894;
      intArray0[1] = 263;
      intArray0[2] = 263;
      intArray0[3] = 263;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {2146406894, 263, 263, 263}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      double[] doubleArray5 = MathArrays.ebeMultiply(doubleArray3, doubleArray4);
      assertEquals(0, doubleArray5.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      
      doubleArray6[0] = (double) 263;
      doubleArray6[1] = (double) 263;
      doubleArray6[2] = (double) 263;
      doubleArray6[3] = (double) 263;
      doubleArray6[4] = (double) 2146406894;
      double double1 = MathArrays.distanceInf(doubleArray4, doubleArray6);
      assertEquals(5, doubleArray6.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {263.0, 263.0, 263.0, 263.0, 2.146406894E9}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 263);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1.304E19);
      assertEquals(1.304E19, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1153.11);
      assertEquals(1153.11, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      doubleArray0[8] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double double2 = MathArrays.linearCombination((double) doubleArray0[8], (-1279.0), (double) doubleArray0[0], (double) doubleArray0[3], 1.304E19, 1153.11, (double) doubleArray0[5], 1153.11);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.7004160000000001E38, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(773.0, -0.0, 773.0, 202.6, 1.0, 773.0, 7016.6, 9421419.907777999);
      assertEquals(6.610649230771511E10, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 1.0F, (double) 0.0F, (double) 1.0F, (double) 1.0F, (double) 1.0F, (double) 1.0F, (double) 1.0F, (double) 0.0F);
      assertEquals(2.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (double) 0.0F;
      MathArrays.scaleInPlace(59.3318624017063, doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {59.3318624017063, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 2170.417, 3113.1993, 59.3318624017063, 537.8740276446545, 1.0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace(Double.NaN, doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(Double.NaN, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B(ab3O04M1";
      stringArray0[1] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1504);
      intArray0[1] = 2147482510;
      intArray0[2] = (-2478);
      intArray0[3] = 10;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2478));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      int int0 = 3;
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,170.417 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1374;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 2147483647L;
      doubleArray4[1] = (double) 3232L;
      doubleArray4[2] = (double) 2147483647L;
      doubleArray4[3] = (double) 3232L;
      double[] doubleArray5 = MathArrays.convolve(doubleArray4, doubleArray4);
      assertEquals(7, doubleArray5.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {4.6116860141324206E18, 1.3881334294208E13, 9.223372028275287E18, 2.7762668588416E13, 4.6116860141533123E18, 1.3881334294208E13, 1.0445824E7}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 3232.0, 2.147483647E9, 3232.0}, doubleArray4, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      double[] doubleArray6 = MathArrays.convolve(doubleArray2, doubleArray4);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(12, doubleArray6.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 3232.0, 2.147483647E9, 3232.0}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      MathArrays.checkPositive(doubleArray5);
      assertEquals(7, doubleArray5.length);
      assertEquals(4, doubleArray4.length);
      assertArrayEquals(new double[] {4.6116860141324206E18, 1.3881334294208E13, 9.223372028275287E18, 2.7762668588416E13, 4.6116860141533123E18, 1.3881334294208E13, 1.0445824E7}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 3232.0, 2.147483647E9, 3232.0}, doubleArray4, 0.01);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray6));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-2170.417);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      int int0 = 263;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      long[][] longArray1 = new long[8][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 263;
      longArray2[1] = 3952090531849364496L;
      longArray2[2] = (long) 263;
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2828.9819237;
      double double1 = 3508.3;
      doubleArray0[1] = 3508.3;
      double double2 = 673.5496366;
      doubleArray0[2] = 3508.3;
      double double3 = 3793.67834027378;
      double double4 = (-68.6);
      Double double5 = new Double((-68.6));
      assertEquals((-68.6), (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      double double6 = (-1.0);
      Double double7 = new Double((-1.0));
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 673.5496366);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3508.3, 3508.3, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 336.77481829999994, 336.77481829999994, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,508.3 >= 3,508.3)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1993.406360679962;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 802.2287439835501;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.3930083904764517;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1061.8707F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1061.8707F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.3930083904764517, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.3930083904764517, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.3930083904764517, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, 1.304E19, 0.3930083904764517, 802.2287439835501, (-482.8945), (double) 1.0F);
      assertEquals((-167.61187253307955), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {1.0F, 1061.8707F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {1.0F, 1061.8707F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3.5997360512765566E-9);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      long[][] longArray1 = new long[8][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 263;
      longArray2[1] = 3952090531849364496L;
      longArray2[2] = (long) 263;
      longArray2[3] = (long) 263;
      longArray2[4] = (long) 263;
      longArray2[5] = 1924L;
      longArray2[6] = (long) 263;
      longArray2[7] = (long) 263;
      longArray2[8] = (long) 263;
      longArray1[6] = longArray2;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
      
      double double0 = MathArrays.linearCombination((double) 263L, 1.625, 9.219544613762692E-9, 1.0, (-2170.417), (double) 1924L, (double) 263L, (double) 263L);
      assertEquals((-4106285.9329999904), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      Double double0 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.getInteger("URL_CONTAINS_NO_DATA", 256);
      assertEquals(256, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(256);
      assertEquals(256, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(8, integerArray0.length);
      assertEquals(256, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(552);
      assertEquals(552, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-3701));
      assertEquals((-3701), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertEquals(8, integerArray0.length);
      assertEquals(256, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      integerArray0[6] = integer1;
      Integer integer6 = Integer.valueOf((int) integerArray0[0]);
      assertEquals(8, integerArray0.length);
      assertEquals(256, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      
      integerArray0[7] = integer6;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1374;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 1374;
      integerArray0[1] = (Integer) 1374;
      integerArray0[2] = (Integer) 1374;
      integerArray0[3] = (Integer) 1374;
      Integer integer0 = new Integer(119);
      assertEquals(119, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 1374;
      integerArray0[6] = (Integer) 1374;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) (-1);
      doubleArray2[7] = (double) (-1);
      doubleArray2[8] = (double) (-1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean4 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.linearCombination(3.834E-20, (-1.0), 2612.972795623801, (-1.0));
      assertEquals((-2612.972795623801), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 92;
      doubleArray0[1] = (double) 92;
      doubleArray0[2] = (double) 92;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {92.0, 92.0, 92.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {92.0, 92.0, 92.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8464.0, 16928.0, 25392.0, 16928.0, 8464.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1493.429;
      doubleArray0[1] = 1493.429;
      double[] doubleArray1 = MathArrays.scale(1493.429, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2230330.1780410004, 2230330.1780410004}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1493.429, 1493.429}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-2630L);
      longArray0[1] = 4294967295L;
      longArray0[2] = (-1253L);
      longArray0[3] = (-271L);
      longArray0[4] = 531L;
      longArray0[5] = 2543L;
      longArray0[6] = (-1786L);
      longArray0[7] = (-505L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,630 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-MK~8}/Q8N";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "d,5:7";
      stringArray0[4] = "";
      stringArray0[5] = "q(h";
      stringArray0[6] = "S@\"vPTvL";
      stringArray0[7] = "";
      stringArray0[8] = "pw56}MV)Su}Ty]Wax";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 263;
      doubleArray2[1] = (-2170.417);
      doubleArray2[2] = (double) 263;
      doubleArray2[3] = (double) 263;
      doubleArray2[4] = (double) 263;
      doubleArray2[5] = (double) 263;
      doubleArray2[6] = (-2170.417);
      doubleArray2[7] = (double) 263;
      doubleArray2[8] = (-2170.417);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {263.0, (-2170.417), 263.0, 263.0, 263.0, 263.0, (-2170.417), 263.0, (-2170.417)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 263;
      doubleArray3[1] = (-2170.417);
      doubleArray3[2] = (double) 263;
      boolean boolean2 = MathArrays.equals(doubleArray3, doubleArray0);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {263.0, (-2170.417), 263.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1405));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination(19.28357006386476, 19.28357006386476, (-899.92), (-899.92));
      assertEquals(810227.8624744079, double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double(2543.618861195053);
      assertEquals(2543.618861195053, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double((-948.0));
      assertEquals((-948.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 19.28357006386476;
      doubleArray1[3] = 810227.8624744079;
      doubleArray1[4] = (-178.30698972);
      doubleArray1[5] = (-394.2);
      doubleArray1[6] = 19.28357006386476;
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1817.6921752139733);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 19.28357006386476, 810227.8624744079, (-178.30698972), (-394.2), 19.28357006386476}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.04328993146156921, 1818.8908235667882, (-0.40028362686647273), (-0.8849445888719676), 0.04328993146156921}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 19.28357006386476, 810227.8624744079, (-178.30698972), (-394.2), 19.28357006386476}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.04328993146156921, 1818.8908235667882, (-0.40028362686647273), (-0.8849445888719676), 0.04328993146156921}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 19.28357006386476, 810227.8624744079, (-178.30698972), (-394.2), 19.28357006386476}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.04328993146156921, 1818.8908235667882, (-0.40028362686647273), (-0.8849445888719676), 0.04328993146156921}, doubleArray2, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double4 = MathArrays.linearCombination(1218710.018304, 344.0, 4508.8, (-394.2), 19.28357006386476, 1817.6921752139733);
      assertEquals(4.1749392893099123E8, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-13);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-13), (-13));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      Double double0 = new Double(3793.67834027378);
      assertEquals(3793.67834027378, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.linearCombination(100.0, (-2170.417), 0.0, 812117.5029376312, 3.834E-20, 3793.67834027378);
      assertEquals((-217041.69999999998), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 3595.32;
      doubleArray2[3] = (double) 1.0F;
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2462.7380739764;
      doubleArray0[1] = 1986.1;
      doubleArray0[2] = (-711.8647580510224);
      doubleArray0[3] = (-2315.57826);
      doubleArray0[4] = 1.5874010519681994;
      doubleArray0[5] = (-2433.72);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-2055.973);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2315.57826);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1993.406360679962;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 802.2287439835501;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1061.8707F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1061.8707F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1993.406360679962, 0.0, 802.2287439835501, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4022;
      intArray0[1] = 715;
      intArray0[2] = (-482);
      intArray0[3] = (-903);
      intArray0[4] = 1;
      intArray0[5] = (-2377);
      intArray0[6] = 2841;
      intArray0[7] = (-625);
      intArray0[8] = (-477);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (-903);
      intArray1[3] = (-477);
      intArray1[4] = 715;
      intArray1[5] = 4022;
      intArray1[6] = (-625);
      intArray1[7] = 715;
      intArray1[8] = 4022;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(9619.964033196798, double1, 0.01);
      assertArrayEquals(new int[] {4022, 715, (-482), (-903), 1, (-2377), 2841, (-625), (-477)}, intArray0);
      assertArrayEquals(new int[] {1, 1, (-903), (-477), 715, 4022, (-625), 715, 4022}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1103.95163627681;
      MathArrays.scaleInPlace(1103.95163627681, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2443;
      intArray0[1] = 2;
      intArray0[2] = 55;
      intArray0[3] = 1374;
      intArray0[4] = (-2923);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2443, 2, 55, 1374, (-2923)}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Double double0 = new Double((-1384.5069718452303));
      assertEquals((-1384.5069718452303), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = 0.27522758746852;
      Double double2 = new Double(0.27522758746852);
      assertEquals(0.27522758746852, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-1384.5069718452303));
      assertEquals((-1384.5069718452303), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(0.27522758746852);
      assertEquals(0.27522758746852, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Double double5 = new Double(0.27522758746852);
      assertEquals(0.27522758746852, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      
      Double double6 = new Double(1.0);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      Double double7 = new Double(0.041666666666621166);
      assertEquals(0.041666666666621166, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double5;
      doubleArray0[1] = double5;
      doubleArray0[2] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = (-3831);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-3831), (-3831));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2666.422261767102);
      assertEquals(2666.422261767102, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(3610564.514143887);
      assertEquals(3610564.514143887, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(3610564.514143887);
      assertEquals(3610564.514143887, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      
      Double double5 = new Double(3610564.514143887);
      assertEquals(3610564.514143887, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      
      Double double6 = new Double(2.17333333333333325E18);
      assertEquals(2.17333333333333325E18, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 20.0, (-899.92), (-899.92));
      assertEquals(810256.0064, double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double(2543.618861195053);
      assertEquals(2543.618861195053, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(750.38069);
      assertEquals(750.38069, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[2] = double3;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2543.618861195053;
      doubleArray1[1] = (-899.92);
      doubleArray1[2] = 810256.0064;
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (-178.30698972);
      doubleArray1[5] = (double) doubleArray0[1];
      doubleArray1[6] = (-354.276023843822);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (double) doubleArray0[1]);
      assertEquals(7, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2543.618861195053, (-899.92), 810256.0064, 750.38069, (-178.30698972), 0.0, (-354.276023843822)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertEquals(7, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2543.618861195053, (-899.92), 810256.0064, 750.38069, (-178.30698972), 0.0, (-354.276023843822)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1733.88892935076;
      doubleArray3[2] = (double) doubleArray0[1];
      doubleArray3[3] = 2543.618861195053;
      doubleArray3[4] = (-354.276023843822);
      doubleArray3[5] = (double) doubleArray0[2];
      doubleArray3[6] = (double) doubleArray0[0];
      doubleArray3[7] = (-899.92);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      assertEquals(7, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1733.88892935076, 0.0, 2543.618861195053, (-354.276023843822), 750.38069, 2543.618861195053, (-899.92)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2543.618861195053, (-899.92), 810256.0064, 750.38069, (-178.30698972), 0.0, (-354.276023843822)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      
      double double4 = MathArrays.linearCombination((-1605.1476486), 1969.0, (-1605.1476486), 1.63E18, (-899.92), 1218710.018304);
      assertEquals((-2.6163906672191E21), double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1103.95163627681;
      MathArrays.scaleInPlace(1103.95163627681, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      
      Double double0 = new Double(750.38069);
      assertEquals(750.38069, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(750.38069);
      assertEquals(750.38069, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1218709.2152382461);
      assertEquals(1218709.2152382461, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-2.5857668567479893E-8));
      assertEquals((-2.5857668567479893E-8), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(750.38069);
      assertEquals(750.38069, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      
      Double double5 = new Double(776.5137156677272);
      assertEquals(776.5137156677272, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-890);
      intArray0[1] = 1424;
      intArray0[2] = (-2655);
      intArray0[3] = 1935;
      intArray0[4] = 184;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-890), 1424, (-2655), 1935, 184}, intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 184;
      intArray1[1] = (-2655);
      intArray1[2] = 1935;
      intArray1[3] = (-2655);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1374;
      intArray0[1] = (-2923);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1374, (-2923)}, intArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1420);
      assertEquals(1420, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) 1374;
      integerArray0[3] = (Integer) (-2923);
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4161.836807);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4161.836807)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-842.5), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3506347.5098975}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-4161.836807), (-27.793541322125556), 3199.68190375, (-1261.38941442442));
      assertEquals((-3920372.699644328), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      long[][] longArray1 = new long[8][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 263;
      longArray2[1] = 3952090531849364496L;
      longArray2[2] = (long) 263;
      longArray2[3] = (long) 263;
      longArray2[4] = (long) 263;
      longArray2[5] = 1924L;
      longArray2[6] = (long) 263;
      longArray2[7] = (long) 263;
      longArray2[8] = (long) 263;
      longArray1[6] = longArray2;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(8, longArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 263
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2597.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3544.8F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1517.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1517.0F;
      floatArray1[2] = 1517.0F;
      floatArray1[3] = 3544.8F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2597.0F, 0.0F, 3544.8F, 1.0F, 1517.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1517.0F, 1517.0F, 3544.8F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2597.0F;
      doubleArray0[2] = (double) 3544.8F;
      doubleArray0[3] = (double) 3544.8F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2597.0, 3544.800048828125, 3544.800048828125}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1432);
      assertEquals(0, doubleArray0.length);
      assertEquals(1432, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1432;
      intArray0[1] = 1432;
      intArray0[2] = 1432;
      intArray0[3] = 1432;
      intArray0[4] = 1432;
      intArray0[5] = 1432;
      intArray0[6] = 1432;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1432, 1432, 1432, 1432, 1432, 1432, 1432}, intArray0);
      assertArrayEquals(new int[] {1432, 1432, 1432, 1432, 1432, 1432, 1432}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1432, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1630.78314314311);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1491.7621F;
      floatArray0[3] = (-2818.671F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1491.7621F, (-2818.671F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) (-2818.671F);
      doubleArray1[2] = (double) (-2818.671F);
      doubleArray1[3] = (-1630.78314314311);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, (-2818.6708984375), (-2818.6708984375), (-1630.78314314311), 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1103.9979417247218;
      int[] intArray0 = new int[5];
      intArray0[0] = 2443;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1374;
      intArray0[4] = (-2923);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2443, 2, 2, 1374, (-2923)}, intArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1103.9979417247218}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((double) 2, 3404.7, 1.304E19, 2369.42913758, (double) 2, (double) 55);
      assertEquals(3.0897355954043197E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 463;
      intArray0[1] = (-384);
      intArray0[2] = 0;
      intArray0[3] = 92;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-384);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2697.465);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {100.0, (-2697.465)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1807L;
      longArray2[1] = 1807L;
      longArray2[2] = 1807L;
      longArray2[3] = 4503599627370496L;
      longArray0[2] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1807L;
      longArray0[3] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 885L;
      longArray4[1] = 1807L;
      longArray4[2] = 4503599627370496L;
      longArray4[3] = 4503599627370496L;
      longArray4[4] = 885L;
      longArray4[5] = 885L;
      longArray4[6] = 885L;
      longArray4[7] = 1807L;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-4220L);
      longArray5[1] = (-467L);
      longArray5[2] = 885L;
      longArray0[5] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray0[6] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-4220L);
      longArray7[1] = (-467L);
      longArray7[2] = (-4220L);
      longArray7[3] = 4503599627370496L;
      longArray7[4] = 885L;
      longArray7[5] = (-467L);
      longArray0[7] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,220 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 134217729;
      intArray0[2] = (-1682);
      intArray0[3] = 8;
      intArray0[4] = (-1951);
      intArray0[5] = (-2121);
      intArray0[6] = 0;
      intArray0[7] = 63;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 134217729, (-1682), 8, (-1951), (-2121), 0, 63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2121);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 63;
      doubleArray0[4] = (double) (-1951);
      doubleArray0[5] = (double) (-1682);
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = (double) (-1682);
      doubleArray0[8] = (double) 134217729;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4498641.0, 64.0, 0.0, 3969.0, 3806401.0, 2829124.0, 1.801439877791744E16, 2829124.0, 1.801439877791744E16}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2121.0), 8.0, 0.0, 63.0, (-1951.0), (-1682.0), 1.34217729E8, (-1682.0), 1.34217729E8}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1103.95163627681;
      MathArrays.scaleInPlace(1103.95163627681, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1218709.2152382461}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2443;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1358.8546923562787;
      doubleArray0[2] = (-3735.2704649114407);
      doubleArray0[3] = (-3595.32);
      doubleArray0[4] = (-354.276023843822);
      doubleArray0[6] = 1358.8546923562787;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-354.276023843822));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.07130934397294708), 96.89903666648706, (-266.3596864143599), (-256.3799105728161), (-25.263190845647102), 0.0, 96.89903666648706}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.07130934397294708), 96.89903666648706, (-266.3596864143599), (-256.3799105728161), (-25.263190845647102), 0.0, 96.89903666648706}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.07130934397294708), 96.89903666648706, (-266.3596864143599), (-256.3799105728161), (-25.263190845647102), 0.0, 96.89903666648706}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 559.911944705;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 559.911944705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2923);
      intArray0[2] = (-2923);
      intArray0[3] = (-2923);
      intArray0[4] = (-2923);
      intArray0[5] = 0;
      intArray0[6] = (-768);
      intArray0[7] = (-2923);
      intArray0[8] = (-2923);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, (-2923), (-2923), (-2923), (-2923), 0, (-768), (-2923), (-2923)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1103.95163627681;
      doubleArray1[1] = 1103.95163627681;
      doubleArray1[2] = 1103.95163627681;
      doubleArray1[3] = 1103.95163627681;
      doubleArray1[4] = 1354.9848224;
      doubleArray1[5] = 1103.95163627681;
      doubleArray1[6] = 0.4342944622039795;
      doubleArray1[7] = 1103.95163627681;
      doubleArray1[8] = 1103.95163627681;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,103.952 >= 1,103.952)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 559.911944705;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(559.911944705, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2170.417);
      doubleArray0[1] = (-2170.417);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 263);
      assertEquals(3, doubleArray0.length);
      assertEquals(263, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2170.417), (-2170.417), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[][] longArray1 = new long[8][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 263;
      longArray2[1] = 3952090531849364496L;
      longArray2[2] = (long) 263;
      longArray2[3] = (long) 263;
      longArray2[4] = (long) 263;
      longArray2[5] = 1924L;
      longArray2[6] = (long) 263;
      longArray2[7] = (long) 263;
      longArray2[8] = (long) 263;
      longArray1[6] = longArray2;
      longArray1[7] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(8, longArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 263L;
      floatArray0[1] = (float) 1924L;
      floatArray0[2] = (float) 1924L;
      floatArray0[3] = (float) 1924L;
      floatArray0[4] = (float) 263L;
      floatArray0[5] = (float) 263L;
      floatArray0[6] = (float) 3952090531849364496L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {263.0F, 1924.0F, 1924.0F, 1924.0F, 263.0F, 263.0F, 3.95209064E18F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2615);
      intArray0[1] = 134217729;
      intArray0[2] = (-1682);
      intArray0[3] = 8;
      intArray0[4] = (-1969);
      intArray0[5] = (-2121);
      intArray0[6] = 0;
      intArray0[7] = 63;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2615), 134217729, (-1682), 8, (-1969), (-2121), 0, 63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1969);
      doubleArray0[1] = (double) 63;
      doubleArray0[2] = (-767.46);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 134217729;
      doubleArray0[6] = (double) (-1682);
      doubleArray0[7] = 4078.6;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1969.0), 63.0, (-767.46), 8.0, 0.0, 1.34217729E8, (-1682.0), 4078.6}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.3421772908916143E8, double1, 0.01);
      assertArrayEquals(new double[] {(-1969.0), 63.0, (-767.46), 8.0, 0.0, 1.34217729E8, (-1682.0), 4078.6}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1358.8546923562787;
      doubleArray0[2] = (-3735.2704649114407);
      doubleArray0[3] = (-3595.32);
      doubleArray0[4] = (-354.276023843822);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2111.4558383162002);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1821.675231);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertEquals(19, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      
      double[] doubleArray5 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      
      double[] doubleArray6 = MathArrays.normalizeArray(doubleArray2, 119.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray6.length);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {19.833333333333336, 19.833333333333332, 19.833333333333336, 19.833333333333336, 19.833333333333332, Double.NaN, 19.833333333333332}, doubleArray6, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, Double.NaN, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.linearCombination(Double.NaN, (-2111.4558383162002), 1358.8546923562787, (-3595.32), (-3735.2704649114407), (-2404.283339094413));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-3595.32);
      doubleArray7[1] = (-3595.32);
      doubleArray7[2] = (-2111.4558383162002);
      double double1 = MathArrays.safeNorm(doubleArray7);
      assertEquals(3, doubleArray7.length);
      assertEquals(5505.533358536625, double1, 0.01);
      assertArrayEquals(new double[] {(-3595.32), (-3595.32), (-2111.4558383162002)}, doubleArray7, 0.01);
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2620.2185);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1216L);
      longArray0[6] = 0L;
      longArray0[7] = 2147483647L;
      longArray0[8] = 73L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,216 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 20.0, (-899.92), (-2375.965272));
      assertEquals(2138578.66757824, double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double(2543.618861195053);
      assertEquals(2543.618861195053, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(750.38069);
      assertEquals(750.38069, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((-2375.965272));
      assertEquals((-2375.965272), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double((-2431.3607346875));
      assertEquals((-2431.3607346875), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(776.5137156677272);
      assertEquals(776.5137156677272, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      
      doubleArray0[6] = double7;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 776.5137156677272;
      doubleArray1[1] = (double) doubleArray0[4];
      doubleArray1[2] = (double) doubleArray0[1];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 106);
      assertEquals(3, doubleArray1.length);
      assertEquals(106, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {776.5137156677272, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-127.167523);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 2687.7885037318;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-127.167523));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-127.167523), 1.34217729E8, 2687.7885037318, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2048535248748009E-4, (-127.1650969299298), (-0.0025465554226759817), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2111.4558383162002);
      doubleArray2[1] = (-127.167523);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-251.7890464989);
      doubleArray0[2] = 1358.8546923562787;
      doubleArray0[4] = (-3735.2704649114407);
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1691);
      intArray0[1] = (-283);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-989));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 559.911944705;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 559.911944705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double double0 = MathArrays.linearCombination(0.0, 559.911944705, 2548.9535518252715, 0.0, 559.911944705, (-1306.6));
      assertEquals((-731580.946951553), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-2615);
      intArray0[0] = (-2615);
      int int1 = 134217729;
      intArray0[1] = 134217729;
      int int2 = (-1682);
      intArray0[2] = (-1682);
      int int3 = 8;
      intArray0[3] = 8;
      int int4 = (-1951);
      intArray0[4] = (-1951);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1682);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (134,217,729 > 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1630.78314314311);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1491.7621F;
      floatArray0[3] = (-2818.671F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1491.7621F, (-2818.671F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 63;
      intArray0[2] = 63;
      intArray0[3] = 0;
      intArray0[4] = (-537);
      intArray0[5] = 63;
      intArray0[6] = 63;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0, 63, 63, 0, (-537), 63, 63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1358.8546923562787;
      doubleArray0[2] = (-3735.2704649114407);
      doubleArray0[3] = (-3595.32);
      doubleArray0[4] = (-354.276023843822);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2111.4558383162002);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1821.675231);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.4317549844016164, (-586.6922865023485), 1612.7216413136575, 1552.2973305188195, 152.96043914855605, -0.0, 911.631582536913}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(4541.63128556827, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1630.78314314311);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2818.671F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2818.671F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3261.56628628622)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1630.78314314311, double0, 0.01);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3261.56628628622)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1630.78314314311)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2870);
      intArray0[1] = (-2870);
      intArray0[2] = (-2870);
      intArray0[3] = 238;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1358.8546923562787;
      doubleArray0[2] = (-3735.2704649114407);
      doubleArray0[3] = (-3595.32);
      doubleArray0[4] = (-354.276023843822);
      doubleArray0[6] = 1358.8546923562787;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1821.675231);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.3666702144981808, (-498.25154151813626), 1369.6124225777976, 1318.2967555895996, 129.90246565437684, -0.0, (-498.25154151813626)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.3666702144981808, (-498.25154151813626), 1369.6124225777976, 1318.2967555895996, 129.90246565437684, -0.0, (-498.25154151813626)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, 1358.8546923562787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.3666702144981808, (-498.25154151813626), 1369.6124225777976, 1318.2967555895996, 129.90246565437684, -0.0, (-498.25154151813626)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 8.0, 12.0, 8.0, 4.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(11.832159566199232, double0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 8.0, 12.0, 8.0, 4.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 8.0, 12.0, 8.0, 4.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2828.9819237;
      doubleArray0[1] = 3508.3;
      doubleArray0[2] = 673.5496366;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1682);
      intArray0[1] = 63;
      intArray0[2] = 63;
      intArray0[3] = (-1951);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1682), 63, 63, (-1951)}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((double) 63, (double) (-1682), (double) (-1951), 475.127045589847, 2828.9819237, (double) 63);
      assertEquals((-854713.0047526915), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-173.60885);
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[6] = 2403.4973479879;
      doubleArray0[3] = 84.066335950044;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 559.911944705;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 559.911944705}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(2.2009647564881966E7, 559.911944705, 2.2009647564881966E7, 1786.9, 0.1428571343421936, 602.193);
      assertEquals(5.165250389003988E10, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1358.8546923562787;
      doubleArray0[2] = (-3735.2704649114407);
      doubleArray0[3] = (-3595.32);
      doubleArray0[4] = (-354.276023843822);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2111.4558383162002);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1821.675231);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.4317549844016164, (-586.6922865023485), 1612.7216413136575, 1552.2973305188195, 152.96043914855605, -0.0, 911.631582536913}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1358.8546923562787, (-3735.2704649114407), (-3595.32), (-354.276023843822), 0.0, (-2111.4558383162002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2158774922008082, (-293.3461432511742), 806.3608206568288, 776.1486652594098, 76.48021957427802, -0.0, 455.8157912684565}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.632256887020926), (-4.632256887020925), (-4.632256887020926), (-4.632256887020926), (-4.632256887020925), Double.NaN, (-4.632256887020925)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.432 >= -586.692)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2606;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2606);
      assertEquals(1, intArray0.length);
      assertEquals(2606, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2606}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-283.351692);
      doubleArray0[1] = (double) 2606;
      doubleArray0[2] = (double) 2606;
      doubleArray0[3] = (double) 2606;
      doubleArray0[4] = (double) 2606;
      doubleArray0[5] = (double) 2606;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-283.351692), 2606.0, 2606.0, 2606.0, 2606.0, 2606.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 463;
      intArray0[1] = (-384);
      intArray0[2] = 0;
      intArray0[3] = 92;
      intArray0[4] = 0;
      intArray0[5] = 1733;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {463, (-384), 0, 92, 0, 1733}, intArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[1];
      longArray1[0] = 4206L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4206L;
      doubleArray0[1] = (double) 4206L;
      doubleArray0[2] = (double) 4206L;
      doubleArray0[3] = (double) 4206L;
      doubleArray0[4] = (double) 4206L;
      doubleArray0[5] = (double) 4206L;
      doubleArray0[6] = (double) 4206L;
      doubleArray0[7] = (double) 4206L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4206.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4206.0, 4206.0, 4206.0, 4206.0, 4206.0, 4206.0, 4206.0, 4206.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {525.75, 525.75, 525.75, 525.75, 525.75, 525.75, 525.75, 525.75}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-173.60885);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2403.4973479879;
      doubleArray0[3] = 84.066335950044;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2276.90320207719);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 224.62;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1.1048749019452618E7, double0, 0.01);
      assertArrayEquals(new double[] {(-173.60885), 0.0, 2403.4973479879, 84.066335950044, 0.0, (-2276.90320207719), 0.0, 224.62}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-173.60885), 0.0, 2403.4973479879, 84.066335950044, 0.0, (-2276.90320207719), 0.0, 224.62}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-541.71621), 0.0, 0.0, 0.0, (-3.141592653589793), (-3.141592653589793));
      assertEquals(9.869604401089358, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3123.2F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-223.29F);
      floatArray0[4] = 2483.5F;
      floatArray0[5] = 1413.6F;
      floatArray0[6] = (-5269.1772F);
      floatArray0[7] = (-282.4444F);
      floatArray0[8] = 1356.1731F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-3123.2F), 0.0F, (-223.29F), 2483.5F, 1413.6F, (-5269.1772F), (-282.4444F), 1356.1731F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3232L;
      int[] intArray0 = new int[2];
      intArray0[0] = 1374;
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[9][0];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 2147483647L;
      doubleArray3[1] = (double) 3232L;
      doubleArray3[2] = (double) 1374;
      doubleArray3[3] = (double) 2147483647L;
      doubleArray3[4] = (double) 1374;
      doubleArray3[5] = (double) 3232L;
      doubleArray3[6] = (double) 3232L;
      doubleArray3[7] = (double) 3232L;
      doubleArray3[8] = (double) 2147483647L;
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray1;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray2[5] = doubleArray4;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray2[8] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2818.671F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-2818.671F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) (-2818.671F);
      doubleArray1[2] = (double) (-2818.671F);
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = 1.0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[7][1];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray1;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) 0.0F;
      doubleArray4[2] = (double) 0.0F;
      doubleArray4[3] = (double) (-2818.671F);
      doubleArray4[4] = (double) (-2818.671F);
      doubleArray4[5] = (double) 0.0F;
      doubleArray4[6] = (double) 0.0F;
      doubleArray3[6] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 634.15875086988;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.34217729E8;
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 20.0;
      doubleArray2[1] = 634.15875086988;
      doubleArray1[2] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 553.2305785529;
      doubleArray0[2] = 1085.098151616;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 553.2305785529, 1085.098151616}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 553.2305785529;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1085.098151616;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1085.098151616;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1735.81971);
      doubleArray0[1] = (-1735.81971);
      doubleArray0[2] = (-1735.81971);
      doubleArray0[3] = (-368.894365748517);
      doubleArray0[4] = 1772.7;
      doubleArray0[5] = (-1735.81971);
      doubleArray0[6] = (-1735.81971);
      doubleArray0[7] = (-1735.81971);
      doubleArray0[8] = (-2853.4469);
      double[] doubleArray1 = MathArrays.scale((-1735.81971), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1735.81971), (-1735.81971), (-1735.81971), (-368.894365748517), 1772.7, (-1735.81971), (-1735.81971), (-1735.81971), (-2853.4469)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3013070.065624484, 3013070.065624484, 3013070.065624484, 640334.1109742246, (-3077087.599917), 3013070.065624484, 3013070.065624484, 3013070.065624484, 4953069.370458399}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2547;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-582);
      intArray0[4] = (-1);
      intArray0[5] = 765;
      intArray0[6] = (-1022);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2547, 0, (-1), (-582), (-1), 765, (-1022)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4059.20535;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4059.20535}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3029;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3029, 0, 1, (-1)}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3029;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {3029.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4059.20535, double0, 0.01);
      assertArrayEquals(new double[] {4059.20535}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 122;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 210;
      intArray0[7] = 0;
      intArray0[8] = 1746;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1520.0779F);
      floatArray0[1] = 0.0F;
      float float0 = (-723.891F);
      floatArray0[2] = (-723.891F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1520.0779F), 0.0F, (-723.891F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      long long0 = 2246L;
      longArray0[0] = 2246L;
      longArray0[1] = (-410L);
      long long1 = (-1985L);
      longArray0[2] = (-1985L);
      longArray0[3] = 0L;
      long long2 = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1441L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -410 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-127.167523);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 2687.7885037318;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 664.0167363;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-127.167523), 1.34217729E8, 2687.7885037318, 0.0, 0.0, 664.0167363}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-2697.465);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {100.0, (-2697.465)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[8][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 885L;
      longArray2[1] = 1807L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1807L;
      longArray3[1] = 1807L;
      longArray3[2] = 1807L;
      longArray3[3] = 4503599627370496L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1807L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 885L;
      longArray5[1] = 1807L;
      longArray5[2] = 4503599627370496L;
      longArray5[3] = 4503599627370496L;
      longArray5[4] = 885L;
      longArray5[5] = 885L;
      longArray5[6] = 885L;
      longArray5[7] = 1807L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-4220L);
      longArray6[1] = (-467L);
      longArray6[2] = 885L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[6];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray8[0] = (-4220L);
      longArray8[1] = (-467L);
      longArray8[2] = (-4220L);
      longArray8[3] = 4503599627370496L;
      longArray8[4] = 885L;
      longArray8[5] = (-467L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,220 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-64.9238777617415);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 688.09318717;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1265.62815319;
      doubleArray0[6] = (-647.844326);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-64.9238777617415), 0.0, 688.09318717, 0.0, 1265.62815319, (-647.844326)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3013.805235056;
      doubleArray0[1] = 2548.9535518252715;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 715.1943251;
      doubleArray0[4] = 542.0;
      doubleArray0[5] = 2369.42913758;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4691.444080971441, double0, 0.01);
      assertArrayEquals(new double[] {3013.805235056, 2548.9535518252715, 100.0, 715.1943251, 542.0, 2369.42913758}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3013.805235056, 2548.9535518252715, 100.0, 715.1943251, 542.0, 2369.42913758}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6027.610470112, 5097.907103650543, 200.0, 1430.3886502, 1084.0, 4738.85827516}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3013.805235056, 2548.9535518252715, 100.0, 715.1943251, 542.0, 2369.42913758}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3013.805235056, 2548.9535518252715, 100.0, 715.1943251, 542.0, 2369.42913758}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[1][7];
      doubleArray3[0] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {3013.805235056, 2548.9535518252715, 100.0, 715.1943251, 542.0, 2369.42913758}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1430.3886502, 5097.907103650543, 4738.85827516, 6027.610470112, 1084.0, 200.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-2256.8938986);
      doubleArray0[2] = 2393.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 850.6741561758;
      doubleArray0[6] = 100.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, (-2256.8938986), 2393.5, 0.0, 0.0, 850.6741561758, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-2256.8938986), 2393.5, 0.0, 0.0, 850.6741561758, 100.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0 >= -2,256.894)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 2818L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2818L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 2818L;
      longArray4[2] = 3908L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = (-1073741824L);
      longArray4[6] = 2818L;
      longArray4[7] = 2818L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 3908L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2615);
      intArray0[1] = 134217729;
      intArray0[2] = (-1682);
      intArray0[3] = 8;
      intArray0[4] = (-1951);
      intArray0[5] = (-2121);
      intArray0[6] = 0;
      intArray0[7] = 63;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2615), 134217729, (-1682), 8, (-1951), (-2121), 0, 63}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1072.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = MathArrays.linearCombination(20.0, 20.0, (-899.92), (-2375.965272));
      assertEquals(2138578.66757824, double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      Double double1 = new Double(2543.618861195053);
      assertEquals(2543.618861195053, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(750.38069);
      assertEquals(750.38069, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((-2375.965272));
      assertEquals((-2375.965272), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double((-2431.3607346875));
      assertEquals((-2431.3607346875), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[5] = double6;
      Double double7 = new Double(776.5137156677272);
      assertEquals(776.5137156677272, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      
      doubleArray0[6] = double7;
      Double double8 = new Double((-333.8832812565));
      assertEquals((-333.8832812565), (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      
      doubleArray0[7] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 590.9;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {590.9, (-1.0), 0.0, 0.0, 1.7976931348623157E308, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 1361L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 3098L;
      longArray0[6] = 531L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      try { 
        MathArrays.normalizeArray(doubleArray0, 730.014144433319);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 146.9263795805;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 324.874;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-3384.5370842);
      doubleArray0[6] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[5];
      longArray1[0] = 280L;
      longArray1[1] = (-2108L);
      longArray1[2] = (-1L);
      longArray1[3] = 248L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 248L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 0L;
      longArray3[1] = (-1L);
      longArray3[2] = 280L;
      longArray3[3] = (-1L);
      longArray3[4] = (-9223372036854775808L);
      longArray3[5] = 0L;
      longArray3[6] = 226L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = 280L;
      longArray4[2] = (-1L);
      longArray4[3] = (-2108L);
      longArray4[4] = (-2108L);
      longArray4[5] = 280L;
      longArray4[6] = 226L;
      longArray4[7] = (-9223372036854775808L);
      longArray4[8] = 280L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 544.764999202334;
      doubleArray0[1] = (-1756.0259535);
      doubleArray0[2] = 0.003;
      doubleArray0[3] = (-793.2936366127);
      doubleArray0[4] = (-1840.871042469606);
      doubleArray0[5] = 2261.92566062289;
      doubleArray0[6] = (-4235.11506143);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-4235.11506143), doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-2198));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2828.9819237;
      doubleArray0[1] = 3508.3;
      doubleArray0[2] = 673.5496366;
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2828.9819237);
      Double double3 = new Double(2828.9819237);
      Double double4 = new Double(2828.9819237);
      Double double5 = new Double(0.0);
      Double double6 = new Double((-251.5203599506));
      Double double7 = new Double(0.375);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = double5;
      doubleArray1[1] = (Double) 3508.3;
      doubleArray1[2] = double6;
      doubleArray1[3] = double5;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 2280, (-3787));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 3265.9;
      doubleArray0[4] = (-255.2684316488359);
      doubleArray0[5] = (-3792.2842346342);
      doubleArray0[6] = (-581.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3265.9;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      double double0 = 1976.0;
      doubleArray0[1] = 1976.0;
      double double1 = (-776.662565912);
      doubleArray0[2] = (-776.662565912);
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double3 = 0.0;
      doubleArray0[5] = 0.0;
      double double4 = 0.0;
      doubleArray0[6] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -776.663 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 559.911944705;
      MathArrays.copyOf(doubleArray0, 0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2828.9819237;
      doubleArray0[0] = 2828.9819237;
      doubleArray0[1] = 3508.3;
      doubleArray0[2] = 673.5496366;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-94.39);
      doubleArray0[5] = (-2229.5622);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3508.3;
      doubleArray1[1] = 3508.3;
      doubleArray1[2] = 673.5496366;
      doubleArray1[3] = (-2229.5622);
      doubleArray1[4] = (-2229.5622);
      doubleArray1[5] = (-2229.5622);
      doubleArray1[6] = (-94.39);
      doubleArray1[7] = 673.5496366;
      doubleArray1[8] = 673.5496366;
      MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1027), 1958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1915.79151000765);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-2221.74114695185);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3831.5830200153), 4.0, (-4443.4822939037)}, doubleArray1, 0.01);
  }
}
