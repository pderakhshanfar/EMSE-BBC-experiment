/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:15:27 GMT 2020
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[15];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.1166836264585081E7;
      doubleArray0[1] = (-3428.778064);
      doubleArray0[2] = 1260.238184486;
      doubleArray0[3] = 41633.12890857767;
      doubleArray0[4] = 3087.08;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = (-4.9E-324);
      doubleArray0[7] = 4.9E-324;
      doubleArray0[8] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1931.0F);
      floatArray0[2] = 2424.6624F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1450.9F;
      floatArray0[5] = 3350.59F;
      floatArray0[6] = (-2253.8F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = 3350.59F;
      floatArray1[1] = 3350.59F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-253.21F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-1.0F);
      floatArray1[7] = 2424.6624F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1450.9F;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 5.207000323380292E-8;
      doubleArray1[1] = (-774.3396180532983);
      doubleArray1[2] = (double) 3350.59F;
      doubleArray1[3] = (double) 3350.59F;
      doubleArray1[4] = (double) 1450.9F;
      doubleArray1[5] = (double) (-1.0F);
      doubleArray1[6] = (double) (-2253.8F);
      doubleArray1[7] = (double) (-1931.0F);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) (-253.21F);
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = 524.1210554048;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 3350.59F;
      doubleArray2[7] = (double) (-1931.0F);
      MathArrays.linearCombination(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/<|/W(k5*-'U?|";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "";
      stringArray0[3] = "Ug)3Y>=K";
      stringArray0[4] = "JTo7gL(i|Y{sokJ2AOa";
      stringArray0[5] = "3j:@#(a{R'";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2768.010009765625;
      doubleArray0[1] = 2881.3411;
      doubleArray0[2] = 2.17333333333333325E18;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 777.81;
      doubleArray0[5] = 5949.0;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3029.3584F);
      MathArrays.equals(floatArray0, floatArray0);
      long[][] longArray0 = new long[7][7];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      longArray0[4] = null;
      longArray0[5] = null;
      longArray0[6] = null;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[8];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.copyOf(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1104.0013594131503);
      doubleArray0[1] = 9848.0;
      doubleArray0[2] = (-31.3145918);
      doubleArray0[3] = 726.018;
      doubleArray0[4] = (-1478.319);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 730.67;
      doubleArray0[7] = (-513.02272949553);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1166;
      intArray0[1] = (-957);
      intArray0[2] = 168;
      intArray0[3] = 1100;
      intArray0[4] = (-1409);
      intArray0[5] = (-2146485745);
      int[] intArray1 = new int[6];
      intArray1[0] = (-2146485745);
      intArray1[1] = 168;
      intArray1[2] = 1166;
      intArray1[3] = (-1409);
      intArray1[4] = (-957);
      intArray1[5] = (-1380);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1455.4F;
      floatArray0[2] = 459.167F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1351.88F);
      floatArray0[5] = -0.0F;
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-1351.88F);
      floatArray1[1] = 1455.4F;
      floatArray1[2] = (-1351.88F);
      floatArray1[3] = 2202.3127F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = -0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = (-1379);
      intArray0[2] = 2247;
      intArray0[3] = (-1556);
      intArray0[4] = 0;
      intArray0[5] = (-3744);
      int[] intArray1 = new int[9];
      intArray1[0] = 5;
      intArray1[1] = (-3744);
      intArray1[2] = (-3744);
      intArray1[3] = 2247;
      intArray1[4] = 0;
      intArray1[5] = 5;
      intArray1[6] = (-3744);
      intArray1[7] = (-3744);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 170.382581725, 0.12502530217170715, 0.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1919.732874921;
      doubleArray0[1] = (-82.9622945);
      doubleArray0[2] = (-93.91798);
      doubleArray0[3] = (-692.3881);
      doubleArray0[4] = 0.7249995199969751;
      doubleArray0[5] = (-1158.40183);
      doubleArray0[6] = 1791.30090436159;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1919.732874921;
      doubleArray1[1] = (-692.3881);
      doubleArray1[2] = 2.0992790123456787E36;
      doubleArray1[3] = (-409.9938);
      doubleArray1[4] = 1791.30090436159;
      doubleArray1[5] = (-692.3881);
      doubleArray1[6] = (-82.9622945);
      doubleArray1[7] = 1791.30090436159;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 49;
      floatArray0[1] = (float) 17;
      floatArray0[2] = (float) 49;
      floatArray0[3] = (float) 49;
      floatArray0[4] = (-1896.9F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.buildArray(field0, 49, 17);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-1325.2783397528258), 0.0, (-1016.1757587), 0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1016.1757587);
      doubleArray1[1] = (-1016.1757587);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.scale(1437.0895397083095, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = (-3075.575937787);
      doubleArray0[2] = 0.008333333333333333;
      doubleArray0[3] = (-1395.381);
      doubleArray0[4] = 1727.1501325;
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 937.6514381;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 222.3F;
      floatArray0[1] = 1239.88F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = Float.NaN;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-14.0);
      doubleArray0[1] = (-90.91869449644194);
      MathArrays.distance1(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 6610.52824676;
      doubleArray1[1] = 1.9699272335463627E-8;
      doubleArray1[2] = 1625.15;
      doubleArray1[3] = 1365.0;
      doubleArray1[4] = (-1192.1287999406545);
      doubleArray1[5] = (-1583.8488393784742);
      doubleArray1[6] = 2.0797171002248604E10;
      doubleArray1[7] = 1.7827257129423813E-8;
      MathArrays.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      float[] floatArray2 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      float[] floatArray3 = new float[1];
      floatArray3[0] = 0.0F;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray3, floatArray4);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[1];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      MathArrays.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-683.1327497838541);
      doubleArray1[1] = (-683.1327497838541);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1678.0613F;
      floatArray0[1] = (-2887.566F);
      floatArray0[2] = (-3196.5F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1824.5529F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1824.5529F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      float[] floatArray2 = new float[3];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-3196.5F);
      floatArray2[2] = 1678.0613F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray2);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray2);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      double double0 = (-994.0);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-994.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      Double double0 = new Double(0.0);
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (-5888L);
      double[] doubleArray1 = new double[0];
      MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = (-708.45);
      doubleArray2[2] = 1.883511811213715E-8;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 208, (-14));
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 3064, 208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[3] = (-290);
      intArray0[4] = (-290);
      intArray0[5] = (-3986);
      intArray0[4] = 0;
      intArray0[7] = (-290);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-290);
      doubleArray0[2] = (double) (-290);
      doubleArray0[3] = (double) 2;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 74420.0);
      MathArrays.linearCombination((double) (-3986), (-4347.85973559), (-3272.3907761), 3.1660099222737955E-7, 3.141592653589793, (double) (-290), (double) (-290), (-4347.85973559));
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-683.1327497838541);
      doubleArray1[1] = (-1631.48090160421);
      doubleArray1[2] = (-871.0);
      doubleArray1[3] = 1731.0753;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-780L);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2554);
      intArray0[1] = 15;
      intArray0[2] = (-942);
      intArray0[3] = 1425;
      intArray0[4] = (-2377);
      intArray0[5] = 3022;
      intArray0[6] = 1068;
      intArray0[7] = (-2377);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.copyOf(intArray0, 300);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathArrays.OrderDirection.values();
      int[] intArray0 = new int[1];
      intArray0[0] = 154;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-0.6347F);
      floatArray0[1] = -0.0F;
      floatArray0[2] = (-4049.9355F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = (-1145.85145);
      doubleArray0[2] = (double) (-4049.9355F);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1145.85145);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equals(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      MathArrays.scale(Double.NaN, doubleArray3);
      MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN, 298.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4469;
      int int0 = (-1699);
      intArray0[1] = (-1699);
      int int1 = 876;
      intArray0[2] = 876;
      intArray0[3] = 135;
      intArray0[4] = (-2483);
      intArray0[5] = 11;
      intArray0[6] = 238609294;
      int[] intArray1 = new int[4];
      intArray1[0] = 4469;
      intArray1[1] = 135;
      intArray1[2] = 238609294;
      intArray1[3] = 11;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[0] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.scale(772627.516539013, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = (-3986);
      intArray1[1] = 0;
      intArray1[2] = (-3986);
      intArray1[3] = (-3986);
      MathArrays.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-382.30161602201866);
      double double0 = 1005.804;
      doubleArray0[2] = 1005.804;
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 754.083;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-382.302 <= 1,005.804)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      int int0 = 5;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 5);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      double double0 = 120.01787;
      MathArrays.linearCombination((double) 5, (double) 5, (double) 5, 4.23719669792332E-8, 120.01787, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      MathArrays.copyOf(intArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray1);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[2];
      Double double0 = new Double((-0.24999999976775));
      MathArrays.distance1(intArray0, intArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals((float[]) null, floatArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 1486;
      intArray0[1] = 1759;
      intArray0[2] = 2264;
      intArray0[3] = 768;
      intArray0[4] = (-373);
      intArray0[5] = 134217729;
      int[] intArray1 = new int[1];
      intArray1[0] = 1759;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long long0 = (-780L);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      Double double0 = new Double((-1178.8717));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(6657218.8455393445, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-3298.21702), Double.NaN, Double.NaN, Double.NaN, (-1962.48), Double.NaN);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      Double double0 = new Double(5895.95069);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.distance(doubleArray0, doubleArray0);
      Double double0 = new Double(Double.NaN);
      MathArrays.scaleInPlace(2402.008, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 492.2127881;
      doubleArray1[1] = 4283.8443970352;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.linearCombination(1323.792187472897, 2.0, 0.49999999999999994, (-1613.0554), 679550.0784295278, 0.0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM";
      stringArray0[1] = "BIA+iZm";
      stringArray0[2] = "y6k,.";
      stringArray0[3] = "";
      stringArray0[4] = "FFwxX";
      stringArray0[5] = "z5Q%";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-2856.962);
      double double1 = Double.NaN;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-2856.962);
      doubleArray1[2] = (-2856.962);
      doubleArray1[3] = Double.NaN;
      MathArrays.distance(doubleArray1, doubleArray1);
      Double double2 = new Double(171.336);
      MathArrays.scaleInPlace(2380.0, doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2856.962);
      doubleArray2[2] = (-2856.962);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = 2380.0;
      doubleArray2[6] = 2380.0;
      MathArrays.safeNorm(doubleArray2);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1591.0);
      doubleArray1[1] = 1.1548611909090104E9;
      doubleArray1[2] = 1922.48;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = (-18);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-3986);
      floatArray0[2] = (float) (-18);
      floatArray0[3] = (float) 2;
      floatArray0[5] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "";
      stringArray0[4] = "}`/u:1^h#*^(meU-hL=";
      stringArray0[5] = "";
      stringArray0[6] = "[c~{1N";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[8] = "53*<B)vsUAc";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = (-2146532849);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2146532849);
      floatArray0[1] = (float) (-2146532849);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (-2146532849);
      floatArray0[4] = (float) (-2146532849);
      floatArray0[5] = (-218.06535F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) (-2146532849);
      floatArray0[8] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2146532849);
      doubleArray0[1] = (double) (-2.14653286E9F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-2146532849);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-218.06535F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-218.06535F);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace((-2.14653286E9F), doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (4,607,603,304,034,049,500 <= 4,607,603,336,232,042,500)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathArrays.linearCombination(Double.POSITIVE_INFINITY, 3.834E-20, 1.304E19, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 986;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      int[] intArray1 = new int[8];
      intArray1[0] = 986;
      intArray1[1] = 9;
      intArray1[2] = 2;
      intArray1[3] = 9;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 986;
      intArray1[7] = 9;
      MathArrays.distanceInf(intArray0, intArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (double) 9;
      MathArrays.scale((-1022.7461), doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 9;
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2220.988812104372));
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray1);
      Double double0 = new Double(5895.95069);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-2,220.989 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.2599210498948732;
      doubleArray2[1] = 0.366272509098053;
      doubleArray2[2] = 906.78532926;
      doubleArray2[3] = 0.366272509098053;
      MathArrays.scale(1609.71111519932, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = (-20.239769442834454);
      double double1 = 1.304E19;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = (-1591);
      String[] stringArray0 = new String[4];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1591);
      doubleArray0[1] = (double) (-1591);
      doubleArray0[2] = (-20.239769442834454);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-20.239769442834454);
      doubleArray0[5] = (-20.239769442834454);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      doubleArray0[1] = 1609.71111519932;
      doubleArray0[2] = 1609.71111519932;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3.26E18;
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-2220.988812104372);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      double double0 = new Double(Double.NaN);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[1] = (Double) (-2856.962);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray1 = new long[2][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2123.14231;
      doubleArray0[1] = (-1422.018594);
      doubleArray0[2] = (-161.6562398);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(623.1729236121, (-161.6562398), 1.0, 1.0, 623.1729236121, Double.NaN);
      long[] longArray1 = new long[5];
      longArray1[0] = (-71L);
      longArray1[1] = (-2450L);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-71L);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-3157.78);
      doubleArray2[1] = (double) (-3029.3584F);
      doubleArray2[2] = (double) (-3029.3584F);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) (-71.0F);
      doubleArray2[5] = (-2856.962);
      doubleArray2[6] = (double) (-71L);
      doubleArray2[7] = 623.1729236121;
      MathArrays.equals(doubleArray0, doubleArray2);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-2856.962);
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = (double) (-2450L);
      doubleArray3[4] = (double) (-2450L);
      doubleArray3[5] = (-1422.018594);
      doubleArray3[6] = (double) (-2450L);
      MathArrays.convolve(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      doubleArray0[1] = 1609.71111519932;
      doubleArray0[2] = 1609.71111519932;
      doubleArray0[3] = 0.366272509098053;
      double[] doubleArray1 = null;
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.scale((-2220.988812104372), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2856.962);
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(Double.NaN);
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) Double.NaN;
      doubleArray1[4] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 664.7969F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.5F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 174.1846F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-1070.1426F);
      floatArray1[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.scale(2123.14231, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1.0F;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[0][4];
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection2, doubleArray4);
      MathArrays.distance(doubleArray3, doubleArray3);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2582.1041706);
      doubleArray0[1] = 1802.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2582.1041706));
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray1);
      Double double0 = new Double(2795.68994140625);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      MathArrays.linearCombination((-1619.42656), (double) 2113L, (-32.0), (-5409.863495226166), (-1543.576179215), 1.34217729E8);
      MathArrays.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1521.28F);
      floatArray0[4] = (-1521.28F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1521.28F);
      doubleArray2[1] = 33347.8948099459;
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      MathArrays.scaleInPlace((-5713.924), doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2856.962);
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(Double.NaN);
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) Double.NaN;
      doubleArray1[4] = (Double) Double.NaN;
      MathArrays.scaleInPlace((double) doubleArray1[0], doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-297.911634074);
      doubleArray0[2] = (-286.0);
      doubleArray0[3] = 2025.9942097116661;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2131.0F);
      floatArray0[2] = 2320.686F;
      floatArray0[3] = 620.884F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3029.3584F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.linearCombination((-286.0), (-297.911634074), (-286.0), 4275199.879501839, 0.0, (-4265.0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1521.28F);
      floatArray0[4] = (-1521.28F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = new double[1];
      double double0 = (-723.5362367230766);
      doubleArray2[0] = (-723.5362367230766);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1521.28F);
      floatArray0[4] = (-1521.28F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-32.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2320.686F;
      floatArray0[2] = (-500.21F);
      floatArray0[3] = (-949.54F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-2131.0F);
      floatArray0[6] = 620.884F;
      floatArray0[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1876.685592962447;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = (double) (-500.21F);
      doubleArray2[3] = (-32.0);
      doubleArray2[4] = (double) 620.884F;
      doubleArray2[5] = (double) (-3029.3584F);
      doubleArray2[6] = (double) 2320.686F;
      MathArrays.equals(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.scale(2123.14231, doubleArray1);
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 1.0F;
      MathArrays.checkPositive(doubleArray3);
      MathArrays.copyOf(doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[2][3];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray3;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection2, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-316.55);
      doubleArray0[1] = 790.5592432763;
      doubleArray0[2] = (-32.0);
      doubleArray0[3] = (-3019.10973);
      doubleArray0[4] = (-5313.35740001874);
      doubleArray0[5] = (-749.5754631573);
      doubleArray0[6] = 505.0;
      doubleArray0[7] = (-2453.2751237116);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 790.5592432763;
      doubleArray1[1] = 505.0;
      doubleArray1[2] = 790.5592432763;
      doubleArray1[3] = (-5313.35740001874);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      double[] doubleArray2 = null;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 8162231.869444;
      doubleArray0[5] = (-285.059917803);
      doubleArray0[6] = (-1458.07);
      doubleArray0[7] = (-1543.4);
      doubleArray0[8] = Double.NaN;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "'b{UO<I4:Uw9";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2887.54580734);
      doubleArray1[1] = (-2887.54580734);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 182.6140597269167;
      doubleArray1[4] = 182.6140597269167;
      doubleArray1[5] = 0.0;
      MathArrays.normalizeArray(doubleArray1, (-2887.54580734));
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0.0);
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection2, true);
      MathArrays.distance(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 10L;
      longArray0[3] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 1070L;
      longArray0[1] = (-1028L);
      longArray0[5] = 92L;
      longArray0[6] = 0L;
      longArray0[7] = (-3633L);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 1L;
      floatArray1[1] = (float) (-1028L);
      floatArray1[2] = (float) 10L;
      floatArray1[3] = (float) 10L;
      floatArray1[4] = (float) 0L;
      floatArray1[5] = (float) 1L;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2582.1041706);
      doubleArray0[1] = 1802.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2582.1041706));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = MathArrays.scale(1802.0, doubleArray2);
      MathArrays.copyOf(doubleArray0);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-297.911634074);
      doubleArray0[2] = 1263.098341825779;
      doubleArray0[3] = 2025.943726645;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 5788616.746371903;
      doubleArray2[2] = 1263.098341825779;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 2025.943726645;
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.ebeDivide(doubleArray0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-279);
      intArray0[2] = (-3986);
      intArray0[3] = (-279);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = 1;
      intArray0[7] = (-3986);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-3986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-279);
      doubleArray0[2] = (-2240.8505964);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 4378.0;
      doubleArray0[5] = (double) (-279);
      double[][] doubleArray1 = new double[0][8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-279);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-2240.8505964);
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 4378.0;
      doubleArray0[5] = (double) (-279);
      MathArrays.linearCombination((-1422.018594), 182.6140597269167, Double.POSITIVE_INFINITY, 2363.6563);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(1039.45074);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.linearCombination((-2240.8505964), 1.7976931348623157E308, (-2005.3685471303509), (-1.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-2005.3685471303509);
      doubleArray0[5] = (-2005.3685471303509);
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-32.0);
      doubleArray0[2] = 61.6133212582;
      doubleArray0[3] = 92.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1396);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3811);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1292);
      integerArray0[4] = integer4;
      int int0 = 0;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      integerArray0[6] = integer6;
      try { 
        Integer.valueOf("TOO_LARGE_CUTOFF_SINGULAR_VALUE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"TOO_LARGE_CUTOFF_SINGULAR_VALUE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2079;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      long[][] longArray1 = new long[2][8];
      long[] longArray2 = new long[0];
      longArray1[0] = longArray2;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      double[][] doubleArray3 = new double[3][0];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      intArray0[3] = (-279);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = 1;
      intArray0[7] = (-279);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";*~jTkGXq_6Z";
      stringArray0[1] = "<G+?8< ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3029.3584F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2123.14231;
      doubleArray0[1] = (-1422.018594);
      doubleArray0[2] = (-161.6562398);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(623.1729236121, (-161.6562398), 1.0, 1.0, 623.1729236121, Double.NaN);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Mk,%";
      stringArray0[1] = "Mk,%";
      stringArray0[2] = "Mk,%";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.linearCombination(2776.926215625, 623.1729236121, Double.NaN, 1.0, 1.0, (-505.706887842));
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      int int0 = 1;
      int int1 = (-2146386312);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      double double0 = (-3783.955);
      MathArrays.checkOrder(doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2109.37232991968;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "tornament arity ({0}) cannot be bgger than population size ({1})";
      stringArray0[2] = "tornament arity ({0}) cannot be bgger than population size ({1})";
      stringArray0[3] = "tornament arity ({0}) cannot be bgger than population size ({1})";
      stringArray0[4] = "tornament arity ({0}) cannot be bgger than population size ({1})";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-351.25);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 123376.5625, 0.0}, doubleArray1, 0.01);
      
      int int0 = (-2234);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2234));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      doubleArray0[1] = 1609.71111519932;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 0.366272509098053;
      doubleArray0[4] = 554.8471399714745;
      doubleArray0[5] = 537.0;
      doubleArray0[6] = (-780.1041606000001);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      doubleArray1[1] = 182.6140597269167;
      doubleArray1[2] = 182.6140597269167;
      doubleArray1[3] = 182.6140597269167;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 182.6140597269167;
      doubleArray2[1] = 182.6140597269167;
      doubleArray2[2] = 182.6140597269167;
      doubleArray2[3] = 182.6140597269167;
      doubleArray2[4] = 182.6140597269167;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-297.911634074);
      doubleArray0[2] = (-286.0);
      doubleArray0[3] = (-286.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      doubleArray0[3] = (double) (-2131.0F);
      floatArray0[2] = 2320.686F;
      floatArray0[3] = 620.88354F;
      floatArray0[4] = (-1040.974F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3029.3584F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 2448L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2079;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1406);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      long[][] longArray1 = new long[2][8];
      long[] longArray2 = new long[0];
      longArray1[0] = longArray2;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      MathArrays.linearCombination(2685.8506278924, (double) 0, (double) 2079, 0.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 182.6140597269167;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1521.28F);
      floatArray0[4] = (-1521.28F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1521.28F);
      doubleArray2[1] = 33347.8948099459;
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      MathArrays.scaleInPlace((-5713.924), doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.linearCombination((-32.0), (-1521.280029296875), (-1043442.8586110629), (-227.31338084));
      Double[] doubleArray3 = new Double[7];
      doubleArray3[0] = (Double) 182.6140597269167;
      doubleArray3[1] = (Double) (-1521.280029296875);
      doubleArray3[2] = (Double) (-1043442.8586110629);
      doubleArray3[3] = (Double) (-1043442.8586110629);
      doubleArray3[4] = (Double) (-1521.280029296875);
      doubleArray3[5] = (Double) 182.6140597269167;
      doubleArray3[6] = (Double) (-1521.280029296875);
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection1, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 1.304E19;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1591), (-1591));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-32.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-413.13561010894);
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[][] doubleArray2 = new double[9][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2155;
      intArray0[2] = 0;
      intArray0[3] = 2079;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkNonNegative(longArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tournament arity ({0}) cannot be bigger than population size ({1})";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = "tournament arity ({0}) cannot be bigger than population size ({1})";
      stringArray0[3] = "tournament arity ({0}) cannot be bigger than population size ({1})";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2123.14231;
      doubleArray0[1] = (-1422.018594);
      doubleArray0[2] = (-161.6562398);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(623.1729236121, (-161.6562398), 1.0, 1.0, 623.1729236121, Double.NaN);
      long[] longArray1 = new long[5];
      longArray1[0] = (-71L);
      longArray1[1] = (-2450L);
      longArray1[2] = 0L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 947);
      MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      long[][] longArray2 = new long[7][9];
      longArray2[0] = longArray1;
      longArray2[1] = longArray1;
      longArray2[2] = longArray1;
      longArray2[3] = longArray1;
      longArray2[4] = longArray1;
      longArray2[5] = longArray1;
      longArray2[6] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -71 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(323.214381436, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination(0.0, 2776.926215625, 1341.0921424, 2159.5, 0.0, 2776.926215625, 2159.5, Double.NaN);
      int[] intArray0 = new int[6];
      intArray0[0] = 49;
      intArray0[1] = 523;
      intArray0[2] = 523;
      intArray0[3] = 523;
      intArray0[4] = 520;
      intArray0[5] = 390;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-979));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-32.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-413.13561010894);
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-413.13561010894), doubleArray1);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, (-32.0), 0.0, 1.7976931348623157E308, 0.0, (-413.13561010894), 1.304E19}, doubleArray4, 0.01);
      
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, true);
      assertNotSame(doubleArray0, doubleArray4);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      
      MathArrays.distance(doubleArray2, doubleArray1);
      MathArrays.linearCombination((-2432.6061), (-413.13561010894), (-860.949773052), 0.0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-2856.962);
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(Double.NaN);
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) Double.NaN;
      doubleArray1[4] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 1475.3634706677;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2762.0);
      doubleArray0[4] = (-20.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,475.363 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-2856.962);
      doubleArray0[0] = (-2856.962);
      double double1 = Double.NaN;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,856.962 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[8];
      longArray1[0] = 10L;
      longArray1[1] = 0L;
      longArray1[2] = 1L;
      longArray1[3] = 1070L;
      longArray1[4] = (-1028L);
      longArray1[5] = 92L;
      longArray1[6] = 0L;
      longArray1[7] = (-3633L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 92L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 1L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "tournament arity ({0}) cannot be bigger than population size ({1})";
      stringArray0[1] = "tournament arity ({0}) cannot be bigger than population size ({1})";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.linearCombination(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, (-231.696), Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2722);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination((-3163.7727834), (double) (-2722), (double) (-2722), (double) 0, (double) 0, 0.0, (double) 0, 1702.0843);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      double double0 = 0.0036;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1498.5076F;
      MathArrays.scale(0.0036, doubleArray0);
      int int0 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-130);
      intArray0[1] = (-130);
      intArray0[2] = 0;
      intArray0[3] = 2079;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (-466L);
      longArray0[2] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -466 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 637L;
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-71L);
      longArray1[5] = (-948L);
      longArray1[6] = 637L;
      longArray1[7] = 2471L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = (-71L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 637L;
      longArray3[1] = (-948L);
      longArray3[2] = 0L;
      longArray3[3] = 1L;
      longArray0[2] = longArray3;
      long[][] longArray4 = new long[3][6];
      MathArrays.checkRectangular(longArray4);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[][] longArray0 = new long[7][4];
      long[] longArray1 = new long[8];
      longArray1[0] = 10L;
      longArray1[1] = 0L;
      longArray1[2] = 1L;
      longArray1[3] = 1070L;
      longArray1[4] = (-1028L);
      longArray1[5] = 92L;
      longArray1[6] = 0L;
      longArray1[7] = (-3633L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 92L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 1L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1070L;
      MathArrays.distance(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 182.6140597269167;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1455;
      intArray0[2] = 286;
      intArray0[3] = 688;
      intArray0[4] = 102;
      intArray0[5] = (-2444);
      intArray0[6] = 2064;
      intArray0[7] = 506;
      intArray0[8] = (-2383);
      int[] intArray1 = new int[2];
      intArray1[0] = (-2383);
      intArray1[1] = 102;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 120;
      double double0 = 1.304E19;
      MathArrays.linearCombination(0.031, 0.031, 0.031, 0.031, (-627.352159), (-627.352159), (-1.0), 1.304E19);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1888.243253);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-3159.537784621575);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-3159.537784621575), doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.complex.Complex";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double double1 = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2887.54580734));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-3159.537784621575);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-3159.537784621575), doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.complex.Complex";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double double1 = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2887.54580734));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1113.1445F);
      floatArray0[4] = (-1113.1445F);
      floatArray0[5] = (-459.64F);
      floatArray0[6] = (-1521.28F);
      floatArray0[7] = 278.2312F;
      floatArray0[8] = (-751.58F);
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 278.2312F;
      doubleArray1[1] = 2776.926215625;
      doubleArray1[2] = 0.0;
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.scaleInPlace(2776.926215625, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.linearCombination((double) doubleArray0[0], 0.0, 0.9921976327896118, -0.0, (-780.1041606000001), 2776.926215625, 0.0, (double) 1.0F);
      int[] intArray0 = new int[5];
      intArray0[0] = 390;
      intArray0[1] = (-1045);
      intArray0[2] = 520;
      intArray0[3] = 49;
      intArray0[4] = 523;
      MathArrays.copyOf(intArray0, 515);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      Double double0 = new Double(0.9689123630523682);
      Double double1 = new Double(308.47332099215);
      Double double2 = new Double((-2595.7075233));
      Double double3 = new Double(1157.5301086192871);
      Double double4 = new Double(1157.5301086192871);
      Double double5 = new Double(0.0);
      Double double6 = new Double(1.304E19);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = double2;
      doubleArray1[1] = double5;
      doubleArray1[2] = double5;
      doubleArray1[3] = double3;
      doubleArray1[4] = double2;
      doubleArray1[5] = double1;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.linearCombination(2159.5, 1.0E-6, 2942.47, 1.0E-6, (-649.6740541235), (-1987.07617579));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[3];
      int int0 = 1276;
      intArray0[0] = 1276;
      intArray0[1] = (-1165);
      intArray0[2] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      Field<String> field0 = null;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 0, (-1165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.304E19;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1591);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1591), (-1591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.6725170580355583E-9;
      doubleArray0[1] = (-2572.566244115122);
      doubleArray0[2] = (-1531.895076);
      doubleArray0[3] = (-5713.924);
      doubleArray0[4] = (-1013.7);
      doubleArray0[5] = (-705.594181925548);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,572.566)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = (-18);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-3986);
      floatArray0[2] = (float) (-18);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (-3986);
      floatArray0[5] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, doubleArray1);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-3986.0F);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (double) (-3986);
      doubleArray2[4] = (double) (-3986);
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      MathArrays.safeNorm(doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (\u221E >= -3,986)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2220.988812104372);
      doubleArray0[1] = 1609.71111519932;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = 0.366272509098053;
      doubleArray0[4] = 554.8471399714745;
      doubleArray0[5] = 537.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2856.962);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 303.3257905;
      doubleArray0[5] = 1.0E-5;
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2109.37232991968;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1953.625369;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-2240.8505964);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1586);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.linearCombination((-4386.860035), (-4386.860035), (-4386.860035), (-4386.860035), (-4386.860035), 1.34217729E8, 1.34217729E8, 219.2857047);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 958.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1113.1445F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 278.2312F;
      floatArray0[5] = (-751.58F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1521.28F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2639.8176178610593;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2049.2490112901964);
      doubleArray0[5] = Double.NaN;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3.141592653589793);
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2123.14231;
      doubleArray0[1] = (-1422.018594);
      doubleArray0[2] = (-161.6562398);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.linearCombination(623.1729236121, (-161.6562398), 1.0, 1.0, 623.1729236121, Double.NaN);
      long[] longArray1 = new long[5];
      longArray1[0] = (-71L);
      longArray1[1] = (-2450L);
      longArray1[2] = 0L;
      longArray1[3] = (-1677L);
      longArray1[4] = 1153L;
      try { 
        MathArrays.checkNonNegative(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -71 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 259.9;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2776.926215625;
      doubleArray0[0] = 2776.926215625;
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-2595.7075233));
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      doubleArray0[5] = double5;
      Double double6 = new Double((-2015.853915817));
      doubleArray0[6] = double6;
      Double double7 = new Double(2.0);
      doubleArray0[7] = double7;
      Double double8 = new Double((-2015.853915817));
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = (-1L);
      longArray1[4] = 10000L;
      longArray1[5] = 4094L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (-1L);
      longArray2[1] = 4094L;
      longArray2[2] = (-1L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2582.1041706);
      doubleArray0[0] = (-2582.1041706);
      doubleArray0[1] = 1802.0;
      doubleArray0[2] = 1.0E-5;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2582.1041706));
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1802.0);
      MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 905;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 905);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = -0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = -0.0;
      doubleArray0[8] = -0.0;
      double[] doubleArray1 = MathArrays.scale(-0.0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(3.834E-20, (-20.99), (double) 134217729, (-1301.51344), (-2014.4), (-1600.354601));
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1498.5076F;
      floatArray0[2] = 0.0F;
      MathArrays.equals(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1498.5076F;
      doubleArray0[2] = (double) 1498.5076F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1498.5076F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 245.0;
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1206.7041984;
      double double1 = 1.0;
      doubleArray0[2] = 1.0;
      double double2 = 5805.44020627;
      doubleArray0[3] = 5805.44020627;
      doubleArray0[4] = 557.68173043426;
      doubleArray0[5] = 1456.429905805574;
      doubleArray0[6] = (-2739.81966253729);
      doubleArray0[7] = (-764.51);
      double double3 = 566.1133389740702;
      doubleArray0[8] = 566.1133389740702;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 501, 501);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2777.8194373188;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 980.7856514679911;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 100.0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkRectangular(longArray0);
      MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      MathArrays.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 591.1242;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 2043.6762763009947;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-3159.537784621575), doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.complex.Complex";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(doubleArray0);
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[4];
      longArray1[0] = 211L;
      longArray1[1] = (-1666L);
      longArray1[2] = 0L;
      longArray1[3] = (-1059L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-1059L);
      longArray2[1] = 211L;
      longArray2[2] = (-1666L);
      longArray2[3] = 211L;
      longArray2[4] = 211L;
      longArray2[5] = 0L;
      longArray2[6] = (-1666L);
      longArray2[7] = 211L;
      longArray2[8] = 211L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 0L;
      longArray3[1] = (-1059L);
      longArray3[2] = 211L;
      longArray3[3] = 0L;
      longArray3[4] = (-1666L);
      longArray3[5] = (-1059L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 211L;
      longArray5[1] = 0L;
      longArray5[2] = (-1059L);
      longArray5[3] = 1L;
      longArray5[4] = (-1059L);
      longArray5[5] = (-1666L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      longArray6[0] = 0L;
      longArray6[1] = (-1666L);
      longArray6[2] = (-1059L);
      longArray6[3] = 1L;
      longArray6[4] = 0L;
      longArray6[5] = 0L;
      longArray6[6] = 1L;
      longArray6[7] = 211L;
      longArray6[8] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = 637L;
      longArray0[1] = (-1956L);
      longArray0[2] = 2251L;
      long long0 = (-2980L);
      longArray0[3] = (-2980L);
      longArray0[4] = 2113L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,956 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-297.911634074);
      doubleArray0[2] = (-286.0);
      doubleArray0[3] = 2025.943726645;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2131.0F);
      floatArray0[2] = 2320.686F;
      floatArray0[3] = 620.88354F;
      floatArray0[4] = (-1040.974F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3029.3584F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      long long0 = 2448L;
      longArray0[1] = 2448L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2695.8894111548952);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2172));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-939));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2172));
      integerArray0[3] = integer3;
      try { 
        Integer.valueOf("", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      intArray0[3] = (-279);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = 1;
      intArray0[7] = (-279);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2;
      MathArrays.scale(0, doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";*~jTkGXq_6Z";
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 1475.3634706677;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2762.0);
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2811.276;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = -0.0;
      double double0 = 1475.3634706677;
      doubleArray0[1] = 1475.3634706677;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2762.0);
      double double2 = (-20.0);
      doubleArray0[4] = (-20.0);
      double double3 = 1.304E19;
      doubleArray0[5] = 1.304E19;
      double double4 = 2811.276;
      doubleArray0[6] = 2811.276;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2346);
      intArray0[2] = 0;
      intArray0[3] = (-25);
      intArray0[4] = (-3066);
      intArray0[5] = (-1684);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-25));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double double0 = 2776.926215625;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(323.214381436, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double double1 = 1341.0921424;
      double double2 = 1.304E19;
      double double3 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1013.7);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 526);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 526);
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      MathArrays.distance(doubleArray2, doubleArray3);
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 526;
      longArray1[1] = (long) 526;
      longArray1[2] = (long) 526;
      longArray1[3] = (long) 526;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 526;
      longArray1[6] = (long) 526;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 526;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = 0L;
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 526;
      longArray2[8] = (long) 526;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-5888L);
      longArray3[1] = (long) 526;
      longArray3[2] = 1113L;
      longArray3[3] = 0L;
      longArray3[4] = 430L;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 0;
      longArray3[7] = 0L;
      longArray3[8] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,888 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2079;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1406);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, boolean0);
      long[][] longArray1 = new long[2][8];
      long[] longArray2 = new long[0];
      longArray1[0] = longArray2;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2826.1508803013508);
      doubleArray0[3] = Double.NaN;
      doubleArray0[2] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 33347.8948099459);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = Double.NaN;
      MathArrays.scale(1.304E19, doubleArray2);
      MathArrays.copyOf(doubleArray1);
      MathArrays.ebeAdd(doubleArray2, doubleArray2);
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-0 <= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2518.46286002);
      doubleArray0[1] = (-32.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-413.13561010894);
      doubleArray0[6] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-413.13561010894));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      MathArrays.scale((-413.13561010894), doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1040.5536803246;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      long[][] longArray0 = new long[7][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-466L);
      longArray2[1] = 2147483647L;
      longArray2[2] = 0L;
      longArray2[3] = 3063L;
      longArray2[4] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 3063L;
      longArray3[1] = (-466L);
      longArray3[2] = (-466L);
      longArray3[3] = (-648L);
      longArray3[4] = 0L;
      longArray3[5] = (-343L);
      longArray3[6] = 0L;
      longArray3[7] = (-1073741824L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      longArray4[0] = 2147483647L;
      longArray4[1] = (-343L);
      longArray4[2] = 3063L;
      longArray4[3] = (-648L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = (-575L);
      longArray5[2] = 0L;
      longArray5[3] = (-343L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 100L;
      longArray6[1] = 2151L;
      longArray6[2] = (-466L);
      longArray6[3] = 3063L;
      longArray6[4] = 2147483647L;
      longArray6[5] = (-648L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      longArray7[0] = (-575L);
      longArray7[1] = 2147483647L;
      longArray7[2] = (-1073741824L);
      longArray7[3] = (-466L);
      longArray7[4] = 100L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -466 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-3986);
      intArray0[2] = (-3986);
      intArray0[3] = (-279);
      intArray0[4] = (-3986);
      intArray0[5] = (-3986);
      intArray0[6] = 1;
      intArray0[7] = (-279);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = MathArrays.scale(0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(doubleArray1, 2);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2500.691084298644;
      doubleArray0[1] = (-1860.79);
      doubleArray0[2] = 2159.5;
      doubleArray0[3] = 810.559001326;
      doubleArray0[4] = (-3011.09239445789);
      doubleArray0[5] = 3.141592653589793;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,860.79 < 2,159.5)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-32.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2109.37232991968;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2109.37232991968;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 120;
      int int0 = (-279);
      intArray0[2] = (-279);
      int int1 = (-3986);
      intArray0[3] = (-3986);
      MathArrays.distanceInf(intArray0, intArray0);
      double double0 = (-1.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-279);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-279);
      doubleArray0[5] = (double) 120;
      doubleArray0[6] = (double) 120;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (279 > -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
