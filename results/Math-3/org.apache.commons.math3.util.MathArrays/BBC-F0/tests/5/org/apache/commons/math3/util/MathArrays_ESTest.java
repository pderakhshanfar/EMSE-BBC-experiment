/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:08:51 GMT 2020
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2144561901, 847);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2556.69561629504);
      doubleArray0[1] = 726.800274606;
      doubleArray0[2] = (-1618.81);
      doubleArray0[3] = (-1730.5693);
      doubleArray0[4] = (-101.25209);
      doubleArray0[5] = (-557.5218537);
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 675.4522F;
      floatArray0[1] = (-1030.3157F);
      floatArray0[2] = 1361.06F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {675.4522F, (-1030.3157F), 1361.06F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) 675.4522F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.scale(675.4522F, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 675.4522094726562, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 456235.6872814931, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 675.4522F;
      doubleArray2[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray2[2] = (-4958.901222529747);
      doubleArray2[3] = (double) 1361.06F;
      doubleArray2[4] = (double) 1361.06F;
      doubleArray2[5] = (double) Float.NEGATIVE_INFINITY;
      doubleArray2[6] = (double) Float.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray2, 675.4522094726562);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-1107);
      Integer integer0 = new Integer((-1107));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1107), (int)integer0);
      
      Integer integer1 = new Integer((-1107));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1107), (int)integer1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1107);
      doubleArray0[1] = (double) (-1107);
      doubleArray0[2] = (double) (-1107);
      doubleArray0[3] = (double) (-1107);
      doubleArray0[4] = 5.669184079525E-24;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1107.0), (-1107.0), (-1107.0), (-1107.0), 5.669184079525E-24}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2214.0, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1107);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-1107)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray1 = MathArrays.scale((-1107), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1107.0), (-1107.0), (-1107.0), (-1107.0), 5.669184079525E-24}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1225449.0, 1225449.0, 1225449.0, 1225449.0, (-6.275786776034175E-21)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,107 >= -1,107)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5574076175689697;
      doubleArray0[1] = 1119807.0982803267;
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = 3.4028234663852886E38;
      doubleArray0[4] = 6.52E18;
      doubleArray0[5] = (-1024.592040228288);
      doubleArray0[6] = (-3320.7292890677);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.5574076175689697, 1119807.0982803267, 4.3466666666666665E18, 3.4028234663852886E38, 6.52E18, (-1024.592040228288), (-3320.7292890677)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 5265.703F;
      floatArray0[3] = 1702.319F;
      floatArray0[4] = 0.5F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 5265.703F, 1702.319F, 0.5F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1833.0093);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[20][9];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Pair<Integer, Integer>) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-19), (-19));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3432;
      intArray0[1] = 2554;
      intArray0[2] = (-1370);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {3432, 2554, (-1370)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1370);
      doubleArray2[1] = (double) 3432;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1262.3050537109375);
      doubleArray0[0] = (-1262.3050537109375);
      double double1 = 0.875;
      doubleArray0[1] = 0.875;
      double double2 = 703.293710903;
      doubleArray0[2] = 703.293710903;
      doubleArray0[3] = 0.07490822288864472;
      double double3 = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1262.3050537109375), 0.875, 703.293710903, 0.07490822288864472, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2524.610107421875), 1.75, 1406.587421806, 0.14981644577728945, 2.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double4 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {(-1262.3050537109375), 0.875, 703.293710903, 0.07490822288864472, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2524.610107421875), 1.75, 1406.587421806, 0.14981644577728945, 2.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1967.548672836826, double4, 0.01);
      
      double double5 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertArrayEquals(new double[] {(-1262.3050537109375), 0.875, 703.293710903, 0.07490822288864472, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2524.610107421875), 1.75, 1406.587421806, 0.14981644577728945, 2.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1262.3050537109375, double5, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,406.587 >= 0.15)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.4590701334807023E7;
      doubleArray2[1] = 4.503599627370496E15;
      doubleArray2[2] = (-1221.88453);
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4513.34144);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 1889.219606065392;
      doubleArray0[1] = 1889.219606065392;
      doubleArray0[2] = 1889.219606065392;
      MathArrays.scaleInPlace(1889.219606065392, doubleArray0);
      assertEquals(16, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 329.49988F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 15.10801F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {329.49988F, Float.NaN, 0.0F, 15.10801F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {329.49988F, Float.NaN, 0.0F, 15.10801F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(pairArray0);
      assertEquals(0, pairArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-261.3518687366116));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 3.1660099222737955E-7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-4958.901222529747);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-4958.901222529747)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1075);
      intArray0[1] = (-2166);
      intArray0[2] = 10;
      intArray0[3] = (-1);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1075);
      intArray1[1] = (-1);
      intArray1[2] = 10;
      intArray1[3] = 10;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1075), (-2166), 10, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1075), (-1), 10, 10}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(2176, int0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1, 1571);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-1075), (-1), 10, 10}, intArray1);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(1571, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2130.1165391;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2130.1165391}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[9];
      intArray0[0] = 1073741824;
      intArray0[1] = 1073741824;
      intArray0[2] = 1073741824;
      intArray0[3] = 2146653862;
      intArray0[4] = 1073741824;
      intArray0[5] = 1073741824;
      intArray0[6] = 1073741824;
      intArray0[7] = 1073741824;
      intArray0[8] = 1073741824;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147299126;
      intArray1[1] = 2147299126;
      intArray1[2] = 2146653862;
      intArray1[3] = 2146653862;
      intArray1[4] = 2147299126;
      intArray1[5] = 1073741824;
      intArray1[6] = 2147299126;
      intArray1[7] = 2147299126;
      intArray1[8] = 2147299126;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1073741824, 1073741824, 1073741824, 2146653862, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824}, intArray0);
      assertArrayEquals(new int[] {2147299126, 2147299126, 2146653862, 2146653862, 2147299126, 1073741824, 2147299126, 2147299126, 2147299126}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals((-1075678742), int0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 373;
      intArray0[0] = 373;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1693;
      intArray0[3] = 1693;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {373, 0, 1693, 1693}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1693);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-199.137706463), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1310);
      intArray0[1] = (-981);
      intArray0[2] = 203;
      intArray0[3] = (-1495);
      intArray0[4] = 134217729;
      intArray0[5] = 2147424426;
      intArray0[6] = (-475);
      intArray0[7] = 3289;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1310), (-981), 203, (-1495), 134217729, 2147424426, (-475), 3289}, intArray0);
      assertArrayEquals(new int[] {(-1310), (-981), 203, (-1495), 134217729, 2147424426, (-475), 3289}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 13;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1073741824L;
      longArray0[1] = (long) 13;
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 13;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1073741824L, 13L, 13L, 13L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 13;
      floatArray1[1] = (float) 13L;
      floatArray1[2] = (float) 13L;
      floatArray1[3] = 448.4F;
      floatArray1[4] = (float) 1073741824L;
      floatArray1[5] = (float) 13;
      floatArray1[6] = (float) 13;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {13.0F, 13.0F, 13.0F, 448.4F, 1.07374182E9F, 13.0F, 13.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(boolean1);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(13.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Double double0 = new Double((-0.5300076840053312));
      assertNotNull(double0);
      assertEquals((-0.5300076840053312), (double)double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.608E18;
      doubleArray1[1] = 2.17333333333333325E18;
      doubleArray1[2] = (-0.5300076840053312);
      doubleArray1[3] = (-0.5300076840053312);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E18, 2.17333333333333325E18, (-0.5300076840053312), (-0.5300076840053312), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.608E18), (-2.17333333333333325E18), 0.5300076840053312, 0.5300076840053312, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E18, 2.17333333333333325E18, (-0.5300076840053312), (-0.5300076840053312), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.608E18), (-2.17333333333333325E18), 0.5300076840053312, 0.5300076840053312, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(926.43248184244, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray4.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {2.608E18, 2.17333333333333325E18, (-0.5300076840053312), (-0.5300076840053312), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3.394855192460759E18, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double((-0.5300076840053312));
      assertNotNull(double0);
      assertEquals((-0.5300076840053312), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (-0.5300076840053312);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {13.0, (-0.5300076840053312)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double double0 = new Double((-0.5300076840053312));
      assertNotNull(double0);
      assertEquals((-0.5300076840053312), (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 3.4028235E38F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1822.091F;
      floatArray1[1] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {3.4028235E38F, 3.4028235E38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1822.091F, 3.4028235E38F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[0] = (-4067);
      intArray0[3] = 364;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4067), 0, 0, 364}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 373;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {373.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139129.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-4067);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {373.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4067.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(4440.0, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,067 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-921.384124898659);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1266.895131715);
      doubleArray0[3] = -0.0;
      doubleArray0[4] = 219.8398223;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-921.384124898659), 1.0, (-1266.895131715), -0.0, 219.8398223}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1842.768249797318), 2.0, (-2533.79026343), -0.0, 439.6796446}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2579.7;
      doubleArray0[0] = 2579.7;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2579.7}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2146533013;
      intArray0[1] = 2147483565;
      intArray0[2] = 12;
      intArray0[3] = (-1330);
      int int0 = (-4035);
      intArray0[4] = (-4035);
      intArray0[5] = 1491;
      intArray0[6] = 2463;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2146533013, 2147483565, 12, (-1330), (-4035), 1491, 2463}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1330);
      doubleArray1[1] = (double) 1491;
      doubleArray1[2] = (double) (-4035);
      doubleArray1[3] = (double) (-4035);
      doubleArray1[4] = (double) 12;
      doubleArray1[5] = (double) 1491;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 520.0816747827279;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 520.0816747827279}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1040.1633495654557), 270484.94844480715}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 520.0816747827279;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 520.0816747827279;
      doubleArray2[4] = 520.0816747827279;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (-1.0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 520.0816747827279}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 520.0816747827279, (-1.0), 520.0816747827279, 520.0816747827279, (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[1][9];
      doubleArray3[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 2172);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(2172, doubleArray2.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2172;
      floatArray0[1] = (float) 2172;
      floatArray0[2] = (float) 2172;
      floatArray0[3] = (float) 2172;
      floatArray0[4] = 183.21F;
      floatArray0[5] = (float) 2172;
      floatArray0[6] = (float) 2172;
      floatArray0[7] = (float) 2172;
      floatArray0[8] = 1.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 2194.5F;
      floatArray1[4] = (float) 2172;
      floatArray1[5] = 183.21F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 2194.5F, 2172.0F, 183.21F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2172.0F, 2172.0F, 2172.0F, 2172.0F, 183.21F, 2172.0F, 2172.0F, 2172.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.63E18;
      doubleArray0[0] = 1.63E18;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-18.430862426757812);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-4958.901222529747);
      doubleArray0[0] = (-4958.901222529747);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(2476.266681550833, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-902);
      doubleArray0[1] = (double) (-902);
      doubleArray0[2] = (double) (-902);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-902);
      doubleArray2[1] = (double) (-902);
      doubleArray2[2] = (double) (-902);
      doubleArray2[3] = (-190.3212987026614);
      doubleArray2[4] = (double) (-902);
      doubleArray2[5] = (double) (-902);
      doubleArray2[6] = (double) (-902);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0), (-190.3212987026614), (-902.0), (-902.0), (-902.0)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1145.9488677110999;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-376.26917323696);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NaN, 0.0, 0.0, 1145.9488677110999, 0.0, 3.834E-20, (-376.26917323696)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r!;MWv!";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2587.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 1822.091F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 2587.0F, 3.4028235E38F, 1822.091F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r!;MWv!";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2587.0F;
      floatArray0[2] = 3.4028235E38F;
      floatArray0[3] = 1822.091F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 2587.0F, 3.4028235E38F, 1822.091F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2587.0F;
      doubleArray0[1] = (double) 3.4028235E38F;
      doubleArray0[2] = (double) 3.4028235E38F;
      doubleArray0[3] = (double) 1822.091F;
      doubleArray0[4] = (double) 3.4028235E38F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2587.0, 3.4028234663852886E38, 3.4028234663852886E38, 1822.0909423828125, 3.4028234663852886E38}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5.8938631329669654E38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-902);
      intArray0[1] = (-2258);
      intArray0[2] = 119;
      intArray0[3] = 1482;
      intArray0[4] = 13;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-902), (-2258), 119, 1482, 13}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 1482;
      doubleArray0[2] = (double) 1482;
      doubleArray0[3] = (double) 119;
      doubleArray0[4] = (double) 119;
      doubleArray0[5] = (double) 1482;
      doubleArray0[6] = (double) (-902);
      doubleArray0[7] = (double) 1482;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, 1482.0, 1482.0, 119.0, 119.0, 1482.0, (-902.0), 1482.0, Double.NaN}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = 314L;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2145890559;
      intArray0[1] = (-1358);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 85939622;
      intArray1[1] = (-1358);
      intArray1[2] = (-1358);
      intArray1[3] = (-1358);
      intArray1[4] = (-66);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2145890559, (-1358)}, intArray0);
      assertArrayEquals(new int[] {85939622, (-1358), (-1358), (-1358), (-66)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(2059950937, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 454.299F;
      floatArray0[1] = (float) 85939622;
      floatArray0[2] = (float) (-1358);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {454.299F, 8.5939624E7F, (-1358.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[0] = (-4067);
      intArray0[3] = 364;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4067), 0, 0, 364}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-4067);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-4067);
      floatArray0[5] = (float) 364;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, (-4067.0F), (-1.0F), 0.0F, (-4067.0F), 364.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(-0.0, 0.0, -0.0, -0.0, 0.0, -0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "yv36k3gWl h^d^wXNH";
      stringArray0[1] = ">Kpow]x2H";
      stringArray0[2] = "=><_~E4$pP";
      stringArray0[3] = "Q]vnlN[M";
      stringArray0[4] = "2Uc@o~W7K~Tb0";
      stringArray0[5] = "4\"H^@cQOVeS";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {3.4028235E38F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-902);
      intArray0[1] = (-2258);
      intArray0[2] = 119;
      intArray0[3] = 1482;
      intArray0[4] = 13;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-902), (-2258), 119, 1482, 13}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 119;
      floatArray0[1] = (float) (-902);
      floatArray0[2] = (float) (-2258);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 119;
      floatArray0[6] = (float) (-2258);
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {119.0F, (-902.0F), (-2258.0F), 0.0F, 0.0F, 119.0F, (-2258.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(928.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1920.262);
      doubleArray0[1] = 0.19999954120254515;
      doubleArray0[2] = 0.6409968137741089;
      doubleArray0[3] = 1410349.896288875;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-844.099);
      doubleArray0[6] = (-4349.303839);
      doubleArray0[7] = 1710.8702228861666;
      doubleArray0[8] = (-135.92880940468734);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1920.262), 0.19999954120254515, 0.6409968137741089, 1410349.896288875, 1.304E19, (-844.099), (-4349.303839), 1710.8702228861666, (-135.92880940468734)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "S.56xu*pnS";
      stringArray0[2] = "q]E-Cc}7`~HdHKydtV";
      stringArray0[3] = "X2MU2K4/qP";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[0] = (-4067);
      intArray0[3] = 364;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4067), 0, 0, 364}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 373;
      MathArrays.scaleInPlace(97.214748, doubleArray0);
      assertArrayEquals(new double[] {36261.101004}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {36261.101004}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 8264.04926404687, (-2.6033824355191673E-8), (-2.6033824355191673E-8));
      assertEquals(1.1091819245644922E12, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 8264.04926404687;
      doubleArray1[1] = (-2.6033824355191673E-8);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-2.6033824355191673E-8);
      doubleArray1[4] = (-1918.3727223569792);
      doubleArray1[5] = 8264.04926404687;
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = 8264.04926404687;
      doubleArray1[8] = 1.34217729E8;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 314L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {314L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[4];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[2] = longArray2;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 259.69;
      doubleArray0[3] = 2.4590701334807023E7;
      doubleArray0[4] = (-1902.9);
      doubleArray0[5] = (-1519.13672758);
      doubleArray0[6] = 0.6409968137741089;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 1003.6737;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 259.69, 2.4590701334807023E7, (-1902.9), (-1519.13672758), 0.6409968137741089, 3.834E-20, 1003.6737}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2.4590701477210544E7, double0, 0.01);
      
      MathArrays.checkNonNegative(longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 259.69, 2.4590701334807023E7, (-1902.9), (-1519.13672758), 0.6409968137741089, 3.834E-20, 1003.6737}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 259.69, 2.4590701334807023E7, (-1902.9), (-1519.13672758), 0.6409968137741089, 3.834E-20, 1003.6737}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = (-2228.84);
      double double1 = MathArrays.linearCombination(3885.0, (-0.0013888888689039883), (-0.0013888888689039883), 3885.0, (-2228.84), Double.NaN);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = 900.4203543902;
      doubleArray0[2] = (-2228.84);
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-0.0013888888689039883), 900.4203543902, (-2228.84)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2403.847865444505, double2, 0.01);
      
      int int0 = 2878;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2878);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-0.0013888888689039883), 900.4203543902, (-2228.84)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2878, doubleArray1.length);
      
      double double3 = 1328.7403785756753;
      double double4 = (-1608.984);
      double double5 = 0.1680698371552366;
      double double6 = MathArrays.linearCombination(1328.7403785756753, 1603.592, (-1608.984), 1603.592, 900.4203543902, 0.1680698371552366);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals((-449245.09586474195), double6, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.001 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-153.794);
      doubleArray1[2] = (-153.794);
      doubleArray1[3] = (-153.794);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 2.608E18;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-625.0464338191072);
      doubleArray1[8] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, (-153.794), (-153.794), (-153.794), Double.NaN, 2.608E18, Double.NaN, (-625.0464338191072), Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-153.794), (-153.794), (-153.794), Double.NaN, 2.608E18, Double.NaN, (-625.0464338191072), Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-242.25442077358568);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-242.25442077358568), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 58687.2043843455, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[5][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-242.25442077358568), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-242.25442077358568), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 58687.2043843455, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-153.794);
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) Double.NaN;
      doubleArray1[1] = (Double) Double.NaN;
      doubleArray1[2] = (Double) (-153.794);
      doubleArray1[3] = (Double) (-153.794);
      Double double0 = new Double((double) doubleArray1[3]);
      assertNotNull(double0);
      assertEquals(6, doubleArray1.length);
      assertEquals((-153.794), (double)double0, 0.01);
      
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, (-153.794), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {Double.NaN, (-153.794), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {Double.NaN, (-153.794), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, -0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 1;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1924);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1924, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((-1.0), (-2117.3147041585544), 1.34217729E8, (-605.8610440783282), 3344.0, 3344.0, (-605.8610440783282), 2517.0933135691253);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-8.130763398123041E10), double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 1924;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1924);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r!;MWv!";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      int[] intArray0 = new int[5];
      intArray0[0] = 2147481545;
      intArray0[1] = (-356);
      intArray0[2] = 93;
      intArray0[3] = 40;
      intArray0[4] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2147481545, (-356), 93, 40, 2}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2.608E18;
      doubleArray3[1] = (double) doubleArray1[0];
      doubleArray3[2] = (double) doubleArray1[0];
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (double) doubleArray1[0];
      doubleArray3[5] = 1.0;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.608E18, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(2.608E18, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r!;MWv!";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[4];
      longArray0[0] = longArray1;
      double double0 = MathArrays.linearCombination(8264.04926404687, 8264.04926404687, 4.3466666666666665E18, 8264.04926404687);
      assertEquals(3.592106746772379E22, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1010.5226F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1010.5226F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1010.5226F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[1][7];
      doubleArray0[0] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[5][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-259.69);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-259.69)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-6.385959229636036E9), (-1.7513206928209E7), 0.0, 0.0, (-1.2411727974183068E9), (-3.6625376456725794E8)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-259.69)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1010.5226F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1010.5226F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-1010.5225830078125), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1010.5225830078125), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1010.5225830078125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2333.8603957, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2579.3726F;
      floatArray0[2] = 4837.0215F;
      floatArray0[3] = 207.5F;
      floatArray0[4] = (-741.071F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1273.0F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1273.0F);
      floatArray1[1] = 2112.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1273.0F), 2112.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2579.3726F, 4837.0215F, 207.5F, (-741.071F), 0.0F, 0.0F, 1.0F, (-1273.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = (long) 1924;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {9218868437227405312L, 1924L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double double1 = MathArrays.linearCombination((-605.8610440783282), (double) 9218868437227405312L, 2158.16030811, 3.834E-20, 1187.5815324805599, 2158.16030811, 0.0, 1187.5815324805599);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.585353256599339E21), double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1924);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1924, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1924;
      intArray0[1] = 1924;
      intArray0[2] = 1924;
      intArray0[3] = 1924;
      intArray0[4] = 1924;
      intArray0[5] = 1924;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1924;
      intArray1[1] = 1924;
      intArray1[2] = 1924;
      intArray1[3] = 1924;
      intArray1[4] = 1924;
      intArray1[5] = 1924;
      intArray1[6] = 1924;
      intArray1[7] = 1924;
      intArray1[8] = 1924;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1924, 1924, 1924, 1924, 1924, 1924}, intArray0);
      assertArrayEquals(new int[] {1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924, 1924}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1924);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1924, doubleArray1.length);
      assertEquals(1924, doubleArray2.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[4];
      double double0 = 3651.279686291994;
      double double1 = 944.0388394565027;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 373;
      doubleArray0[1] = 0.01745329052209854;
      doubleArray0[2] = (-2987.941286353269);
      doubleArray0[3] = 944.0388394565027;
      doubleArray0[4] = 944.0388394565027;
      doubleArray0[5] = 3651.279686291994;
      double[] doubleArray1 = MathArrays.scale(944.0388394565027, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {373.0, 0.01745329052209854, (-2987.941286353269), 944.0388394565027, 944.0388394565027, 3651.279686291994}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {352126.48711727554, 16.476584129179084, (-2820732.6243331097), 891209.3304023806, 891209.3304023806, 3446949.8375781975}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1680698371552366;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.1680698371552366, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      int int0 = (-1400);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1400));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace((-975.84173), doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((-975.84173), 2514.8955478911503, 373.0, 373.0, 0.0, -0.0);
      assertEquals((-2315011.022223398), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double3 = new Integer(21);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(21, double3, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 21;
      intArray0[3] = 21;
      intArray0[4] = 21;
      intArray0[5] = 21;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {21, 21, 21, 21, 21, 21}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2503);
      intArray0[1] = 212;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2503), 212}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 373;
      doubleArray0[2] = (double) 373;
      doubleArray0[3] = (double) 373;
      doubleArray0[4] = (double) 373;
      doubleArray0[5] = (double) 373;
      doubleArray0[6] = (double) 373;
      doubleArray0[7] = (double) 373;
      doubleArray0[8] = (double) 373;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 373.0, 373.0, 373.0, 373.0, 373.0, 373.0, 373.0, 373.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {373, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-259.69);
      doubleArray1[1] = (Double) (-259.69);
      Double double0 = new Double((-259.69));
      assertNotNull(double0);
      assertEquals((-259.69), (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) (-259.69);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = doubleArray1[6];
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean1);
      
      double[][] doubleArray2 = new double[5][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = null;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, (double) doubleArray1[0], 0.0, (double) doubleArray1[0], (-1424.821), 0.0, (double) 0.0F, (-1424.821));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1924;
      doubleArray0[1] = (double) (-1010.5226F);
      doubleArray0[2] = (double) (-1010.5226F);
      doubleArray0[3] = (double) 1924;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1924);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1924.0, (-1010.5225830078125), (-1010.5225830078125), 1924.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(1924, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1924;
      intArray0[1] = 1924;
      intArray0[2] = 1924;
      intArray0[3] = 1924;
      intArray0[4] = 1924;
      intArray0[5] = 1924;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1297.260541561687;
      doubleArray0[2] = 4998.726059830943;
      doubleArray0[3] = 4998.726059830943;
      doubleArray0[4] = 0.0;
      doubleArray0[1] = (-1565.42505165);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1565.42505165), 4998.726059830943, 4998.726059830943, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 4998.726059830943;
      doubleArray1[1] = (Double) 4998.726059830943;
      doubleArray1[2] = (Double) 4998.726059830943;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 4998.726059830943;
      doubleArray1[5] = (Double) (-1565.42505165);
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 4998.726059830943;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean1);
      
      double[][] doubleArray2 = new double[4][3];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2333.8603957, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 2333.8603957;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5.041914939880371;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-1565.42505165);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (5.042 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 373;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1062.0976867876);
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 373.0, 0.0, (-1062.0976867876), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1125.6911193926915, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 373;
      floatArray0[1] = (float) 373;
      floatArray0[2] = (float) 373;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {373.0F, 373.0F, 373.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (373 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 373;
      doubleArray0[1] = (double) 373;
      doubleArray0[2] = (double) 373;
      doubleArray0[3] = (double) 373;
      doubleArray0[4] = (double) 373;
      doubleArray0[5] = (double) 373;
      doubleArray0[6] = 1111.55;
      doubleArray0[7] = (double) 373;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {373.0, 373.0, 373.0, 373.0, 373.0, 373.0, 1111.55, 373.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {373.0, 373.0, 373.0, 373.0, 373.0, 373.0, 1111.55, 373.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = 1312.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = (-2493.74466442);
      doubleArray1[0] = (-2493.74466442);
      double double4 = 1492.0;
      doubleArray1[1] = 1492.0;
      doubleArray1[2] = 0.0;
      double[][] doubleArray2 = new double[3][7];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1492.0;
      doubleArray3[1] = (-2493.74466442);
      doubleArray3[2] = 1312.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1312.0;
      doubleArray3[5] = 1492.0;
      doubleArray3[6] = 1492.0;
      doubleArray2[1] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2493.74466442);
      doubleArray4[1] = 1492.0;
      doubleArray2[2] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2333.8603957, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 2333.8603957;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5.041914939880371;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (-1565.42505165);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 5.041914939880371;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 955.7889);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {Double.NaN, (-1565.42505165), 0.0, 5.041914939880371}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 958.8772481248343, -0.0, (-3.0883481248343414)}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1565.42505165);
      doubleArray5[1] = 955.7889;
      doubleArray5[2] = 5.041914939880371;
      doubleArray5[3] = Double.NaN;
      doubleArray5[4] = 5.041914939880371;
      doubleArray5[5] = 2333.8603957;
      doubleArray5[6] = 5.041914939880371;
      doubleArray5[7] = 2333.8603957;
      double[] doubleArray6 = MathArrays.copyOf(doubleArray5);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertArrayEquals(new double[] {(-1565.42505165), 955.7889, 5.041914939880371, Double.NaN, 5.041914939880371, 2333.8603957, 5.041914939880371, 2333.8603957}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {(-1565.42505165), 955.7889, 5.041914939880371, Double.NaN, 5.041914939880371, 2333.8603957, 5.041914939880371, 2333.8603957}, doubleArray6, 0.01);
      assertNotNull(doubleArray6);
      assertEquals(8, doubleArray5.length);
      assertEquals(8, doubleArray6.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long long0 = 0L;
      double double0 = 0.0;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long long1 = 9218868437227405312L;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = (-7402L);
      longArray0[3] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 9218868437227405312L;
      longArray0[8] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7,402 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1680698371552366;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.1680698371552366, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.1680698371552366}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.1680698371552366, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.02824747016138775}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.1680698371552366, 0.0, 0.02824747016138775, 0.1680698371552366, 0.0, 0.1680698371552366);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.004747547710071845, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.02824747016138775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {0.02824747016138775}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.02824747016138775}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double4 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertArrayEquals(new double[] {0.02824747016138775}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.02824747016138775, double4, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 21;
      intArray0[1] = 806;
      intArray0[2] = 21;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 806, 21}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2503);
      intArray0[1] = 212;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2503), 212}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2503);
      intArray1[1] = 212;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = (-259.69);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1187.5815324805599;
      doubleArray1[3] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-628.5831);
      doubleArray0[1] = (-628.5831);
      doubleArray0[2] = (-628.5831);
      double[] doubleArray1 = MathArrays.scale((-628.5831), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-628.5831), (-628.5831), (-628.5831)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {395116.71360560996, 395116.71360560996, 395116.71360560996}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "E1mRt]Rl3<g>I";
      stringArray0[1] = "";
      stringArray0[2] = "OUKhnA";
      stringArray0[3] = "aW";
      stringArray0[4] = "";
      stringArray0[5] = ")*9)4o";
      stringArray0[6] = "-cc";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[8] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-628.5831), (-628.5831), (-628.5831)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {395116.71360560996, 395116.71360560996, 395116.71360560996}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals((-7.450910661000794E8), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-628.5831), (-628.5831), (-628.5831)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {395116.71360560996, 395116.71360560996, 395116.71360560996}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {395116.71360560996, 395116.71360560996, 395116.71360560996}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray3 = null;
      try { 
        MathArrays.convolve((double[]) null, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-391.74662621), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][6];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-259.69);
      doubleArray1[1] = (Double) (-259.69);
      Double double0 = new Double((-259.69));
      assertNotNull(double0);
      assertEquals((-259.69), (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) (-259.69);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray1[7] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      double[][] doubleArray2 = new double[5][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[2] = 1693;
      intArray0[3] = 1693;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {373, 0, 1693, 1693}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 1693);
      assertNotNull(objectArray0);
      assertEquals(1693, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 373;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {373.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(-0.0, 0.0, -0.0, -0.0, 0.0, -0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3012;
      intArray0[1] = (-418);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-418);
      intArray1[1] = (-418);
      intArray1[2] = (-418);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[5][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-259.69);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-259.69)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-6.385959229636036E9), (-1.7513206928209E7), 0.0, 0.0, (-1.2411727974183068E9), (-3.6625376456725794E8)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-553);
      intArray0[1] = 1;
      intArray0[2] = 3158;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2144870456));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[2] = 1693;
      intArray0[3] = 364;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {373, 0, 1693, 364}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1693;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1693;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (float) 1693;
      floatArray0[6] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1693.0F, 0.0F, 1693.0F, (-1.0F), Float.NEGATIVE_INFINITY, 1693.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 1693);
      assertNotNull(objectArray0);
      assertEquals(1693, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 373;
      MathArrays.scaleInPlace(97.214748, doubleArray0);
      assertArrayEquals(new double[] {36261.101004}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {36261.101004}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 373;
      longArray1[1] = (long) 373;
      longArray1[2] = (long) 373;
      longArray1[3] = (long) 373;
      longArray1[4] = 0L;
      longArray1[5] = (long) 373;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1257L;
      longArray2[1] = (long) 373;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = (long) 373;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 923.900581;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1822.091F;
      floatArray0[1] = 1822.091F;
      floatArray0[2] = 1822.091F;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 1822.091F;
      floatArray0[5] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1822.091F, 1822.091F, 1822.091F, 3.4028235E38F, 1822.091F, 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = Double.NaN;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-259.69);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-259.69)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-259.69);
      doubleArray1[1] = (-259.69);
      doubleArray1[2] = (-259.69);
      doubleArray1[3] = (-259.69);
      double double0 = 0.07073719799518585;
      doubleArray1[4] = 0.07073719799518585;
      doubleArray1[5] = (-259.69);
      doubleArray1[6] = (-259.69);
      doubleArray1[7] = (-259.69);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-259.69 >= -259.69)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1822.091F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-1773.3423F);
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3.4028235E38F;
      floatArray1[1] = (-746.82F);
      floatArray1[2] = (-530.162F);
      floatArray1[3] = (-1773.3423F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1822.091F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 1.0F;
      floatArray1[8] = 1822.091F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1822.091F, 3.4028235E38F, (-1773.3423F), 3.4028235E38F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.4028235E38F, (-746.82F), (-530.162F), (-1773.3423F), 1.0F, 1822.091F, 1.0F, 1.0F, 1822.091F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertNotSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection0.equals((Object)mathArrays_OrderDirection1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 232;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {232}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      assertNotNull(pair0);
      
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1841.4227584);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1841.4227584), (-1.0), 0.0, 0.0);
      assertEquals(1841.4227584, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-58.01885184193), doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {106837.23419796767, (-58.01885184193)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3.834E-20, (-4399.664792320488), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = 0L;
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 296L;
      longArray1[3] = 0L;
      long long1 = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 296L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2333.8603957, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = false;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 2333.8603957;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5.041914939880371;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (-1565.42505165);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 806;
      doubleArray1[1] = 1180.485004262;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 1180.485004262;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 21;
      doubleArray1[6] = 1.34217729E8;
      doubleArray1[7] = (double) 806;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 857.2319398;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      doubleArray0[1] = (-403.9336045830058);
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {2333.8603957, (-403.9336045830058), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.scale((-1619.8), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2333.8603957, (-403.9336045830058), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3780387.06895486), 654291.6527035527, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2333.8603957, (-403.9336045830058), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 21;
      intArray0[1] = 806;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 1180.485004262;
      doubleArray2[2] = 442.3;
      doubleArray2[3] = 1896.45551;
      doubleArray2[4] = 0.0;
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2333.8603957, (-403.9336045830058), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1180.485004262, 442.3, 1896.45551, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(1.3421539514968516E8, double1, 0.01);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {21, 806, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {21, 806, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {21, 806, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[9];
      longArray1[1] = 381L;
      longArray1[2] = (-9223372036854775808L);
      longArray1[3] = 734L;
      longArray1[4] = 3952090531849364496L;
      longArray1[5] = 50L;
      longArray1[6] = 3689L;
      longArray1[7] = 1068L;
      longArray1[8] = 393L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 50L;
      longArray2[1] = 3689L;
      longArray2[2] = 381L;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = (-1400);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1400));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-461.52406186497);
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-3545);
      intArray0[1] = 0;
      intArray0[2] = (-1646);
      intArray0[3] = (-1646);
      intArray0[4] = (-3545);
      intArray0[5] = 0;
      intArray0[6] = (-1646);
      intArray0[7] = 0;
      intArray0[8] = (-556);
      int[] intArray1 = MathArrays.copyOf(intArray0, 299);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3545), 0, (-1646), (-1646), (-3545), 0, (-1646), 0, (-556)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(299, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-2146701768);
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = (-3545);
      intArray2[4] = 0;
      intArray2[5] = (-1646);
      intArray2[6] = (-2146701768);
      intArray2[7] = 299;
      intArray2[8] = 3450;
      double double0 = MathArrays.distance(intArray2, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2146701768), 0, 0, (-3545), 0, (-1646), (-2146701768), 299, 3450}, intArray2);
      assertEquals(9, intArray2.length);
      assertEquals(0.0, double0, 0.01);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 3450, (-2146701768));
      assertNotNull(objectArray0);
      assertEquals(3450, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(-0.0, 0.0, -0.0, -0.0, 0.0, -0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3012;
      intArray0[1] = (-418);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3012, (-418)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 3012;
      intArray2[2] = 0;
      intArray2[3] = (-418);
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 3012;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1006.0359);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[0] = (-4067);
      intArray0[3] = 364;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-4067), 0, 0, 364}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 373;
      MathArrays.scaleInPlace(97.214748, doubleArray0);
      assertArrayEquals(new double[] {36261.101004}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1187.5815324805599);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Integer>[][] pairArray0 = MathArrays.buildArray(field0, 1, 1);
      assertNotNull(pairArray0);
      assertEquals(1, pairArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection2, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-6.663542893624021E-14));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2321.44);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2321.44);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 569.67236551;
      doubleArray0[7] = (-2321.44);
      double[] doubleArray1 = MathArrays.scale(452.9944654, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2321.44), 0.0, 0.0, (-2321.44), 0.0, 0.0, 569.67236551, (-2321.44)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1051599.471758176), 0.0, 0.0, (-1051599.471758176), 0.0, 0.0, 258058.42866735585, (-1051599.471758176)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 63L;
      longArray0[1] = 3689L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 734L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {63L, 3689L, 0L, 0L, 734L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2472.1777, (double) 734L, 0.0, 569.67236551, 0.0, 64.9313406737, (double) 0L, (double) 63L);
      assertEquals(1814578.4318000001, double0, 0.01);
      
      MathArrays.scaleInPlace(63L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-146250.72), 0.0, 0.0, (-146250.72), 0.0, 0.0, 35889.35902713, (-146250.72)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1407.0), 64.9313406737, (-2321.44), 569.67236551, 0.0);
      assertEquals((-150734.21149355415), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2321.44);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2321.44);
      doubleArray0[4] = 64.9313406737;
      doubleArray0[5] = (-1407.0);
      doubleArray0[6] = 569.67236551;
      doubleArray0[7] = (-2321.44);
      double[] doubleArray1 = MathArrays.scale(452.9944654, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2321.44), 0.0, 0.0, (-2321.44), 64.9313406737, (-1407.0), 569.67236551, (-2321.44)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1051599.471758176), 0.0, 0.0, (-1051599.471758176), 29413.53795618801, (-637363.2128178), 258058.42866735585, (-1051599.471758176)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 63L;
      longArray0[1] = 63L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 734L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {63L, 63L, 0L, 0L, 734L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double double1 = MathArrays.linearCombination(2472.1777, (double) 734L, (-1407.0), 569.67236551, Double.NaN, 64.9313406737, (double) 0L, (double) 63L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.scaleInPlace(63L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-146250.72), 0.0, 0.0, (-146250.72), 4090.6744624431003, (-88641.0), 35889.35902713, (-146250.72)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = (-1407);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1407), (-1407));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-461.52406186497);
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-3545);
      intArray0[1] = 0;
      intArray0[2] = (-1646);
      intArray0[3] = (-1646);
      intArray0[4] = (-3545);
      intArray0[5] = 0;
      intArray0[6] = (-1646);
      intArray0[7] = 0;
      intArray0[8] = (-556);
      int[] intArray1 = MathArrays.copyOf(intArray0, 299);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3545), 0, (-1646), (-1646), (-3545), 0, (-1646), 0, (-556)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(299, intArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3450, (-2146701768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not increasing (2,186.193 > 1,187.582)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = 1679.3037046;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1679.3037046;
      doubleArray1[1] = 1618.9076313976;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,679.304 > 1,618.908)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = (-1006.0359);
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0, double3, 0.01);
      
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double4 = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1297.260541561687;
      doubleArray0[2] = 4998.726059830943;
      doubleArray0[3] = (-4398.66056632);
      doubleArray0[4] = Double.NaN;
      doubleArray0[1] = (-1565.42505165);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1565.42505165), 4998.726059830943, (-4398.66056632), Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-4398.66056632);
      doubleArray1[1] = (Double) (-4398.66056632);
      doubleArray1[2] = (Double) 4998.726059830943;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 4998.726059830943;
      doubleArray1[5] = (Double) (-1565.42505165);
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 4998.726059830943;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 923.900581;
      doubleArray0[6] = 6042.148683046868;
      doubleArray0[7] = 1297.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, Double.NaN, 923.900581, 6042.148683046868, 1297.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, Double.NaN, 923.900581, 6042.148683046868, 1297.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, Double.NaN, 923.900581, 6042.148683046868, 1297.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1841.4227584);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1841.4227584), (-1.0), 0.0, 0.0);
      assertEquals(1841.4227584, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-58.01885184193), doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {106837.23419796767, (-58.01885184193)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1841.4227584), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[4];
      longArray1[0] = (-1L);
      longArray1[1] = (-2192L);
      longArray1[2] = (-1L);
      longArray1[3] = 684L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 684L;
      longArray2[2] = (-1L);
      longArray2[3] = (-2192L);
      longArray2[4] = 684L;
      longArray2[5] = (-2192L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 684L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 684L;
      longArray4[1] = (-1L);
      longArray4[2] = (-1L);
      longArray4[3] = (-1L);
      longArray4[4] = (-1L);
      longArray4[5] = (-2192L);
      longArray4[6] = 684L;
      longArray4[7] = 684L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1646.865F;
      floatArray0[1] = (-1940.1749F);
      float float0 = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1876.6754F;
      floatArray0[4] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1646.865F, (-1940.1749F), 0.0F, 1876.6754F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Field<Pair<Integer, Integer>> field0 = (Field<Pair<Integer, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1365.718231675);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 794.657096966858;
      doubleArray0[3] = 2569.742675;
      doubleArray0[4] = 4451.41;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 843.81590668;
      doubleArray0[7] = (-4345.378361);
      doubleArray0[8] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1365.718231675), 0.0, 794.657096966858, 2569.742675, 4451.41, 0.0, 843.81590668, (-4345.378361), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-4345.378361), (-2133.822631242863), 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(9272266.688014818, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, (-2133.822631242863), (-1365.718231675), 632.853, 0.0, 3266.34, (-1.0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2910934.130649098, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 9272266.688014818;
      doubleArray2[1] = 2569.742675;
      doubleArray2[2] = 2569.742675;
      doubleArray1[1] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2191.0;
      doubleArray0[2] = (-2263.77);
      doubleArray0[3] = (-2457.807409363308);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1660.73;
      doubleArray0[6] = 442.3;
      doubleArray0[7] = 1.34217729E8;
      doubleArray0[8] = 1896.45551;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2191.0, (-2263.77), (-2457.807409363308), Double.NaN, 1660.73, 442.3, 1.34217729E8, 1896.45551}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1297.260541561687;
      doubleArray0[2] = 4998.726059830943;
      doubleArray0[3] = (-4398.66056632);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1565.42505165);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1297.260541561687, 4998.726059830943, (-4398.66056632), Double.NaN, (-1565.42505165)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-4398.66056632);
      doubleArray1[1] = (Double) (-4398.66056632);
      doubleArray1[2] = (Double) 4998.726059830943;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 4998.726059830943;
      doubleArray1[5] = (Double) 1297.260541561687;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 4998.726059830943;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 1297.260541561687, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-465);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-465));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 373;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 373;
      doubleArray0[2] = 3651.279686291994;
      doubleArray0[3] = (double) 373;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 373.0, 3651.279686291994, 0.0, 373.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3651.279686291994;
      doubleArray2[1] = (double) 373;
      doubleArray2[3] = (double) 373;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 24;
      int int0 = 0;
      intArray0[3] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 1, 24, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1, 24, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-177.2751F);
      floatArray0[3] = (float) 24;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-177.2751F), 24.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = (-1006.0359);
      doubleArray0[2] = (-1006.0359);
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1006.0359)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1012109.23208881, double3, 0.01);
      
      MathArrays.scaleInPlace(1012109.23208881, doubleArray0);
      assertArrayEquals(new double[] {(-1012109.23208881), 0.0, (-1.0182182222027748E9)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 822.6595264;
      doubleArray0[1] = (-2650.4452);
      doubleArray0[2] = 636.43;
      doubleArray0[3] = (-1574.061006);
      doubleArray0[4] = (-1427.4403410233397);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-1534.92781877);
      doubleArray0[7] = (-1969.093864152);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][3];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 822.6595264;
      doubleArray2[1] = (-1534.92781877);
      doubleArray2[2] = (-2650.4452);
      doubleArray2[3] = (-1969.093864152);
      doubleArray2[4] = 822.6595264;
      doubleArray2[5] = 636.43;
      doubleArray2[6] = (-2650.4452);
      doubleArray2[7] = (-1574.061006);
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-1969.093864152);
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1574.061006);
      doubleArray4[2] = (-1574.061006);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1534.92781877);
      doubleArray4[6] = 701.20851790496;
      doubleArray4[7] = (-1574.061006);
      doubleArray4[8] = (-1574.061006);
      doubleArray1[2] = doubleArray4;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1434.62F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-567.6755F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1434.62F), 0.0F, (-1.0F), (-567.6755F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-771.963812969749);
      doubleArray0[0] = (-771.963812969749);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 857.2319398;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 432.8559;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-4146.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {857.2319398, -0.0, 432.8559, 2.0, (-4146.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 187;
      int int1 = 2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 187, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-921.83766), 1.0, Double.NaN, (-4760.4191562639));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3519.104521689108), (-921.83766), (-3519.104521689108), Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Mi1T2`;e6'sD";
      stringArray0[1] = "t";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-921.83766);
      doubleArray0[1] = (-3519.104521689108);
      doubleArray0[2] = (-4760.4191562639);
      doubleArray0[3] = (-4760.4191562639);
      doubleArray0[4] = (-3519.104521689108);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-921.83766), (-3519.104521689108), (-4760.4191562639), (-4760.4191562639), (-3519.104521689108), Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 1999.0;
      doubleArray0[2] = (-836.7905953246308);
      doubleArray0[3] = (-2206.99867);
      doubleArray0[4] = 206.0827225647359;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1304.70610273);
      doubleArray0[7] = 1769.027;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {20.0, 1999.0, (-836.7905953246308), (-2206.99867), 206.0827225647359, 0.0, (-1304.70610273), 1769.027}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0, 1999.0, (-836.7905953246308), (-2206.99867), 206.0827225647359, 0.0, (-1304.70610273), 1769.027}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1779);
      intArray0[1] = (-1);
      intArray0[2] = 545;
      intArray0[3] = 0;
      intArray0[4] = 427;
      intArray0[5] = (-1683);
      int[] intArray1 = MathArrays.copyOf(intArray0, 275);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1779), (-1), 545, 0, 427, (-1683)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(275, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      double double0 = (-4423.202304127);
      doubleArray0[1] = (-4423.202304127);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5.041914939880371;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3052.47835;
      doubleArray0[1] = 3.32;
      doubleArray0[2] = 526.9037045058608;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3052.47835, 3.32, 526.9037045058608, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 820.7856470687071;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 820.7856470687071;
      doubleArray2[1] = 820.7856470687071;
      doubleArray2[2] = 820.7856470687071;
      doubleArray2[3] = 820.7856470687071;
      doubleArray2[4] = 820.7856470687071;
      doubleArray2[5] = 820.7856470687071;
      doubleArray2[6] = 820.7856470687071;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071}, doubleArray2, 0.01);
      assertEquals(7, doubleArray2.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {820.7856470687071, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071, 820.7856470687071}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean1);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 820.7856470687071;
      doubleArray3[1] = 820.7856470687071;
      doubleArray3[2] = 820.7856470687071;
      doubleArray3[3] = 820.7856470687071;
      doubleArray3[4] = 820.7856470687071;
      doubleArray3[5] = (-324.176490381643);
      doubleArray3[6] = 820.7856470687071;
      doubleArray3[7] = 1.34217729E8;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 373;
      doubleArray0[2] = (double) 373;
      doubleArray0[3] = (double) 373;
      doubleArray0[4] = (double) 373;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 373.0, 373.0, 373.0, 373.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 373.0, 373.0, 373.0, 373.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3420.922959));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 373.0, 373.0, 373.0, 373.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-855.23073975), (-855.23073975), (-855.23073975), (-855.23073975), -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 373.0, 373.0, 373.0, 373.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 746.0, 746.0, 746.0, 746.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1297.260541561687;
      doubleArray0[2] = 4998.726059830943;
      doubleArray0[3] = (-4398.66056632);
      doubleArray0[4] = Double.NaN;
      doubleArray0[1] = (-1565.42505165);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1565.42505165), 4998.726059830943, (-4398.66056632), Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-4398.66056632);
      doubleArray1[1] = (Double) (-4398.66056632);
      doubleArray1[2] = (Double) 4998.726059830943;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 4998.726059830943;
      doubleArray1[5] = (Double) (-1565.42505165);
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 4998.726059830943;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {Double.NaN, 4998.726059830943, 0.0, 0.0, (-1565.42505165), (-4398.66056632)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4665.965593652);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 535.56953;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = 669.662;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4665.965593652);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 669.662;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4665.965593652), Double.NaN, 0.0, 535.56953, -0.0, 669.662, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4665.965593652), 0.0, 669.662}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((-4665.965593652), 669.662, (-804.408793787655), 669.662);
      assertEquals((-3663301.8530416144), double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1992.7062);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4665.965593652), Double.NaN, 0.0, 535.56953, -0.0, 669.662, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4665.965593652), 0.0, 669.662}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,665.966 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-400.8F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2967.7832F);
      floatArray0[4] = 4891.918F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-400.8F), 0.0F, (-2967.7832F), 4891.918F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2989.98100864);
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 5317.39;
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2989.98100864), 0.0, 0.0, 0.0, 3.141592653589793, 0.0, 5317.39, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5979.96201728), 0.0, 0.0, 0.0, 6.283185307179586, 0.0, 10634.78, 7.668E-20}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2989.98100864), 0.0, 0.0, 0.0, 3.141592653589793, 0.0, 5317.39, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5979.96201728), 0.0, 0.0, 0.0, 6.283185307179586, 0.0, 10634.78, 7.668E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2989.98100864), 0.0, 0.0, 0.0, 3.141592653589793, 0.0, 5317.39, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5979.96201728), 0.0, 0.0, 0.0, 6.283185307179586, 0.0, 10634.78, 7.668E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(boolean0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-363);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4958.901222529747);
      doubleArray0[1] = (-259.69);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2186.193059114;
      doubleArray0[5] = 1187.5815324805599;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4958.901222529747), (-259.69), 0.0, 0.0, 2186.193059114, 1187.5815324805599}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.4590701334807023E7, 67438.8961, 0.0, 0.0, 4779440.0917182285, 1410349.896288875}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 809L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 809L;
      longArray4[1] = 809L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[8][9];
      double[] doubleArray2 = new double[1];
      double double0 = (-3038.962);
      doubleArray2[0] = (-3038.962);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1145.9488677110999;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-376.26917323696);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1145.9488677110999, 3.834E-20, (-376.26917323696), Double.POSITIVE_INFINITY, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1407.0), 64.9313406737, (-2321.44), 569.67236551, 0.0);
      assertEquals((-150734.21149355415), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2321.44);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2321.44);
      doubleArray0[4] = 64.9313406737;
      doubleArray0[5] = (-1407.0);
      doubleArray0[6] = 569.67236551;
      doubleArray0[7] = (-2321.44);
      double[] doubleArray1 = MathArrays.scale(452.9944654, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2321.44), 0.0, 0.0, (-2321.44), 64.9313406737, (-1407.0), 569.67236551, (-2321.44)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1051599.471758176), 0.0, 0.0, (-1051599.471758176), 29413.53795618801, (-637363.2128178), 258058.42866735585, (-1051599.471758176)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 63L;
      longArray0[1] = 3689L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 734L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {63L, 3689L, 0L, 0L, 734L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double double1 = MathArrays.linearCombination(2472.1777, (double) 734L, (-1407.0), 569.67236551, 0.0, 64.9313406737, (double) 0L, (double) 63L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1013049.4135274302, double1, 0.01);
      
      MathArrays.scaleInPlace(63L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-146250.72), 0.0, 0.0, (-146250.72), 4090.6744624431003, (-88641.0), 35889.35902713, (-146250.72)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2333.8603957;
      doubleArray0[1] = (-411.706815224593);
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-411.707 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-461.52406186497);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-92.792469);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-553.12697179);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-3565.2);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2 >= -553.127)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.linearCombination(0.0, (-1449.0), 0.0, 0.0);
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = (-209L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 0L;
      longArray2[1] = (-209L);
      longArray2[2] = 0L;
      longArray2[3] = (-209L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = 0L;
      longArray3[1] = (-209L);
      longArray3[2] = (-209L);
      longArray3[3] = (-209L);
      longArray3[4] = (-209L);
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = (-209L);
      longArray4[8] = (-209L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-209L);
      longArray6[1] = 0L;
      longArray6[2] = (-209L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      longArray8[0] = 0L;
      longArray8[1] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -209 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1311.382854899249);
      doubleArray0[5] = 407.9858131195451;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1994);
      assertEquals(1994, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = -0.0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.linearCombination(-0.0, 0.0, -0.0, -0.0, 0.0, -0.0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[2];
      intArray0[0] = 3012;
      intArray0[1] = (-418);
      MathArrays.copyOf(intArray0, 0);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 3012;
      intArray1[2] = 0;
      intArray1[3] = (-418);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 3012;
      MathArrays.distance(intArray0, intArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 1924;
      intArray0[1] = 1924;
      MathArrays.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1981);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 373;
      intArray0[0] = 373;
      intArray0[1] = 0;
      intArray0[2] = 1693;
      intArray0[3] = 364;
      MathArrays.distance(intArray0, intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1693);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1619.8);
      doubleArray0[2] = 1871.1505115454;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 1679.3037046;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1618.9076313976;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,619.8 < 1,871.151)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(4.47213595499958, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.23606797749979, double1, 0.01);
      
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2.23606797749979;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 4.47213595499958;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {5.000000000000001, 0.0, 20.000000000000004, 0.0, 20.000000000000004}, doubleArray3, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 3330.0;
      doubleArray4[5] = 4.47213595499958;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 2.23606797749979;
      double[] doubleArray5 = MathArrays.convolve(doubleArray4, doubleArray0);
      assertEquals(13, doubleArray5.length);
  }
}
