/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:42:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgs((-1478));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1478), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2));
      option0.setValueSeparator(']');
      option0.addValueForProcessing("L#]b6YItV ");
      assertEquals(']', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(0);
      boolean boolean0 = option0.hasArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.setArgs(21);
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      option0.getValuesList();
      assertEquals(21, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('r');
      char char0 = option0.getValueSeparator();
      assertEquals('r', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.getValue((String) null);
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.addValueForProcessing("");
      String string0 = option0.getValue((String) null);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("nK_rHO#)PW");
      option0.getValue();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      Class<String> class0 = String.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("9gchQG8p", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("dH", "jr!0x<UP$aaL?W_N", true, "dH");
      String string0 = option0.getOpt();
      assertEquals("jr!0x<UP$aaL?W_N", option0.getLongOpt());
      assertEquals("dH", option0.getDescription());
      assertEquals("dH", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "X*_FXWd73");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("X*_FXWd73", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, (String) null);
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("kQ38", "5#~dczDuijg", true, (String) null);
      String string0 = option0.getKey();
      assertEquals("5#~dczDuijg", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("kQ38", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      String string0 = option0.getKey();
      assertEquals("", string0);
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      assertEquals("9gchQG8p", option0.getOpt());
      
      int int0 = option0.getId();
      assertEquals("", option0.getDescription());
      assertEquals(57, int0);
      assertEquals("9gchQG8p", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", true, "YW");
      String string0 = option0.getDescription();
      assertEquals("YW", string0);
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.setArgs((-1495));
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals((-1495), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("w+uGdn]");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.acceptsArg();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, false, "11dA@eW_qD$$:WJ,qbt");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      try { 
        option0.getValue(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-1717986916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('5');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(".}=zc*qo|_?", false, "Gjp%G{I_u=1@s'o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.}=zc*qo|_?' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", "SDhBmv\"'l&'Cm:0&:8", false, "DF/O\"]714C^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("q1GF#yr>( zYzfZQ!Y}", "q1GF#yr>( zYzfZQ!Y}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'q1GF#yr>( zYzfZQ!Y}' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("dH", "jr!0x<UP$aaL?W_N", true, "dH");
      option0.getValue();
      assertEquals("jr!0x<UP$aaL?W_N", option0.getLongOpt());
      assertEquals("dH", option0.getOpt());
      assertEquals("dH", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.setValueSeparator('1');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('1', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals("9gchQG8p", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getDescription());
      assertEquals("9gchQG8p", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.setArgs((-589));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.hashCode();
      assertEquals("9gchQG8p", option0.getOpt());
      assertEquals("9gchQG8p", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "J7c", true, "w+uGdn]");
      boolean boolean0 = option0.equals(option1);
      assertEquals("w+uGdn]", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("J7c", option1.getLongOpt());
      assertEquals("", option1.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      Option option1 = (Option)option0.clone();
      assertEquals("rQ*Q", option1.getLongOpt());
      
      option1.setLongOpt("");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option("", "-9\"Y!NM~.U%-v2(m", false, "plEWlw;zi4");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
      assertEquals("plEWlw;zi4", option1.getDescription());
      assertEquals("-9\"Y!NM~.U%-v2(m", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      Option option1 = new Option((String) null, "' contains an illegal character : '", true, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertEquals("rQ*Q", option1.getLongOpt());
      assertEquals("", option1.getDescription());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      boolean boolean0 = option0.equals(option0);
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      boolean boolean0 = option0.equals("kQ38");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals(107, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:  rQ*Q  [ARG] ::  :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:   [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      String string0 = option0.getValue("9gchQG8p");
      assertFalse(option0.hasValueSeparator());
      assertEquals("org.apache.commons.cli.OptionValidator", string0);
      assertEquals("9gchQG8p", option0.getOpt());
      assertEquals("9gchQG8p", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.getValue((-1));
      assertEquals("", option0.getDescription());
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("a7Z", true, "a7Z");
      option0.addValueForProcessing("a7Z");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      String string0 = option0.getValue("rQ*Q");
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.addValueForProcessing("9gchQG8p");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(25);
      option0.setValueSeparator(']');
      option0.addValueForProcessing("L#]b6YrtV ");
      assertEquals(25, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('r');
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      assertEquals('r', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "[ARG...]");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("[ARG...]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  rQ*Q [ARG...] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("9gchQG8p", "9gchQG8p", true, "");
      option0.setArgs(123);
      boolean boolean0 = option0.hasArgs();
      assertEquals(123, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("[ option:   [ARG] ::  ]");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      assertEquals((-2), option0.getArgs());
      
      option0.addValueForProcessing("");
      option0.getValue();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      String string0 = option0.toString();
      assertEquals("[ option: kQ38  ::   ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("", option0.getDescription());
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.getValueSeparator();
      assertEquals(" ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("kQ38", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hasOptionalArg();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setDescription(".bS,");
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.getType();
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("a7Z", true, "a7Z");
      // Undeclared exception!
      try { 
        option0.addValue("a7Z");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getDescription());
      assertEquals("rQ*Q", string0);
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.getValuesList();
      assertEquals("kQ38", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals(" ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.isRequired();
      assertEquals("", option0.getDescription());
      assertEquals("rQ*Q", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("kQ38", false, " ");
      option0.setArgs(21);
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      option0.getValues();
      assertEquals(21, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "rQ*Q", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Option option0 = new Option("Y", true, "");
      String string0 = option0.getDescription();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("Y", option0.getOpt());
  }
}
