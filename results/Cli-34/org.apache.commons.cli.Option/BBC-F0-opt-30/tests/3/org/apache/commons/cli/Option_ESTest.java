/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:23:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, "[ARG...]");
      option0.hashCode();
      assertEquals(78, option0.getId());
      assertEquals("[ARG...]", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "");
      option0.setValueSeparator('a');
      option0.addValueForProcessing("+~]4){|");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("' contains an illegal character : '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", false, "Illegal option name '");
      option0.setArgs((-593));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-593), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      option0.addValueForProcessing("' contains an illegal chaacter : '");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getDescription());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("JO", true, "JO");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('a');
      char char0 = option0.getValueSeparator();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      option0.getValue((String) null);
      assertEquals("s", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("s", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("s", "pKedi) #J", true, "Cannot add value, list full.");
      String string0 = option0.getValue("E)7/4u.h9,?");
      assertEquals(115, option0.getId());
      assertEquals("pKedi) #J", option0.getLongOpt());
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "");
      option0.addValueForProcessing("' contains an illegal chaacter : '");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Class<Integer> class0 = Integer.class;
      option0.setType(class0);
      option0.getType();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      String string0 = option0.getOpt();
      assertEquals("", option0.getLongOpt());
      assertEquals("s", string0);
      assertEquals("s", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "gB!#]Eq3e^zT}");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", true, "};:G69A(<85bc5B");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("};:G69A(<85bc5B", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, "8se", false, (String) null);
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("@", "@", false, "Gs{a{^y~X|[wz-T7");
      int int0 = option0.getId();
      assertEquals("@", option0.getLongOpt());
      assertEquals("Gs{a{^y~X|[wz-T7", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("s", "pKedi) #J", true, "Cannot add value, list full.");
      String string0 = option0.getDescription();
      assertEquals(115, option0.getId());
      assertEquals("Cannot add value, list full.", string0);
      assertEquals("pKedi) #J", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", false, "*7M@NH#g|ci");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("*7M@NH#g|ci", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "};:G69A(<85bc5B");
      option0.setArgName("6");
      option0.getArgName();
      assertEquals("};:G69A(<85bc5B", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArg());
      assertTrue(boolean0);
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", false, "aiM$QoBG&0Q7^F~_Oh");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("aiM$QoBG&0Q7^F~_Oh", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-3342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      option0.setValueSeparator('^');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal chaacter : '", false, "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal chaacter : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("80|Egc>[3\"o", "[ option: ", true, "80|Egc>[3\"o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '80|Egc>[3\"o' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("'", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("@", "@", false, "Gs{a{^y~X|[wz-T7");
      option0.getValue();
      assertEquals("Gs{a{^y~X|[wz-T7", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(64, option0.getId());
      assertEquals("@", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("[ option: ");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("s", "", true, "s");
      option0.setValueSeparator('^');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('^', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", true, "aiM$QoBG&0Q7^F~_Oh");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("JO", true, "JO");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("a");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("Pz");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "pKed) #J");
      option0.hashCode();
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("pKed) #J", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "", false, "b");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertEquals("", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("b", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals("EJ5BduFS>mKzEVUiXY", option1.getLongOpt());
      assertEquals("", option1.getDescription());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "6", true, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("", option1.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", true, "aiM$QoBG&0Q7^F~_Oh");
      Option option1 = new Option("6", "[ option:   [ARG] :: aiM$QoBG&0Q7^F~_Oh ]");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("[ option:   [ARG] :: aiM$QoBG&0Q7^F~_Oh ]", option1.getDescription());
      assertEquals(54, option1.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option("b", "The option '");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals(98, option1.getId());
      assertEquals("The option '", option1.getDescription());
      assertFalse(option1.equals((Object)option0));
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      option0.setArgs(0);
      option0.toString();
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      String string0 = option0.toString();
      assertEquals("[ option: t t  [ARG] :: t ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      option0.getValue(76);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "");
      String string0 = option0.getValue("");
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValue("");
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      option0.setArgs(681);
      option0.setValueSeparator('a');
      option0.addValueForProcessing("' contains an illegal chaacter : '");
      assertEquals(681, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      option0.setValueSeparator('a');
      option0.addValueForProcessing("' contains an illegal chaacter : '");
      assertEquals('a', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "aiM$QoBG&0Q7^F~_Oh");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(34);
      boolean boolean0 = option0.hasArgs();
      assertEquals(34, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", true, "aiM$QoBG&0Q7^F~_Oh");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "' contains an illegal character : '");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(boolean0);
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("s", "pKedi) #J");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("pKedi) #J", option0.getDescription());
      assertEquals(115, option0.getId());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      option0.clearValues();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      option0.setArgName("t");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setDescription("");
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      option0.getType();
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue("Illegal option name '");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      String string0 = option0.getLongOpt();
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getDescription());
      assertEquals("EJ5BduFS>mKzEVUiXY", string0);
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "EJ5BduFS>mKzEVUiXY", true, "EJ5BduFS>mKzEVUiXY");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getDescription());
      assertEquals("EJ5BduFS>mKzEVUiXY", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.isRequired();
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("t", "t", true, "t");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: t t  [ARG] :: t :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getArgName();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }
}
