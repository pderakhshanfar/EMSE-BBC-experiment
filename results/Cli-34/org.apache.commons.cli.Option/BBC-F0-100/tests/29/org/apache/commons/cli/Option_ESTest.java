/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:52:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "]u*jv$");
      option0.setArgs((-956));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-956), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      option0.setArgs(2147483645);
      option0.addValueForProcessing(" :: ");
      option0.addValueForProcessing("NO_ARGS_ALLOWED");
      option0.setArgs(1);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("NO_ARGS_ALLOWED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("1", "");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("1", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(64);
      option0.setValueSeparator('n');
      option0.addValueForProcessing("[UnH_+");
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("1", "1", true, "~_aT*w@=M=oj#E");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "eu4[RU");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("eu4[RU", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("1", true, "FWDo00X^Q?!LH");
      option0.addValueForProcessing("0/to6,1!o");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals("1", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("FWDo00X^Q?!LH", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("AdB", false, "AdB");
      option0.setValueSeparator('4');
      char char0 = option0.getValueSeparator();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      option0.setValueSeparator('s');
      char char0 = option0.getValueSeparator();
      assertEquals('s', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      String string0 = option0.getValue("Illegal option name '");
      assertFalse(option0.hasLongOpt());
      assertEquals(")=7GoNUwzi(W;ul", option0.getDescription());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("d", "d", true, "0(sEG4$1RyUFVb");
      option0.addValueForProcessing("[ option: ");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertEquals("0(sEG4$1RyUFVb", option0.getDescription());
      assertEquals("d", option0.getLongOpt());
      assertEquals("d", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("!vH=tq~v^cN{A&");
      option0.getValue();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String string0 = option0.getOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("v56DXoOI", true, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("v56DXoOI", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("!vH=tq~v^cN{A&", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("q`eR?_$", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setLongOpt("");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, false, "(,jbwo");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("1", true, "FWDo0X^Q?!LH");
      String string0 = option0.getKey();
      assertEquals("1", string0);
      assertEquals("FWDo0X^Q?!LH", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "{dR");
      String string0 = option0.getDescription();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("{dR", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", false, "*DY:kXBxK5p7k*[z(du");
      assertEquals("*DY:kXBxK5p7k*[z(du", option0.getDescription());
      
      option0.setDescription("");
      option0.getDescription();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("[ option:    [ARG] :: cT@vNBC.YZ)/;isUC ]");
      String string0 = option0.getArgName();
      assertEquals("[ option:    [ARG] :: cT@vNBC.YZ)/;isUC ]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "1", false, "`eR?t$");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.acceptsArg();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      option0.setArgs((-2));
      option0.addValueForProcessing("!vH=tq~v^cN{A&");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", false, "*DY:kXBxK5p7k*[z(du");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-196));
      option0.setValueSeparator('n');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Illegal option name '", true, "eT-lx.2S.Ut]VB>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Illegal option name '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" :: ", "*lSE`X-7", false, "='>Lk`%,:Cw@Dq)p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("yMy=>WhQ8", "(,jbwo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'yMy=>WhQ8' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "]u*jv$");
      option0.setValueSeparator('=');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('=', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArgs();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "1", false, "`eR?t$");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("AdB", false, "AdB");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("zJ");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals(")=7GoNUwzi(W;ul", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      boolean boolean0 = option0.requiresArg();
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("dq`eR_", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("O", "O", true, "O");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("O");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("q`eR?_$", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      boolean boolean0 = object0.equals(option0);
      assertTrue(boolean0);
      assertNotSame(object0, option0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("\"&S");
      Option option1 = new Option("", "\"&S");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, false, "1");
      Option option1 = new Option((String) null, false, "1u");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("1", true, "FWDo0X^Q?!LH");
      Option option1 = new Option("", "1");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertEquals("1", option1.getDescription());
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option((String) null, false, "1");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals("1", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, "d6!~UiF-|'XHB~/");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(1);
      String string0 = option0.toString();
      assertEquals("[ option: oeeOUTgjZa  [ARG] ::  ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      String string0 = option0.toString();
      assertEquals("[ option: oeeOUTgjZa  ::  ::  ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("dq`eR_", option0.getDescription());
      assertNull(stringArray0);
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      option0.setArgs(2147483645);
      option0.addValueForProcessing(" :: ");
      option0.getValues();
      assertEquals(2147483645, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(")=7GoNUwzi(W;ul");
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals(")=7GoNUwzi(W;ul", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      option0.getValue(330);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("1", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      option0.setArgs(2147483645);
      option0.addValueForProcessing(" :: ");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals(")=7GoNUwzi(W;ul", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "$");
      option0.setArgs((-2));
      option0.setValueSeparator('n');
      option0.addValueForProcessing("' contains an illegal character : '");
      assertTrue(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("AdB", false, "AdB");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("gQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", true, "q`e>R?_$");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(128);
      option0.toString();
      assertEquals(128, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      option0.setArgName("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      boolean boolean0 = option0.hasArgName();
      assertEquals("", option0.getOpt());
      assertEquals("dq`eR_", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
      assertEquals("q`eR?_$", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, "9vJio4M^n;d)Y");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("1", "1", true, "~_aT*w@=M=oj#E");
      option0.clearValues();
      assertEquals("~_aT*w@=M=oj#E", option0.getDescription());
      assertEquals("1", option0.getLongOpt());
      assertEquals("1", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("1", "1", true, "~_aT*w@=M=oj#E");
      int int0 = option0.getArgs();
      assertEquals("~_aT*w@=M=oj#E", option0.getDescription());
      assertEquals("1", option0.getLongOpt());
      assertEquals(1, int0);
      assertEquals(49, option0.getId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "q`eR?_$");
      String string0 = option0.getOpt();
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("q`eR?_$", option0.getDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals("1", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertEquals("1", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("1", "1", true, "~_aT*w@=M=oj#E");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      int int0 = option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals(" :: ", option0.getDescription());
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, ")=7GoNUwzi(W;ul");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertNull(string0);
      assertEquals(")=7GoNUwzi(W;ul", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "!vH=tq~v^cN{A&", false, "dq`eR_");
      option0.getValuesList();
      assertEquals("dq`eR_", option0.getDescription());
      assertEquals("!vH=tq~v^cN{A&", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", false, "1");
      option0.isRequired();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("1", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: oeeOUTgjZa  ::  ::  :: class org.apache.commons.cli.Option ]", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("oeeOUTgjZa", " :: ");
      option0.setArgs(2147483645);
      option0.addValueForProcessing(" :: ");
      option0.setArgs(1);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("NO_ARGS_ALLOWED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "K ");
      option0.setValueSeparator('n');
      option0.addValueForProcessing("' contains n illegal character : '");
      assertEquals('n', option0.getValueSeparator());
  }
}
