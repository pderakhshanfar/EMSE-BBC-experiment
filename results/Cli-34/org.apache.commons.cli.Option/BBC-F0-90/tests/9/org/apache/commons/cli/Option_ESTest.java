/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:36:45 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-101));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-101), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("mJX", "C)zh0C,(?#<PVm", true, "C)zh0C,(?#<PVm");
      option0.hashCode();
      assertEquals("C)zh0C,(?#<PVm", option0.getLongOpt());
      assertEquals("mJX", option0.getOpt());
      assertEquals("C)zh0C,(?#<PVm", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-1724));
      option0.setValueSeparator('p');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("IllegaF option name '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", " [ARG]", true, " [ARG]");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals(" [ARG]", option0.getDescription());
      assertEquals(" [ARG]", option0.getLongOpt());
      assertEquals(78, option0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing(".+@_^R&bd");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option((String) null, false, "V");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.setValueSeparator('p');
      char char0 = option0.getValueSeparator();
      assertEquals('p', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("OKwrX0", "OKwrX0", false, "OKwrX0");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", " :: ");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(" :: ");
      option0.getValue(0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.getValue();
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      Class class1 = (Class)option0.getType();
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("Mf9A", "");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("Mf9A", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, "' contains an illegal character : '");
      String string0 = option0.getLongOpt();
      assertEquals("' contains an illegal character : '", string0);
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("0zH", "$}w/C1Fc]+Y");
      String string0 = option0.getKey();
      assertEquals("$}w/C1Fc]+Y", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("0zH", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("x", "x", true, "");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("", option0.getDescription());
      assertEquals("x", option0.getLongOpt());
      assertEquals("x", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgName(">");
      String string0 = option0.getArgName();
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      assertFalse(option0.hasValueSeparator());
      
      option0.addValueForProcessing((String) null);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.addValueForProcessing("' contains an illegal character : '");
      try { 
        option0.getValue((-3523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "V,`@ROLf");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('E');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("NNB<n6IwO~:~2", false, "<n=B$70Tgff!;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'NNB<n6IwO~:~2' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("y5EtpVrx>!", "sc!Ok", true, "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'y5EtpVrx>!' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("&i", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&i' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("K", "K");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator(',');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals(',', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "}");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(31);
      boolean boolean0 = option0.hasArgs();
      assertEquals(31, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "D>l]", false, "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.hasArg();
      assertEquals("D>l]", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, false, "V");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", " [ARG]", true, " [ARG]");
      option0.hasOptionalArg();
      assertEquals(" [ARG]", option0.getLongOpt());
      assertEquals(78, option0.getId());
      assertEquals(" [ARG]", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", " :: ");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      assertEquals((-2), option0.getArgs());
      
      option0.addValueForProcessing(" :: ");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", " :: ");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      boolean boolean0 = option0.requiresArg();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("[ option: ", option0.getDescription());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", true, "' contains an illegal character : '");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("' contains an illegal character : '");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertNotSame(object0, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertNotSame(object0, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("K", "K");
      Option option1 = new Option((String) null, (String) null, false, "K");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option((String) null, "@a,5kr$`]D");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals("");
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "{mHovzp#jZ", true, "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals("{mHovzp#jZ", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
      assertEquals("^vuY+", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("D", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-1));
      option0.toString();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", " [ARG]", true, " [ARG]");
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED  [ARG]  [ARG] ::  [ARG] ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      String[] stringArray0 = option0.getValues();
      assertEquals("^vuY+", option0.getLongOpt());
      assertNull(stringArray0);
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
      assertEquals("D", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", true, "}");
      option0.addValueForProcessing(".+@_^R&bd");
      String string0 = option0.getValue("");
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("}", option0.getDescription());
      assertEquals(".+@_^R&bd", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue(2088);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", " [ARG]", true, " [ARG]");
      option0.addValueForProcessing("' contains an illegal character : '");
      try { 
        option0.getValue(949);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 949, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "g! Z]mNQ3RhZRo");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("g! Z]mNQ3RhZRo", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.setValueSeparator('p');
      option0.setArgs(14);
      option0.addValueForProcessing("y5EtpVrxN>!");
      assertTrue(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, false, "V");
      option0.setArgs(15);
      option0.toString();
      assertEquals(15, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("KK}dE](WN8Q\"%s}[");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals("^vuY+", option0.getLongOpt());
      assertEquals("D", option0.getOpt());
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("W", "", true, ".+@_^R&bd");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("W", option0.getOpt());
      assertEquals(".+@_^R&bd", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String string0 = option0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String string0 = option0.getOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
      
      option0.setDescription("D");
      assertEquals("^vuY+", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      option0.getType();
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
      assertEquals("^vuY+", option0.getLongOpt());
      assertEquals(68, option0.getId());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, false, "V");
      // Undeclared exception!
      try { 
        option0.addValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("K", "K");
      option0.getId();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, "' contains an illegal character : '");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      option0.isRequired();
      assertEquals("T+yh-`B}=nE2.yD)", option0.getDescription());
      assertEquals("^vuY+", option0.getLongOpt());
      assertEquals(68, option0.getId());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", " [ARG]", true, " [ARG]");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED  [ARG]  [ARG] ::  [ARG] :: class org.apache.commons.cli.Option ]", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("D", "^vuY+", true, "T+yh-`B}=nE2.yD)");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getArgName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("0zH", "$}w/C1Fc]+Y");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("$}w/C1Fc]+Y", string0);
      assertEquals(48, option0.getId());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.setValueSeparator('p');
      option0.addValueForProcessing("y5EtpVrxN>!");
      assertEquals('p', option0.getValueSeparator());
  }
}
