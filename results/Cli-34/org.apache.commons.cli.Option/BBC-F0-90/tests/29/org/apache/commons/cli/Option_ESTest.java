/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:46:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "", true, "1tqG*a'aq9Vc;");
      option0.setArgs((-346));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-346), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("N", true, "tCEnx");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals("tCEnx", option0.getDescription());
      assertEquals("N", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, (String) null);
      option0.setValueSeparator('v');
      option0.setArgs(103);
      option0.addValueForProcessing("x7@3#vuO`el-cI$");
      assertEquals(103, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, (String) null);
      option0.addValueForProcessing("x7@3#vuO.l-cI$");
      option0.getValuesList();
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("_T", "_T");
      option0.setValueSeparator('2');
      char char0 = option0.getValueSeparator();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('v');
      char char0 = option0.getValueSeparator();
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("tC", " :: ");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertEquals(" :: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("tC", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("r", "KtC", true, "KtC");
      option0.addValueForProcessing("KtC");
      String string0 = option0.getValue(0);
      assertEquals("KtC", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals(114, option0.getId());
      assertEquals("KtC", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals("jhr9DXC\"%20+2264e", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("tCEnx", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("tCEnx", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("6cCMfl2`H!)RoS");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("RscrJ", "RscrJ", true, "mt");
      String string0 = option0.getKey();
      assertEquals("mt", option0.getDescription());
      assertEquals("RscrJ", string0);
      assertEquals("RscrJ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, (String) null);
      String string0 = option0.getDescription();
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("D", false, "D");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("q", "q");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("", option0.getOpt());
      assertEquals("tCEnx", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.setArgName("Op]lCF!Q");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("jhr9DXC\"%20+2264e", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-2116));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("El", "El", true, "-Lz(hM7/H|=`O$_");
      option0.setValueSeparator('X');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", true, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("2{k7Dy{F7uP?5'ar+", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '2{k7Dy{F7uP?5'ar+' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" :: ", "tC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' :: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('v');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('v', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(80);
      boolean boolean0 = option0.hasArgs();
      assertEquals(80, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("tCEnx", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      option0.setArgs((-3119));
      boolean boolean0 = option0.hasArg();
      assertEquals((-3119), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("tC", "", true, (String) null);
      option0.hasArg();
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("tC", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "g:7 QI`+Masl6zu.1x");
      option0.hasOptionalArg();
      assertEquals("g:7 QI`+Masl6zu.1x", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("e", true, "e");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("tC", " :: ");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("6cCMfl2`H!)RoS");
      option0.hashCode();
      assertEquals("tCEnx", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", true, "sd$kNi9=Pdwt$>4");
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option1.hasLongOpt());
      assertEquals("sd$kNi9=Pdwt$>4", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("tC", " :: ");
      Option option1 = new Option("tC", "xld^7[T=e#5O]#_");
      boolean boolean0 = option0.equals(option1);
      assertEquals("xld^7[T=e#5O]#_", option1.getDescription());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(option1.hasLongOpt());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("tC", " :: ");
      Option option1 = new Option("", "xld^7[T=e#5O]#_");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
      assertEquals("xld^7[T=e#5O]#_", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      Option option1 = new Option((String) null, (String) null, true, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("jhr9DXC\"%20+2264e", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals("");
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("tC", " :: ");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertEquals(" :: ", option0.getDescription());
      assertEquals(116, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      Option option1 = new Option("", "jhr9DXC\"%20+2264e", false, "tC");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("tC", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      option0.setArgs((-1076860143));
      option0.toString();
      assertEquals((-1076860143), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      String string0 = option0.toString();
      assertEquals("[ option: ax ax  [ARG] :: yF ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      String[] stringArray0 = option0.getValues();
      assertEquals("ax", option0.getLongOpt());
      assertNull(stringArray0);
      assertEquals("yF", option0.getDescription());
      assertEquals("ax", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("tC", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.setArgs(76);
      option0.addValueForProcessing("tC");
      option0.getValue("OGNp'?X");
      assertEquals(76, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("_T", "_T");
      option0.getValue(63);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, true, "'");
      option0.addValueForProcessing("x7@3#vuO`el-cI$");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, (String) null);
      option0.setValueSeparator('v');
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("x7@3#vuO`el-cI$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, true, "'");
      option0.setValueSeparator('v');
      option0.addValueForProcessing("x7@3#vuO`el-cI$");
      assertEquals('v', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(561);
      option0.toString();
      assertEquals(561, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("tC", "tC", true, "tC");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("tC", "tC", true, "-Lz(hM7/H|=`O$_");
      option0.setArgName("-Lz(hM7/H|=`O$_");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("ax");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertEquals("ax", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("ax", option0.getOpt());
      assertEquals("yF", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, "tCEnx", false, "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("tCEnx", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getKey();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      option0.clearValues();
      assertEquals("ax", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("yF", option0.getDescription());
      assertEquals("ax", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("q", "q");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.getValueSeparator();
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getLongOpt());
      assertEquals("jhr9DXC\"%20+2264e", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("tC", "", true, (String) null);
      String string0 = option0.getOpt();
      assertEquals(1, option0.getArgs());
      assertEquals("tC", string0);
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setDescription("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getType();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      // Undeclared exception!
      try { 
        option0.addValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("RscrJ", "RscrJ", true, "mt");
      int int0 = option0.getId();
      assertEquals(82, int0);
      assertTrue(option0.hasArg());
      assertEquals("RscrJ", option0.getLongOpt());
      assertEquals("mt", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      option0.getValuesList();
      assertEquals("ax", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("yF", option0.getDescription());
      assertEquals(97, option0.getId());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "tCEnx");
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals("tCEnx", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("ax", "ax", true, "yF");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: ax ax  [ARG] :: yF :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("e", true, "e");
      option0.setArgs((-2));
      option0.addValueForProcessing("e");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, "jhr9DXC\"%20+2264e");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("jhr9DXC\"%20+2264e", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }
}
