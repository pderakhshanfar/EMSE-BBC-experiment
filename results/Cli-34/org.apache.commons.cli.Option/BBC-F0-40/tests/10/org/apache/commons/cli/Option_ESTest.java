/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:39:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("iPj9NZ$G", "kMDHGqvZWJrk~A", true, "'");
      option0.hashCode();
      assertEquals("kMDHGqvZWJrk~A", option0.getLongOpt());
      assertEquals("iPj9NZ$G", option0.getOpt());
      assertEquals("'", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(0);
      option0.setValueSeparator('t');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("org.apache.commons.cli.Option");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", false, "f;Dad]");
      option0.setArgs((-1470));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1470), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", true, "ByV[");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "`^CEfT`", false, "`^CEfT`");
      option0.setValueSeparator('6');
      char char0 = option0.getValueSeparator();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('O');
      char char0 = option0.getValueSeparator();
      assertEquals('O', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getValue("np,{c+-e9viD^|r0");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option((String) null, "KP");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "ByV[");
      String string0 = option0.getOpt();
      assertEquals("ByV[", option0.getDescription());
      assertEquals("", string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", false, "/t,n-.2}1>8K");
      String string0 = option0.getLongOpt();
      assertEquals("/t,n-.2}1>8K", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setLongOpt("dm*t?M7G `zmM");
      String string0 = option0.getLongOpt();
      assertEquals("dm*t?M7G `zmM", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, "pgT71z:", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("pgT71z:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("iPj9NZ$G", (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "g<M{OoX`X:y>", true, "g<M{OoX`X:y>");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "nEV9", true, "");
      int int0 = option0.getArgs();
      assertEquals("", option0.getDescription());
      assertEquals(1, int0);
      assertEquals("nEV9", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.setArgName("H@.");
      option0.getArgName();
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("#9y^,`e?Bl!", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("#9y^,`e?Bl!", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setOptionalArg(true);
      option0.acceptsArg();
      assertFalse(option0.hasArg());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.addValueForProcessing(".FuI7iM*VN");
      try { 
        option0.getValue(3738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3738, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.addValueForProcessing(".FuI7iM*VN");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setValueSeparator('m');
      option0.setArgs((-1460));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("/yronf`lyQ3?tI", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '/yronf`lyQ3?tI' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Z]o%Ba:mFJ;wN~G", "Cannot add value, list full.", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z]o%Ba:mFJ;wN~G' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("=14^+lk$IA<;}8'Ap\":", "=14^+lk$IA<;}8'Ap\":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=14^+lk$IA<;}8'Ap\":' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('O');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('O', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("#9y^,`e?Bl!", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("#9y^,`e?Bl!", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("#9y^,`e?Bl!", option0.getDescription());
      assertEquals("#9y^,`e?Bl!", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      option0.setArgs(653);
      option0.hasArg();
      assertEquals(653, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "`^CEfT`", false, "`^CEfT`");
      option0.getValueSeparator();
      assertEquals("`^CEfT`", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("`^CEfT`", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", false, "wN0BwzEXMImTscF|T");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("wN0BwzEXMImTscF|T", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      assertTrue(option0.hasArgs());
      
      option0.addValueForProcessing("IJ-)(y^p55\"5~7(Y");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "ByV[");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.hashCode();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "ByV[");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("ByV[", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "The option '");
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("iPj9NZ$G");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("The option '");
      Option option1 = new Option("", false, "The option '");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, "s8IvN", true, "y}xNL'C~^hnLf");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals(115, option0.getId());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("y}xNL'C~^hnLf", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      Option option1 = new Option("", "NO_ARGS_ALLOWED", false, "' contains an illegal character : '");
      boolean boolean0 = option0.equals(option1);
      assertEquals("NO_ARGS_ALLOWED", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("' contains an illegal character : '", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, "s8IvN", true, "y}xNL'C~^hnLf");
      Option option1 = new Option((String) null, "s8IvN", true, "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals("", option1.getDescription());
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertEquals(78, option1.getId());
      assertNotSame(option1, option0);
      assertEquals("_S+", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "g<M{OoX`X:y>", true, "g<M{OoX`X:y>");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:  g<M{OoX`X:y>  [ARG] :: g<M{OoX`X:y> :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "2M", false, "");
      String string0 = option0.toString();
      assertEquals("[ option:  2M  ::  ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
      assertEquals("_S+", option0.getDescription());
      assertEquals(78, option0.getId());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("fn4rPl2s");
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("", string0);
      assertEquals(".FuI7iM*VN", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      option0.getValue((-1970));
      assertEquals("_S+", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(78, option0.getId());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.addValueForProcessing(".FuI7iM*VN");
      String string0 = option0.getValue(0);
      assertEquals("", option0.getLongOpt());
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      option0.getValue();
      assertEquals("_S+", option0.getDescription());
      assertEquals(78, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.addValueForProcessing("~jzmyaxU&");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.setValueSeparator('t');
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertEquals('t', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(79);
      option0.setValueSeparator('t');
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertEquals(79, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing(">/`!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "", false, "f;Dad]");
      option0.setArgs(137);
      boolean boolean0 = option0.hasArgs();
      assertEquals(137, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, "s8IvN", true, "y}xNL'C~^hnLf");
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasLongOpt());
      assertEquals(115, option0.getId());
      assertEquals("y}xNL'C~^hnLf", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing(".FuI7iM*VN");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("#9y^,`e?Bl!", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("#9y^,`e?Bl!", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals(78, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("_S+", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "#9y^,`e?Bl!", false, "#9y^,`e?Bl!");
      int int0 = option0.getArgs();
      assertEquals("", option0.getOpt());
      assertEquals((-1), int0);
      assertEquals("#9y^,`e?Bl!", option0.getDescription());
      assertEquals("#9y^,`e?Bl!", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      String string0 = option0.getOpt();
      assertEquals("NO_ARGS_ALLOWED", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("_S+", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals(78, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("_S+", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.setArgName("H@.");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      assertEquals("_S+", option0.getDescription());
      
      option0.setDescription("_S+");
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals(78, option0.getId());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("I7", "I7");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("I7", "I7");
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      String string0 = option0.getLongOpt();
      assertEquals(1, option0.getArgs());
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      option0.getValuesList();
      assertEquals(78, option0.getId());
      assertEquals("_S+", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", true, "ByV[");
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
      assertEquals("ByV[", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, ".FuI7iM*VN");
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals(".FuI7iM*VN", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "_S+");
      String string0 = option0.getDescription();
      assertEquals("_S+", string0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals(78, option0.getId());
      assertEquals((-1), option0.getArgs());
  }
}
