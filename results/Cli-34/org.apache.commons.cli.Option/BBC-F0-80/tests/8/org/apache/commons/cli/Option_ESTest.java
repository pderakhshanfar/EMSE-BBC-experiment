/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:36:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.setArgs((-3515));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-3515), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("$G", false, "$G");
      option0.setArgs(734);
      option0.addValueForProcessing("");
      option0.addValueForProcessing(";4X!DaIF(P)?BWaiCx ");
      option0.setArgs(1);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setLongOpt("[yI>K#:MsUa");
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("oo", false, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('.');
      option0.addValueForProcessing("");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("WxP8xO.K=fR+[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", true, "5E&w");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("5E&w", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      option0.setValueSeparator('l');
      char char0 = option0.getValueSeparator();
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("oo", false, (String) null);
      String string0 = option0.getValue("a7}U~KiPs8^_A0O]");
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("m", "[", true, "[");
      option0.addValueForProcessing("m");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("[", option0.getDescription());
      assertNotNull(string0);
      assertEquals(109, option0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", true, "5E&w");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertEquals("5E&w", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("oo", false, (String) null);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("q", true, "[yI>K#:MsUa");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals("q", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("[yI>K#:MsUa", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "[", true, "[");
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("[", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      String string0 = option0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, true, "_J~wNS,M,");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("A CloneNotSupportedException was thrown: ");
      String string0 = option0.getKey();
      assertEquals("A CloneNotSupportedException was thrown: ", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", false, " ]");
      assertEquals(" ]", option0.getDescription());
      
      option0.setDescription("");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("c", "c");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, (String) null);
      int int0 = option0.getArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("*0784,vLa");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, "_J~wNS,M,");
      option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-2467));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", true, "5E&w");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      option0.setValueSeparator('[');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: null [ARG...] :: null ]", true, "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: null [ARG...] :: null ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("=5A[", (String) null, true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=5A[' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("D*~(-;/s", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'D*~(-;/s' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", false, "J|U9P\"l^3a`z");
      option0.getValue();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("J|U9P\"l^3a`z", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("WxPc8xO.JK?=f^+[");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", false, "J|U9P\"l^3a`z");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs(3976);
      boolean boolean0 = option0.hasArgs();
      assertEquals(3976, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", false, "J|U9P\"l^3a`z");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "J|U9P\"l^3a`z");
      boolean boolean0 = option0.hasArg();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("J|U9P\"l^3a`z", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasOptionalArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("P", false, "'");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("P", false, "'");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("P", option0.getOpt());
      assertEquals("'", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, "jFFIu~44bS=DE{y5_K", true, "jFFIu~44bS=DE{y5_K");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("(");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("zrW", "zrW", false, "zrW");
      Option option1 = new Option("zrW", "zrW");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setLongOpt("[yI>K#:MsUa");
      Option option1 = new Option("", "", true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, " [ARG]");
      Option option1 = new Option("", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("IgqQWAi", "", false, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasLongOpt());
      assertEquals("IgqQWAi", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, " [ARG]");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertFalse(option1.hasLongOpt());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "", true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, "jFFIu~44bS=DE{y5_K", true, "jFFIu~44bS=DE{y5_K");
      boolean boolean0 = option0.equals("jFFIu~44bS=DE{y5_K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: null uq3Hj jVJ>U?%9$R  :: uq3Hj jVJ>U?%9$R :: class java.lang.String ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      String string0 = option0.toString();
      assertEquals("[ option: null  [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      option0.getValue(31);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      option0.setArgs(126);
      option0.addValueForProcessing("[ option: null uq3Hj jVJ>U?%9$R [ARG...] :: ' contains an illegal character : ' ]");
      try { 
        option0.getValue(1628);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1628, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "", true, "");
      option0.getValue((String) null);
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "[", true, "[");
      option0.addValueForProcessing("");
      option0.getValue("");
      assertEquals("", option0.getOpt());
      assertEquals("[", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "[", true, "[yI>K#:MsUa");
      option0.setValueSeparator('t');
      option0.setArgs(1377);
      option0.addValueForProcessing("Illegal option name '");
      assertEquals(1377, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "[", true, "[yI>K#:MsUa");
      option0.setValueSeparator('t');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('t', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("P", false, "'");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option: P [ARG...] :: ' ]", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("zrW", "zrW", false, "zrW");
      option0.setArgName("zrW");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("P", false, "'");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      assertEquals((-2), option0.getArgs());
      
      option0.addValueForProcessing("'");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("5JR73", true, "NO_ARGS_ALLOWED");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("NO_ARGS_ALLOWED");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, "jFFIu~44bS=DE{y5_K", true, "jFFIu~44bS=DE{y5_K");
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals(106, int0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, "jFFIu~44bS=DE{y5_K", true, "jFFIu~44bS=DE{y5_K");
      option0.clearValues();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, "uq3Hj jVJ>U?%9$R", false, "uq3Hj jVJ>U?%9$R");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", false, " ]");
      option0.getType();
      assertEquals(" ]", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, "jFFIu~44bS=DE{y5_K", true, "jFFIu~44bS=DE{y5_K");
      // Undeclared exception!
      try { 
        option0.addValue("4W`gR[=qRCpxYv$");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "[", true, "[");
      String string0 = option0.getLongOpt();
      assertEquals("[", string0);
      assertEquals("", option0.getOpt());
      assertEquals("[", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getValuesList();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.isRequired();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("$G", false, "$G");
      option0.setArgs(734);
      option0.addValueForProcessing("");
      option0.getValues();
      assertEquals(734, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, false, "Ngbh_(I");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("$G", false, "$G");
      option0.setValueSeparator('^');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('^', option0.getValueSeparator());
      assertTrue(boolean0);
  }
}
