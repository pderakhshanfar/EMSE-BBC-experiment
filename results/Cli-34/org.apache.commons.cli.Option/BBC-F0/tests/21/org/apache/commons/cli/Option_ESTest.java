/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:09:08 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", " !v,^)yX=U?Y9@B9lU");
      option0.setArgs(0);
      option0.setValueSeparator('H');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("|<X0CjJ:@GnD]H=2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "5z\ny2kGf<Mewe[81O*");
      option0.setArgs((-87));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-87), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("ibw6", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("hGnQwF", "hGnQwF", true, "hGnQwF");
      option0.addValueForProcessing("hGnQwF");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.setValueSeparator('2');
      char char0 = option0.getValueSeparator();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "NF@pXa%");
      option0.setValueSeparator('h');
      char char0 = option0.getValueSeparator();
      assertEquals('h', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(" !v,^)yX=U?Y9@B9lU");
      option0.getValue();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("g", true, "M0_p9Qeo\".4T &!Vp");
      String string0 = option0.getOpt();
      assertEquals("M0_p9Qeo\".4T &!Vp", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("g", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("k_*B+K%O-lavUxf/vyy");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setLongOpt("?f[");
      String string0 = option0.getKey();
      assertEquals("?f[", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", false, " :: ");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertEquals("", string0);
      assertEquals(" :: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", false, "8>,6oU>ng`ItAaRY#w#");
      option0.setArgName("8>,6oU>ng`ItAaRY#w#");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("8>,6oU>ng`ItAaRY#w#", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", true, "fU|Cd<Wp}@\"=,=w");
      option0.setArgName("");
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("fU|Cd<Wp}@\"=,=w", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      option0.addValueForProcessing("idhO'");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      option0.addValueForProcessing("idhO'");
      try { 
        option0.getValue((-1360));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(31);
      option0.setValueSeparator('y');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" !v,^)yX=U?Y9@B9lU", false, "fUX3dK-'$c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' !v,^)yX=U?Y9@B9lU' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(">6Wb4", ">6Wb4", false, "?f[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>6Wb4' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("idhO'", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'idhO'' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "5z\ny2kGf<Mewe[81O*");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("5z\ny2kGf<Mewe[81O*", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(190);
      boolean boolean0 = option0.hasArgs();
      assertEquals(190, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals(" !v,^)yX=U?Y9@B9lU", option0.getDescription());
      assertEquals(68, option0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(1835);
      option0.hasArg();
      assertEquals(1835, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("ibw6", true, "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("ibw6", option0.getOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", " !v,^)yX=U?Y9@B9lU");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(" ]");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", " !v,^)yX=U?Y9@B9lU");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("ibw6", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setLongOpt("?f[");
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("Q", false, "Q");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      Option option1 = new Option((String) null, "7nL=8K U9", true, "29UBLdW#f_ ]r8t");
      boolean boolean0 = option0.equals(option1);
      assertEquals("29UBLdW#f_ ]r8t", option1.getDescription());
      assertEquals(55, option1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", true, "Z");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option("", (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.equals((Object)option0));
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      Option option1 = new Option("", true, "7nL=8K U9");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("7nL=8K U9", option1.getDescription());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertEquals(68, option1.getId());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals(" !v,^)yX=U?Y9@B9lU", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, "5t4Eyi,@IFI", false, "");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: null 5t4Eyi,@IFI  ::  :: class java.lang.String ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      String string0 = option0.toString();
      assertEquals("[ option: null  [ARG] :: 7nL=8K U9 ]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("W", option0.getOpt());
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.getValue(64);
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("W", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("hGnQwF", "hGnQwF", true, "hGnQwF");
      option0.addValueForProcessing("hGnQwF");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("W", true, "W");
      String string0 = option0.getValue("W");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(1835);
      option0.setValueSeparator('o');
      option0.addValueForProcessing("bLk)noHC`Y=");
      assertEquals('o', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("W", true, "W");
      option0.setValueSeparator('g');
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      assertEquals('g', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option((String) null, "5t4Eyi,@IFI", false, "");
      option0.setArgs(2114);
      option0.toString();
      assertEquals(2114, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", true, "fU|Cd<Wp}@\"=,=w");
      option0.setArgName("aeZlvwgp(");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals(87, option0.getId());
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("D", " !v,^)yX=U?Y9@B9lU");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(" !v,^)yX=U?Y9@B9lU");
      option0.getValue("D");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "8>,6oU>ng`ItAaRY#w#");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("8>,6oU>ng`ItAaRY#w#");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option((String) null, true, "7nL=8K U9");
      String string0 = option0.getKey();
      assertNull(string0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.clearValues();
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals("W", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals(87, option0.getId());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, "5t4Eyi,@IFI", false, "");
      assertEquals("", option0.getDescription());
      
      option0.setDescription("");
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals("5t4Eyi,@IFI", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertFalse(boolean0);
      assertEquals(87, option0.getId());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "l5tw'S0");
      // Undeclared exception!
      try { 
        option0.addValue("l5tw'S0");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      int int0 = option0.getId();
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals(87, int0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.getValuesList();
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(87, option0.getId());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("!h2&pIW[2]MlO;", option0.getDescription());
      assertEquals("W", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", false, "8>,6oU>ng`ItAaRY#w#");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("8>,6oU>ng`ItAaRY#w#", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", false, " :: ");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(" :: ", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("W", "!h2&pIW[2]MlO;");
      option0.setValueSeparator('2');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('2', option0.getValueSeparator());
      assertTrue(boolean0);
  }
}
