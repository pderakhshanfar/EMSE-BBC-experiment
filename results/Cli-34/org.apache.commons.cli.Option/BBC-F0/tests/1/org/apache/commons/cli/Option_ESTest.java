/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:03:26 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH", false, "2zH");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("2zH", option0.getDescription());
      assertEquals(78, option0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.setArgs((-345));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-345), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('');
      option0.setArgs(2101);
      option0.addValueForProcessing("\">U;D(");
      assertEquals('', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("84", "84", true, "84");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.addValueForProcessing("x$eV)MCyz6nAcz;Jk");
      option0.getValuesList();
      assertEquals(" ]", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('2');
      char char0 = option0.getValueSeparator();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('I');
      char char0 = option0.getValueSeparator();
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertEquals("2zH", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("L$mrL", "L$mrL");
      String string0 = option0.getValue("L$mrL");
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("+b");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertEquals(" ]", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      Class class1 = (Class)option0.getType();
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, "' contains an illegal character : '");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("Z8", (String) null);
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("Z8", (String) null);
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH", false, "2zH");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("2zH", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, true, "[ option:  Z$  [ARG] :: org.apache.commons.cli.OptionValidator ]");
      String string0 = option0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, "' contains an illegal character : '");
      option0.getKey();
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, "uE0+PP", false, "");
      assertTrue(option0.hasLongOpt());
      assertEquals("uE0+PP", option0.getLongOpt());
      
      int int0 = option0.getId();
      assertEquals(117, int0);
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setDescription((String) null);
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setDescription("x$eV)MCyz6nAcz;Jk");
      String string0 = option0.getDescription();
      assertEquals("x$eV)MCyz6nAcz;Jk", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("B7", true, "org.apache.commons.cli.Option");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH", false, "2zH");
      int int0 = option0.getArgs();
      assertEquals("2zH", option0.getLongOpt());
      assertEquals("2zH", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("yz]X\"6]q8*H7");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("x$eV)MCyz6nAcz;Jk");
      try { 
        option0.getValue((int) '\'');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", true, "M`d3DmPRr");
      option0.addValueForProcessing("x$eV)MCyz6nAcz;Jk");
      try { 
        option0.getValue((-345));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("x+j2p=mM\"cG*:p&", true, "x+j2p=mM\"cG*:p&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'x+j2p=mM\"cG*:p&' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("~g", "xMH?mv.,/'(~/e_wn#F", true, "VxALSO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~g' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("+b", "jG4nU0K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+b' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "E:JUX`n7Gq{GL'a&", false, "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertEquals("E:JUX`n7Gq{GL'a&", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.addValueForProcessing("x$eV)MCyz6nAcz;Jk");
      String string0 = option0.getValue();
      assertEquals(" ]", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, "' contains an illegal character : '");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals("'", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH", false, "2zH");
      boolean boolean0 = option0.hasArgs();
      assertEquals("2zH", option0.getDescription());
      assertEquals(78, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("2zH", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option((String) null, "'", true, "' contains an illegal character : '");
      option0.setArgs(2147483645);
      boolean boolean0 = option0.hasArgs();
      assertEquals(2147483645, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("84", "84", true, "84");
      boolean boolean0 = option0.hasOptionalArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setLongOpt("");
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("L$mrL", "L$mrL");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Z8");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Object object0 = option0.clone();
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      boolean boolean0 = object0.equals(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "S=4OP");
      Option option1 = new Option((String) null, "e");
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("84");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "S=4OP");
      Option option1 = new Option((String) null, "e");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("84", "84", true, "84");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, option0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("e", true, (String) null);
      Option option1 = new Option((String) null, "e");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("e", true, (String) null);
      Option option1 = new Option((String) null, (String) null, false, "S=4OP");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("B7", true, "org.apache.commons.cli.Option");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: B7  [ARG] :: org.apache.commons.cli.Option :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("HbSMfVaCsD", "HbSMfVaCsD", true, "HbSMfVaCsD");
      String string0 = option0.toString();
      assertEquals("[ option: HbSMfVaCsD HbSMfVaCsD  [ARG] :: HbSMfVaCsD ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("1", "pl=U|uq8`{4l%Wr$79");
      String string0 = option0.toString();
      assertEquals("[ option: 1  :: pl=U|uq8`{4l%Wr$79 ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("HbSMfVaCsD", "HbSMfVaCsD", true, "HbSMfVaCsD");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("84", ">gl@wl^CX~ic)", true, "");
      option0.addValueForProcessing(">gl@wl^CX~ic)");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertEquals("", option0.getDescription());
      assertEquals("84", option0.getOpt());
      assertEquals(">gl@wl^CX~ic)", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("B7", true, "org.apache.commons.cli.Option");
      option0.getValue((-1380));
      assertFalse(option0.hasLongOpt());
      assertEquals(66, option0.getId());
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("84", ">gl@wl^CX~ic)", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(">gl@wl^CX~ic)");
      assertEquals(">gl@wl^CX~ic)", option0.getLongOpt());
      assertEquals("", string0);
      assertEquals("84", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('');
      option0.addValueForProcessing("\">U;D(");
      assertEquals('', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("yz]X\"6]q8*H7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("84", "84", true, "84");
      option0.setArgs(73);
      option0.toString();
      assertEquals(73, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "2zH", false, "2zH");
      option0.setArgName("[ option: NO_ARGS_ALLOWED 2zH  :: NO_ARGS_ALLOWED ]");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals(" ]", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("eR", "uW=0oL");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals(101, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals("uW=0oL", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, true, "[ option: 84  :: 84 ]");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.clearValues();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("B7", true, "org.apache.commons.cli.Option");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
      assertEquals(66, option0.getId());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("HbSMfVaCsD", "HbSMfVaCsD", true, "HbSMfVaCsD");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getType();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        option0.addValue("?N8");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("B7", true, "org.apache.commons.cli.Option");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(66, option0.getId());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("Z8", (String) null);
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("HbSMfVaCsD", "HbSMfVaCsD", true, "HbSMfVaCsD");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getArgName();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('');
      option0.addValueForProcessing("");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("\">U;D(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }
}
