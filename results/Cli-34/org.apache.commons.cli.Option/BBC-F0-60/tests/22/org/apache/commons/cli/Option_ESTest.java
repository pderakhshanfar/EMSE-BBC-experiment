/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:44:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("N", "N", false, "N");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("S", "S");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      option0.setValueSeparator('|');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("%p|;UR`_G[E6in3vxuo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "..");
      option0.setArgs((-1773));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1773), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "..");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("Illegal option name '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "`'fD7*o)Q'UP(");
      option0.setValueSeparator('0');
      char char0 = option0.getValueSeparator();
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('P');
      char char0 = option0.getValueSeparator();
      assertEquals('P', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      option0.getValue((String) null);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("Illegal option name '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("q/croP|o|4");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "");
      Class<String> class0 = String.class;
      option0.setType(class0);
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("cl7q", "", true, "7Y0Fn");
      String string0 = option0.getOpt();
      assertEquals("7Y0Fn", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("cl7q", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "!eN[Iky<g|-4|@A", false, "");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertEquals("!eN[Iky<g|-4|@A", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      String string0 = option0.getKey();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("q", "lk[z)wnl@X;q", true, (String) null);
      String string0 = option0.getKey();
      assertEquals("lk[z)wnl@X;q", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      String string0 = option0.getKey();
      assertEquals("", string0);
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, "", false, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("S", false, "S");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("Q", " [ARG]", true, "Q");
      int int0 = option0.getArgs();
      assertEquals("Q", option0.getDescription());
      assertEquals(" [ARG]", option0.getLongOpt());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "..");
      option0.setArgName("..");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("..", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      boolean boolean0 = option0.acceptsArg();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(1927);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1927, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "`'fD7*o)Q'UP(");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      option0.setValueSeparator('|');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Illegal option name '", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Illegal option name '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("(,P/Ux8J)D%Ef\"z", "K&'Pa0:ox\u0001'(r;*=!", false, "K&'Pa0:ox\u0001'(r;*=!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(,P/Ux8J)D%Ef\"z' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal character : '", "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('P');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('P', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "`'fD7*o)Q'UP(");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "`'fD7*o)Q'UP(");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("N", "N", false, "N");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "2~Hl;CwN4Z3qeD>h%", false, "");
      option0.hashCode();
      assertEquals("2~Hl;CwN4Z3qeD>h%", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, true, "85W+,r0(C");
      Option option1 = new Option("", "85W+,r0(C");
      boolean boolean0 = option0.equals(option1);
      assertEquals("85W+,r0(C", option1.getDescription());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      Option option1 = new Option("J3mx", (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("Illegal option name '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, true, "85W+,r0(C");
      Option option1 = new Option((String) null, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      boolean boolean0 = option0.equals("!HXBDcec[@_`%i%F+f");
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:   ::  :: class org.apache.commons.cli.Option ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      String string0 = option0.toString();
      assertEquals("[ option: null  [ARG] :: Hm's_{_LLBl ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setArgs(508);
      option0.toString();
      assertEquals(508, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      option0.addValueForProcessing("Illegal option name '");
      String string0 = option0.getValue("!pnN*m");
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("Illegal option name '", string0);
      assertEquals("", option0.getOpt());
      assertEquals("Illegal option name '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "&,J_<86l1s+An=4#W");
      String string0 = option0.getValue("");
      assertEquals("&,J_<86l1s+An=4#W", option0.getDescription());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      option0.getValue(0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      option0.addValueForProcessing("'bK44|9mVr\"}$)a");
      String string0 = option0.getValue(0);
      assertTrue(option0.hasLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("S", "S");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('|');
      option0.setArgs(64);
      option0.addValueForProcessing("q/croP|o|4");
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, "Hm's_{_LLBl");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, "Hm's_{_LLBl");
      option0.setArgs(150);
      boolean boolean0 = option0.hasArgs();
      assertEquals(150, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("_{i");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("' contains an illegal character : '");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("p1", "]d", true, "ddVDRRX");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("]d", option0.getLongOpt());
      assertEquals("ddVDRRX", option0.getDescription());
      assertEquals("p1", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", true, "Illegal option name '");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("Illegal option name '", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      option0.clearValues();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("S", false, "S");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setDescription("");
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue("!HXBDcec[@_`%i%F+f");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("p1", true, "p1");
      int int0 = option0.getId();
      assertEquals(112, int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Hm's_{_LLBl");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "..");
      option0.isRequired();
      assertEquals("..", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, "!HXBDcec[@_`%i%F+f", true, (String) null);
      String string0 = option0.getDescription();
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('|');
      option0.addValueForProcessing("q/croP|o|4");
      assertEquals('|', option0.getValueSeparator());
  }
}
