/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:38:36 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("2k", "");
      option0.hashCode();
      assertEquals("2k", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2147483645));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2147483645), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      option0.setValueSeparator('|');
      option0.setArgs(1121);
      option0.addValueForProcessing("9Vm*yE;=!_r|~");
      assertEquals(1121, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("2k", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      option0.addValueForProcessing("9Vm*yE;=!_r|~");
      option0.getValuesList();
      assertEquals("CwDiZfbn)rV<,|Th\u0000o", option0.getDescription());
      assertEquals("9Vm*yE;=!_r|~", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('1');
      char char0 = option0.getValueSeparator();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('X');
      char char0 = option0.getValueSeparator();
      assertEquals('X', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      String string0 = option0.getValue(" :: ");
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      option0.addValueForProcessing("9Vm*yE;=!_r|~");
      String string0 = option0.getValue();
      assertEquals("9Vm*yE;=!_r|~", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("CwDiZfbn)rV<,|Th\u0000o", option0.getDescription());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Class<Option> class0 = Option.class;
      option0.setType(class0);
      Class class1 = (Class)option0.getType();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "", false, (String) null);
      option0.getOpt();
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("v", (String) null);
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "b45}`z", false, (String) null);
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("c", "c", true, "c");
      String string0 = option0.getKey();
      assertEquals("c", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, (String) null);
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      String string0 = option0.getDescription();
      assertEquals("}mxJKU`", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      option0.setArgName(")");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("Bo=bJ2!", option0.getDescription());
      assertEquals(")", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", (String) null);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("");
      try { 
        option0.getValue(927);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 927, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("c", true, "c");
      option0.addValueForProcessing("c");
      try { 
        option0.getValue((-700));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('b');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("94t~^", true, "zr+SCF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '94t~^' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.Option", "", true, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("({,&ow`[lfGh=H%", "({,&ow`[lfGh=H%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '({,&ow`[lfGh=H%' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      option0.setValueSeparator('N');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('N', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "", true, "org.apache.commons.cli.OptionValidator");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      char char0 = option0.getValueSeparator();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("The option '");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "}mxJKU`", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertEquals("Bo=bJ2!", option0.getDescription());
      assertEquals(")", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      Option option1 = new Option((String) null, "", false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option("", "HH<=:M=+", true, " ");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals(" ", option1.getDescription());
      assertEquals("HH<=:M=+", option1.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      Option option1 = new Option((String) null, "", true, "-fUmY'j-Q)4jm");
      boolean boolean0 = option0.equals(option1);
      assertEquals("-fUmY'j-Q)4jm", option1.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "G1o%HaF)CT#NsOt|\"");
      Option option1 = new Option((String) null, "H.6: 20yN8", true, "G1o%HaF)CT#NsOt|\"");
      boolean boolean0 = option1.equals(option0);
      assertEquals("G1o%HaF)CT#NsOt|\"", option0.getDescription());
      assertFalse(boolean0);
      assertEquals(72, option1.getId());
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("CwDiZfbn)rV<,|Th\u0000o", option0.getDescription());
      assertEquals("9Vm*yE;=!_r|~", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("}mxJKU`", option0.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("v", "v");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "G1o%HaF)CT#NsOt|\"");
      Option option1 = new Option("", "", true, ".(.-");
      boolean boolean0 = option0.equals(option1);
      assertEquals(".(.-", option1.getDescription());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:  )  [ARG] :: Bo=bJ2! :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  [ARG...] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.toString();
      assertEquals("[ option:   ::  ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "");
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("[ option:    [ARG] ::  ]");
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "}mxJKU`", true, "");
      option0.getValue((String) null);
      assertEquals("", option0.getDescription());
      assertEquals("}mxJKU`", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue(64);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("h", "h", true, "h");
      option0.addValueForProcessing("h");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      option0.getValue();
      assertEquals("", option0.getOpt());
      assertEquals("}mxJKU`", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      option0.addValueForProcessing((String) null);
      option0.setValueSeparator('|');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("9Vm*yE;=!_r|~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "9Vm*yE;=!_r|~", true, "CwDiZfbn)rV<,|Th\u0000o");
      option0.setValueSeparator('|');
      option0.addValueForProcessing("9Vm*yE;=!_r|~");
      assertEquals('|', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "0<z.CQ,v0\"9\flo`7v`", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("rI$cLbhuAf`W6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs(32);
      boolean boolean0 = option0.hasArgs();
      assertEquals(32, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("F<a");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals("}mxJKU`", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      option0.clearValues();
      assertEquals(")", option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
      assertEquals("Bo=bJ2!", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("fAQe;xb[C0VYsR");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      String string0 = option0.getOpt();
      assertEquals("", string0);
      assertEquals(")", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("Bo=bJ2!", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertTrue(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setDescription("[ option:   ::  ]");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, "org.apache.commons.cli.OptionValidator");
      option0.getType();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue("[~|Y:]':b>AK5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("v", "v");
      option0.getId();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", false, "}mxJKU`");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("}mxJKU`", option0.getDescription());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", ")", true, "Bo=bJ2!");
      option0.getValuesList();
      assertEquals(")", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("Bo=bJ2!", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.isRequired();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("The option '");
      option0.getValues();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option((String) null, "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }
}
