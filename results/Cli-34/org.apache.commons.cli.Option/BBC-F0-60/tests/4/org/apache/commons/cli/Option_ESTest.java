/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:35:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      option0.addValueForProcessing("");
      option0.setArgs(64);
      option0.addValueForProcessing((String) null);
      option0.setArgs(1);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.setValueSeparator('e');
      option0.addValueForProcessing("");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", (String) null, true, "org.apache.commons.cli.Option");
      option0.setArgs((-2120));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2120), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "I)Cx Nz=z5uIa7}F ");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("I)Cx Nz=z5uIa7}F ", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      option0.getValuesList();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals(" ]", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('3');
      char char0 = option0.getValueSeparator();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", true, "I)Cx Nz=z5uIa7}F ");
      option0.setValueSeparator('O');
      char char0 = option0.getValueSeparator();
      assertEquals('O', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("qe1q", "qe1q", true, "qe1q");
      option0.addValueForProcessing("qe1q");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      String string0 = option0.getValue();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(" ]", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option((String) null, "'a2]B <-<R1uS'X9", false, "");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals("'a2]B <-<R1uS'X9", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      String string0 = option0.getOpt();
      assertTrue(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("+");
      option0.getLongOpt();
      assertEquals("$8k]STVMbo9", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, "{$E7 !#!TS}CaW", false, "{$E7 !#!TS}CaW");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.getKey();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "", true, "I)Cx Nz=z5uIa7}F ");
      String string0 = option0.getDescription();
      assertEquals("", option0.getLongOpt());
      assertEquals("I)Cx Nz=z5uIa7}F ", string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("w9L", true, "w9L");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      option0.setArgName("Tz>|Qnq");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals("L", option0.getOpt());
      assertEquals("Tz>|Qnq", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      option0.setArgName("");
      option0.getArgName();
      assertEquals("$8k]STVMbo9", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.acceptsArg();
      assertEquals("", option0.getOpt());
      assertEquals(" ]", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      option0.addValueForProcessing("n}");
      try { 
        option0.getValue(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      option0.setValueSeparator('');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("g^15FJ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'g^15FJ' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("h!y`x6+8)4]+", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'h!y`x6+8)4]+' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("~_OGA?W;0AmZ>", "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~_OGA?W;0AmZ>' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "hw^^;,");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("hw^^;,", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", ")`$C4'7Ac", true, ")`$C4'7Ac");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals(")`$C4'7Ac", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals(")`$C4'7Ac", option0.getLongOpt());
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('3');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('3', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertTrue(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      option0.setArgs(7);
      boolean boolean0 = option0.hasArgs();
      assertEquals(7, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "Dy9w5*yWKI0{;");
      boolean boolean0 = option0.hasArg();
      assertEquals("Dy9w5*yWKI0{;", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      char char0 = option0.getValueSeparator();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.hasOptionalArg();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals("Tz>|Qnq", option0.getDescription());
      assertEquals(76, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("iM", "t");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("t");
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("Q$Ntta0Dzk", "Q$Ntta0Dzk");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.hashCode();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, "K~v", false, "K~v");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("c", true, "Tz>|Qnq");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("K~v");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      Option option1 = new Option("", "K~v", true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      Option option1 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      Option option1 = new Option((String) null, "p>\"x@6", true, "$8k]STVMbo9");
      boolean boolean0 = option0.equals(option1);
      assertEquals(112, option1.getId());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("$8k]STVMbo9", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      Option option1 = new Option((String) null, (String) null, true, "AzZ;WAb!|oB]");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", ")`$C4'7Ac", true, ")`$C4'7Ac");
      boolean boolean0 = option0.equals(option0);
      assertEquals(")`$C4'7Ac", option0.getDescription());
      assertEquals(")`$C4'7Ac", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("iM", "t");
      Object object0 = new Object();
      boolean boolean0 = option0.equals(object0);
      assertEquals("t", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("iM", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("AbIW", false, "AbIW");
      Class<String> class0 = String.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: AbIW  :: AbIW :: class java.lang.String ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      String string0 = option0.toString();
      assertEquals("[ option: r !?QPeaIt4g~\"Obk&sPd  [ARG] :: [ARG...] ]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("iM", "t");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
      assertEquals("t", option0.getDescription());
      assertEquals(105, option0.getId());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      option0.getValue(82);
      assertEquals("Tz>|Qnq", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(76, option0.getId());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("Q$Ntta0Dzk", "Q$Ntta0Dzk");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      String string0 = option0.getValue("K~v");
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasLongOpt());
      assertEquals("org.apache.commons.cli.Option", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", true, " ]");
      option0.setArgs(305);
      option0.setValueSeparator('e');
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      assertEquals(305, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setValueSeparator('g');
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertEquals('g', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      boolean boolean0 = option0.hasArgName();
      assertEquals("[ARG...]", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("!?QPeaIt4g~\"Obk&sPd", option0.getLongOpt());
      assertEquals(114, option0.getId());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setArgs((-2));
      option0.addValueForProcessing("[ARG...]");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertEquals("!?QPeaIt4g~\"Obk&sPd", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
      assertEquals("[ARG...]", option0.getDescription());
      assertEquals("r", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", ")`$C4'7Ac", true, ")`$C4'7Ac");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals(")`$C4'7Ac", option0.getDescription());
      assertEquals(")`$C4'7Ac", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals(76, option0.getId());
      assertTrue(option0.hasArg());
      assertEquals("Tz>|Qnq", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "AzZ;WAb!|oB]");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.clearValues();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("w9L", true, "w9L");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("Q$Ntta0Dzk", "Q$Ntta0Dzk");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      option0.setArgName("Fp");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("iM", "t");
      assertEquals("t", option0.getDescription());
      
      option0.setDescription(" :: ");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.getType();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("L", true, "Tz>|Qnq");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      int int0 = option0.getId();
      assertEquals("!?QPeaIt4g~\"Obk&sPd", option0.getLongOpt());
      assertEquals("[ARG...]", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(114, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", true, "$8k]STVMbo9");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
      assertNull(string0);
      assertEquals("$8k]STVMbo9", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      option0.getValuesList();
      assertEquals("!?QPeaIt4g~\"Obk&sPd", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("[ARG...]", option0.getDescription());
      assertEquals(114, option0.getId());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("r", "!?QPeaIt4g~\"Obk&sPd", true, "[ARG...]");
      option0.setArgs(64);
      option0.toString();
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.getArgName();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      String string0 = option0.getDescription();
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
      assertEquals(1, option0.getArgs());
  }
}
