/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:39:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("$", (String) null);
      option0.setArgs((-941));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-941), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option((String) null, "LJ@H9|HAG+`#-;LT#Se");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasArg());
      assertTrue(boolean0);
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      option0.hashCode();
      assertEquals(" ", option0.getDescription());
      assertEquals("dZh9", option0.getLongOpt());
      assertEquals("dZh9", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "LJ@H9|HAG+`#-;LT#Se");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("LJ@H9|HAG+`#-;LT#Se", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("$");
      option0.setValueSeparator('D');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("NO_AAGS_AL0(LOWED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-1420));
      option0.toString();
      assertEquals((-1420), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "wVl9", true, (String) null);
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("dZh9", option0.getLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals(100, option0.getId());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("qiC0\bE21Nu!p]`o");
      List list0 = option0.getValuesList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('6');
      char char0 = option0.getValueSeparator();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("qiC0\bE21Nu!p]`o");
      String string0 = option0.getValue("");
      assertEquals("qiC0\bE21Nu!p]`o", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ", true, "org.apache.commons.cli.Option");
      option0.addValueForProcessing("D");
      String string0 = option0.getValue(0);
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getLongOpt());
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "", true, "9");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("9", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      String string0 = option0.getOpt();
      assertEquals("dZh9", string0);
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("dZh9", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", false, "9");
      String string0 = option0.getOpt();
      assertEquals("", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("9", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      String string0 = option0.getLongOpt();
      assertEquals(" ", option0.getDescription());
      assertEquals("dZh9", string0);
      assertEquals("dZh9", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setLongOpt("");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Q&=z0 :=U$v`vU{aQ*(");
      String string0 = option0.getKey();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("$", true, "' contains an illegal character : '");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals("$", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      String string0 = option0.getDescription();
      assertEquals(" ", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("dZh9", option0.getLongOpt());
      assertEquals("dZh9", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", false, "%!{!.AEp\rHB-4");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertEquals("%!{!.AEp\rHB-4", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "LJ@H9|HAG+`#-;LT#Se");
      option0.setArgName("LJ@H9|HAG+`#-;LT#Se");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("LJ@H9|HAG+`#-;LT#Se", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "o", true, "0o~9R\"A5L!@(jmMHike");
      option0.addValueForProcessing("l[ T)x?");
      boolean boolean0 = option0.acceptsArg();
      assertEquals("0o~9R\"A5L!@(jmMHike", option0.getDescription());
      assertEquals("o", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("qiC0\bE21Nu!p]`o");
      try { 
        option0.getValue(4047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4047, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", true, "[ option: ");
      option0.setValueSeparator('B');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("H`#6*7>y_&d$)b", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'H`#6*7>y_&d$)b' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.Option", "R;uT*", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("~G=gp%3m4eP7HY,PB", "c\"i72%X:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~G=gp%3m4eP7HY,PB' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing((String) null);
      String string0 = option0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", false, "%!{!.AEp\rHB-4");
      option0.setValueSeparator('o');
      boolean boolean0 = option0.hasValueSeparator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("$", true, "' contains an illegal character : '");
      option0.hasValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals("$", option0.getOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.hasArg();
      assertEquals("TsLX+GJq!", option0.getLongOpt());
      assertEquals("TsLX+GJq!", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.addValueForProcessing((String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "Q&=z0 :=U$v`vU{aQ*(");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", true, "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "", false, "9");
      Option option1 = new Option("", true, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("9", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "", true, "9");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertTrue(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals("9", option1.getDescription());
      assertEquals("", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "$");
      Option option1 = new Option((String) null, (String) null, false, "org.apache.commons.cli.Option");
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("$", false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("dZh9", "dZh9", false, " ");
      boolean boolean0 = option0.equals("dZh9");
      assertEquals("dZh9", option0.getLongOpt());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(100, option0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option((String) null, (String) null, true, "$");
      boolean boolean0 = option1.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: t  [ARG] :: null :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      String string0 = option0.toString();
      assertEquals("[ option:  TsLX+GJq!  [ARG] :: TsLX+GJq! ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      String[] stringArray0 = option0.getValues();
      assertEquals("RTv2a1@", option0.getLongOpt());
      assertNull(stringArray0);
      assertEquals("zm", option0.getOpt());
      assertEquals("RTv2a1@", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertNotNull(stringArray0);
      assertEquals("TsLX+GJq!", option0.getLongOpt());
      assertEquals("TsLX+GJq!", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("z", true, "z");
      option0.getValue(1229);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("R", "R", true, "R");
      option0.setValueSeparator('E');
      option0.setArgs(92);
      option0.addValueForProcessing("qiC0\bE21Nu!p]`o");
      assertEquals(92, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", false, "%!{!.AEp\rHB-4");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertEquals("TsLX+GJq!", option0.getLongOpt());
      assertEquals("TsLX+GJq!", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("t", (String) null, true, (String) null);
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "", true, "9");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArgs();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "LJ@H9|HAG+`#-;LT#Se");
      option0.setArgName("LJ@H9|HAG+`#-;LT#Se");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "LJ@H9|HAG+`#-;LT#Se");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("LJ@H9|HAG+`#-;LT#Se", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      boolean boolean0 = option0.hasArgName();
      assertEquals("RTv2a1@", option0.getLongOpt());
      assertEquals("RTv2a1@", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("zm", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, " ]");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "9");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("9", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, "1jE($0>YELC");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("$", true, "' contains an illegal character : '");
      option0.clearValues();
      assertEquals(36, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertEquals("' contains an illegal character : '", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("RTv2a1@", option0.getDescription());
      assertEquals(122, option0.getId());
      assertEquals("RTv2a1@", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("R", "R", true, "R");
      option0.setValueSeparator('E');
      option0.addValueForProcessing("qiC0\bE21Nu!p]`o");
      assertEquals('E', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getOpt();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals("TsLX+GJq!", option0.getDescription());
      assertEquals("TsLX+GJq!", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      assertEquals("TsLX+GJq!", option0.getDescription());
      
      option0.setDescription("[ option:  TsLX+GJq!  [ARG] :: TsLX+GJq! ]");
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getType();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      // Undeclared exception!
      try { 
        option0.addValue("[ARG...]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("zm", "RTv2a1@", true, "RTv2a1@");
      int int0 = option0.getId();
      assertEquals("RTv2a1@", option0.getLongOpt());
      assertEquals("RTv2a1@", option0.getDescription());
      assertEquals(122, int0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArg());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.getValuesList();
      assertEquals("TsLX+GJq!", option0.getDescription());
      assertEquals("TsLX+GJq!", option0.getLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.requiresArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("z", true, "z");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("z");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "LJ@H9|HAG+`#-;LT#Se");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("LJ@H9|HAG+`#-;LT#Se", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, (String) null);
      String string0 = option0.getDescription();
      assertEquals(1, option0.getArgs());
      assertNull(string0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "TsLX+GJq!", true, "TsLX+GJq!");
      option0.setValueSeparator('l');
      char char0 = option0.getValueSeparator();
      assertEquals('l', char0);
  }
}
