/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 19:46:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "", true, "]AEejr[=+;w");
      assertEquals("", option0.getLongOpt());
      
      option0.setLongOpt("'");
      option0.hashCode();
      assertEquals("]AEejr[=+;w", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("F", true, "org.apache.commons.cli.OptionValidator");
      option0.hashCode();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(70, option0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing(" [ARG]");
      option0.setValueSeparator('`');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("J/%G`Ft%:nR ]3&Rpp!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      option0.setArgs((-2117));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2117), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("J/%G`Ft%:nR ]3&Rpp!");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("gJ", "", false, "");
      option0.setValueSeparator('p');
      char char0 = option0.getValueSeparator();
      assertEquals('p', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getValue((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getValue("org.apache.commons.cli.OptionValidator");
      assertEquals("org.apache.commons.cli.OptionValidator", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("J/%G`Ft%:nR ]3&Rpp!");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("", option0.getLongOpt());
      assertEquals("]iECr[B;w", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getOpt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("8KVkw", "8KVkw");
      String string0 = option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, true, "UEst4o3C");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      assertFalse(option0.hasLongOpt());
      
      String string0 = "jHZSx/)j\\u|";
      option0.setLongOpt(string0);
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("vnMN", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("vnMN", string0);
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      String string0 = option0.getKey();
      assertEquals("", string0);
      assertEquals("W}=Pb||E;WWqgu<'rn&", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", false, "[ARG...]");
      String string0 = option0.getDescription();
      assertEquals("[ARG...]", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      int int0 = option0.getArgs();
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals(1, int0);
      assertEquals("(F{", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("9jKxWgkD5", "9jKxWgkD5");
      option0.setArgName("1bhwg");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", true, "mcfz}#5f@%78x^gejS");
      option0.setArgName("");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("mcfz}#5f@%78x^gejS", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      option0.addValueForProcessing("]iECr[B;w");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals("]iECr[B;w", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.addValueForProcessing("d4F-Pzj+Mfn Zlq");
      try { 
        option0.getValue(3915);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3915, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(961);
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue((-862));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-862));
      option0.setValueSeparator('v');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Dpzhu6+\";rfuU", false, "Dpzhu6+\";rfuU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Dpzhu6+\";rfuU' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("+l?2>", "", false, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+l?2>' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("0]WM-", "0]WM-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0]WM-' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, true, "UEst4o3C");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      option0.addValueForProcessing("(F{");
      String string0 = option0.getValue();
      assertEquals("", option0.getLongOpt());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals("(F{", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "]AEejr[=+;w");
      option0.setValueSeparator('I');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('I', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", true, "mcfz}#5f@%78x^gejS");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("mcfz}#5f@%78x^gejS", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      boolean boolean0 = option0.hasArgs();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("]iECr[B;w", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgs(1652);
      boolean boolean0 = option0.hasArgs();
      assertEquals(1652, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("NO_ARGS_ALLOWED", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", true, "[ARG...]");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("[ARG...]", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertEquals("T", option0.getLongOpt());
      assertEquals(84, option0.getId());
      assertEquals("D", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("W}=Pb||E;WWqgu<'rn&", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertEquals("", option0.getOpt());
      assertEquals("]iECr[B;w", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option((String) null, "", true, "[ option: ");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getLongOpt());
      assertEquals("[ option: ", option1.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      Option option1 = new Option("", "(F{", true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertTrue(option1.hasLongOpt());
      assertEquals("(F{", option0.getDescription());
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      Option option1 = new Option("k7C", true, "U");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("U", option1.getDescription());
      assertEquals(107, option1.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals("(F{", option1.getDescription());
      assertNotSame(option1, option0);
      assertEquals("", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      Option option1 = new Option("vnMN", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = option0.equals(option1);
      assertEquals("vnMN", option1.getOpt());
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("]iECr[B;w", option0.getDescription());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      Class<Integer> class0 = Integer.class;
      option0.setType(class0);
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("T", option0.getOpt());
      assertEquals("D", option0.getDescription());
      assertEquals("T", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      boolean boolean0 = option0.equals(option0);
      assertEquals("(F{", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] :: (F{ ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: null  :: null ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("D", option0.getDescription());
      assertEquals("T", option0.getLongOpt());
      assertEquals("T", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.setArgs(811);
      option0.addValueForProcessing("D");
      option0.getValues();
      assertEquals(811, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.getValue(95);
      assertEquals("D", option0.getDescription());
      assertEquals("T", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("T", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", false, "W}=Pb||E;WWqgu<'rn&");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals("W}=Pb||E;WWqgu<'rn&", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("]iECr[B;w");
      assertEquals("]iECr[B;w", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(3293);
      option0.setValueSeparator('`');
      option0.addValueForProcessing("J/%G`Ft%:nR ]3&Rpp!");
      assertEquals(3293, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('`');
      option0.addValueForProcessing("J/%G`Ft%:nR ]3&Rpp!");
      assertEquals('`', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("xOOP", "Cannot add value, list full.");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Cannot add value, list full.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("vnMN", "^zR3>YJg4)ZNm*_-)", false, "(F{");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "mcfz}#5f@%78x^gejS");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("mcfz}#5f@%78x^gejS", option0.getDescription());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("eoro");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "]iECr[B;w");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("]iECr[B;w", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option((String) null, true, "UEst4o3C");
      String string0 = option0.getKey();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertEquals("T", option0.getOpt());
      assertEquals("D", option0.getDescription());
      assertEquals("T", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "u!S", true, "pC@O PZwr");
      String string0 = option0.getOpt();
      assertEquals("", string0);
      assertEquals("u!S", option0.getLongOpt());
      assertEquals("pC@O PZwr", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("F$", "R|e2JqT>(i:_GX`h(+", true, "F$");
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("S7T0a/S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.setArgName("T");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      assertEquals("D", option0.getDescription());
      
      option0.setDescription("-VkQhhJ/^%X7[");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals((-1), option0.getArgs());
      assertEquals("T", option0.getLongOpt());
      assertEquals("D", option0.getDescription());
      assertEquals(84, option0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue("[ option: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertEquals("D", option0.getDescription());
      assertEquals("T", option0.getLongOpt());
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "(F{");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
      assertEquals("", option0.getOpt());
      assertEquals("(F{", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("F$", "R|e2JqT>(i:_GX`h(+", true, "F$");
      option0.getValuesList();
      assertEquals("R|e2JqT>(i:_GX`h(+", option0.getLongOpt());
      assertEquals(70, option0.getId());
      assertEquals("F$", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "I2mCX2RnijWo", false, "' contains an illegal character : '");
      option0.isRequired();
      assertEquals("I2mCX2RnijWo", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      Class<Integer> class0 = Integer.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: T T  :: D :: class java.lang.Integer ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("T", "T", false, "D");
      option0.setArgs(811);
      option0.toString();
      assertEquals(811, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("F$", "R|e2JqT>(i:_GX`h(+", true, "F$");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("S7T0a/S");
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, "mcfz}#5f@%78x^gejS");
      option0.getArgName();
      assertEquals(1, option0.getArgs());
      assertEquals("mcfz}#5f@%78x^gejS", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }
}
