/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:52:32 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option((String) null, "S", true, "!D(c$B(q(pUg]r&P");
      option0.setValueSeparator('(');
      option0.addValueForProcessing("S");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("!D(c$B(q(pUg]r&P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgs((-3073));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-3073), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "i/PU", false, "");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("i/PU", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("T", true, "T");
      option0.addValueForProcessing("n<]AoPr6L^~tvh");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('3');
      char char0 = option0.getValueSeparator();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.setValueSeparator('Z');
      char char0 = option0.getValueSeparator();
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      String string0 = option0.getValue("'}z\"");
      assertEquals("'}z\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "`3yr!@~G,5`&GGukmhw", true, "");
      option0.addValueForProcessing("[ option:  `3yr!@~G,5`&GGukmhw  [ARG] ::  ]");
      String string0 = option0.getValue(0);
      assertEquals("`3yr!@~G,5`&GGukmhw", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.addValueForProcessing("HNq+5ELBg'2");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", false, "9U/%&nt<u^[~*q X");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("9U/%&nt<u^[~*q X", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "m>RQ;)/KLnd-");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("m>RQ;)/KLnd-", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "m.G");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "`3yr!@~G,5`&GGukmhw", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("", string0);
      assertEquals("`3yr!@~G,5`&GGukmhw", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option((String) null, "E", false, ")!fn&am<vyY,7{Icdfq");
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals((-1), option0.getArgs());
      assertEquals(69, int0);
      assertEquals(")!fn&am<vyY,7{Icdfq", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, "fXi0zC*g#<'V");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, true, "|@]K.94Vem-ig_3V*[");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("T", " ]", false, "T");
      option0.setArgName("xLr }<%1Oa=rC`F(15D");
      option0.getArgName();
      assertEquals(84, option0.getId());
      assertEquals(" ]", option0.getLongOpt());
      assertEquals("T", option0.getDescription());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.acceptsArg();
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", true, "]o^1`*");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", false, "9U/%&nt<u^[~*q X");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      option0.setValueSeparator('(');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("' contains an illegal character : '", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "[ option: ", false, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" ]", "gPMPIE{$vD%fUZr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.setValueSeparator('$');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('$', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", "`3yr!@~G,5`&GGukmhw", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("`3yr!@~G,5`&GGukmhw", option0.getLongOpt());
      assertEquals("", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "i/PU", false, "");
      option0.setArgs(378);
      boolean boolean0 = option0.hasArgs();
      assertEquals(378, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "i/PU", false, "");
      option0.setArgs(378);
      option0.hasArg();
      assertEquals(378, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      char char0 = option0.getValueSeparator();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "i/PU", false, "");
      option0.hasOptionalArg();
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("i/PU", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", ",/l&");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("org.apache.commons.cli.Option");
      option0.hashCode();
      assertEquals(",/l&", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", ",/l&");
      option0.hashCode();
      assertEquals("NO_ARGS_ALLOWED", option0.getOpt());
      assertEquals(",/l&", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, "m.G");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("X", "jq");
      Option option1 = new Option("X", "F^pXdMdmt5", false, "F^pXdMdmt5");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("F^pXdMdmt5", option1.getDescription());
      assertEquals(88, option1.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("noE1g", " ]", true, "T");
      Object object0 = option0.clone();
      assertEquals(" ]", option0.getLongOpt());
      
      option0.setLongOpt("");
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = new Option("", (String) null, true, "U)mV3I");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("U)mV3I", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      Option option1 = new Option("6", true, "E");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("E", option1.getDescription());
      assertFalse(option1.hasLongOpt());
      assertEquals(54, option1.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("T", " ]", false, "T");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertEquals(84, option1.getId());
      assertEquals("T", option1.getDescription());
      assertEquals(" ]", option1.getLongOpt());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("noE1g", " ]", true, "T");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals("T", option0.getDescription());
      assertEquals(" ]", option0.getLongOpt());
      assertEquals(110, option0.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:   ::  :: class java.lang.Object ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option((String) null, "S", true, "!D(c$B(q(pUg]r&P");
      option0.setArgs(0);
      option0.toString();
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("T", true, "T");
      String string0 = option0.toString();
      assertEquals("[ option: T  [ARG] :: T ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      option0.addValueForProcessing("");
      option0.getValue("");
      assertFalse(option0.hasValueSeparator());
      assertEquals("!D(c$B(q(pUg]r&P", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("T", " ]", false, "T");
      option0.getValue((-2));
      assertEquals("T", option0.getDescription());
      assertEquals("T", option0.getOpt());
      assertEquals(" ]", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValue();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      option0.setArgs(115);
      option0.setValueSeparator('(');
      option0.addValueForProcessing("!D(c$B(q(pUg]r&P");
      assertEquals('(', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      option0.setValueSeparator('(');
      option0.addValueForProcessing("!D(c$B(q(pUg]r&P");
      assertEquals('(', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("V^zv<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, "E", false, ")!fn&am<vyY,7{Icdfq");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertEquals(")!fn&am<vyY,7{Icdfq", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals(69, option0.getId());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.setArgName("i/PU");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("T", true, "T");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("X", "jq");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("jq", option0.getDescription());
      assertEquals("X", option0.getOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.getKey();
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      option0.clearValues();
      assertEquals("!D(c$B(q(pUg]r&P", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, true, "|@]K.94Vem-ig_3V*[");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, true, "|@]K.94Vem-ig_3V*[");
      option0.setDescription("|@]K.94Vem-ig_3V*[");
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getType();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, "!D(c$B(q(pUg]r&P");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("noE1g", " ]", true, "T");
      String string0 = option0.getLongOpt();
      assertEquals("T", option0.getDescription());
      assertEquals(" ]", string0);
      assertEquals(110, option0.getId());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option((String) null, true, "|@]K.94Vem-ig_3V*[");
      option0.getValuesList();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.isRequired();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option((String) null, true, "|@]K.94Vem-ig_3V*[");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("E", "E", true, (String) null);
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, "S", true, "!D(c$B(q(pUg]r&P");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("!D(c$B(q(pUg]r&P");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("T", " ]", false, "T");
      option0.getArgName();
      assertEquals(" ]", option0.getLongOpt());
      assertEquals("T", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals(84, option0.getId());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }
}
