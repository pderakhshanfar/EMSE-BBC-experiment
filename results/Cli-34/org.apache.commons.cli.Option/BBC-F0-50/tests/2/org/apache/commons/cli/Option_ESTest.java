/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:21:30 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "", true, "F+0q/QmY:,~QADD");
      option0.setArgs((-2250));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2250), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("hc", "hc", true, "hc");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("hc");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertEquals("o<To0|%v", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("I", "");
      option0.hashCode();
      assertEquals("", option0.getDescription());
      assertEquals("I", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("hc", "hc", true, "hc");
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("hc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("pb", true, "RX]'_n");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("RX]'_n", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(112, option0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("v", "4!_p^W22;W~ PaPPW;");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      option0.setValueSeparator('i');
      char char0 = option0.getValueSeparator();
      assertEquals('i', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getValue("[ARG...]");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("4P", "4P", true, "4P");
      option0.addValueForProcessing("v");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals("o<To0|%v", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, true, "");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      String string0 = option0.getOpt();
      assertEquals("", string0);
      assertEquals("o<To0|%v", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals("o<To0|%v", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("M", "_+n", false, "M");
      String string0 = option0.getKey();
      assertEquals("M", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("M", string0);
      assertEquals("_+n", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "y*z8P^mE");
      option0.setDescription((String) null);
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      String string0 = option0.getDescription();
      assertEquals("o<To0|%v", string0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, "s&");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      option0.setArgs((-2));
      int int0 = option0.getArgs();
      assertTrue(option0.hasArgs());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "Cannot add value, list full.", false, "j=VJDecqtP}7~|B");
      option0.setArgName("j=VJDecqtP}7~|B");
      option0.getArgName();
      assertEquals("Cannot add value, list full.", option0.getLongOpt());
      assertEquals("j=VJDecqtP}7~|B", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "'{][2xS");
      option0.acceptsArg();
      assertEquals("", option0.getOpt());
      assertEquals("'{][2xS", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      option0.addValueForProcessing("Avn$Xk?0Gnl!K");
      try { 
        option0.getValue(3314);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3314, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("I", "I", true, "I");
      option0.addValueForProcessing("O|");
      try { 
        option0.getValue((-1131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgs((-2));
      option0.setValueSeparator('f');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("8LL5? }>~)r5D'md", false, "8LL5? }>~)r5D'md");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8LL5? }>~)r5D'md' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("r0f#nZ.e@b(dSOm-", "r0f#nZ.e@b(dSOm-", false, "4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'r0f#nZ.e@b(dSOm-' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" ", "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      option0.setValueSeparator('i');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('i', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "Cannot add value, list full.", false, "j=VJDecqtP}7~|B");
      boolean boolean0 = option0.hasArg();
      assertEquals("j=VJDecqtP}7~|B", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("Cannot add value, list full.", option0.getLongOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("M", "_+n", false, "M");
      option0.hasOptionalArg();
      assertEquals("M", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("M", option0.getOpt());
      assertEquals("_+n", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("I", "C]Sw.+p`EZ.TD?", true, "I");
      option0.addValueForProcessing("*]:v<'it<c,Vc/6!`.J");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("I", "C]Sw.+p`EZ.TD?", true, "I");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", (String) null, false, (String) null);
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Object object0 = option0.clone();
      assertTrue(object0.equals((Object)option0));
      
      option0.setLongOpt("n-jP2~LkRHN");
      boolean boolean0 = option0.equals(object0);
      assertFalse(object0.equals((Object)option0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("I", "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("", option1.getDescription());
      assertEquals("I", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertNotSame(object0, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", false, "");
      Option option1 = new Option((String) null, false, "");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("o<To0|%v", option0.getDescription());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", false, "");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals("[ option:    ::  ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("v", "4!_p^W22;W~ PaPPW;");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option: v  :: 4!_p^W22;W~ PaPPW; :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("M", "_+n", false, "M");
      option0.setArgs(2298);
      option0.toString();
      assertEquals(2298, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, "27FbjO^.!", true, "27FbjO^.!");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("I");
      assertEquals("", string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.getValue((-86));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      assertTrue(option0.hasArg());
      
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "R(pKA", true, "o<To0|%v");
      option0.getValue();
      assertEquals("R(pKA", option0.getLongOpt());
      assertEquals("o<To0|%v", option0.getDescription());
      assertTrue(option0.hasArg());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("M", "_+n", false, "M");
      option0.setArgs(2298);
      option0.addValueForProcessing("?8e2Z*_):-LN4'E");
      option0.getValue();
      assertEquals(2298, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("I", "C]Sw.+p`EZ.TD?", true, "I");
      option0.setValueSeparator('v');
      option0.addValueForProcessing("*]:v<'it<c,Vc/6!`.J");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("*]:v<'it<c,Vc/6!`.J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", " [ARG]", false, " [ARG]");
      option0.setArgs(1334);
      option0.setValueSeparator('p');
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      assertEquals(1334, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "@");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(31);
      boolean boolean0 = option0.hasArgs();
      assertEquals(31, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("R", "R", false, "R");
      option0.setArgName("R");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgName();
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "o<To0|%v", true, "o<To0|%v");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("o<To0|%v", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, "27FbjO^.!", true, "27FbjO^.!");
      assertTrue(option0.hasLongOpt());
      
      int int0 = option0.getId();
      assertEquals(1, option0.getArgs());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.clearValues();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, "s&");
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertEquals("s&", option0.getDescription());
      assertEquals(78, option0.getId());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("I", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("R", "R", false, "R");
      // Undeclared exception!
      try { 
        option0.addValue("%rM%BC5JmCC)RMC_");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", " [ARG]", false, " [ARG]");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getValuesList();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "R(pKA", true, "o<To0|%v");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("R(pKA", option0.getLongOpt());
      assertEquals("o<To0|%v", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      option0.setArgs((-86));
      option0.addValueForProcessing("");
      assertEquals((-86), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, "27FbjO^.!", true, "27FbjO^.!");
      option0.getArgName();
      assertTrue(option0.hasArg());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }
}
