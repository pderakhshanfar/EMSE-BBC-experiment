/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:50:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("W", "W", true, "W");
      option0.setArgs((-1772));
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      option0.addValueForProcessing("");
      option0.setArgs(2259);
      option0.addValueForProcessing("");
      option0.setArgs(1);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("sk", false, "ds{");
      option0.hashCode();
      assertEquals(115, option0.getId());
      assertEquals("ds{", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.requiresArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("w", true, "w");
      option0.setArgs(1567);
      option0.setValueSeparator('N');
      option0.addValueForProcessing("k;ueabbN8,Im_+&z?g|");
      assertEquals('N', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("W", "W", false, "W");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option((String) null, "<Fcf", true, "org.apache.commons.cli.OptionValidator");
      option0.addValueForProcessing("<Fcf");
      option0.getValuesList();
      assertEquals(60, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, false, "' contains an illegal character : '");
      option0.setValueSeparator('8');
      char char0 = option0.getValueSeparator();
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('M');
      char char0 = option0.getValueSeparator();
      assertEquals('M', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("W", "W", true, "W");
      String string0 = option0.getValue("W");
      assertEquals("W", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, "<Fcf", true, "org.apache.commons.cli.OptionValidator");
      String string0 = option0.getOpt();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals(60, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "oVp0B!x~FcC/dCq", true, "oVp0B!x~FcC/dCq");
      String string0 = option0.getLongOpt();
      assertEquals("oVp0B!x~FcC/dCq", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("oVp0B!x~FcC/dCq", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "", false, ";q=(m)Z*|+duT");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals(";q=(m)Z*|+duT", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, true, "^1{FChc#ztc>k?%M");
      String string0 = option0.getKey();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("w6", "wW", true, "");
      String string0 = option0.getKey();
      assertEquals("", option0.getDescription());
      assertEquals("wW", option0.getLongOpt());
      assertEquals("w6", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", false, "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", true, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      option0.setArgName("[ option:  0mo#oDZ|w*]  [ARG] ::  :: class java.lang.Object ]");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertEquals("0mo#oDZ|w*]", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, " ");
      option0.addValueForProcessing("g");
      try { 
        option0.getValue(385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 385, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-1738));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('8');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("+5d 6%(<,8ycHp", true, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+5d 6%(<,8ycHp' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("4n=)!\u0005BCs.#9~Z", "4n=)!\u0005BCs.#9~Z", true, "|~\"HhK+>AI;*&?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4n=)!\u0005BCs.#9~Z' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Cannot add value, list full.", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Cannot add value, list full.' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("w6", "w6", true, "w6");
      option0.addValueForProcessing("w6");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('\\');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('\\', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "oVp0B!x~FcC/dCq", true, "oVp0B!x~FcC/dCq");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals("", option0.getOpt());
      assertEquals("oVp0B!x~FcC/dCq", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("oVp0B!x~FcC/dCq", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("xXiO", true, "TjoE+VC1\"T%Ec->s");
      boolean boolean0 = option0.hasArgs();
      assertEquals("TjoE+VC1\"T%Ec->s", option0.getDescription());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("xXiO", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setArgs(74);
      boolean boolean0 = option0.hasArgs();
      assertEquals(74, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("xXO", "xXO");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", false, "'sw*L~[(r.LCz {6n");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("'sw*L~[(r.LCz {6n", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, false, "' contains an illegal character : '");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", false, "'sw*L~[(r.LCz {6n");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertEquals("'sw*L~[(r.LCz {6n", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("O>t4+=180\tIfeY/ac");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("w", "x8E", true, "w");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "oVp0B!x~FcC/dCq", true, "oVp0B!x~FcC/dCq");
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertEquals("oVp0B!x~FcC/dCq", option0.getDescription());
      assertEquals("oVp0B!x~FcC/dCq", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "oVp0B!x~FcC/dCq", true, "oVp0B!x~FcC/dCq");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option0.getOpt());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("oVp0B!x~FcC/dCq", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertNotSame(object0, option0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("xXiO", true, "TjoE+VC1\"T%Ec->s");
      Option option1 = new Option((String) null, (String) null);
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertEquals("TjoE+VC1\"T%Ec->s", option0.getDescription());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("xXiO", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("g", "oVp0V!x~FcV/dCq", true, "oVp0V!x~FcV/dCq");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertEquals("oVp0V!x~FcV/dCq", option0.getDescription());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("g", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      Option option1 = new Option((String) null, "Opy92Gk,Db", true, "oVp0B!x~FcC/dCq");
      boolean boolean0 = option0.equals(option1);
      assertEquals(79, option1.getId());
      assertFalse(option1.equals((Object)option0));
      assertEquals("oVp0B!x~FcC/dCq", option1.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("g", "oVp0V!x~FcV/dCq", true, "oVp0V!x~FcV/dCq");
      boolean boolean0 = option0.equals(option0);
      assertEquals("oVp0V!x~FcV/dCq", option0.getLongOpt());
      assertEquals(103, option0.getId());
      assertEquals("oVp0V!x~FcV/dCq", option0.getDescription());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option:  0mo#oDZ|w*]  [ARG] ::  :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      String string0 = option0.toString();
      assertEquals("[ option:  0mo#oDZ|w*]  [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", false, "'sw*L~[(r.LCz {6n");
      String string0 = option0.toString();
      assertEquals("[ option:   :: 'sw*L~[(r.LCz {6n ]", string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("xXiO", false, "");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("xXiO", option0.getOpt());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertEquals("oufp", option0.getDescription());
      assertEquals("oufp", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("DUny", option0.getOpt());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "' contains an illegal character : '");
      option0.getValue((String) null);
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertEquals(78, option0.getId());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("w", "x8E", true, "w");
      option0.getValue(64);
      assertEquals("w", option0.getDescription());
      assertEquals("x8E", option0.getLongOpt());
      assertEquals("w", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("GnE", "GnE", true, "GnE");
      option0.addValueForProcessing("GnE");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      option0.getValue();
      assertEquals("", option0.getOpt());
      assertEquals("0mo#oDZ|w*]", option0.getLongOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValue("");
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("w", true, "w");
      option0.addValueForProcessing("w");
      option0.setValueSeparator('N');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("k;ueabbN8,Im_+&z?g|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("Y", "dn/~]tEufe:u^Y=~54", true, "TTleH})k3&");
      option0.setValueSeparator('N');
      option0.addValueForProcessing("NP");
      assertEquals('N', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      boolean boolean0 = option0.hasArgName();
      assertEquals("oufp", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals("oufp", option0.getDescription());
      assertEquals(68, option0.getId());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("w", "x8E", true, "w");
      option0.clearValues();
      assertEquals("w", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("x8E", option0.getLongOpt());
      assertEquals("w", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      assertEquals("oufp", option0.getLongOpt());
      
      option0.setLongOpt("G$p`=`TiG ");
      assertEquals("DUny", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("xXiO", false, "");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getDescription());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("xXiO", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("w", "x8E", true, "w");
      option0.setArgName("x8E");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      assertEquals("", option0.getDescription());
      
      option0.setDescription("0mo#oDZ|w*]");
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertFalse(boolean0);
      assertEquals("oufp", option0.getLongOpt());
      assertEquals(68, option0.getId());
      assertEquals("oufp", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      // Undeclared exception!
      try { 
        option0.addValue("B2[34bl*_):nn2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      int int0 = option0.getId();
      assertEquals("oufp", option0.getDescription());
      assertEquals(68, int0);
      assertTrue(option0.hasArg());
      assertEquals("oufp", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", false, "'sw*L~[(r.LCz {6n");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("'sw*L~[(r.LCz {6n", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      option0.getValuesList();
      assertEquals("oufp", option0.getLongOpt());
      assertEquals("oufp", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals("DUny", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("W", "W", false, "W");
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      Class<String> class0 = String.class;
      option0.setType(class0);
      Object object0 = option0.getType();
      boolean boolean0 = option0.equals(object0);
      assertEquals("oufp", option0.getDescription());
      assertEquals("oufp", option0.getLongOpt());
      assertFalse(boolean0);
      assertEquals(68, option0.getId());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("DUny", "oufp", true, "oufp");
      option0.setArgs(2259);
      option0.toString();
      assertEquals(2259, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "0mo#oDZ|w*]", true, "");
      option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals("0mo#oDZ|w*]", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", false, "'sw*L~[(r.LCz {6n");
      String string0 = option0.getDescription();
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("'sw*L~[(r.LCz {6n", string0);
  }
}
