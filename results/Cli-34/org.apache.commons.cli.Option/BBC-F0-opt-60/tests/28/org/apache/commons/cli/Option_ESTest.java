/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 07:28:47 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-260));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-260), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", false, "H;XWKXBc");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("H;XWKXBc");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("X", (String) null, false, "");
      option0.hashCode();
      assertEquals("X", option0.getOpt());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("FS", "org.apache.commons.cli.Opion");
      option0.setValueSeparator('l');
      option0.setArgs((-2));
      option0.addValueForProcessing("org.apache.commons.cli.Opion");
      assertEquals('l', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("A", true, "A");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "'$`&", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertEquals("", option0.getDescription());
      assertEquals("'$`&", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setValueSeparator('5');
      char char0 = option0.getValueSeparator();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", "H>TvoZTq22`'_n", false, (String) null);
      option0.setValueSeparator('b');
      char char0 = option0.getValueSeparator();
      assertEquals('b', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("f", " ", true, "'$`&");
      option0.addValueForProcessing("^q}Jk?v");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertEquals("'$`&", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertEquals(" ", option0.getLongOpt());
      assertEquals(102, option0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", false, "Qm'z\"P|uZb");
      Class<Integer> class0 = Integer.class;
      option0.setType(class0);
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals("Qm'z\"P|uZb", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("Nf2FcAl", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("Nf2FcAl", string0);
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("X", (String) null, false, "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("X", option0.getOpt());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", true, "pf`@p");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setDescription((String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, "m#H:Ap:>dI<GR_#$", true, " ");
      String string0 = option0.getDescription();
      assertEquals(109, option0.getId());
      assertEquals(" ", string0);
      assertNotNull(string0);
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "H>T|voZTq22`'_n");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("A", true, "A");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("D");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(1);
      option0.addValueForProcessing("");
      try { 
        option0.getValue(2758);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2758, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "' contains an illegal character : '", true, " ");
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", "d@`;i9?", true, "The option '");
      option0.setValueSeparator('b');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("0-NCS^A$=J+D:zkF[H.", "yy", false, "0F4N^?Vxo8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0-NCS^A$=J+D:zkF[H.' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Q$-R*x", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Q$-R*x' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('F');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('F', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", false, "H;XWKXBc");
      option0.setArgs(2259);
      boolean boolean0 = option0.hasArgs();
      assertEquals(2259, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      assertTrue(option0.hasArgs());
      
      option0.addValueForProcessing("!JK1;fYw|[");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("zE", "zE", true, "H>T|voZTq22`'_n");
      option0.addValueForProcessing("H>T|voZTq22`'_n");
      boolean boolean0 = option0.acceptsArg();
      assertEquals("zE", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertEquals("zE", option0.getOpt());
      assertEquals("H>T|voZTq22`'_n", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, "N@I6HvX/_+?\"+");
      Option option1 = new Option((String) null, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", "H>T|voZTq22`'_n", false, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "m#H:Ap:>dI<GR_#$", true, " ");
      Option option1 = new Option((String) null, "N@I6HvX/_+?\"+");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals(" ", option0.getDescription());
      assertEquals(109, option0.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option((String) null, false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, "m#H:Ap:>dI<GR_#$", true, " ");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertEquals(109, option0.getId());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertEquals(" ", option0.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", false, "'$`&");
      boolean boolean0 = option0.equals(option0);
      assertEquals("'$`&", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      boolean boolean0 = option0.equals("r");
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("r", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("r", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("A", true, "A");
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      String string0 = option0.toString();
      assertEquals("[ option: A  [ARG] :: A :: class java.lang.Object ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", true, "pf`@p");
      option0.setArgs((-798));
      option0.toString();
      assertEquals((-798), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      String string0 = option0.toString();
      assertEquals("[ option: r ' contains an illegal character : '  [ARG] :: r ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", true, "pf`@p");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals("pf`@p", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("f", true, "f");
      option0.addValueForProcessing("^q}Jk?v");
      option0.getValue("^q}Jk?v");
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((-1));
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      option0.getValue();
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("r", option0.getDescription());
      assertEquals("r", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "FS", true, "org.apache.commons.cli.Option");
      assertEquals(1, option0.getArgs());
      
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("FS", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("FS", "org.apache.commons.cli.Option");
      option0.setValueSeparator('l');
      option0.setArgs(1);
      option0.addValueForProcessing("' contains an illegal character : '");
      assertEquals('l', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("a3", "Q", false, "Q");
      option0.setValueSeparator('n');
      option0.setArgs(70);
      option0.addValueForProcessing("H>T|voZTq22`'_n");
      assertEquals('n', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "<`R:*rC");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("f", true, "f");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", false, "H;XWKXBc");
      option0.setArgs(2259);
      option0.toString();
      assertEquals(2259, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("Nf2FcAl", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, "m#H:Ap:>dI<GR_#$", true, " ");
      String string0 = option0.getKey();
      assertEquals("m#H:Ap:>dI<GR_#$", string0);
      assertNotNull(string0);
      assertEquals(1, option0.getArgs());
      assertEquals(" ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      option0.clearValues();
      assertEquals(1, option0.getArgs());
      assertEquals(114, option0.getId());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals("r", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "H>T|voZTq22`'_n");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("H>T|voZTq22`'_n", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, "!JK1;fYw|[");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", true, "pf`@p");
      option0.setArgs((-798));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("ow&>16N[Ezhl\"O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      option0.setArgName("ewn]K|=lH&G*.| l");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", false, "Qm'z\"P|uZb");
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals("Qm'z\"P|uZb", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      Option option1 = (Option)option0.clone();
      assertEquals(1, option1.getArgs());
      assertEquals("' contains an illegal character : '", option1.getLongOpt());
      assertNotSame(option1, option0);
      assertEquals("r", option1.getDescription());
      assertEquals("r", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      int int0 = option0.getId();
      assertEquals("r", option0.getDescription());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
      assertEquals(114, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      String string0 = option0.getLongOpt();
      assertEquals("' contains an illegal character : '", string0);
      assertEquals("r", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(114, option0.getId());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      option0.getValuesList();
      assertEquals("r", option0.getDescription());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
      assertEquals(114, option0.getId());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("r", "' contains an illegal character : '", true, "r");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("r", option0.getOpt());
      assertEquals("r", option0.getDescription());
      assertEquals("' contains an illegal character : '", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setArgs(539);
      option0.addValueForProcessing("/r v@B1qoFTC-BNDibE");
      option0.getValue(0);
      assertEquals(539, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", false, "'$`&");
      option0.getArgName();
      assertEquals("", option0.getLongOpt());
      assertEquals("'$`&", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
  }
}
