/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:47:08 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionBuilder_ESTest extends OptionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
      assertEquals('=', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionBuilder.withLongOpt("5ARE");
      Option option0 = OptionBuilder.create("5ARE");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionBuilder.withArgName("A CloneNotSupportedException was thrown: ");
      Option option0 = OptionBuilder.create("");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create("");
      assertTrue(option0.hasOptionalArg());
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionBuilder.isRequired();
      Option option0 = OptionBuilder.create('T');
      assertEquals(84, option0.getId());
      assertTrue(option0.isRequired());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionBuilder.withValueSeparator('4');
      Option option0 = OptionBuilder.create('Y');
      assertEquals('4', option0.getValueSeparator());
      assertEquals("Y", option0.getOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionBuilder.withLongOpt(" ");
      Option option0 = OptionBuilder.create('Y');
      assertEquals((-1), option0.getArgs());
      assertEquals(89, option0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionBuilder.withArgName("A CloneNotSupportedException was thrown: ");
      Option option0 = OptionBuilder.create('T');
      assertEquals((-1), option0.getArgs());
      assertEquals("T", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create('Y');
      assertEquals(0, option0.getArgs());
      assertEquals("Y", option0.getOpt());
      assertTrue(option0.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionBuilder.hasArgs(2722);
      Option option0 = OptionBuilder.create('V');
      assertEquals(2722, option0.getArgs());
      assertEquals(86, option0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionBuilder.withLongOpt(")2rAgt");
      OptionBuilder.hasOptionalArgs(0);
      Option option0 = OptionBuilder.create();
      assertEquals(0, option0.getArgs());
      assertTrue(option0.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionBuilder.hasOptionalArgs(696);
      OptionBuilder.withLongOpt("l_j%2X(b0j1^");
      Option option0 = OptionBuilder.create();
      assertTrue(option0.hasOptionalArg());
      assertEquals(696, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        OptionBuilder.create("B~^77;!\fql$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'B~^77;!\fql$' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        OptionBuilder.create(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        OptionBuilder.create();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must specify longopt
         //
         verifyException("org.apache.commons.cli.OptionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(true);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.withDescription("YCP*aeXnuF`g");
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OptionBuilder.hasArgs();
      Option option0 = OptionBuilder.create("");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      OptionBuilder optionBuilder0 = OptionBuilder.withType(class0);
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg();
      assertNotNull(optionBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OptionBuilder.withValueSeparator();
      OptionBuilder.withLongOpt("l_j%2X(b0j1^");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
      assertEquals('=', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptionBuilder.withArgName("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionBuilder.withLongOpt("l_j%2X(b0j1^");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptionBuilder.isRequired(true);
      Option option0 = OptionBuilder.create("5ARE");
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptionBuilder.hasArg();
      Option option0 = OptionBuilder.create("");
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptionBuilder.isRequired();
      OptionBuilder.withLongOpt("");
      Option option0 = OptionBuilder.create();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.isRequired());
  }
}
