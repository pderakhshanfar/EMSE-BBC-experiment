/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:23:26 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, false);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Kolkata");
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      assertEquals("Asia/Kolkata", dateTimeZone0.toString());
      assertEquals("Asia/Kolkata", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-18:00", dateTimeZone0.getID());
      assertEquals("-18:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1235
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:01.984");
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1980);
      assertEquals("+00:00:01.980", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.980", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("+00:00:01.980", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.980", dateTimeZone0.toString());
      assertEquals(1980, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("+00:00:01.980", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:01.980,offset=1980,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-981));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertEquals("-00:00:00.981", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals((-981), timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.981,offset=-981,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(0L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-102));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-102:00", dateTimeZone0.toString());
      assertEquals("-102:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(542L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-102:00", dateTimeZone0.toString());
      assertEquals("-102:00", dateTimeZone0.getID());
      assertEquals(542L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Honolulu");
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(6);
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      assertEquals((-712150200001L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition(0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(26);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.026", dateTimeZone0.getID());
      assertEquals("+00:00:00.026", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.nextTransition(1L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.026", dateTimeZone0.getID());
      assertEquals("+00:00:00.026", dateTimeZone0.toString());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition((-4738L));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals((-4738L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25650000);
      assertEquals("+07:07:30", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07:30", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("+07:07:30", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+07:07:30", dateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Chicago");
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("America/Chicago", dateTimeZone0.getID());
      assertEquals("America/Chicago", dateTimeZone0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1265), "America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.UTC.getStandardOffset(31622400000L);
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset((-868L));
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1984, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-981));
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset((-2035L));
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-981), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(7200000, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset((-150L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset((long) 2);
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals(7200000, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset((-1491L));
      assertEquals("-01:00", dateTimeZone0.getID());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-3600000), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(7200000);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, 31557600000L, 2);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(31557600000L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-102));
      assertEquals("-102:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-102:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(2);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+02:00", dateTimeZone1.toString());
      assertEquals("+02:00", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1196);
      assertEquals("-102:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-102:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+02:00", dateTimeZone1.toString());
      assertEquals("+02:00", dateTimeZone1.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertEquals((-374398804L), long0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(26);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.026", dateTimeZone0.getID());
      assertEquals("+00:00:00.026", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getID();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.026", dateTimeZone0.getID());
      assertEquals("+00:00:00.026", dateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("+00:00:00.026", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(0L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25650000);
      assertEquals("+07:07:30", dateTimeZone0.getID());
      assertEquals("+07:07:30", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(904204032L);
      assertEquals("+07:07:30", dateTimeZone0.getID());
      assertEquals("+07:07:30", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(929854032L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2147483348));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-596:31:23.348", dateTimeZone0.getID());
      assertEquals("-596:31:23.348", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(2497L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-596:31:23.348", dateTimeZone0.getID());
      assertEquals("-596:31:23.348", dateTimeZone0.toString());
      assertEquals((-2147480851L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-13));
      assertEquals("-00:00:00.013", dateTimeZone0.toString());
      assertEquals("-00:00:00.013", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, true, (long) (-13));
      assertEquals("-00:00:00.013", dateTimeZone0.toString());
      assertEquals("-00:00:00.013", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((-1295L), true, (-1295L));
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-1295L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2147483348));
      assertEquals("-596:31:23.348", dateTimeZone0.getID());
      assertEquals("-596:31:23.348", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(2865L, true);
      assertEquals("-596:31:23.348", dateTimeZone0.getID());
      assertEquals("-596:31:23.348", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2147486213L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(870L, true);
      assertEquals("+02:00", dateTimeZone0.getID());
      assertEquals("+02:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-7199130L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1980);
      assertEquals("+00:00:01.980", dateTimeZone0.getID());
      assertEquals("+00:00:01.980", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(0L, true);
      assertEquals("+00:00:01.980", dateTimeZone0.getID());
      assertEquals("+00:00:01.980", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Pacific/Honolulu");
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset((-712150200001L), false);
      assertEquals("Pacific/Honolulu", dateTimeZone0.getID());
      assertEquals("Pacific/Honolulu", dateTimeZone0.toString());
      assertEquals((-712150200001L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone0.getName((-765L), locale0);
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(string0);
      assertEquals("+00:00:00.002", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-981));
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.UTC.getName(68L, (Locale) null);
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName(1L, (Locale) null);
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("+00:00:00.002", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-981), 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("*rp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '*rp' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(1456L, false);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals(1456L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(29);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertEquals("+00:00:00.029", dateTimeZone0.getID());
      assertEquals("+00:00:00.029", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((-2108L), dateTimeZone0);
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((-2108L), dateTimeZone0);
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(3233);
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 0L);
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1265), "America/Puerto_Rico");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (-1265));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Puerto_Rico,offset=-1265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1265), simpleTimeZone0.getRawOffset());
      assertEquals("America/Puerto_Rico", simpleTimeZone0.getID());
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(14398735L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1675));
      assertEquals("-00:00:01.675", dateTimeZone0.getID());
      assertEquals("-00:00:01.675", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-13));
      assertEquals("-00:00:00.013", dateTimeZone0.toString());
      assertEquals("-00:00:00.013", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-13), true);
      assertEquals("-00:00:00.013", dateTimeZone0.toString());
      assertEquals("-00:00:00.013", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(41);
      assertEquals("+00:00:00.041", dateTimeZone0.getID());
      assertEquals("+00:00:00.041", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Puerto_Rico");
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("America/Puerto_Rico", dateTimeZone0.toString());
      assertEquals("America/Puerto_Rico", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(1, 1, (-1097), 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1097 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-9223372036854775808L));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.getID());
      assertEquals("UTC", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(495, "SST");
      assertEquals("SST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=495,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(495, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("SST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=495,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(495, simpleTimeZone0.getRawOffset());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffsetFromLocal(495);
      assertEquals("SST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=SST,offset=495,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(495, simpleTimeZone0.getRawOffset());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(39600000, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1265), "America/Puerto_Rico");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-1106L));
      assertEquals((-14400000), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-981));
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("-00:00:00.981", dateTimeZone0.getID());
      assertEquals((-981), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-434L), (DateTimeZone) fixedDateTimeZone0);
      int int0 = fixedDateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      Locale locale0 = Locale.ROOT;
      String string0 = dateTimeZone0.UTC.getShortName((long) 1984, locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25650000);
      boolean boolean0 = dateTimeZone0.isStandardOffset(45);
      assertTrue(boolean0);
      assertEquals("+07:07:30", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "PST");
      DateTimeZone.forTimeZone(simpleTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1984);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "GMT-");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-400), "GMJ#l");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'GMJ#l' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
      assertEquals("+59:59", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, true, 4846208L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 1984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1984
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:00.981");
      assertEquals("-00:00:00.981", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(873, "SST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertNotNull(gJChronology0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "PST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("America/Los_Angeles", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-102));
      dateTimeZone0.UTC.equals(set0);
      assertEquals("-102:00", dateTimeZone0.getID());
      assertEquals("-102:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      String string0 = dateTimeZone0.toString();
      assertEquals("+00:00:01.984", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-13));
      String string0 = dateTimeZone0.getName(0L);
      assertEquals("-00:00:00.013", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeZone.forID("+00:00");
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-1355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1984);
      dateTimeZone0.UTC.writeReplace();
      assertEquals("+00:00:01.984", dateTimeZone0.toString());
      assertEquals("+00:00:01.984", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(26);
      String string0 = dateTimeZone0.getShortName((long) 26);
      assertEquals("+00:00:00.026", string0);
  }
}
