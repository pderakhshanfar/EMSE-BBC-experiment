/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:19:59 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(43, 43);
      assertEquals("+43:43", dateTimeZone0.getID());
      assertEquals("+43:43", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(3440L, false);
      assertEquals((-157376560L), long0);
      assertEquals("+43:43", dateTimeZone0.getID());
      assertEquals("+43:43", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(30660, "NET");
      assertEquals("NET", simpleTimeZone0.getID());
      assertEquals(30660, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=NET,offset=30660,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("NET", simpleTimeZone0.getID());
      assertEquals(30660, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=NET,offset=30660,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Asia/Yerevan", dateTimeZone0.getID());
      assertEquals("Asia/Yerevan", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffsetFromLocal(82800023L);
      assertEquals(14400000, int0);
      assertEquals("NET", simpleTimeZone0.getID());
      assertEquals(30660, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=NET,offset=30660,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("Asia/Yerevan", dateTimeZone0.getID());
      assertEquals("Asia/Yerevan", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      assertEquals("America/Denver", dateTimeZone0.getID());
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals((-25196000), int0);
      assertEquals("America/Denver", dateTimeZone0.getID());
      assertEquals("America/Denver", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);
      assertEquals("--596:-31:-23.-648", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("--596:-31:-23.-648", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -917
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:01.740");
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.740", dateTimeZone0.toString());
      assertEquals("-00:00:01.740", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      dateTimeZone0.hashCode();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(621);
      assertEquals("+00:00:00.621", dateTimeZone0.getID());
      assertEquals("+00:00:00.621", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("+00:00:00.621", dateTimeZone0.getID());
      assertEquals("+00:00:00.621", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.621", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.621,offset=621,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(621, timeZone0.getRawOffset());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("-00:00:00.001", timeZone0.getID());
      assertEquals((-1), timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.previousTransition(0);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition(297L);
      assertEquals(297L, long0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.previousTransition((-1L));
      assertEquals((-1L), long0);
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.nextTransition(0);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition(63072000000L);
      assertEquals(63072000000L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(212);
      assertEquals("+00:00:00.212", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.212", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.nextTransition((-285L));
      assertEquals((-285L), long0);
      assertEquals("+00:00:00.212", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.212", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertEquals("America/Denver", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertEquals("America/Denver", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(25265536L);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Asia/Ho_Chi_Minh");
      assertEquals("Asia/Ho_Chi_Minh", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Asia/Ho_Chi_Minh", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(0L);
      assertEquals(25200000, int0);
      assertEquals("Asia/Ho_Chi_Minh", timeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1660));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.660", dateTimeZone0.toString());
      assertEquals("-00:00:01.660", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getStandardOffset(10L);
      assertEquals((-1660), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.660", dateTimeZone0.toString());
      assertEquals("-00:00:01.660", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1392335999999L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
      assertEquals(1, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals(1392335999999L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals((-11), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.UTC.getOffset(0L);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset(1026L);
      assertEquals(1, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
      assertEquals("+00:00:00.001", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      int int0 = dateTimeZone0.getOffset(3822L);
      assertEquals((-11), int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.011", dateTimeZone0.getID());
      assertEquals("-00:00:00.011", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(578);
      assertEquals("+578:00", dateTimeZone0.getID());
      assertEquals("+578:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(578);
      assertEquals("+578:00", dateTimeZone0.getID());
      assertEquals("+578:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getNameKey(247L);
      assertEquals("UTC", string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 0L);
      assertEquals(0L, long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(578);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+578:00", dateTimeZone0.getID());
      assertEquals("+578:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getID();
      assertEquals("+578:00", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+578:00", dateTimeZone0.getID());
      assertEquals("+578:00", dateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1968);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = dateTimeZone0.equals(object0);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(192);
      assertEquals(192L, long0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false, (long) 0);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(1L, true, 1578L);
      assertEquals(1L, long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(578);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false, 65292399L);
      assertEquals((-577L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.578", dateTimeZone0.toString());
      assertEquals("+00:00:00.578", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(1839L, true);
      assertEquals(1839L, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(0L, true);
      assertEquals(0L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(43, 43);
      assertEquals("+43:43", dateTimeZone0.getID());
      assertEquals("+43:43", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.adjustOffset((-1L), false);
      assertEquals((-1L), long0);
      assertEquals("+43:43", dateTimeZone0.getID());
      assertEquals("+43:43", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-956), "VST");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-956), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-956,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("VST", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-956), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-956,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2887);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.887", dateTimeZone0.toString());
      assertEquals("+00:00:02.887", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1952));
      assertEquals("-00:00:01.952", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.952", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertUTCToLocal(974L);
      assertEquals((-978L), long0);
      assertEquals("-00:00:01.952", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.952", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1968);
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone0.getName(108L, locale0);
      assertEquals("+00:00:01.968", string0);
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getName(164L, (Locale) null);
      assertEquals("+00:00", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1968);
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = dateTimeZone0.getShortName(3085L, locale0);
      assertEquals("+00:00:01.968", string0);
      assertEquals("+00:00:01.968", dateTimeZone0.getID());
      assertEquals("+00:00:01.968", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      String string0 = dateTimeZone0.getShortName(63072000000L, (Locale) null);
      assertEquals("+00:00", string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-3222), 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("R2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'R2' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Indiana/Indianapolis");
      assertEquals("America/Indiana/Indianapolis", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("America/Indiana/Indianapolis", timeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("America/Indiana/Indianapolis", timeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.getID());
      assertEquals("America/Indiana/Indianapolis", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "VST");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(41, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=41,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(41, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=41,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, false);
      assertEquals(9223372036854775807L, long0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(41, simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=41,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.toString());
      assertEquals("Etc/UTC", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1);
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("Etc/UTC", dateTimeZone0.toString());
      assertEquals("Etc/UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1871));
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1871), true);
      assertEquals(0L, long0);
      assertEquals("-00:00:01.871", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:01.871", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Denver");
      assertEquals("America/Denver", dateTimeZone0.getID());
      assertEquals("America/Denver", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-933), "VST");
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-933,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-933), simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-933,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-933), simpleTimeZone0.getRawOffset());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775764L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-956), "VST");
      assertEquals((-956), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-956,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertEquals((-956), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=VST,offset=-956,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("VST", simpleTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775736L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-956), "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036807195871L);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-557), "America/New_York");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      int int0 = dateTimeZone0.getOffsetFromLocal((-557));
      assertEquals((-18000000), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2887);
      boolean boolean0 = dateTimeZone0.isStandardOffset(2887);
      assertTrue(boolean0);
      assertEquals("+00:00:02.887", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-11));
      String string0 = dateTimeZone0.getName((long) (-11));
      assertEquals("-00:00:00.011", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      String string0 = dateTimeZone0.getShortName((long) 1);
      assertEquals("+01:01", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone.forOffsetMillis((-18000000));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-18000000));
      assertEquals("-05:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(58, "M");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'M' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("+18:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Indiana/Indianapolis");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((-9223372036854775736L), false);
      assertEquals((-9223372036834097736L), long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Etc/UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-5052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 720);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 720
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 46);
      assertEquals("+00:46", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:00.001");
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:00.001", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1947));
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("-00:00:01.947", dateTimeZone0.getID());
      assertEquals("-00:00:01.947", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, (-71L));
      assertEquals((-71L), long0);
      assertEquals("Etc/UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      TimeZone timeZone0 = cachedDateTimeZone0.toTimeZone();
      assertEquals("Etc/UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-951), "VST");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      String string0 = dateTimeZone0.toString();
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "VST");
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(simpleTimeZone0);
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
  }
}
