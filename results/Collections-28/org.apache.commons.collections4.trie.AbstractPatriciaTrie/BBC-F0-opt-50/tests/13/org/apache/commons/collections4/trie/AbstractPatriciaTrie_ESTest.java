/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:30:31 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "";
      patriciaTrie0.put("delegate", "");
      patriciaTrie0.put("", "");
      String string1 = null;
      patriciaTrie0.put("_7<.ie_ZZT", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("_7<.ie_ZZT", "_7<.ie_ZZT", 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("_7<.ie_ZZT", "_7<.ie_ZZT", 365);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", (String) null);
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.setKeyValue("fUGOJNL{0&F9P509G", "_7<.ie_ZZT");
      abstractPatriciaTrie_TrieEntry0.setValue((String) null);
      abstractPatriciaTrie_TrieEntry0.key = null;
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.headMap("The offsets and lengths must be at Character boundaries");
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      // Undeclared exception!
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("WI", "WI", 256);
      abstractPatriciaTrie_TrieEntry0.value = "k[ICaO>ozDrW4@|c";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      String string0 = "Y|=";
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.setKeyValue("Cannot determine prefix outside of Character boundaries", "C}:5KPIre$;");
      patriciaTrie0.select("Y|=");
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie1.lengthInBits((String) null);
      patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (String) null);
      patriciaTrie3.lastEntry();
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie5.subMap("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Set<String> set0 = patriciaTrie1.keySet();
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("'tdm|\u0003DEfHT(XNx", set0, 1216);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      patriciaTrie0.replaceAll(biFunction0);
      patriciaTrie0.lengthInBits("'tdm|\u0003DEfHT(XNx");
      patriciaTrie1.put("", "");
      patriciaTrie1.selectValue("kU^=>K0");
      patriciaTrie1.ceilingEntry("dm!WVR8");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (-1867));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.PatriciaTrie");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      patriciaTrie0.put("m4#'$Gfy,m", "m4#'$Gfy,m");
      patriciaTrie0.put("I", "m4#'$Gfy,m");
      patriciaTrie0.remove((Object) "m4#'$Gfy,m");
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("gY#\"{:D8", "gY#\"{:D8");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 480);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "gY#\"{:D8", 480);
      abstractPatriciaTrie_TrieEntry1.value = "gY#\"{:D8";
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 480);
      patriciaTrie0.bitIndex((String) null, "(<;NK@OBe");
      patriciaTrie0.lowerEntry("gY#\"{:D8");
      patriciaTrie0.decrementSize();
      patriciaTrie0.values();
      patriciaTrie0.put("", "/");
      patriciaTrie0.firstKey();
      patriciaTrie0.comparator();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      patriciaTrie4.tailMap("B[ZP'4");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(294);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, 294);
      Integer integer1 = new Integer(2167);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer1, 294);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.keySet();
      patriciaTrie0.keySet();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.put("", "WYgo4%/?=%!kU2");
      patriciaTrie0.put("WYgo4%/?=%!kU2", "&'7CjbJ!8<");
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 368, 368);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "Trie[";
      Integer integer0 = new Integer(658);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Trie[", integer0, 658);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-2236));
      patriciaTrie0.lastKey();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, (Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "0_/EhvEBPe";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("p1bj").when(biFunction0).apply(any() , any());
      hashMap0.put("p1bj", "");
      hashMap0.put("F$W.", "0_/EhvEBPe");
      hashMap0.put("left=", "left=");
      hashMap0.compute("0_/EhvEBPe", biFunction0);
      String string1 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      hashMap0.put("keyAnalyzer", "p1bj");
      hashMap0.put("$/Ru\"kgn,qaB", "]={\n");
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("Ig_$T`/b*'!%gg%", biFunction1);
      hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "0_/EhvEBPe");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("The offsets and lengths must be at Character boundaries");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      String string2 = "]";
      patriciaTrie0.ceilingEntry("predecessor=");
      hashMap0.replace("$/Ru\"kgn,qaB", "left=");
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "Ye");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.put("^IF#55", "^");
      patriciaTrie0.put("^", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("OsWxP]", "eZavi77UR1h1wxw");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.remove((Object) "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      String string0 = "l2R";
      patriciaTrie1.ceilingEntry("l2R");
      Integer integer0 = new Integer((-1));
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      Map.Entry.comparingByValue();
      // Undeclared exception!
      try { 
        patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      String string0 = "org.apache.commons.collections4.trie.KeyAnalyzer";
      patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.KeyAnalyzer");
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      Map.Entry.comparingByValue();
      // Undeclared exception!
      try { 
        patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("2mEQqij}$", "2mEQqij}$", (-673));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "2mEQqij}$", (-673));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.put("2mEQqij}$", "2mEQqij}$");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "^)YR+^Axj_<HO?*", (-413));
      abstractPatriciaTrie_TrieEntry1.toString();
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry0.parent;
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      patriciaTrie0.put("2mEQqij}$", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      patriciaTrie0.tailMap("&");
      hashMap0.put("2mEQqij}$", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry3);
      patriciaTrie0.values();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("$)&7", "$)&7");
      patriciaTrie0.higherEntry("peO=2q-'^fs");
      patriciaTrie0.replace("", "");
      patriciaTrie0.put("peO=2q-'^fs", "peO=2q-'^fs");
      patriciaTrie0.put("50a.d&$J3s*7R)ih", "SBIS<^H");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.lengthInBits("-%D-\"T^\"=Ai~bdK");
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      patriciaTrie0.compute("50a.d&$J3s*7R)ih", biFunction0);
      patriciaTrie0.comparator();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.isBitSet("hBw0gr%X%3%Tvos\"b", 0, 240);
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet";
      int int0 = 1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", 1);
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      String string1 = "";
      patriciaTrie0.put("", abstractPatriciaTrie_TrieEntry0);
      Integer integer0 = new Integer(209);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("keyAnalyzer", comparable0, 32768);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 32768;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable1).toString();
      patriciaTrie0.put(";r~-j3w4y7", comparable1);
      patriciaTrie0.keySet();
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.put("", comparable2);
      patriciaTrie0.prefixMap("7");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.containsKey("7");
      Integer integer0 = new Integer(997);
      patriciaTrie1.put("\n", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lastEntry();
      abstractPatriciaTrie_TrieEntry0.key = null;
      Integer integer1 = new Integer(32768);
      patriciaTrie1.put("", integer1);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry2);
      patriciaTrie2.put("ToKey is out of range: ", abstractMap_SimpleEntry0);
      patriciaTrie2.subMap("9}21", ";r~-j3w4y7");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.mapIterator();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("ROOT", "4sz0QY6@w4~mE}7S2UD");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.prefixMap((String) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("og.apache.commons.collections4.trie.AbstractBi7iseTrie", (String) null);
      patriciaTrie0.remove((Object) "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("}\n", "}\n");
      patriciaTrie0.put("orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.remove((Object) "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("/N)Vm6?z\"", "Tgt");
      patriciaTrie0.put("orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "Tgt");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.remove((Object) "/N)Vm6?z\"");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("AcZoc}", "", (-2));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.put("", "Mm[B.DD9n%^");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("]|L,H");
      patriciaTrie0.tailMap("fromKey > toKey");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      hashMap0.put("", (AbstractMap.SimpleEntry<Object, Object>) null);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, "LU,klCE\u0006+MQz");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("NK^_sVN}", (AbstractMap.SimpleEntry<Object, Object>) null, 368);
      abstractPatriciaTrie_TrieEntry3.left = abstractPatriciaTrie_TrieEntry4;
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.predecessor;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("AH", "AH");
      patriciaTrie0.put("^", "^");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      patriciaTrie0.computeIfPresent("AH", biFunction0);
      patriciaTrie0.ceilingEntry("=");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (String) null);
      patriciaTrie0.remove((Object) "orgapache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.values();
      patriciaTrie0.values();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.nextKey("");
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
      Integer integer0 = new Integer((-1628));
      patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", integer0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      patriciaTrie2.put("", comparable0);
      patriciaTrie2.getEntry("");
      patriciaTrie2.firstKey();
      patriciaTrie1.ceilingEntry("Failed to put: ");
      patriciaTrie2.entrySet();
      PatriciaTrie<Comparable<Integer>> patriciaTrie3 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie1);
      patriciaTrie3.nextKey("");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("[|\"We-`|", patriciaTrie0, 3);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-4172));
      abstractPatriciaTrie_TrieEntry0.equals("[|\"We-`|");
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 3);
      Object object0 = new Object();
      // Undeclared exception!
      patriciaTrie0.higherEntry("[|\"We-`|");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      patriciaTrie0.put("kf|zro4,LV2VSR>a]rf", "kf|zro4,LV2VSR>a]rf");
      patriciaTrie0.replace("@19$7I?uHW7t~73{*", (Object) "]={\n");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("@19$7I?uHW7t~73{*", "@19$7I?uHW7t~73{*", 4016);
      patriciaTrie0.subMap("]={\n", "]={\n");
      patriciaTrie0.put("@19$7I?uHW7t~73{*", hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("@19$7I?uHW7t~73{*", hashMap0, 4016);
      abstractPatriciaTrie_TrieEntry1.key = "@19$7I?uHW7t~73{*";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("@19$7I?uHW7t~73{*");
      patriciaTrie0.tailMap("AG|J4}&g<?~");
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry3);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.clear();
      patriciaTrie1.entrySet();
      patriciaTrie1.subMap((String) null, "'A4 ;./digP");
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("]={\n", "]={\n", 4016);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
      patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("[A\"We-`|", patriciaTrie0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      patriciaTrie0.put("Entry(key=[A\"We-`| [0], value=Trie[0]={\n}\n, parent=null, left=[A\"We-`| [0], right=null, predecessor=[A\"We-`| [0])", abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.floorEntry("#Q=T~Kt{'");
      Integer integer0 = new Integer(2888);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Comparable<Object>>(integer0, comparable0, 0);
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("[A\"We-`|", patriciaTrie0, 3);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 3);
      patriciaTrie0.put("Entry(key=[A\"We-`| [3], value=Trie[0]={\n}\n, parent=null, left=[A\"We-`| [3], right=null, predecessor=[A\"We-`| [3])", "Entry(key=[A\"We-`| [3], value=Trie[0]={\n}\n, parent=null, left=[A\"We-`| [3], right=null, predecessor=[A\"We-`| [3])");
      patriciaTrie0.floorEntry("3\"w=qAtlEe}[i.");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(21);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, 21);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry("z");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 48);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 1);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.put("", "");
      patriciaTrie0.subtree((String) null, 0, 0);
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.getEntry("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "");
      patriciaTrie0.subtree((String) null, 0, 0);
      patriciaTrie0.selectKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Tx'YeGc", "\n");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 864, 864);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.put("", "");
      patriciaTrie0.subtree((String) null, 0, 0);
      patriciaTrie0.selectKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(",*", "'");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      patriciaTrie1.put("ReqyWhNJ", abstractMap_SimpleImmutableEntry1);
      patriciaTrie1.subtree("EoS7q?eM9]F4c", 12, 12);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", "C4 -59zs~");
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.ceilingEntry("|jF,(m>\"Bh_N!e\fa@");
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.put("", "AO)!'LKOhvTbWEnGpt");
      Integer integer0 = new Integer((-1348));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "$OM(");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String>(abstractMap_SimpleEntry0, "$", (-3926));
      abstractPatriciaTrie_TrieEntry0.getValue();
      patriciaTrie3.containsKey("$");
      patriciaTrie2.put("$", "N9.huz");
      patriciaTrie3.put("N9.huz", "]41}G4.B6/zN<");
      patriciaTrie3.floorEntry("EaYW^s");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, "4V[6@drIX4`z^Pv;h9k", 1);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("Entry(key=1 [1], value=4V[6@drIX4`z^Pv;h9k, parent=null, left=1 [1], right=null, predecessor=1 [1])", abstractPatriciaTrie_TrieEntry0, 1);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.setKeyValue("4V[6@drIX4`z^Pv;h9k", integer0);
      abstractPatriciaTrie_TrieEntry0.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("|T3dM;:znQ6b^55a5", "R[326-Qa");
      patriciaTrie0.nextKey("Entry(key=4V[6@drIX4`z^Pv;h9k [1], value=1, parent=null, left=4V[6@drIX4`z^Pv;h9k [1], right=Entry(key=1 [1], value=4V[6@drIX4`z^Pv;h9k, parent=null, left=1 [1], right=null, predecessor=1 [1]) [1], predecessor=4V[6@drIX4`z^Pv;h9k [1])");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "(b3Q{c", 1938);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("must have a from or to!", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.put("", "");
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      patriciaTrie0.compute("JLAz/1,'c'l", biFunction0);
      patriciaTrie0.lowerEntry(":r#!>");
      patriciaTrie0.firstEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.isBitSet(":r#!>", 304, (-1));
      Integer integer0 = new Integer((-4054));
      patriciaTrie1.put("", integer0);
      patriciaTrie1.put("=b-,[z7A#ag1lp|x", (Integer) null);
      Integer integer1 = new Integer(3);
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("^", "");
      patriciaTrie0.put("^", "^");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.get("^");
      patriciaTrie1.higherEntry("^");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer((-763));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("[", integer0, (-763));
      abstractPatriciaTrie_TrieEntry0.equals("[");
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("[", integer0, (-763));
      abstractPatriciaTrie_TrieEntry0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry0.value = integer0;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1814);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "K");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, (Object) null, 1);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      Integer integer1 = new Integer((-3020));
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, abstractMap_SimpleEntry0);
      abstractPatriciaTrie_TrieEntry0.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.ceilingEntry("Key is out of range: ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      hashMap0.put("", "%I[!((!mQ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("M=i'-o+%", (String) null, (-2824));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "0_/EhvEBPe";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.put("", "");
      hashMap0.put("F$WW.", "0_/EhvEBPe");
      hashMap0.put("left=", "left=");
      hashMap0.compute("0_/EhvEBPe", biFunction0);
      String string1 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      hashMap0.put("keyAnalyzer", (String) null);
      hashMap0.put("$/Ru\"kgn,qaB", "]={\n");
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("Ig_$T`/b*'!%gg%", biFunction1);
      hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "0_/EhvEBPe");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("The offsets and lengths must be at Character boundaries");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      String string2 = "]";
      patriciaTrie0.ceilingEntry("predecessor=");
      hashMap0.replace("$/Ru\"kgn,qaB", "left=");
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "Ye");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(16);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "org.aache.commons.colections4.trie.AbstractBitwiseTrie");
      Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      patriciaTrie0.put("^\"*L|6[ogsv }i@ Lup", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("pS!EO**", 1, 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-369));
      patriciaTrie0.put("GN44`Ug\"z", integer0);
      patriciaTrie0.put("}|=ZeT>w=@", integer0);
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 10);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 10);
      patriciaTrie0.put("8bU2]yYv(X", "");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie2.getNearestEntryForKey("+M3#* S@I27MF'yhx", (-1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put(":0K5pC", integer0);
      patriciaTrie0.ceilingEntry(":0K5pC");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("orgkaache.commons.colectionsT.trie.AbstractBitwseTrie$BasicPntry", "orgkaache.commons.colectionsT.trie.AbstractBitwseTrie$BasicPntry");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.mapIterator();
      patriciaTrie1.previousKey("orgkaache.commons.colectionsT.trie.AbstractBitwseTrie$BasicPntry");
      patriciaTrie1.lowerEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("=", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.get((Object) null);
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.put("", "=");
      patriciaTrie1.previousKey("=");
      patriciaTrie1.forEach(biConsumer0);
      patriciaTrie1.selectKey("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("=", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.get((Object) null);
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.previousKey("=");
      patriciaTrie1.forEach(biConsumer0);
      patriciaTrie1.selectKey("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
      patriciaTrie0.floorEntry(".A0J!m']+Yl");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.selectKey(".A0J!m']+Yl");
      patriciaTrie1.lowerEntry(".A0J!m']+Yl");
      Integer integer0 = new Integer(13);
      patriciaTrie1.put("", integer0);
      Integer integer1 = new Integer(96);
      hashMap0.put(".A0J!m']+Yl", integer1);
      patriciaTrie1.previousKey("");
      patriciaTrie1.comparator();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.floorEntry("The offsets and lengths must be at Character boundaries");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 96);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      // Undeclared exception!
      try { 
        patriciaTrie2.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("iloNZ/30w:b.e__oe", integer0, 0);
      abstractPatriciaTrie_TrieEntry0.equals("iloNZ/30w:b.e__oe");
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.setKeyValue("Entry(key=iloNZ/30w:b.e__oe [0], value=0, parent=null, left=iloNZ/30w:b.e__oe [0], right=null, predecessor=iloNZ/30w:b.e__oe [0])", integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(patriciaTrie0);
      patriciaTrie1.floorEntry("iloNZ/30w:b.e__oe");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      patriciaTrie1.put("JLn$ubmX^#fGS$W2OO", comparable0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Entry(key=iloNZ/30w:b.e__oe [0], value=0, parent=null, left=iloNZ/30w:b.e__oe [0], right=null, predecessor=iloNZ/30w:b.e__oe [0])", (Comparable<Object>) null, 0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Entry(key=iloNZ/30w:b.e__oe [0], value=0, parent=null, left=iloNZ/30w:b.e__oe [0], right=null, predecessor=iloNZ/30w:b.e__oe [0])", (Comparable<Object>) null, 0);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
      patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry3);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, object0, 1217);
      abstractPatriciaTrie_TrieEntry4.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(1);
      patriciaTrie1.putIfAbsent("", integer0);
      patriciaTrie1.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("D'2TT3n", object0);
      patriciaTrie0.floorEntry("D'2TT3n");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1184);
      patriciaTrie1.put("", integer0);
      patriciaTrie1.ceilingEntry("");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet";
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", "");
      int int0 = (-371);
      // Undeclared exception!
      try { 
        patriciaTrie1.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.isBitSet("", 336, (-1022));
      patriciaTrie0.mapIterator();
      patriciaTrie0.headMap("%CYN.;hm]");
      Integer integer0 = new Integer(803);
      patriciaTrie0.put("ueEe:<32", integer0);
      Integer integer1 = new Integer(803);
      patriciaTrie0.ceilingEntry("]={\n");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 304);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "D'2TT3n";
      Object object0 = new Object();
      patriciaTrie0.put("D'2TT3n", object0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      patriciaTrie1.selectValue("D'2TT3n");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.size();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      patriciaTrie0.higherEntry("EzD&O\"");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        patriciaTrie3.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      patriciaTrie0.put("A\">We-`|", "A\">We-`|");
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      Object object0 = new Object();
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<Object> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Object>((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.isBitSet("", 336, (-1022));
      patriciaTrie0.mapIterator();
      patriciaTrie0.headMap("%CYN.;hm]");
      Integer integer0 = new Integer(803);
      patriciaTrie0.put("ueEe:<32", integer0);
      Integer integer1 = new Integer(803);
      Integer integer2 = new Integer(803);
      patriciaTrie0.put("ueEe:<32", integer2);
      patriciaTrie0.put("%CYN.;hm]", integer1);
      Integer integer3 = new Integer(803);
      patriciaTrie0.put("%CYN.;hm]", integer3);
      patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("ueEe:<32", comparable0, 803);
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(4818);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 4818);
      abstractPatriciaTrie_TrieEntry0.left = null;
      Integer integer1 = new Integer(4818);
      abstractPatriciaTrie_TrieEntry0.key = integer1;
      abstractPatriciaTrie_TrieEntry0.value = (Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference";
      Integer integer2 = new Integer((-1954));
      abstractPatriciaTrie_TrieEntry0.parent = null;
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer2, integer0);
      abstractPatriciaTrie_TrieEntry0.toString();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 9);
      patriciaTrie0.put("bj", (String) null);
      patriciaTrie0.previousKey("");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("/<emPChCQPY'ZA^b;", 0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(224);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "K");
      Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("", "qUN1WN$mAWHp&)z");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.put("-I", "");
      patriciaTrie3.higherEntry("org.apache.commons.collections4.trie.PatriciaTrie");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.size();
      PatriciaTrie<Comparable<Integer>> patriciaTrie1 = new PatriciaTrie<Comparable<Integer>>();
      String string0 = null;
      patriciaTrie1.subtree((String) null, 0, (-1360));
      Integer integer0 = new Integer((-1360));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("^SpJi1F~T|E6n", integer0, (-1360));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#U@2<i[z+|tUN_x_{`", "Entry(");
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1492);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.ceilingEntry("!$uV.T63NGQs%O");
      Integer integer1 = new Integer(1492);
      patriciaTrie2.put("}\n", integer1);
      Integer integer2 = new Integer(1492);
      Integer integer3 = new Integer(1492);
      Integer integer4 = new Integer(1492);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.put("Sjv#Jq", "}\n");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry(" + ");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.getNearestEntryForKey(" + ", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(160);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      patriciaTrie3.ceilingEntry("");
      Integer integer1 = new Integer(2107);
      patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer1);
      Integer integer2 = new Integer(2107);
      Integer integer3 = new Integer(1492);
      patriciaTrie3.put("nx<R&J", integer2);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>();
      patriciaTrie5.put("", integer1);
      patriciaTrie5.lowerEntry("Key is out of range: ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1492);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.ceilingEntry("!$uV.T63NGQs%O");
      Integer integer1 = new Integer(1492);
      patriciaTrie2.put("}\n", integer1);
      Integer integer2 = new Integer(1492);
      Integer integer3 = new Integer(1492);
      patriciaTrie2.put("9\"aM\"jy6W3U&8n_G", integer3);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie2.lowerEntry("!$uV.T63NGQs%O");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("=", patriciaTrie0, 256);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, abstractPatriciaTrie_TrieEntry0, 256);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.value = (Object) patriciaTrie0;
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.keySet();
      patriciaTrie1.putIfAbsent("=", abstractPatriciaTrie_TrieEntry0.right);
      patriciaTrie1.clear();
      patriciaTrie1.headMap("");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("=", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 256);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 256);
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      abstractPatriciaTrie_TrieEntry2.getKey();
      patriciaTrie3.getEntry("=");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.subtree("fromKey > toKey", 288, 288);
      Integer integer0 = new Integer(2001);
      String string0 = "/!+!RL'/NRC7$9,}";
      Integer integer1 = new Integer(2001);
      hashMap0.put("/!+!RL'/NRC7$9,}", integer1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("  ", integer0, (-310));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.right = null;
      patriciaTrie0.put("PS}1Hz", integer0);
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      patriciaTrie1.put("  ", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.put("~#<:6b?tmj}4", "~#<:6b?tmj}4");
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie3);
      patriciaTrie4.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", patriciaTrie0);
      patriciaTrie4.lastKey();
      patriciaTrie2.prefixMap("/:|E*MnGjT\"Kmg*");
      Integer integer0 = new Integer(3631);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(224);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "K");
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("", 1, 1);
      patriciaTrie0.selectValue("IjW");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.size();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2435);
      Integer integer1 = new Integer(2435);
      patriciaTrie1.ceilingEntry("Q");
      Integer integer2 = new Integer(2435);
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer2);
      Integer integer3 = new Integer(208);
      patriciaTrie0.put("Q", integer1);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie0.lowerEntry("1");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>(comparable0, (Object) null, (-1907));
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1907));
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>(comparable1, integer0, 272);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable2).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>(comparable2, abstractPatriciaTrie_TrieEntry0, 256);
      abstractPatriciaTrie_TrieEntry1.bitIndex = 208;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.toString();
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer1 = new Integer(256);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("ROOT", integer1, 2);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "k";
      patriciaTrie0.entrySet();
      String string1 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry";
      int int0 = (-1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Cannot delete root Entry!", "", (-1));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("key=", "org.apache.commons.collections4.trie.PatriciaTrie");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>((String) null, "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry1);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>("", abstractMap_SimpleImmutableEntry0, 1324);
      abstractPatriciaTrie_TrieEntry0.setKeyValue("key=", abstractMap_SimpleImmutableEntry0);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      Integer integer0 = new Integer(1324);
      patriciaTrie4.put("f73|3ze", integer0);
      patriciaTrie3.firstEntry();
      patriciaTrie4.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2435);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction0);
      BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      Integer integer1 = new Integer(2435);
      patriciaTrie1.ceilingEntry("Q");
      patriciaTrie1.put("Q", integer0);
      Integer integer2 = new Integer(2435);
      patriciaTrie1.put("Q", integer2);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie1.lowerEntry("Q");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      Integer integer0 = new Integer((-3239));
      Integer integer1 = new Integer((-2042));
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.ceilingEntry("Entry(key=A\">We-`| [0], value=Trie[0]={\n}\n, parent=null, left=A\">We-`| [0], right=null, predecessor=A\">We-`| [0])");
      patriciaTrie2.put("A\">We-`|", integer1);
      Integer integer2 = new Integer((-1));
      patriciaTrie2.put("Entry(key=A\">We-`| [0], value=Trie[0]={\n}\n, parent=null, left=A\">We-`| [0], right=null, predecessor=A\">We-`| [0])", integer2);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.lowerEntry("Entry(key=A\">We-`| [0], value=Trie[0]={\n}\n, parent=null, left=A\">We-`| [0], right=null, predecessor=A\">We-`| [0])");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(2107);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer1, 2107);
      Integer integer2 = new Integer((-2531));
      abstractPatriciaTrie_TrieEntry0.value = integer2;
      abstractPatriciaTrie_TrieEntry0.left = null;
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer0, (-542));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("xY>u`/:V#\"", "");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>((Object) null, abstractMap_SimpleImmutableEntry0, 1324);
      abstractPatriciaTrie_TrieEntry2.setKeyValue(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0);
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.subtree("xY>u`/:V#\"", 3, (-2567));
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie2.put("XLqeqhn:~O$CA>?V", abstractPatriciaTrie_TrieEntry0.value);
      patriciaTrie3.firstEntry();
      patriciaTrie3.floorEntry("Trie[");
      patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 2;
      patriciaTrie0.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("i|T~TI!5KD`(P+`D:", "", (-1572));
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2435);
      Integer integer1 = new Integer(2435);
      patriciaTrie1.ceilingEntry("Q");
      patriciaTrie1.put("Q", integer0);
      Integer integer2 = new Integer(2435);
      patriciaTrie1.put("Q", integer2);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie1.lowerEntry("Q");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "LU\\,klCE\\6+MQz";
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      String string1 = "bj";
      int int0 = 1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1);
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Ateoc}", "", (-2));
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2435);
      Integer integer1 = new Integer(2435);
      patriciaTrie1.ceilingEntry("");
      patriciaTrie1.put("", integer1);
      patriciaTrie1.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie1.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Ateoc}", "", (-2));
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("EaYW^s");
      patriciaTrie0.tailMap("fromKey > toKey");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.higherEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      hashMap0.put("", (AbstractMap.SimpleEntry<Object, Object>) null);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("LU,klCE\u0006+MQz", (Object) null, 1);
      abstractPatriciaTrie_TrieEntry2.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2435);
      patriciaTrie1.put("e", integer0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie1.lowerEntry("e");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.mapIterator();
      patriciaTrie0.mapIterator();
      patriciaTrie0.headMap("}R)Tf-j-)JK\"u(");
      patriciaTrie0.bitIndex(".dI)b", ".dI)b");
      patriciaTrie0.mapIterator();
      patriciaTrie0.higherEntry(".dI)b");
      patriciaTrie0.selectValue("]");
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("AcZoc}", "", (-2));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", "bj", 1);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("_1", "");
      patriciaTrie0.lastEntry();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.subMap("", "j5N&_]A.m+n/WCugm2y");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      patriciaTrie0.put("", "");
      patriciaTrie0.subtree("", 0, 1655);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.put("", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      patriciaTrie0.prefixMap("");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("H<|m@E4hl,6ERZhjE", "H<|m@E4hl,6ERZhjE");
      Integer integer0 = new Integer(1655);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 413);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.lowerEntry("org.apache.commons.collections4.trie.PatriciaTrie");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = "org.apache.commons.collections4.trie.KeyAnalyzer";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-21));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      patriciaTrie0.incrementSize();
      int int1 = 1540;
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      String string1 = "";
      patriciaTrie1.selectValue("");
      PatriciaTrie<Object> patriciaTrie2 = null;
      try {
        patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1492);
      Map.Entry.comparingByKey();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("K3+MF/*8bILOZ", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie2.prefixMap("Cannot delete root Entry!");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.nextEntry(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie3.floorEntry("");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 1492);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 2;
      patriciaTrie0.selectKey("VX|iB^Mz;]RvT");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "i|T~TI!5KD`(P+`D:");
      abstractMap_SimpleEntry0.setValue("i|T~TI!5KD`(P+`D:");
      Map.Entry.comparingByValue();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1219));
      patriciaTrie1.put("i|T~TI!5KD`(P+`D:", integer0);
      Integer integer1 = new Integer(1248);
      Integer integer2 = new Integer(1248);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      patriciaTrie1.merge("i|T~TI!5KD`(P+`D:", integer0, biFunction0);
      Integer integer3 = new Integer(1248);
      patriciaTrie1.containsKey("");
      patriciaTrie1.lastEntry();
      Integer integer4 = new Integer(1449);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "VX|iB^Mz;]RvT", (-2252));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("", "");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-381));
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.bitsPerElement();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.entrySet();
      patriciaTrie1.higherEntry((String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1);
      patriciaTrie3.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "Hp0]m>zrTzJ@(", 1024);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.subtree("Hp0]m>zrTzJ@(", 1024, 968);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      String string0 = "";
      patriciaTrie0.put("", "");
      int int0 = (-3468);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", 0, (-3468));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      Integer integer0 = new Integer(16);
      patriciaTrie4.put("", integer0);
      patriciaTrie4.incrementSize();
      Integer integer1 = new Integer(16);
      Integer integer2 = new Integer(600);
      patriciaTrie4.put("9X pGtPXl7ilRv", integer0);
      Integer integer3 = new Integer(16);
      Integer integer4 = new Integer(600);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie4.merge("The offsets and lengths must be at Character boundaries", integer1, biFunction0);
      patriciaTrie4.containsKey("The offsets and lengths must be at Character boundaries");
      patriciaTrie4.lastEntry();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, "9X pGtPXl7ilRv", (-3101));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, String>>) comparator0);
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.containsKey("Entry(");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("EaYW^s");
      patriciaTrie0.put("EaYW^s", "EaYW^s");
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1412));
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.KeyAnalyzer", integer1, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      patriciaTrie0.incrementSize();
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer1);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.selectValue("");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.put("org.apache.commons.collections4.trie.KeyAnalyzer", (Object) null);
      patriciaTrie2.nextKey("l).I_O<<EMT+Lw");
      Integer integer2 = new Integer(0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      patriciaTrie0.merge("", integer2, biFunction0);
      patriciaTrie0.containsKey((Object) null);
      patriciaTrie1.lastEntry();
      Integer integer3 = new Integer(718);
      Integer integer4 = new Integer(1540);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer3, integer4, 1540);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, String>>) comparator0);
      abstractPatriciaTrie_TrieEntry2.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 1);
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      patriciaTrie0.put("bj", (String) null);
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("EaYW^s");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, (String) null);
      SortedMap<String, String> sortedMap0 = new PatriciaTrie<String>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>("", (Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie0.selectKey((String) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "org.apache.commons.collections4.trie.PatriciaTrie";
      patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.PatriciaTrie");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(784);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer0);
      patriciaTrie2.incrementSize();
      Integer integer1 = new Integer(784);
      Integer integer2 = new Integer(600);
      patriciaTrie0.put("9X pGtPXl7ilRv", integer2);
      Integer integer3 = new Integer(784);
      Integer integer4 = new Integer(784);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie4);
      patriciaTrie5.put("", "zn");
      // Undeclared exception!
      try { 
        patriciaTrie5.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer((-2078));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "elSVh-$<kI1Eo", (-2078));
      abstractPatriciaTrie_TrieEntry0.getValue();
      patriciaTrie2.put("elSVh-$<kI1Eo", "elSVh-$<kI1Eo");
      patriciaTrie2.compareKeys("", "");
      patriciaTrie2.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(1008);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1008);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(288);
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", integer0);
      Integer integer1 = new Integer(328);
      patriciaTrie0.headMap("");
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.floorEntry("WY{");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(1451);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "{u@q", 1451);
      Integer integer1 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie1.put("{u@q", integer1);
      patriciaTrie1.containsKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet");
      String string0 = "";
      patriciaTrie1.headMap("");
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie2.bitsPerElement();
      patriciaTrie0.put("", "");
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.selectKey("VX|iB^Mz;]RvT");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "i|T~TI!5KD`(P+`D:");
      abstractMap_SimpleEntry0.setValue("i|T~TI!5KD`(P+`D:");
      Comparator<Map.Entry<Object, Integer>> comparator0 = Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, comparator0, (-381));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-381));
      Object object0 = new Object();
      patriciaTrie1.put("", "VX|iB^Mz;]RvT");
      patriciaTrie1.put("i|T~TI!5KD`(P+`D:", (Object) null);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(32768, 32768);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie1.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.select("v");
      Integer integer0 = new Integer(2435);
      patriciaTrie2.put("v", integer0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie2.lowerEntry("/9");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      int int0 = 1655;
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, 1655, 1655);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-2));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.lengthInBits("");
      patriciaTrie0.put("wQ", "Cannot determine prefix outside of Character boundaries");
      patriciaTrie0.lastEntry();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("LU,klCE\u0006+MQz", " -> ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie1.lengthInBits((String) null);
      patriciaTrie4.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (String) null);
      patriciaTrie4.lastEntry();
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie6.subMap("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.toString();
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", (-3399), (-3399));
      patriciaTrie0.previousKey("fromKey > toKey");
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.replace("org.apache.commons.collections4.trie.AbstractPatriciaTrie", "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
      patriciaTrie0.put("lF3^@s", "lF3^@s");
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("H]ipZC", (String) null);
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.remove((Object) "Trie[0]={\n}\n");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.size();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.PatriciaTrie");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(784);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer0);
      patriciaTrie2.incrementSize();
      Integer integer1 = new Integer(784);
      Integer integer2 = new Integer(600);
      patriciaTrie0.put("9X pGtPXl7ilRv", integer2);
      Integer integer3 = new Integer(784);
      Integer integer4 = new Integer(784);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.merge("org.apache.commons.collections4.trie.PatriciaTrie", integer4, biFunction0);
      Integer integer5 = new Integer(2125);
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(128);
      Integer integer1 = new Integer(572);
      patriciaTrie2.isBitSet("~)X", 165, (-3));
      patriciaTrie2.put(")", integer1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.lowerEntry("The offsets and lengths must be at Character boundaries");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.select("Trie[");
      Integer integer0 = new Integer((-838));
      Integer integer1 = new Integer(2435);
      patriciaTrie2.put("", integer1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      patriciaTrie0.put("-Qu&r,", "");
      int int0 = (-3);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", (-3), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      int int0 = 0;
      patriciaTrie0.put("", "");
      int int1 = 1655;
      patriciaTrie0.subtree("", 0, 1655);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.put("", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      patriciaTrie1.tailMap("");
      patriciaTrie0.prefixMap("");
      patriciaTrie0.prefixMap("H<|m@E4hl,6ERZhjE");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.floorEntry("N");
      String string0 = "]1";
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.setValue("pH6PrA,");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      Object object0 = new Object();
      patriciaTrie0.put("Entry(key=A\">We-`| [0], value=Trie[0]={\n}\n, parent=null, left=A\">We-`| [0], right=null, predecessor=A\">We-`| [0])", "Entry(key=A\">We-`| [0], value=Trie[0]={\n}\n, parent=null, left=A\">We-`| [0], right=null, predecessor=A\">We-`| [0])");
      patriciaTrie0.put("", "A\">We-`|");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.select("");
      Integer integer0 = new Integer(2435);
      patriciaTrie2.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie2.lowerEntry("/9");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      patriciaTrie0.keySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("", "");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie2.get(patriciaTrie1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-550);
      abstractPatriciaTrie_TrieEntry0.setValue("pH6PrA,");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Comparable<Object>>((AbstractMap.SimpleEntry<Object, Object>) null, comparable0, 3295);
      abstractPatriciaTrie_TrieEntry0.getKey();
      patriciaTrie0.remove((Object) null, (Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.higherEntry((String) null);
      int int0 = 328;
      Integer integer0 = new Integer(328);
      int int1 = (-733);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-733));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 849);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry1.predecessor = null;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(8);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.KeyAnalyzer", integer0, 8);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 8);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie2.higherEntry("");
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Qu", integer2, 1114);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer2, 540);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer2, 0);
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      patriciaTrie0.put("", "");
      patriciaTrie0.subtree("", 0, 1655);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.put("", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      patriciaTrie1.tailMap("");
      patriciaTrie0.prefixMap("");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("H<|m@E4hl,6ERZhjE", "H<|m@E4hl,6ERZhjE");
      Integer integer0 = new Integer(1655);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 413);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 413);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1492);
      Map.Entry.comparingByKey();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("K3+MF/*8bILOZ", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie2.prefixMap("Cannot delete root Entry!");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.floorEntry("");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 1492);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 1360;
      Integer integer0 = new Integer(1360);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, (String) null, 1360);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, (String) null, 1360);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Comparable<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "");
      patriciaTrie0.selectKey((String) null);
      int int0 = 413;
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 2;
      patriciaTrie0.selectKey("VX|iB^Mz;]RvT");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "i|T~TI!5KD`(P+`D:");
      abstractMap_SimpleEntry0.setValue("i|T~TI!5KD`(P+`D:");
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntry0.setValue("  ");
      patriciaTrie0.put("i|T~TI!5KD`(P+`D:", ", ");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "i|T~TI!5KD`(P+`D:", 413);
      abstractPatriciaTrie_TrieEntry0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      patriciaTrie0.selectKey("i|T~TI!5KD`(P+`D:");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "i|T~TI!5KD`(P+`D:";
      patriciaTrie0.selectKey("VX|iB^Mz;]RvT");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "i|T~TI!5KD`(P+`D:");
      abstractMap_SimpleEntry0.setValue("i|T~TI!5KD`(P+`D:");
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "i|T~TI!5KD`(P+`D:", 413);
      abstractPatriciaTrie_TrieEntry0.toString();
      HashMap<String, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, Integer>((-1), 413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.selectKey("VX|iB^Mz;]RvT");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "i|T~TI!5KD`(P+`D:");
      abstractMap_SimpleEntry0.setValue("i|T~TI!5KD`(P+`D:");
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "i|T~TI!5KD`(P+`D:", 413);
      abstractPatriciaTrie_TrieEntry0.toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      patriciaTrie0.selectKey("i|T~TI!5KD`(P+`D:");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer0 = new Integer(969);
      Integer integer1 = new Integer((-3028));
      hashMap0.replace("", integer0, integer1);
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.get((Object) null);
      patriciaTrie0.decrementSize();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string0 = "wYG4";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("wYG4", "wYG4", (-1495));
      String string1 = "~cS$N-D>x";
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.subtree("must have a from or to!", (-1), (-1));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer", 217);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", (Integer) null);
      patriciaTrie1.entrySet();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "org.apache.commons.collections4.trie.KeyAnalyzer", 3392);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("must have a from or to!", "must have a from or to!", 217);
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.put("key=", "key=");
      patriciaTrie0.keySet();
      patriciaTrie0.getOrDefault((Object) null, "FCgh?XjZxW0*");
      patriciaTrie0.put("", (String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("5I<V'sV,as", "5I<V'sV,as");
      patriciaTrie0.firstKey();
      patriciaTrie0.values();
      String string0 = "N";
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "Z@\u0007>@rU", (-189));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      patriciaTrie0.put("", " is not an internal Entry!");
      patriciaTrie0.isBitSet("Z@\u0007>@rU", 692, 692);
      patriciaTrie0.firstKey();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie1.clear();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-894));
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((String) null, integer0, biFunction0);
      PatriciaTrie<Integer> patriciaTrie2 = null;
      try {
        patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      hashMap0.clear();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie1.getEntry(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lengthInBits("");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      Integer integer0 = new Integer(0);
      patriciaTrie2.put("RG{*lSzV5;> V^", integer0);
      patriciaTrie1.incrementSize();
      Integer integer1 = new Integer(0);
      patriciaTrie3.put("", integer1);
      Integer integer2 = new Integer(0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      patriciaTrie3.merge("", integer2, biFunction0);
      // Undeclared exception!
      try { 
        patriciaTrie3.containsKey(patriciaTrie2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = null;
      patriciaTrie0.put("_*/:hoS)1fwVak6!@", (Object) null);
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", integer0);
      patriciaTrie0.replace("The offsets and lengths must be at Character boundaries", (Object) "The offsets and lengths must be at Character boundaries", object0);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      String string0 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-784));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.getNearestEntryForKey("keyAnalyzer", 2267);
      PatriciaTrie<Comparable<Integer>> patriciaTrie1 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie0);
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("", integer1);
      patriciaTrie0.higherEntry("");
      patriciaTrie1.put("$=KHp<].[Iz/$ZoQ", integer1);
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.tailMap("");
      Integer integer2 = new Integer(2492);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer2);
      patriciaTrie1.higherEntry("RootEntry(");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie2.keySet();
      hashMap0.clear();
      patriciaTrie2.getNearestEntryForKey((String) null, 0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = "org.apache.commons.collections4.trie.KeyAnalyzer";
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.KeyAnalyzer", integer0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      patriciaTrie0.incrementSize();
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.selectValue("");
      PatriciaTrie<Object> patriciaTrie2 = null;
      try {
        patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.higherEntry(" + ");
      patriciaTrie0.put("gT+`0h.Fq\"/Y{zu", "Xyo5Ez&");
      patriciaTrie0.entrySet();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("gT+`0h.Fq\"/Y{zu", patriciaTrie0);
      Integer integer0 = new Integer(1128);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie1.prefixMap("Failed to put: ");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.floorEntry((String) null);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("K3+MF/*8bILOZ", (Object) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 1128);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.subtree("must have a from or to!", (-1), (-1));
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "must have a from or to!", (-1));
      Map.Entry.comparingByValue();
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.KeyAnalyzer", (-2322));
      patriciaTrie0.put("must have a from or to!", "must have a from or to!");
      patriciaTrie0.selectKey("}'");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(2094);
      Integer integer1 = new Integer(2094);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 2094);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(2094);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, integer1, 2094);
      Map.Entry.comparingByValue();
      Integer integer3 = new Integer((-1));
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.setValue(integer3);
      abstractPatriciaTrie_TrieEntry0.value = integer2;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.bitIndex("fd+PiWnI0K", "fd+PiWnI0K");
      patriciaTrie0.put(",^", integer1);
      Integer integer4 = new Integer(2094);
      patriciaTrie0.select(",^");
      patriciaTrie1.replace(":KjWZy>K!=fL?4=", integer0, integer4);
      patriciaTrie1.higherEntry("|F!B,}+5`?mW'xdHgA");
      patriciaTrie0.keySet();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("gGWOd->,{knTD%00", "fd+PiWnI0K", (-2));
      abstractPatriciaTrie_TrieEntry2.bitIndex = (-1);
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer5 = new Integer(1681);
      patriciaTrie0.put("", integer5);
      patriciaTrie2.firstEntry();
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.subtree("must have a from or to!", (-1), (-1));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer", 217);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("must have a from or to!", "_1");
      patriciaTrie0.lastEntry();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.higherEntry("must have a from or to!");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      patriciaTrie0.subtree("", (-1043), (-1043));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "^a4~;2 Bn", 217);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("%`y$z'm2{.h!~gsY\";5", integer0, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-707));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("\"AftK'we8\"f", integer0);
      patriciaTrie0.put("", abstractMap_SimpleEntry0);
      Integer integer1 = new Integer(1);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>("", integer1);
      patriciaTrie0.put("", abstractMap_SimpleEntry1);
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>) null);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", patriciaTrie0);
      patriciaTrie1.comparator();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Z[VR<", "Z[VR<");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("", abstractMap_SimpleImmutableEntry1, 1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("org.apache.commons.collections4.trie.KeyAnalyzer", abstractMap_SimpleImmutableEntry1, 0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("r", "r");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.previousKey("");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      int int0 = (-941);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>((String) null, (AbstractMap.SimpleEntry<Integer, Object>) null, (-941));
      abstractPatriciaTrie_TrieEntry0.value = null;
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-3));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(object0, integer0);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.select("");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.toString();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("Trie[0]={\n}\n", "gUP.'");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, "", 2884);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.putIfAbsent("", abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(1261);
      patriciaTrie1.put("", integer0);
      Integer integer1 = new Integer(2279);
      patriciaTrie1.put("wdMbUsKENIeu!;.uAdi", integer1);
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      patriciaTrie0.keySet();
      Integer integer0 = new Integer(2107);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, 368);
      Integer integer1 = new Integer((-2531));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("`H3[?7uov", "j ", 2105);
      String string0 = abstractPatriciaTrie_TrieEntry1.key;
      Integer integer2 = new Integer((-1570));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("`H3[?7uov", integer2, (-1570));
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      patriciaTrie1.put("9H`##Ap", (AbstractMap.SimpleEntry<Integer, Object>) null);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-1));
      abstractPatriciaTrie_TrieEntry3.getValue();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", (-1));
      abstractPatriciaTrie_TrieEntry4.toString();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      Collection<AbstractMap.SimpleImmutableEntry<String, String>> collection0 = patriciaTrie0.values();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", (AbstractMap.SimpleImmutableEntry<String, String>) null);
      Integer integer0 = new Integer((-1192));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, collection0, (-1));
      patriciaTrie0.put(" 99xr", (AbstractMap.SimpleImmutableEntry<String, String>) null);
      Map.Entry.comparingByKey();
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      patriciaTrie1.put(" 99xr", object0);
      patriciaTrie1.subMap("", "");
      patriciaTrie1.toString();
      patriciaTrie1.put("72h$1;vZi'/s<81", "72h$1;vZi'/s<81");
      patriciaTrie1.put("Trie[", "Trie[");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.isBitSet("", 336, (-1022));
      patriciaTrie0.headMap("%CYN.;hm]");
      Integer integer0 = new Integer(803);
      Integer integer1 = new Integer(803);
      patriciaTrie0.put("ueEe:<32", integer1);
      patriciaTrie0.put("%CYN.;hm]", integer0);
      patriciaTrie0.entrySet();
      Integer integer2 = new Integer(803);
      patriciaTrie0.remove((Object) "");
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.higherEntry("sUjd? y3P^");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.ceilingEntry("");
      patriciaTrie1.put("", "");
      patriciaTrie1.subtree("", 1655, 1655);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie2.remove((Object) "");
      patriciaTrie2.lowerEntry("], ");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, 261);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.selectKey("}'");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("AcZoc}", "", (-2));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.put("", "Mm[B.DD9n%^");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("EaYW^s");
      patriciaTrie0.tailMap("fromKey > toKey");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      hashMap0.put("", (AbstractMap.SimpleEntry<Object, Object>) null);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, "LU,klCE\u0006+MQz");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1492);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(1492);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer0, "invalid lookup: ");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "org.apache.commons.collections4.trie.PatriciaTrie", 0);
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      // Undeclared exception!
      try { 
        patriciaTrie1.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.replace("LU,klCE\u0006+MQz", "LU,klCE\u0006+MQz");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Mm[B.DD9n%^", (String) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("AcZoc}", "", (-2));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.put("bj", "X'9$'");
      patriciaTrie0.put("", "Mm[B.DD9n%^");
      patriciaTrie0.put("EaYW^s", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      patriciaTrie0.nextKey("]|L,H");
      patriciaTrie0.tailMap("fromKey > toKey");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      hashMap0.put("", (AbstractMap.SimpleEntry<Object, Object>) null);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(object0, "LU,klCE\u0006+MQz");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      int int0 = 0;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("A\">We-`|", patriciaTrie0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.setValue("pH6PrA,");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      Object object0 = new Object();
      patriciaTrie0.put("D'2TL3n", (Object) null);
      patriciaTrie0.put("D'2TL3n", object0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(int0);
      String string0 = "S(NKX";
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, string0, int0);
      abstractPatriciaTrie_TrieEntry2.bitIndex = int0;
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      int int1 = (-727);
      Integer integer1 = new Integer(int1);
      String string1 = ">#Ox}5)!9_l*6S3";
      int int2 = 16;
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, string1, int2);
      String string2 = "";
      abstractPatriciaTrie_TrieEntry3.setKeyValue(integer1, string2);
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      String string3 = "J9=eMec0$>@K]";
      patriciaTrie2.put(string3, integer0);
      patriciaTrie2.previousKey(string0);
      String string4 = ")Zd7;dC+bDv";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(string4, string2);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      String string5 = ",Z@gw8QVy7 K";
      int int3 = 0;
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, string5, int3);
      abstractPatriciaTrie_TrieEntry4.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.KeyAnalyzer", integer0, 0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie2.getNearestEntryForKey("", 0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer1 = new Integer((-1431));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer0, (String) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, (String) null, 3196);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(integer2, integer3);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>(abstractMap_SimpleImmutableEntry0, integer1, 0);
      abstractPatriciaTrie_TrieEntry2.getKey();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie3.remove((Object) null);
      assertNull(abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.lengthInBits((String) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.put("?,lk", (String) null);
      patriciaTrie2.lastEntry();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.subMap((String) null, "");
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap";
      String string1 = "";
      patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      patriciaTrie1.put("qYt?Yf5v|7X6SWK\"B", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qYt?Yf5v|7X6SWK\"B", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", 2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(patriciaTrie0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, abstractMap_SimpleImmutableEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      patriciaTrie0.decrementSize();
      patriciaTrie0.clear();
      int int0 = 0;
      patriciaTrie0.put("", "");
      patriciaTrie0.subtree("", 0, 1655);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.put("", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      patriciaTrie1.tailMap("");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.keySet();
      // Undeclared exception!
      try { 
        patriciaTrie2.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.put("", (AbstractMap.SimpleEntry<Object, Object>) null);
      patriciaTrie0.incrementSize();
      Integer integer0 = new Integer(2434);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "%!");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry1);
      Map.Entry.comparingByKey();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, String>>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, String>>("%!", abstractMap_SimpleImmutableEntry0, 0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      SortedMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> sortedMap0 = patriciaTrie1.tailMap("%!");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer(2440);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 2440);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }
}
