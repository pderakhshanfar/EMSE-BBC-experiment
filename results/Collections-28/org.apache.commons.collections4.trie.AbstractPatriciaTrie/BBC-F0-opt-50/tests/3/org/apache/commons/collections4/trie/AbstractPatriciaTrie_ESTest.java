/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:25:25 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.subMap("%.$1", "OS]i~1`L");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("#%RM*!c[s", "#%RM*!c[s", 3852);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractPatriciaTrie_TrieEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>("  ", "#%RM*!c[s");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 3852);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, (-116));
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("", (Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      patriciaTrie0.ceilingEntry(";p8_IMz={c34");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collectionsW.trie. atriciaTrie", "org.apache.commons.collectionsW.trie. atriciaTrie");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("w@'yfDmg|lN!Sb", 0, 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("zWz+4^:3y:wJ", "zWz+4^:3y:wJ");
      patriciaTrie0.put("w@'yfDmg|lN!Sb", "w@'yfDmg|lN!Sb");
      patriciaTrie0.subtree("w@'yfDmg|lN!Sb", 0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(866);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "L7");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry1);
      patriciaTrie0.put("eF%&v:^6^M>b@pj Er", abstractMap_SimpleEntry0);
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "!EpTv`2Zx");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(" -> ");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<String> set0 = patriciaTrie0.keySet();
      patriciaTrie0.put("s,", set0);
      patriciaTrie0.put("s,", "s,");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("kx$", "kx$");
      patriciaTrie0.put("", "`2]Mq*P4>0h';bhbaR");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, "`2]Mq*P4>0h';bhbaR", 2);
      patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("kx$", "kx$");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, "`2]Mq*P4>0h';bhbaR", 2);
      patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "qfJ<@");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", abstractMap_SimpleEntry1, 32768);
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Yw3#|]LRlW<hm*m7=", "Yw3#|]LRlW<hm*m7=");
      patriciaTrie0.put("kx$", "kx$");
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Yw3#|]LRlW<hm*m7=", "Yw3#|]LRlW<hm*m7=");
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("z5=`", "dwaXAOtE8e>Vk|");
      patriciaTrie0.put("jX4?h#jGf", "");
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("aPY{UTbz:(z?#kpOml", "]={\n");
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, "", 2561);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jX4?h#jGf", "");
      patriciaTrie0.put("D`", "");
      patriciaTrie0.higherEntry("jN@3F0Z");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(573);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.put("2lfKAFf", integer0);
      patriciaTrie0.getNearestEntryForKey((String) null, 573);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.getNearestEntryForKey("Ho%Q&#&0Xf4=!=gZrl&", 0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1726);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.getNearestEntryForKey("f", (-733));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.getEntry("");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator", "C^d##Y_}#cc5,l;I");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("C^d##Y_}#cc5,l;I", "C^d##Y_}#cc5,l;I", biFunction0);
      patriciaTrie0.getEntry("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator", "C^d##Y_}#cc5,l;I");
      patriciaTrie0.getEntry("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("N(}RXc^`3pF]3UfS<'", patriciaTrie0);
      patriciaTrie1.get("N(}RXc^`3pF]3UfS<'");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, 2853);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("aYF<`]`el9k5A", "aYF<`]`el9k5A");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable0, 2);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 1);
      patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      patriciaTrie0.floorEntry(">qlKUj]f\"8dS$)UIs62");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("z5=`", "jX4?h#jGf");
      patriciaTrie0.firstKey();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("jX4?h#jGf", "");
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(60);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.containsKey("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.containsKey("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.put("Kt", "Kt");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(")", ")");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 1056, 1056);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("S;IUe5,MZfNc", "S;IUe5,MZfNc");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("S;IUe5,MZfNc", 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("#%RM*!c[s", "#%RM*!c[s", 3852);
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("keyAnalycer", "keyAnalycer");
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 1220);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        patriciaTrie0.get(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-3024));
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Lui=b", "Lui=b", (-1349));
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 4382);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 32768);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries", (-532));
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("J%5q*", "mn*-6TsB`-$'x3u?;8", 1);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jX4?h#jGf", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("oFEQiELp%!");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jX4?h#jGf", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      patriciaTrie0.put("D`", "");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(patriciaTrie0, integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>((AbstractMap.SimpleEntry<Object, String>) null, abstractMap_SimpleEntry2, 709);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("P;", "P;");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>(integer0, abstractMap_SimpleImmutableEntry1, 0);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("kx$", "kx$");
      patriciaTrie0.put("", "`2]Mq*P4>0h';bhbaR");
      patriciaTrie0.lowerEntry("]NmC4dqS02k@T");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.toString();
      patriciaTrie0.entrySet();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.select("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap((String) null, "LUB#},K*Wn:vfB");
      patriciaTrie0.put("LUB#},K*Wn:vfB", "LUB#},K*Wn:vfB");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("LUB#},K*Wn:vfB", sortedMap0, (-880));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, (-880));
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" [", sortedMap0, 1280);
      Integer integer0 = new Integer((-509));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, integer0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, "qS{|:rDY_xF(R_U,W", (-509));
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("Entry(key=Trie[0]={\n}\n= [0], value=0, parent=null, left=Trie[0]={\n}\n= [0], right=null, predecessor=Trie[0]={\n}\n= [0])", "%04^vb?}kyT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(192);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 10);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("key=", "key=", 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("key=", "h^I", (-1));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, 26);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", hashMap0, 2853);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, 2853);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, 2853);
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jX4?h#jGf", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, patriciaTrie0, (-1));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer((-3024));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, integer0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "Y~T@G{7+rz%IHpaE*", 71);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "Y~T@G{7+rz%IHpaE*", 71);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, "`2]Mq*P4>0h';bhbaR", 2);
      patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jX4?h#jGf", "");
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "jX4?h#jGf");
      patriciaTrie0.lowerEntry("oFEQiELp%!");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.lowerEntry("]mC4dqS02k;T");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator", "C^d##Y_}#cc5,l;I");
      patriciaTrie0.put("]", (String) null);
      patriciaTrie0.lowerEntry("G&Z*");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-3744));
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 321);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "vF;9vJ8e`P3<8Q[+", (-1944));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-3795));
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "j)eh9d![sR<b");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("}\n", 3, (-98));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "j)eh9d![sR<b");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.subtree("7O@*", 2113, 2113);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("g/Pl%?0ak,tm5*a*", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.subtree("|q_+FSv:", 22, 22);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.subtree("S;IUe5,MZfNc", 16, 16);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer0 = new Integer((-532));
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", integer0);
      patriciaTrie0.floorEntry("The offsets and lengths must be at Character boundaries");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.floorEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.floorEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.floorEntry(">qlKUj]f\"8dS$)UIs62");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("rh*L", "rh*L");
      patriciaTrie0.lowerEntry("rh*L");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.lowerEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", (String) null);
      patriciaTrie0.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("(+r6CWKh(A", (String) null);
      patriciaTrie0.higherEntry("(+r6CWKh(A");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("jX4?h#jGf", "");
      patriciaTrie0.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "j)eh9d![sR<b");
      patriciaTrie0.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("z5=`", "jX4?h#jGf");
      patriciaTrie0.put("jX4?h#jGf", "\"");
      patriciaTrie0.previousKey("z5=`");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("z5=`", "jX4?h#jGf");
      patriciaTrie0.previousKey("z5=`");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.previousKey(";09:QPZe%p");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1726);
      Integer integer1 = patriciaTrie0.put("=", integer0);
      patriciaTrie0.put("", integer1);
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "]9ull");
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      patriciaTrie0.nextKey("ZO[^'UoO~ X8le;)\u0000");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("-", "-");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put(" > ", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]NmC4dqS02k;T");
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "jX4?h#BGf", (-509));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "8", 1833);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 3150);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      patriciaTrie1.put("N(}RXc^`3pF]3UfS<'", patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("-", "-");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("=PK\"&} ({E8xa[I,", "UA<:}", 3);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 3);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(")", ")");
      Object object0 = patriciaTrie0.put("DfK%MV+/0\"", (Object) null);
      assertNull(object0);
      
      patriciaTrie0.put("k1&<AnalyneR", "k1&<AnalyneR");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("zR!", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.put("", (Object) null);
      patriciaTrie0.put("fromKey > toKey", "fromKey > toKey");
      Object object0 = patriciaTrie0.remove((Object) "zR!");
      assertNotNull(object0);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("^od-W", "^od-W");
      patriciaTrie0.put("m^BU7dbLno6}", "m^BU7dbLno6}");
      patriciaTrie0.put("Kt", "Kt");
      Object object0 = patriciaTrie0.remove((Object) "^od-W");
      assertEquals("^od-W", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("@VR`ye9e0QT$!52+SEb", "$f(\"C", 1303);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2125));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("M-7>z'*/w(zw[q");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("^od-W", "^od-W");
      patriciaTrie0.put("m^BU7dbLno6}", "m^BU7dbLno6}");
      Object object0 = patriciaTrie0.remove((Object) "^od-W");
      assertEquals("^od-W", object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("keyAnalycer", "keyAnalycer");
      Object object0 = patriciaTrie0.remove((Object) "keyAnalyzer");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Object object0 = patriciaTrie0.remove((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = patriciaTrie0.remove((Object) "DfK%MV+/0\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Collection<String> collection0 = patriciaTrie0.values();
      Collection<String> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.keySet();
      Set<String> set0 = patriciaTrie1.keySet();
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Fre", "Fre");
      String string0 = patriciaTrie0.replace("t57(5(m^i", "<R/*F>_0O");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.replace((String) null, (String) null, "bqJX3.=roGL9(x%eBe");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("-", "-");
      patriciaTrie0.put("TEB;'PssO>p", "-");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Map.Entry<String, Object> map_Entry0 = patriciaTrie1.select("");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = patriciaTrie0.selectKey("]={\n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("-", "-");
      String string0 = patriciaTrie0.selectKey("TEB;'PssO>p");
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.selectValue("VTN");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTri$TrieMapIterator", "C^d##Y_}#cc5,l;I");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("C^d##Y_}#cc5,l;I", "C^d##Y_}#cc5,l;I", biFunction0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(" [");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.get((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.put("ICzd:X#I rd", "ICzd:X#I rd");
      patriciaTrie0.put("Kt:", "Kt:");
      Object object0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(")", ")");
      patriciaTrie0.put("DfK%MV+/0\"", (Object) null);
      patriciaTrie0.put("k1&<AnalyneR", "k1&<AnalyneR");
      Object object0 = patriciaTrie0.remove((Object) "DfK%MV+/0\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", (String) null);
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "vmwU)DuoO^\"]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("N(}RXc^`3pF]3UfS<'", patriciaTrie0);
      Object object0 = patriciaTrie1.selectValue("N(}RXc^`3pF]3UfS<'");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<String> set0 = patriciaTrie0.keySet();
      patriciaTrie0.put("s,", set0);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "s,", 35);
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals(1, set0.size());
      assertEquals("Entry(key=[s,] [35], value=s,, parent=null, left=[s,] [35], right=null, predecessor=[s,] [35])", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Collection<String> collection0 = patriciaTrie0.values();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-899));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, collection0, 3603);
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=null=null [3603], value=[], parent=null, left=null=null [3603], right=null, predecessor=null=null [3603])", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.KeyAnalyzer");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("S;IUe5,MZfNc", "S;IUe5,MZfNc");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("S;IUe5,MZfNc", 16, 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("~p7M?|TE%BwA*:A(4");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "j)eh9d![sR<b");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = patriciaTrie1.compute("", biFunction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("_y");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }
}
