/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:38:15 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap(")i", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("K");
      patriciaTrie0.put("", "");
      patriciaTrie1.put("must have a from&or toD", (Object) null);
      boolean boolean0 = AbstractBitwiseTrie.compare(patriciaTrie1, sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-721));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-721));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key= [-721], value=, parent= [-721], left= [-721], right=null, predecessor= [-721])", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, abstractMap_SimpleImmutableEntry0, (-877));
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=0 [-877], value=null=null, parent=null, left=0 [-877], right=null, predecessor=0 [-877])", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", (String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("\n", 80, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have a from or to!", "");
      patriciaTrie0.put("X", "X");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("\u0000MZj`x`|n>?hDprJT");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("doeo} W12S%b^c", "");
      patriciaTrie0.put("Dp#Cr3", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("`=?GI?");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("=");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1719));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("m3", "\n");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("fC", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      int int0 = patriciaTrie0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]f}TiZ{\n", "]f}TiZ{\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("=");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      String string0 = patriciaTrie0.remove((Object) "\n");
      assertNotNull(string0);
      assertEquals("}\n", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("/-^oBMQQ", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", 288);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "Entry(key=288 [288], value=null, parent=null, left=288 [288], right=null, predecessor=288 [288])", 128);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("EP,J>%X7Vf!eP", "F~`.");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("cdNH+`Q{D9<4Hs(A_+~", patriciaTrie0, 641);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 641);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("F~`.");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.put("EP,J>%X7Vf!eP", "F~`.");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(1005);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1124);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 16);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0.predecessor, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("`\n", "`\n");
      patriciaTrie0.put("m3", "`\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", ".l");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "~\"Jbmi4 e", 496);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 480);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("pO`@!mYL3h$V^v2", "<]2TJ>cDvS^?WcNi-J");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer(2732);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 3818);
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey((String) null, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 1);
      Object object0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("key=", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#ko@<Y%}yB", "#ko@<Y%}yB");
      Integer integer0 = new Integer(9);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(9);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.get("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", " is not an internal Entry!");
      String string0 = patriciaTrie0.get("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertEquals(" is not an internal Entry!", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("bhwZ", (Object) null, (-1342));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(2493);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("'=w=DP@lQ.gdjnyr_ku", integer0, 3077);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Qu[Te5");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("aol!w.rYwaDb!t", patriciaTrie0);
      patriciaTrie1.put("must have a from or to!", "");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Q|v.", "Q|v.");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", (Object) null);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      boolean boolean0 = patriciaTrie0.containsKey("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("`\n", "`\n");
      patriciaTrie0.put("m3", "`\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("`\n");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("gk7Xb1 f@EV/oZ");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "\n");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v.ma3\"xo~K%+P2L", hashMap0, (-1));
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(1);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("~z4ExKN!?YV=_jbh_IF", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 3147);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-54));
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer(16);
      // Undeclared exception!
      try { 
        patriciaTrie0.get(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-1355));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1355));
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 1048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer0, "'9PmZCnHKD'BXlN3;,");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("", abstractMap_SimpleEntry0, (-3));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 16);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-245));
      patriciaTrie0.put(" is not an internal Entry!", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("/", (String) null, 80);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Uu9!", (String) null, 80);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "m{!Qh>H`ekhuKS(o", 1);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("`=?GI?", patriciaTrie0, 1);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("", (AbstractMap.SimpleEntry<Integer, Object>) null, 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      String string0 = " + ";
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry(string0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Map.Entry<String, Object> map_Entry0 = patriciaTrie1.select("");
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("~81m4[", "ZI9#~$rN%8D%q%");
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("<`+;|NyNE@,%P}");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "");
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("+;_T(");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("\n", sortedMap0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 16);
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=\n={} [16], value=16, parent=null, left=\n={} [16], right=null, predecessor=\n={} [16])", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", patriciaTrie0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 16);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key==Trie[0]={\n}\n [16], value=16, parent=null, left==Trie[0]={\n}\n [16], right=null, )", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer((-2484));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer0, 622);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(")i", integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [622], value=-2484, parent=null, left=org.apache.commons.collections4.trie.AbstractBitwiseTrie [622], right=ROOT, predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [622])", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(412);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "Entry(", 0);
      abstractPatriciaTrie_TrieEntry0.left = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=412 [0], value=Entry(, parent=null, left=null, right=null, predecessor=412 [0])", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-364));
      patriciaTrie0.put("4e{D*\"N5l@SqN~[", integer0);
      Integer integer1 = new Integer(2);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge(" + ", integer1, biFunction0);
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[2]={\n  Entry(key= +  [11], value=2, parent=4e{D*\"N5l@SqN~[ [10], left= +  [11], right=4e{D*\"N5l@SqN~[ [10], predecessor= +  [11])\n  Entry(key=4e{D*\"N5l@SqN~[ [10], value=-364, parent=ROOT, left=ROOT, right= +  [11], predecessor= +  [11])\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key= [-1], value=-1, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer((-364));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 15);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("q[eY$^@:iy", "q[eY$^@:iy");
      patriciaTrie0.put("", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Qu[Te5");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("je>LO.", "_oY~g(r4jltWf0GW");
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 11);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", 64);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", " is not an internal Entry!");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie", 32, 32);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("\n", (-3), 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, (-9), (-2095));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 521, 521);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("[`#F_]d@rtG ", "");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, (-220), 1920);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("fC", 0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("}\n", 16, 16);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("}\n", 16, 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("\n");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("gk7Xb1 f@EV/oZ", "gk7Xb1 f@EV/oZ");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("gk7Xb1 f@EV/oZ");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("\n");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer((-3202));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.put("Qs\"%(X d", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("Qs\"%(X d");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-441));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put(" > ", integer0);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer((-441));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#ko@<Y%}yB", "#ko@<Y%}yB");
      Integer integer0 = new Integer(9);
      patriciaTrie0.put("", integer0);
      String string0 = patriciaTrie0.previousKey("#ko@<Y%}yB");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.nextKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      String string0 = patriciaTrie0.nextKey("&o09SY@ZuC7AlxJ-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have a from or to!", "");
      String string0 = patriciaTrie0.lastKey();
      assertEquals("must have a from or to!", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      String string0 = patriciaTrie0.firstKey();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", (String) null);
      patriciaTrie0.put("", ".l");
      String string0 = patriciaTrie0.nextKey("");
      assertEquals("org.apache.commons.collections4.trie.KeyAnalyzer", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]f}TiZ{\n", "]f}TiZ{\n");
      patriciaTrie0.put("vD)9W^Xjo", "]f}TiZ{\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("=");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "\n", 2828);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("X", "must have a from or to!");
      patriciaTrie0.put("must have a from or to!", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.put("g|", "wh(oFJ5v|&@G[");
      String string0 = patriciaTrie0.compute("must have a from or to!", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have a from or to!", "");
      patriciaTrie0.put("X", "X");
      patriciaTrie0.put("6/", (String) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      String string0 = patriciaTrie0.compute("must have a from or to!", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("must have a from or to!", "null");
      patriciaTrie0.put("}\n", "null");
      patriciaTrie0.put("null", "null");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      String string0 = patriciaTrie0.compute("must have a from or to!", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("muUt have a from or to!", "X");
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", "");
      patriciaTrie0.put("X", "X");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , any());
      String string0 = patriciaTrie0.compute("muUt have a from or to!", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Entry(", "S]M:%pnNVb", 1628);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 161);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("osx");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("q[eY$^@:iy", "q[eY$^@:iy");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Qu[Te5");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-3202));
      patriciaTrie0.put("", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "*ZwQ,RQi<}?)bfJHYC");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.remove((Object) "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Collection<String> collection0 = patriciaTrie0.values();
      Collection<String> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", " is not an internal Entry!");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string0 = patriciaTrie0.compute("VS", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Object object0 = patriciaTrie0.replace("9", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", (String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      Object object0 = patriciaTrie1.selectValue((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#ko@<Y%}yB", "#ko@<Y%}yB");
      Object object0 = patriciaTrie0.selectValue("D[VS<z %,jq)R~^I.O");
      assertEquals("#ko@<Y%}yB", object0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#ko@<Y%}yB", "#ko@<Y%}yB");
      Object object0 = patriciaTrie0.selectValue("#ko@<Y%}yB");
      assertEquals("#ko@<Y%}yB", object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.selectValue("EeVyEixvxo~s#]~q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", ".l");
      String string0 = patriciaTrie0.previousKey("parent=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.remove((Object) null, (Object) "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, (-212));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-212));
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("sg\n", "sg\n");
      String string0 = patriciaTrie0.put("sg\n", "m3");
      assertEquals("sg\n", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.put("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("-r", (String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("\n", "}\n");
      String string0 = patriciaTrie0.selectKey("\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("b");
      assertEquals(0, sortedMap0.size());
      
      patriciaTrie0.put("", "");
      patriciaTrie1.put("b", (Object) null);
      AbstractBitwiseTrie.compare(patriciaTrie1, sortedMap0);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("fk<JTG");
      patriciaTrie0.putIfAbsent("fk<JTG", "fk<JTG");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>((AbstractMap.SimpleImmutableEntry<String, Integer>) null, sortedMap0, 304);
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(sortedMap0.isEmpty());
      assertEquals("Entry(key=null [304], value={fk<JTG=fk<JTG}, parent=null, left=null [304], right=null, predecessor=null [304])", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("b");
      boolean boolean0 = AbstractBitwiseTrie.compare(patriciaTrie1, sortedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Collection<String> collection0 = patriciaTrie0.values();
      Object object0 = new Object();
      Integer integer0 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(object0, integer0, 144);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(collection0, integer0, 1467);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("Gjjhc?Rhss^P");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>((AbstractMap.SimpleImmutableEntry<String, Integer>) null, sortedMap0, 896);
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=null [896], value={}, parent=null, left=null [896], right=null, predecessor=null [896])", string0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("\n", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap(")i", ")i");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("q[eY$^@:iy");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
