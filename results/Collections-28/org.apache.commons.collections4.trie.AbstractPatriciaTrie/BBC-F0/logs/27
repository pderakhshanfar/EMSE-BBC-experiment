* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 11316
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 630756631
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:53:48.727 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:53:48.727 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:54:12.739 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 305s and 58 generations, 40970 statements, best individual has fitness: 1573.0
* Minimizing test suite
[MASTER] 03:59:58.322 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 52%
* Total number of goals: 822
* Number of covered goals: 431
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 602
* Number of covered goals: 274
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 569
* Number of covered goals: 304
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 186
* Number of covered goals: 96
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 45%
* Total number of goals: 602
* Number of covered goals: 271
* Generated 125 tests with total length 1888
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 04:00:50.518 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7109666666666666% of time used, but only 18/125 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 04:01:06.934 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_40_1605585666671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_40_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_40_1605585666671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_40_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:06.934 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:06.934 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:06.939 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>>: 51
[MASTER] 04:01:06.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_40_1605585666671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_40_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:06.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:06.954 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_40_1605585666671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_40_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:06 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.function.BiFunction;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_40_tmp__ESTest extends AbstractPatriciaTrie_40_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer((-2));
28:       assertEquals((-2), (int)integer0);
29:       assertNotNull(integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       Integer integer1 = new Integer((-2));
38:       assertEquals((-2), (int)integer1);
39:       assertNotNull(integer1);
40:       assertTrue(integer1.equals((Object)integer0));
41:       
42:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertEquals("", string0);
47:       assertNotNull(string0);
48:       assertTrue(integer0.equals((Object)integer1));
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
58:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
59:       assertTrue(integer1.equals((Object)integer0));
60:       
61:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
71:       
72:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(boolean0);
77:       assertTrue(integer0.equals((Object)integer1));
78:       
79:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
80:       assertNotNull(patriciaTrie0);
81:       
82:       Integer integer2 = new Integer((-2));
83:       assertEquals((-2), (int)integer2);
84:       assertNotNull(integer2);
85:       assertTrue(integer2.equals((Object)integer1));
86:       assertTrue(integer2.equals((Object)integer0));
87:       
88:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("k@Z i&n~!H^:7", integer2);
89:       assertNotNull(abstractMap_SimpleEntry0);
90:       assertTrue(integer2.equals((Object)integer1));
91:       assertTrue(integer2.equals((Object)integer0));
92:       
93:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, (-2));
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
97:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
98:       assertTrue(integer2.equals((Object)integer1));
99:       assertTrue(integer2.equals((Object)integer0));
100:       
101:       Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       assertNotNull(object0);
106:       assertTrue(integer2.equals((Object)integer1));
107:       assertTrue(integer2.equals((Object)integer0));
108:       
109:       Object object1 = patriciaTrie0.put("UIH9W)Xf9@\"LC`*", object0);
110:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
112:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
113:       assertNull(object1);
114:       assertTrue(integer2.equals((Object)integer1));
115:       assertTrue(integer2.equals((Object)integer0));
116:       
117:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
118:       assertNull(abstractPatriciaTrie_TrieEntry3);
119:       
120:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
121:       assertNotNull(patriciaTrie1);
122:       
123:       BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
124:       doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
125:       Integer integer3 = patriciaTrie1.compute(":|F6", biFunction0);
126:       assertNull(integer3);
127:       
128:       Integer integer4 = new Integer((-2));
129:       assertEquals((-2), (int)integer4);
130:       assertNotNull(integer4);
131:       assertTrue(integer4.equals((Object)integer2));
132:       assertTrue(integer4.equals((Object)integer0));
133:       assertTrue(integer4.equals((Object)integer1));
134:       
135:       Integer integer5 = patriciaTrie1.put("l>:a.2p'+[xh8hhE", integer4);
136:       assertNull(integer5);
137:       assertTrue(integer4.equals((Object)integer2));
138:       assertTrue(integer4.equals((Object)integer0));
139:       assertTrue(integer4.equals((Object)integer1));
140:       
141:       String string1 = patriciaTrie1.selectKey("QRc<");
142:       assertEquals("l>:a.2p'+[xh8hhE", string1);
143:       assertNotNull(string1);
144:       assertFalse(string1.equals((Object)string0));
145:   }
146: }
RegularFileObject[/tmp/EvoSuite_40_1605585666671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_40_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:06 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_40_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_40_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_40_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_40_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_40_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 04:01:06.974 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-2));
assertEquals((-2), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-2));
assertEquals((-2), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("", string0);
assertNotNull(string0);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)integer1));

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer2 = new Integer((-2));
assertEquals((-2), (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("k@Z i&n~!H^:7", integer2);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, (-2));
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(object0);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

Object object1 = patriciaTrie0.put("UIH9W)Xf9@\"LC`*", object0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNull(object1);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
assertNull(abstractPatriciaTrie_TrieEntry3);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
Integer integer3 = patriciaTrie1.compute(":|F6", biFunction0);
assertNull(integer3);

Integer integer4 = new Integer((-2));
assertEquals((-2), (int)integer4);
assertNotNull(integer4);
assertTrue(integer4.equals((Object)integer2));
assertTrue(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)integer1));

Integer integer5 = patriciaTrie1.put("l>:a.2p'+[xh8hhE", integer4);
assertNull(integer5);
assertTrue(integer4.equals((Object)integer2));
assertTrue(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)integer1));

String string1 = patriciaTrie1.selectKey("QRc<");
assertEquals("l>:a.2p'+[xh8hhE", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));


[MASTER] 04:01:07.834 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_46_1605585667665/org/apache/commons/collections4/trie/AbstractPatriciaTrie_46_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_46_1605585667665/org/apache/commons/collections4/trie/AbstractPatriciaTrie_46_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:07.864 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:07.864 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:07.865 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 48
[MASTER] 04:01:07.872 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_46_1605585667665/org/apache/commons/collections4/trie/AbstractPatriciaTrie_46_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:07.872 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:07.873 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_46_1605585667665/org/apache/commons/collections4/trie/AbstractPatriciaTrie_46_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:07 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_46_tmp__ESTest extends AbstractPatriciaTrie_46_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
29:       assertEquals(0, hashMap0.size());
30:       assertTrue(hashMap0.isEmpty());
31:       assertNotNull(hashMap0);
32:       
33:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
34:       assertEquals(0, hashMap0.size());
35:       assertTrue(hashMap0.isEmpty());
36:       assertNotNull(patriciaTrie0);
37:       
38:       String string0 = "+xMgn";
39:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("+xMgn", patriciaTrie0, 0);
40:       assertEquals(0, hashMap0.size());
41:       assertTrue(hashMap0.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
49:       assertNotNull(comparator1);
50:       
51:       String string1 = "i]_:F3\"IC2Q";
52:       String string2 = hashMap0.put("+xMgn", "i]_:F3\"IC2Q");
53:       assertEquals(1, hashMap0.size());
54:       assertFalse(hashMap0.isEmpty());
55:       assertNull(string2);
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
62:       
63:       String string3 = hashMap0.put("i]_:F3\"IC2Q", "+xMgn");
64:       assertEquals(2, hashMap0.size());
65:       assertFalse(hashMap0.isEmpty());
66:       assertNull(string3);
67:       
68:       // Undeclared exception!
69:       try { 
70:         patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
71:         fail("Expecting exception: NullPointerException");
72:       
73:       } catch(NullPointerException e) {
74:          //
75:          // no message in exception (getMessage() returned null)
76:          //
77:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
78:       }
79:   }
80: }
RegularFileObject[/tmp/EvoSuite_46_1605585667665/org/apache/commons/collections4/trie/AbstractPatriciaTrie_46_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:07 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_46_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_46_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_46_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_46_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:07.875 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

String string0 = "+xMgn";
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("+xMgn", patriciaTrie0, 0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

String string1 = "i]_:F3\"IC2Q";
String string2 = hashMap0.put("+xMgn", "i]_:F3\"IC2Q");
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string3 = hashMap0.put("i]_:F3\"IC2Q", "+xMgn");
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string3);

patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);

[MASTER] 04:01:08.356 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_49_1605585668216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_49_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_49_1605585668216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_49_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:08.359 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:08.359 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:08.360 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>>: 50
[MASTER] 04:01:08.360 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_49_1605585668216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_49_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:08.361 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:08.361 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_49_1605585668216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_49_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_49_tmp__ESTest extends AbstractPatriciaTrie_49_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer((-2));
27:       assertEquals((-2), (int)integer0);
28:       assertNotNull(integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       Integer integer1 = new Integer((-2));
37:       assertEquals((-2), (int)integer1);
38:       assertNotNull(integer1);
39:       assertTrue(integer1.equals((Object)integer0));
40:       
41:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertEquals("", string0);
46:       assertNotNull(string0);
47:       assertTrue(integer0.equals((Object)integer1));
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
51:       assertNotNull(comparator1);
52:       
53:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
58:       assertTrue(integer1.equals((Object)integer0));
59:       
60:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
70:       
71:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertFalse(boolean0);
76:       assertTrue(integer0.equals((Object)integer1));
77:       
78:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
79:       assertNotNull(patriciaTrie0);
80:       
81:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("UIH9W)Xf9@\"LC`*", "null", (-2));
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       
87:       boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isExternalNode();
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
91:       assertTrue(boolean1);
92:       assertFalse(boolean1 == boolean0);
93:       
94:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "FEdY*FZ}>BWz", 256);
95:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
98:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
99:       
100:       String string1 = abstractPatriciaTrie_TrieEntry3.toString();
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
104:       assertEquals("Entry(key= [256], value=FEdY*FZ}>BWz, parent=null, left= [256], right=null, predecessor= [256])", string1);
105:       assertNotNull(string1);
106:       assertFalse(string1.equals((Object)string0));
107:       
108:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
109:       assertNull(abstractPatriciaTrie_TrieEntry4);
110:   }
111: }
RegularFileObject[/tmp/EvoSuite_49_1605585668216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_49_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_49_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_49_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_49_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_49_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:08.363 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-2));
assertEquals((-2), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-2));
assertEquals((-2), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertEquals("", string0);
assertNotNull(string0);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)integer1));

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("UIH9W)Xf9@\"LC`*", "null", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "FEdY*FZ}>BWz", 256);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

String string1 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertEquals("Entry(key= [256], value=FEdY*FZ}>BWz, parent=null, left= [256], right=null, predecessor= [256])", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
assertNull(abstractPatriciaTrie_TrieEntry4);


[MASTER] 04:01:09.454 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1605585669244/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1605585669244/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:09.454 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:09.454 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:09.455 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>>: 53
[MASTER] 04:01:09.459 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_56_1605585669244/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:09.460 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:09.460 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1605585669244/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:09 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_56_tmp__ESTest extends AbstractPatriciaTrie_56_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Integer integer0 = new Integer((-2));
30:       assertEquals((-2), (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       Integer integer1 = new Integer((-2));
40:       assertEquals((-2), (int)integer1);
41:       assertNotNull(integer1);
42:       assertTrue(integer1.equals((Object)integer0));
43:       
44:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertEquals("", string0);
49:       assertNotNull(string0);
50:       assertTrue(integer0.equals((Object)integer1));
51:       
52:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
54:       assertNotNull(comparator1);
55:       
56:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
61:       assertTrue(integer1.equals((Object)integer0));
62:       
63:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
73:       
74:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertFalse(boolean0);
79:       assertTrue(integer0.equals((Object)integer1));
80:       
81:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie0);
83:       
84:       Integer integer2 = new Integer((-2));
85:       assertEquals((-2), (int)integer2);
86:       assertNotNull(integer2);
87:       assertTrue(integer2.equals((Object)integer0));
88:       assertTrue(integer2.equals((Object)integer1));
89:       
90:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("k@Z i&n~!H^:7", integer2);
91:       assertNotNull(abstractMap_SimpleEntry0);
92:       assertTrue(integer2.equals((Object)integer0));
93:       assertTrue(integer2.equals((Object)integer1));
94:       
95:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, (-2));
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
99:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
100:       assertTrue(integer2.equals((Object)integer0));
101:       assertTrue(integer2.equals((Object)integer1));
102:       
103:       Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertNotNull(object0);
108:       assertTrue(integer2.equals((Object)integer0));
109:       assertTrue(integer2.equals((Object)integer1));
110:       
111:       Object object1 = patriciaTrie0.put("UIH9W)Xf9@\"LC`*", object0);
112:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
115:       assertNull(object1);
116:       assertTrue(integer2.equals((Object)integer0));
117:       assertTrue(integer2.equals((Object)integer1));
118:       
119:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
120:       assertNull(abstractPatriciaTrie_TrieEntry3);
121:       
122:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
123:       assertNotNull(patriciaTrie1);
124:       
125:       OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
126:       assertFalse(orderedMapIterator0.hasNext());
127:       assertFalse(orderedMapIterator0.hasPrevious());
128:       assertNotNull(orderedMapIterator0);
129:       
130:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
131:       assertNotNull(patriciaTrie2);
132:       
133:       SortedMap<String, String> sortedMap0 = patriciaTrie2.tailMap("");
134:       assertTrue(sortedMap0.isEmpty());
135:       assertEquals(0, sortedMap0.size());
136:       assertNotNull(sortedMap0);
137:       
138:       String string1 = patriciaTrie2.put("", "Kq,m5XHe");
139:       assertNull(string1);
140:       
141:       Integer integer3 = new Integer(1103);
142:       assertEquals(1103, (int)integer3);
143:       assertNotNull(integer3);
144:       assertFalse(integer3.equals((Object)integer0));
145:       assertFalse(integer3.equals((Object)integer1));
146:       assertFalse(integer3.equals((Object)integer2));
147:       
148:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Kq,m5XHe", integer3, 1103);
149:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
151:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
152:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
153:       assertFalse(integer3.equals((Object)integer0));
154:       assertFalse(integer3.equals((Object)integer1));
155:       assertFalse(integer3.equals((Object)integer2));
156:       
157:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
158:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
159:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
160:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
161:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
162:       
163:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry4);
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
165:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
166:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
167:       assertNull(abstractPatriciaTrie_TrieEntry6);
168:       assertFalse(integer3.equals((Object)integer0));
169:       assertFalse(integer3.equals((Object)integer1));
170:       assertFalse(integer3.equals((Object)integer2));
171:       
172:       Set<String> set0 = patriciaTrie2.keySet();
173:       assertFalse(set0.isEmpty());
174:       assertEquals(1, set0.size());
175:       assertFalse(set0.contains("UIH9W)Xf9@\"LC`*"));
176:       assertTrue(set0.contains(""));
177:       assertNotNull(set0);
178:   }
179: }
RegularFileObject[/tmp/EvoSuite_56_1605585669244/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:09 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_56_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:09.471 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-2));
assertEquals((-2), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-2));
assertEquals((-2), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertEquals("", string0);
assertNotNull(string0);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)integer1));

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer2 = new Integer((-2));
assertEquals((-2), (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("k@Z i&n~!H^:7", integer2);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, (-2));
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(object0);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

Object object1 = patriciaTrie0.put("UIH9W)Xf9@\"LC`*", object0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNull(object1);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
assertNull(abstractPatriciaTrie_TrieEntry3);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

SortedMap<String, String> sortedMap0 = patriciaTrie2.tailMap("");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

String string1 = patriciaTrie2.put("", "Kq,m5XHe");
assertNull(string1);

Integer integer3 = new Integer(1103);
assertEquals(1103, (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Kq,m5XHe", integer3, 1103);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry6);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));

Set<String> set0 = patriciaTrie2.keySet();
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertFalse(set0.contains("UIH9W)Xf9@\"LC`*"));
assertTrue(set0.contains(""));
assertNotNull(set0);


[MASTER] 04:01:13.764 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_92_1605585673612/org/apache/commons/collections4/trie/AbstractPatriciaTrie_92_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_92_1605585673612/org/apache/commons/collections4/trie/AbstractPatriciaTrie_92_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:13.764 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:13.764 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:13.767 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>>: 52
[MASTER] 04:01:13.768 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_92_1605585673612/org/apache/commons/collections4/trie/AbstractPatriciaTrie_92_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:13.768 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:13.770 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_92_1605585673612/org/apache/commons/collections4/trie/AbstractPatriciaTrie_92_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:13 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_92_tmp__ESTest extends AbstractPatriciaTrie_92_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer((-2));
29:       assertEquals((-2), (int)integer0);
30:       assertNotNull(integer0);
31:       
32:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
36:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
37:       
38:       Integer integer1 = new Integer((-2));
39:       assertEquals((-2), (int)integer1);
40:       assertNotNull(integer1);
41:       assertTrue(integer1.equals((Object)integer0));
42:       
43:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       assertEquals("", string0);
48:       assertNotNull(string0);
49:       assertTrue(integer0.equals((Object)integer1));
50:       
51:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
52:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
53:       assertNotNull(comparator1);
54:       
55:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
60:       assertTrue(integer1.equals((Object)integer0));
61:       
62:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
72:       
73:       Integer integer2 = new Integer((-2435));
74:       assertEquals((-2435), (int)integer2);
75:       assertNotNull(integer2);
76:       assertFalse(integer2.equals((Object)integer1));
77:       assertFalse(integer2.equals((Object)integer0));
78:       
79:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
80:       assertTrue(hashMap0.isEmpty());
81:       assertEquals(0, hashMap0.size());
82:       assertNotNull(hashMap0);
83:       
84:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
85:       assertTrue(hashMap0.isEmpty());
86:       assertEquals(0, hashMap0.size());
87:       assertNotNull(patriciaTrie0);
88:       
89:       Integer integer3 = patriciaTrie0.put("O qjk`", integer1);
90:       assertTrue(hashMap0.isEmpty());
91:       assertEquals(0, hashMap0.size());
92:       assertNull(integer3);
93:       assertTrue(integer1.equals((Object)integer0));
94:       assertFalse(integer1.equals((Object)integer2));
95:       
96:       Integer integer4 = new Integer((-3045));
97:       assertEquals((-3045), (int)integer4);
98:       assertNotNull(integer4);
99:       assertFalse(integer4.equals((Object)integer1));
100:       assertFalse(integer4.equals((Object)integer0));
101:       assertFalse(integer4.equals((Object)integer2));
102:       
103:       Integer integer5 = new Integer(1952);
104:       assertEquals(1952, (int)integer5);
105:       assertNotNull(integer5);
106:       assertFalse(integer5.equals((Object)integer1));
107:       assertFalse(integer5.equals((Object)integer4));
108:       assertFalse(integer5.equals((Object)integer0));
109:       assertFalse(integer5.equals((Object)integer2));
110:       
111:       Integer integer6 = patriciaTrie0.put("", integer5);
112:       assertTrue(hashMap0.isEmpty());
113:       assertEquals(0, hashMap0.size());
114:       assertNull(integer6);
115:       assertFalse(integer5.equals((Object)integer1));
116:       assertFalse(integer5.equals((Object)integer4));
117:       assertFalse(integer5.equals((Object)integer0));
118:       assertFalse(integer5.equals((Object)integer2));
119:       
120:       int int0 = patriciaTrie0.size();
121:       assertTrue(hashMap0.isEmpty());
122:       assertEquals(0, hashMap0.size());
123:       assertEquals(2, int0);
124:       
125:       String string1 = patriciaTrie0.previousKey("O qjk`");
126:       assertTrue(hashMap0.isEmpty());
127:       assertEquals(0, hashMap0.size());
128:       assertEquals("", string1);
129:       assertNotNull(string1);
130:       assertTrue(string1.equals((Object)string0));
131:       
132:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
133:       assertNotNull(patriciaTrie1);
134:       
135:       Integer integer7 = new Integer(1);
136:       assertEquals(1, (int)integer7);
137:       assertNotNull(integer7);
138:       assertFalse(integer7.equals((Object)integer0));
139:       assertFalse(integer7.equals((Object)integer1));
140:       assertFalse(integer7.equals((Object)integer2));
141:       assertFalse(integer7.equals((Object)int0));
142:       assertFalse(integer7.equals((Object)integer5));
143:       assertFalse(integer7.equals((Object)integer4));
144:       
145:       Integer integer8 = patriciaTrie0.put("", (Integer) null);
146:       assertTrue(hashMap0.isEmpty());
147:       assertEquals(0, hashMap0.size());
148:       assertEquals(1952, (int)integer8);
149:       assertNotNull(integer8);
150:       assertFalse(integer8.equals((Object)integer7));
151:       assertFalse(integer8.equals((Object)integer4));
152:       assertFalse(integer8.equals((Object)integer0));
153:       assertFalse(integer8.equals((Object)integer1));
154:       assertFalse(integer8.equals((Object)int0));
155:       assertFalse(integer8.equals((Object)integer2));
156:       
157:       Integer integer9 = new Integer(32768);
158:       assertEquals(32768, (int)integer9);
159:       assertNotNull(integer9);
160:       assertFalse(integer9.equals((Object)integer2));
161:       assertFalse(integer9.equals((Object)integer5));
162:       assertFalse(integer9.equals((Object)int0));
163:       assertFalse(integer9.equals((Object)integer8));
164:       assertFalse(integer9.equals((Object)integer4));
165:       assertFalse(integer9.equals((Object)integer0));
166:       assertFalse(integer9.equals((Object)integer1));
167:       assertFalse(integer9.equals((Object)integer7));
168:       
169:       // Undeclared exception!
170:       try { 
171:         patriciaTrie0.remove((Object) integer9);
172:         fail("Expecting exception: ClassCastException");
173:       
174:       } catch(ClassCastException e) {
175:          //
176:          // no message in exception (getMessage() returned null)
177:          //
178:       }
179:   }
180: }
RegularFileObject[/tmp/EvoSuite_92_1605585673612/org/apache/commons/collections4/trie/AbstractPatriciaTrie_92_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:13 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_92_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_92_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_92_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_92_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:13.776 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-2));
assertEquals((-2), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-2));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-2));
assertEquals((-2), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("", string0);
assertNotNull(string0);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-2));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Integer integer2 = new Integer((-2435));
assertEquals((-2435), (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer3 = patriciaTrie0.put("O qjk`", integer1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(integer3);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));

Integer integer4 = new Integer((-3045));
assertEquals((-3045), (int)integer4);
assertNotNull(integer4);
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));

Integer integer5 = new Integer(1952);
assertEquals(1952, (int)integer5);
assertNotNull(integer5);
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));

Integer integer6 = patriciaTrie0.put("", integer5);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(integer6);
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));

int int0 = patriciaTrie0.size();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals(2, int0);

String string1 = patriciaTrie0.previousKey("O qjk`");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals("", string1);
assertNotNull(string1);
assertTrue(string1.equals((Object)string0));

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer7 = new Integer(1);
assertEquals(1, (int)integer7);
assertNotNull(integer7);
assertFalse(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer1));
assertFalse(integer7.equals((Object)integer2));
assertFalse(integer7.equals((Object)int0));
assertFalse(integer7.equals((Object)integer5));
assertFalse(integer7.equals((Object)integer4));

Integer integer8 = patriciaTrie0.put("", (Integer) null);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals(1952, (int)integer8);
assertNotNull(integer8);
assertFalse(integer8.equals((Object)integer7));
assertFalse(integer8.equals((Object)integer4));
assertFalse(integer8.equals((Object)integer0));
assertFalse(integer8.equals((Object)integer1));
assertFalse(integer8.equals((Object)int0));
assertFalse(integer8.equals((Object)integer2));

Integer integer9 = new Integer(32768);
assertEquals(32768, (int)integer9);
assertNotNull(integer9);
assertFalse(integer9.equals((Object)integer2));
assertFalse(integer9.equals((Object)integer5));
assertFalse(integer9.equals((Object)int0));
assertFalse(integer9.equals((Object)integer8));
assertFalse(integer9.equals((Object)integer4));
assertFalse(integer9.equals((Object)integer0));
assertFalse(integer9.equals((Object)integer1));
assertFalse(integer9.equals((Object)integer7));

patriciaTrie0.remove((Object) integer9);

[MASTER] 04:01:13.998 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_95_1605585673939/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_95_1605585673939/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:14.000 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:14.000 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:14.001 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Integer>>,java.lang.String>>: 104
[MASTER] 04:01:14.002 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_95_1605585673939/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:14.008 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:14.009 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_95_1605585673939/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:13 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_95_tmp__ESTest extends AbstractPatriciaTrie_95_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
30:       assertNotNull(patriciaTrie1);
31:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
32:       
33:       Integer integer0 = new Integer((-42));
34:       assertEquals((-42), (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       String string0 = patriciaTrie1.nextKey("");
38:       assertNotSame(patriciaTrie0, patriciaTrie1);
39:       assertNotSame(patriciaTrie1, patriciaTrie0);
40:       assertNull(string0);
41:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
42:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
43:       
44:       Integer integer1 = new Integer((-42));
45:       assertEquals((-42), (int)integer1);
46:       assertNotNull(integer1);
47:       assertTrue(integer1.equals((Object)integer0));
48:       
49:       Integer integer2 = new Integer((-42));
50:       assertEquals((-42), (int)integer2);
51:       assertNotNull(integer2);
52:       assertTrue(integer2.equals((Object)integer0));
53:       assertTrue(integer2.equals((Object)integer1));
54:       
55:       Integer integer3 = new Integer((-42));
56:       assertEquals((-42), (int)integer3);
57:       assertNotNull(integer3);
58:       assertTrue(integer3.equals((Object)integer1));
59:       assertTrue(integer3.equals((Object)integer2));
60:       assertTrue(integer3.equals((Object)integer0));
61:       
62:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer3, integer3);
63:       assertNotNull(abstractMap_SimpleEntry0);
64:       assertTrue(integer3.equals((Object)integer1));
65:       assertTrue(integer3.equals((Object)integer2));
66:       assertTrue(integer3.equals((Object)integer0));
67:       
68:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
69:       assertNotNull(abstractMap_SimpleImmutableEntry0);
70:       assertTrue(integer3.equals((Object)integer1));
71:       assertTrue(integer3.equals((Object)integer2));
72:       assertTrue(integer3.equals((Object)integer0));
73:       
74:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0, 2);
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
79:       assertTrue(integer3.equals((Object)integer1));
80:       assertTrue(integer3.equals((Object)integer2));
81:       assertTrue(integer3.equals((Object)integer0));
82:       
83:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0, 944);
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
88:       assertTrue(integer3.equals((Object)integer1));
89:       assertTrue(integer3.equals((Object)integer2));
90:       assertTrue(integer3.equals((Object)integer0));
91:       
92:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
102:       
103:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
104:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
105:       assertNotNull(comparator1);
106:       
107:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
111:       assertTrue(boolean0);
112:       assertTrue(integer3.equals((Object)integer1));
113:       assertTrue(integer3.equals((Object)integer2));
114:       assertTrue(integer3.equals((Object)integer0));
115:   }
116: }
RegularFileObject[/tmp/EvoSuite_95_1605585673939/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:13 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_95_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:14.013 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

Integer integer0 = new Integer((-42));
assertEquals((-42), (int)integer0);
assertNotNull(integer0);

String string0 = patriciaTrie1.nextKey("");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNull(string0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

Integer integer1 = new Integer((-42));
assertEquals((-42), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = new Integer((-42));
assertEquals((-42), (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));

Integer integer3 = new Integer((-42));
assertEquals((-42), (int)integer3);
assertNotNull(integer3);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer3, integer3);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0, 2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0, 944);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(boolean0);
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));


[MASTER] 04:01:15.243 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1605585675169/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1605585675169/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:15.243 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:15.243 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:15.244 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.lang.Integer>>: 63
[MASTER] 04:01:15.245 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.util.AbstractMap.SimpleEntry>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.util.AbstractMap.SimpleEntry>>>>: 86
[MASTER] 04:01:15.245 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_111_1605585675169/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:15.245 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:15.259 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1605585675169/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:15 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_111_tmp__ESTest extends AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer(10);
29:       assertEquals(10, (int)integer0);
30:       assertNotNull(integer0);
31:       
32:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "*-+2PRK!q$Z$4/");
33:       assertNotNull(abstractMap_SimpleEntry0);
34:       
35:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
36:       assertNotNull(abstractMap_SimpleImmutableEntry0);
37:       
38:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
39:       assertNotNull(abstractMap_SimpleEntry1);
40:       
41:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
42:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
43:       assertNotNull(comparator1);
44:       
45:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String>(abstractMap_SimpleEntry1, "*-+2PRK!q$Z$4/", 10);
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
50:       
51:       String string0 = abstractMap_SimpleEntry0.setValue(" [");
52:       assertEquals("*-+2PRK!q$Z$4/", string0);
53:       assertNotNull(string0);
54:       
55:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String>(abstractMap_SimpleEntry1, "=", 10);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
60:       
61:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<Comparable<String>, Integer>> comparator4 = (Comparator<Map.Entry<Comparable<String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator3);
64:       assertNotNull(comparator4);
65:       
66:       Comparator<Map.Entry<String, Comparable<Object>>> comparator5 = Map.Entry.comparingByValue();
67:       assertNotNull(comparator5);
68:       
69:       String string1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry1, "");
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
73:       assertEquals("=", string1);
74:       assertNotNull(string1);
75:       assertFalse(string1.equals((Object)string0));
76:       
77:       String string2 = abstractPatriciaTrie_TrieEntry0.setValue("");
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
81:       assertEquals("*-+2PRK!q$Z$4/", string2);
82:       assertNotNull(string2);
83:       assertTrue(string2.equals((Object)string0));
84:       assertFalse(string2.equals((Object)string1));
85:       
86:       Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator6 = (Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>) comparator2);
87:       assertNotNull(comparator6);
88:       
89:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
99:       
100:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
101:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
110:       
111:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
112:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
114:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
115:       assertFalse(boolean0);
116:       
117:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
118:       assertEquals(0, hashMap0.size());
119:       assertTrue(hashMap0.isEmpty());
120:       assertNotNull(hashMap0);
121:       
122:       PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
123:       assertEquals(0, hashMap0.size());
124:       assertTrue(hashMap0.isEmpty());
125:       assertNotNull(patriciaTrie0);
126:       
127:       patriciaTrie0.decrementSize();
128:       assertEquals(0, hashMap0.size());
129:       assertTrue(hashMap0.isEmpty());
130:       
131:       // Undeclared exception!
132:       try { 
133:         patriciaTrie0.firstKey();
134:         fail("Expecting exception: NullPointerException");
135:       
136:       } catch(NullPointerException e) {
137:          //
138:          // no message in exception (getMessage() returned null)
139:          //
140:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
141:       }
142:   }
143: }
RegularFileObject[/tmp/EvoSuite_111_1605585675169/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:15 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:01:15.262 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(10);
assertEquals(10, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "*-+2PRK!q$Z$4/");
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String>(abstractMap_SimpleEntry1, "*-+2PRK!q$Z$4/", 10);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractMap_SimpleEntry0.setValue(" [");
assertEquals("*-+2PRK!q$Z$4/", string0);
assertNotNull(string0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, String>(abstractMap_SimpleEntry1, "=", 10);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<String>, Integer>> comparator4 = (Comparator<Map.Entry<Comparable<String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator3);
assertNotNull(comparator4);

Comparator<Map.Entry<String, Comparable<Object>>> comparator5 = Map.Entry.comparingByValue();
assertNotNull(comparator5);

String string1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry1, "");
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("=", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

String string2 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("*-+2PRK!q$Z$4/", string2);
assertNotNull(string2);
assertTrue(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));

Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator6 = (Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Comparable<String>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>) comparator2);
assertNotNull(comparator6);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

patriciaTrie0.decrementSize();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

patriciaTrie0.firstKey();

[MASTER] 04:01:19.056 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1605585675920/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1605585675920/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.java]]
[MASTER] 04:01:19.056 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:19.056 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:01:19.057 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 112
[MASTER] 04:01:19.057 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_121_1605585675920/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:01:19.057 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:01:19.058 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1605585675920/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:01:18 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_121_tmp__ESTest extends AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Set<String> set0 = patriciaTrie0.keySet();
31:       assertEquals(0, set0.size());
32:       assertTrue(set0.isEmpty());
33:       assertNotNull(set0);
34:       
35:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "&#a?:*;(W3\"BMJ(lA", (-422));
36:       assertEquals(0, set0.size());
37:       assertTrue(set0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(set0.contains("&#a?:*;(W3\"BMJ(lA"));
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       
44:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "", (-2249));
45:       assertEquals(0, set0.size());
46:       assertTrue(set0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(set0.contains("&#a?:*;(W3\"BMJ(lA"));
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
57:       assertEquals(0, set0.size());
58:       assertTrue(set0.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
68:       
69:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "", (-422));
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
73:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
74:       
75:       abstractPatriciaTrie_TrieEntry2.value = "";
76:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       
80:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("|x`e o");
81:       assertEquals(0, set0.size());
82:       assertTrue(set0.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       assertEquals("&#a?:*;(W3\"BMJ(lA", string0);
87:       assertFalse(set0.contains("|x`e o"));
88:       assertNotNull(string0);
89:       
90:       String string1 = abstractPatriciaTrie_TrieEntry2.toString();
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
94:       assertEquals("Entry(key=Trie[0]={\n}\n [-422], value=, parent=null, left=Trie[0]={\n}\n [-422], right=null, predecessor=Trie[0]={\n}\n [-422])", string1);
95:       assertNotNull(string1);
96:       assertFalse(string1.equals((Object)string0));
97:       
98:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
99:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
100:       assertEquals(0, set0.size());
101:       assertTrue(set0.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
106:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
111:       
112:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
113:       assertNotNull(comparator1);
114:       
115:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
116:       assertEquals(0, set0.size());
117:       assertTrue(set0.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
120:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
122:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
125:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
127:       
128:       abstractPatriciaTrie_TrieEntry0.toString();
129:   }
130: }
RegularFileObject[/tmp/EvoSuite_121_1605585675920/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:01:18 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 04:01:19.059 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "&#a?:*;(W3\"BMJ(lA", (-422));
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(set0.contains("&#a?:*;(W3\"BMJ(lA"));
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "", (-2249));
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(set0.contains("&#a?:*;(W3\"BMJ(lA"));
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "", (-422));
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry2.value = "";
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("|x`e o");
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("&#a?:*;(W3\"BMJ(lA", string0);
assertFalse(set0.contains("|x`e o"));
assertNotNull(string0);

String string1 = abstractPatriciaTrie_TrieEntry2.toString();
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertEquals("Entry(key=Trie[0]={\n}\n [-422], value=, parent=null, left=Trie[0]={\n}\n [-422], right=null, predecessor=Trie[0]={\n}\n [-422])", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());

abstractPatriciaTrie_TrieEntry0.toString();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/27
* Done!

* Computation finished
