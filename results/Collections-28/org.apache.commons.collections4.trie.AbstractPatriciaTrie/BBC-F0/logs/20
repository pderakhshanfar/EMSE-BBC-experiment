* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 17134
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 1829875512
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:52:17.263 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:52:17.283 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:52:53.318 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:53:00.249 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 03:55:22.646 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.lang.Object>.TrieEntry<java.lang.Integer, java.lang.Integer> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 305s and 42 generations, 34567 statements, best individual has fitness: 1554.0
* Minimizing test suite
[MASTER] 03:58:25.632 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 54%
* Total number of goals: 822
* Number of covered goals: 447
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 602
* Number of covered goals: 278
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 54%
* Total number of goals: 569
* Number of covered goals: 310
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 186
* Number of covered goals: 84
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 602
* Number of covered goals: 274
* Generated 142 tests with total length 2477
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:59:15.000 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6951833333333334% of time used, but only 15/142 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 03:59:28.545 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_22_1605585568300/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_22_1605585568300/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:28.568 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:28.568 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:28.574 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Integer>>: 62
[MASTER] 03:59:28.575 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_22_1605585568300/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:28.575 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:28.576 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_22_1605585568300/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:28 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_22_tmp__ESTest extends AbstractPatriciaTrie_22_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
29:       assertNotNull(hashMap0);
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       
33:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
34:       assertNotNull(patriciaTrie0);
35:       assertEquals(0, hashMap0.size());
36:       assertTrue(hashMap0.isEmpty());
37:       
38:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("delegate");
39:       assertNotNull(sortedMap0);
40:       assertEquals(0, hashMap0.size());
41:       assertTrue(hashMap0.isEmpty());
42:       assertEquals(0, sortedMap0.size());
43:       assertTrue(sortedMap0.isEmpty());
44:       
45:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
46:       assertNotNull(hashMap1);
47:       assertEquals(0, hashMap1.size());
48:       assertTrue(hashMap1.isEmpty());
49:       
50:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
51:       assertNotNull(patriciaTrie1);
52:       assertEquals(0, hashMap1.size());
53:       assertTrue(hashMap1.isEmpty());
54:       
55:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("delegate", (String) null, 269);
56:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       
61:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
63:       assertNotNull(comparator1);
64:       
65:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
66:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       
71:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
72:       assertNull(abstractPatriciaTrie_TrieEntry2);
73:       assertEquals(0, hashMap1.size());
74:       assertTrue(hashMap1.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       
82:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
83:       assertNotNull(patriciaTrie2);
84:       
85:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry((String) null);
86:       assertNull(abstractPatriciaTrie_TrieEntry3);
87:       
88:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) null, "");
89:       assertNotNull(abstractMap_SimpleImmutableEntry0);
90:       
91:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
92:       assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
93:       assertNotNull(abstractMap_SimpleImmutableEntry1);
94:       
95:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry1);
96:       assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
97:       assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
98:       assertNotNull(abstractMap_SimpleEntry0);
99:       
100:       Integer integer0 = new Integer(0);
101:       assertEquals(0, (int)integer0);
102:       assertNotNull(integer0);
103:       
104:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer>(abstractMap_SimpleEntry0, integer0, 0);
105:       assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
106:       assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
107:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
108:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
110:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
111:       
112:       boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
113:       assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
114:       assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
115:       assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
116:       assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
117:       assertFalse(boolean0);
118:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
121:   }
122: }
RegularFileObject[/tmp/EvoSuite_22_1605585568300/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:28 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_22_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:28.578 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertNotNull(patriciaTrie0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("delegate");
assertNotNull(sortedMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

HashMap<String, String> hashMap1 = new HashMap<String, String>();
assertNotNull(hashMap1);
assertEquals(0, hashMap1.size());
assertTrue(hashMap1.isEmpty());

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
assertNotNull(patriciaTrie1);
assertEquals(0, hashMap1.size());
assertTrue(hashMap1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("delegate", (String) null, 269);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertNull(abstractPatriciaTrie_TrieEntry2);
assertEquals(0, hashMap1.size());
assertTrue(hashMap1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) null, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry1);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry1);
assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleEntry0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer>(abstractMap_SimpleEntry0, integer0, 0);
assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());


[MASTER] 03:59:29.287 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_27_1605585569157/org/apache/commons/collections4/trie/AbstractPatriciaTrie_27_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_27_1605585569157/org/apache/commons/collections4/trie/AbstractPatriciaTrie_27_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:29.295 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:29.296 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:29.310 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 90
[MASTER] 03:59:29.310 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_27_1605585569157/org/apache/commons/collections4/trie/AbstractPatriciaTrie_27_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:29.310 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:29.315 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_27_1605585569157/org/apache/commons/collections4/trie/AbstractPatriciaTrie_27_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:29 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_27_tmp__ESTest extends AbstractPatriciaTrie_27_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator";
29:       Integer integer0 = new Integer(877);
30:       assertEquals(877, (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", integer0);
34:       assertNotNull(abstractMap_SimpleEntry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 877);
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       
42:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
43:       assertFalse(boolean0);
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       
48:       PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
49:       assertNotNull(patriciaTrie0);
50:       
51:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "|`d5X_;x.UC}-cQ");
52:       assertNotNull(abstractMap_SimpleEntry1);
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       
57:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry1);
58:       assertNotNull(abstractMap_SimpleImmutableEntry0);
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       
63:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
64:       assertNotNull(abstractMap_SimpleEntry2);
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       
69:       abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("|`d5X_;x.UC}-cQ", abstractMap_SimpleEntry2, 0);
75:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       
83:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
84:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("  ", abstractMap_SimpleEntry2);
85:       assertNull(abstractMap_SimpleEntry3);
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       
90:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
91:       assertNotNull(comparator1);
92:       
93:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
94:       assertFalse(string1.equals((Object)string0));
95:       assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator=877, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877])", string1);
96:       assertNotNull(string1);
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
100:       
101:       Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByKey();
102:       assertNotNull(comparator2);
103:       
104:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
105:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
107:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
109:       
110:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
111:       assertNull(abstractPatriciaTrie_TrieEntry3);
112:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
113:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       
122:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
123:       assertNotNull(patriciaTrie1);
124:       
125:       Integer integer1 = new Integer(0);
126:       assertFalse(integer1.equals((Object)integer0));
127:       assertEquals(0, (int)integer1);
128:       assertNotNull(integer1);
129:       
130:       Object object0 = patriciaTrie1.put("'iCwx~CfP~P2[S", integer1);
131:       assertFalse(integer1.equals((Object)integer0));
132:       assertNull(object0);
133:       
134:       Collection<Object> collection0 = patriciaTrie1.values();
135:       assertNotNull(collection0);
136:       assertFalse(collection0.contains(877));
137:       assertTrue(collection0.contains(0));
138:       
139:       PatriciaTrie<Integer> patriciaTrie2 = null;
140:       try {
141:         patriciaTrie2 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
142:         fail("Expecting exception: NullPointerException");
143:       
144:       } catch(NullPointerException e) {
145:          //
146:          // no message in exception (getMessage() returned null)
147:          //
148:       }
149:   }
150: }
RegularFileObject[/tmp/EvoSuite_27_1605585569157/org/apache/commons/collections4/trie/AbstractPatriciaTrie_27_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:29 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_27_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_27_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_27_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_27_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:29.319 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator";
Integer integer0 = new Integer(877);
assertEquals(877, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", integer0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 877);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "|`d5X_;x.UC}-cQ");
assertNotNull(abstractMap_SimpleEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry1);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("|`d5X_;x.UC}-cQ", abstractMap_SimpleEntry2, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("  ", abstractMap_SimpleEntry2);
assertNull(abstractMap_SimpleEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(string1.equals((Object)string0));
assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator=877, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator [877])", string1);
assertNotNull(string1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer(0);
assertFalse(integer1.equals((Object)integer0));
assertEquals(0, (int)integer1);
assertNotNull(integer1);

Object object0 = patriciaTrie1.put("'iCwx~CfP~P2[S", integer1);
assertFalse(integer1.equals((Object)integer0));
assertNull(object0);

Collection<Object> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertFalse(collection0.contains(877));
assertTrue(collection0.contains(0));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);

[MASTER] 03:59:29.695 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_29_1605585569430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_29_1605585569430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:29.722 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:29.722 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:29.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 56
[MASTER] 03:59:29.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_29_1605585569430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:29.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:29.724 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_29_1605585569430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:29 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_29_tmp__ESTest extends AbstractPatriciaTrie_29_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = "ROOT";
33:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("ROOT", patriciaTrie0);
34:       assertNotNull(abstractMap_SimpleEntry0);
35:       
36:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
37:       assertNotNull(abstractMap_SimpleImmutableEntry0);
38:       
39:       Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
40:       assertNotNull(comparator0);
41:       
42:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
43:       Comparator<Map.Entry<Object, Object>> comparator2 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
44:       assertNotNull(comparator2);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("ROOT", abstractMap_SimpleImmutableEntry0, 0);
47:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       
52:       Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       Object object0 = abstractMap_SimpleEntry0.setValue("ckmlQ;a`.");
54:       assertNotNull(object0);
55:       
56:       Comparator<Map.Entry<Integer, Integer>> comparator4 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator3);
57:       assertNotNull(comparator4);
58:       
59:       Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
60:       assertSame(comparator5, comparator0);
61:       assertNotNull(comparator5);
62:       
63:       patriciaTrie0.modCount = 0;
64:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
65:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       
70:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
71:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
72:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
73:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       
84:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
85:       assertNotNull(hashMap0);
86:       assertEquals(0, hashMap0.size());
87:       assertTrue(hashMap0.isEmpty());
88:       
89:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
90:       assertNotNull(patriciaTrie1);
91:       assertEquals(0, hashMap0.size());
92:       assertTrue(hashMap0.isEmpty());
93:       
94:       OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
95:       assertNotNull(orderedMapIterator0);
96:       assertFalse(orderedMapIterator0.hasPrevious());
97:       assertFalse(orderedMapIterator0.hasNext());
98:       assertEquals(0, hashMap0.size());
99:       assertTrue(hashMap0.isEmpty());
100:       
101:       Integer integer0 = new Integer(0);
102:       assertEquals(0, (int)integer0);
103:       assertNotNull(integer0);
104:       
105:       // Undeclared exception!
106:       try { 
107:         patriciaTrie1.put((String) null, integer0);
108:         fail("Expecting exception: NullPointerException");
109:       
110:       } catch(NullPointerException e) {
111:          //
112:          // Key cannot be null
113:          //
114:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
115:       }
116:   }
117: }
RegularFileObject[/tmp/EvoSuite_29_1605585569430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:29 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_29_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:29.727 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie0);

String string0 = "ROOT";
AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("ROOT", patriciaTrie0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Object>> comparator2 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("ROOT", abstractMap_SimpleImmutableEntry0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Object object0 = abstractMap_SimpleEntry0.setValue("ckmlQ;a`.");
assertNotNull(object0);

Comparator<Map.Entry<Integer, Integer>> comparator4 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator3);
assertNotNull(comparator4);

Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
assertSame(comparator5, comparator0);
assertNotNull(comparator5);

patriciaTrie0.modCount = 0;
AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
assertNotNull(patriciaTrie1);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertNotNull(orderedMapIterator0);
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

patriciaTrie1.put((String) null, integer0);

[MASTER] 03:59:30.209 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_32_1605585570009/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_32_1605585570009/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:30.219 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:30.219 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:30.220 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 68
[MASTER] 03:59:30.220 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_32_1605585570009/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:30.221 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:30.221 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_32_1605585570009/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:30 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_32_tmp__ESTest extends AbstractPatriciaTrie_32_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = ";#X`#CI>;Mr*y5qZT@E";
33:       String string1 = patriciaTrie0.put(";#X`#CI>;Mr*y5qZT@E", ";#X`#CI>;Mr*y5qZT@E");
34:       assertNull(string1);
35:       
36:       String string2 = "";
37:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
38:       assertNull(abstractPatriciaTrie_TrieEntry0);
39:       
40:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
41:       assertNotNull(orderedMapIterator0);
42:       assertFalse(orderedMapIterator0.hasPrevious());
43:       assertTrue(orderedMapIterator0.hasNext());
44:       
45:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(", ", ", ");
46:       assertNotNull(abstractMap_SimpleEntry0);
47:       
48:       int int0 = (-2401);
49:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>((Integer) null, abstractMap_SimpleEntry0, (-2401));
50:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       
55:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
56:       assertNotNull(comparator0);
57:       
58:       String string3 = abstractPatriciaTrie_TrieEntry1.toString();
59:       assertFalse(string3.equals((Object)string2));
60:       assertFalse(string3.equals((Object)string0));
61:       assertEquals("Entry(key=null [-2401], value=, =, , parent=null, left=null [-2401], right=null, predecessor=null [-2401])", string3);
62:       assertNotNull(string3);
63:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
66:       
67:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
68:       Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
69:       assertNotNull(comparator2);
70:       
71:       Comparator<Map.Entry<Integer, Integer>> comparator3 = Map.Entry.comparingByKey();
72:       assertSame(comparator3, comparator0);
73:       assertNotNull(comparator3);
74:       
75:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
76:       assertTrue(boolean0);
77:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       
81:       // Undeclared exception!
82:       try { 
83:         patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
84:         fail("Expecting exception: NullPointerException");
85:       
86:       } catch(NullPointerException e) {
87:          //
88:          // no message in exception (getMessage() returned null)
89:          //
90:       }
91:   }
92: }
RegularFileObject[/tmp/EvoSuite_32_1605585570009/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:30 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_32_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:30.223 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = ";#X`#CI>;Mr*y5qZT@E";
String string1 = patriciaTrie0.put(";#X`#CI>;Mr*y5qZT@E", ";#X`#CI>;Mr*y5qZT@E");
assertNull(string1);

String string2 = "";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertNotNull(orderedMapIterator0);
assertFalse(orderedMapIterator0.hasPrevious());
assertTrue(orderedMapIterator0.hasNext());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(", ", ", ");
assertNotNull(abstractMap_SimpleEntry0);

int int0 = (-2401);
AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>((Integer) null, abstractMap_SimpleEntry0, (-2401));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

String string3 = abstractPatriciaTrie_TrieEntry1.toString();
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string0));
assertEquals("Entry(key=null [-2401], value=, =, , parent=null, left=null [-2401], right=null, predecessor=null [-2401])", string3);
assertNotNull(string3);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, Integer>> comparator3 = Map.Entry.comparingByKey();
assertSame(comparator3, comparator0);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
assertTrue(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);

[MASTER] 03:59:31.008 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1605585570617/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1605585570617/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:31.015 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:31.015 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:31.016 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>>>: 173
[MASTER] 03:59:31.017 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_35_1605585570617/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:31.017 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:31.018 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1605585570617/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:30 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_35_tmp__ESTest extends AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Integer integer0 = new Integer((-228));
26:       assertEquals((-228), (int)integer0);
27:       assertNotNull(integer0);
28:       
29:       Integer integer1 = new Integer((-228));
30:       assertTrue(integer1.equals((Object)integer0));
31:       assertEquals((-228), (int)integer1);
32:       assertNotNull(integer1);
33:       
34:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer1, (-228));
35:       assertTrue(integer0.equals((Object)integer1));
36:       assertTrue(integer1.equals((Object)integer0));
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       
42:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "so8_@rnqfmR#", (-228));
43:       assertTrue(integer0.equals((Object)integer1));
44:       assertTrue(integer1.equals((Object)integer0));
45:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       
53:       AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry1.getKey();
54:       assertTrue(integer0.equals((Object)integer1));
55:       assertTrue(integer1.equals((Object)integer0));
56:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
66:       
67:       Integer integer2 = new Integer((-228));
68:       assertTrue(integer2.equals((Object)integer0));
69:       assertTrue(integer2.equals((Object)integer1));
70:       assertEquals((-228), (int)integer2);
71:       assertNotNull(integer2);
72:       
73:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer0);
74:       assertTrue(integer0.equals((Object)integer1));
75:       assertTrue(integer0.equals((Object)integer2));
76:       assertTrue(integer1.equals((Object)integer2));
77:       assertTrue(integer1.equals((Object)integer0));
78:       assertFalse(boolean0);
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
85:       
86:       Integer integer3 = new Integer((-228));
87:       assertTrue(integer3.equals((Object)integer1));
88:       assertTrue(integer3.equals((Object)integer2));
89:       assertTrue(integer3.equals((Object)integer0));
90:       assertEquals((-228), (int)integer3);
91:       assertNotNull(integer3);
92:       
93:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer3, (-228));
94:       assertTrue(integer0.equals((Object)integer1));
95:       assertTrue(integer0.equals((Object)integer3));
96:       assertTrue(integer0.equals((Object)integer2));
97:       assertTrue(integer3.equals((Object)integer1));
98:       assertTrue(integer3.equals((Object)integer2));
99:       assertTrue(integer3.equals((Object)integer0));
100:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
104:       
105:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, (String) null, (-228));
106:       assertTrue(integer0.equals((Object)integer1));
107:       assertTrue(integer0.equals((Object)integer3));
108:       assertTrue(integer0.equals((Object)integer2));
109:       assertTrue(integer1.equals((Object)integer3));
110:       assertTrue(integer1.equals((Object)integer2));
111:       assertTrue(integer1.equals((Object)integer0));
112:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
113:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
122:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
123:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
124:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
125:       
126:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry4;
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
130:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
131:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
134:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
136:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
137:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
138:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
140:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
141:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
142:       
143:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry3;
144:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
145:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
147:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
148:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
153:       
154:       Integer integer4 = new Integer((-228));
155:       assertTrue(integer4.equals((Object)integer3));
156:       assertTrue(integer4.equals((Object)integer0));
157:       assertTrue(integer4.equals((Object)integer2));
158:       assertTrue(integer4.equals((Object)integer1));
159:       assertEquals((-228), (int)integer4);
160:       assertNotNull(integer4);
161:       
162:       abstractPatriciaTrie_TrieEntry0.value = integer4;
163:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
164:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
165:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
166:       
167:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-228);
168:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
170:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
171:       
172:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
173:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>) comparator0);
174:       assertNotNull(comparator1);
175:       
176:       Integer integer5 = abstractPatriciaTrie_TrieEntry3.setValue(integer1);
177:       assertTrue(integer0.equals((Object)integer1));
178:       assertTrue(integer0.equals((Object)integer4));
179:       assertTrue(integer0.equals((Object)integer3));
180:       assertTrue(integer0.equals((Object)integer2));
181:       assertTrue(integer5.equals((Object)integer2));
182:       assertTrue(integer5.equals((Object)integer4));
183:       assertTrue(integer5.equals((Object)integer1));
184:       assertTrue(integer5.equals((Object)integer0));
185:       assertTrue(integer1.equals((Object)integer3));
186:       assertTrue(integer1.equals((Object)integer2));
187:       assertTrue(integer1.equals((Object)integer0));
188:       assertTrue(integer1.equals((Object)integer4));
189:       assertTrue(integer3.equals((Object)integer1));
190:       assertTrue(integer3.equals((Object)integer2));
191:       assertTrue(integer3.equals((Object)integer4));
192:       assertTrue(integer3.equals((Object)integer0));
193:       assertEquals((-228), (int)integer5);
194:       assertNotNull(integer5);
195:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
196:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
197:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
198:       
199:       Integer integer6 = new Integer((-1154));
200:       assertFalse(integer6.equals((Object)integer4));
201:       assertFalse(integer6.equals((Object)integer1));
202:       assertFalse(integer6.equals((Object)integer2));
203:       assertFalse(integer6.equals((Object)integer5));
204:       assertFalse(integer6.equals((Object)integer3));
205:       assertFalse(integer6.equals((Object)integer0));
206:       assertEquals((-1154), (int)integer6);
207:       assertNotNull(integer6);
208:       
209:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer6, (-228));
210:       assertFalse(integer6.equals((Object)integer4));
211:       assertFalse(integer6.equals((Object)integer1));
212:       assertFalse(integer6.equals((Object)integer2));
213:       assertFalse(integer6.equals((Object)integer5));
214:       assertFalse(integer6.equals((Object)integer3));
215:       assertFalse(integer6.equals((Object)integer0));
216:       assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry0));
217:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
218:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
219:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
220:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
221:       
222:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry5;
223:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
224:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
225:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
226:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
227:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
228:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
229:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
230:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
231:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
232:       
233:       Integer integer7 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractPatriciaTrie_TrieEntry2, integer2);
234:       assertTrue(integer0.equals((Object)integer1));
235:       assertTrue(integer0.equals((Object)integer4));
236:       assertFalse(integer0.equals((Object)integer6));
237:       assertTrue(integer0.equals((Object)integer5));
238:       assertTrue(integer0.equals((Object)integer3));
239:       assertTrue(integer0.equals((Object)integer2));
240:       assertTrue(integer1.equals((Object)integer3));
241:       assertTrue(integer1.equals((Object)integer2));
242:       assertFalse(integer1.equals((Object)integer6));
243:       assertTrue(integer1.equals((Object)integer0));
244:       assertTrue(integer1.equals((Object)integer5));
245:       assertTrue(integer1.equals((Object)integer4));
246:       assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry5));
247:       assertTrue(integer7.equals((Object)integer3));
248:       assertTrue(integer7.equals((Object)integer2));
249:       assertTrue(integer7.equals((Object)integer1));
250:       assertTrue(integer7.equals((Object)integer5));
251:       assertTrue(integer7.equals((Object)integer0));
252:       assertFalse(integer7.equals((Object)integer6));
253:       assertFalse(integer2.equals((Object)integer6));
254:       assertTrue(integer2.equals((Object)integer0));
255:       assertTrue(integer2.equals((Object)integer5));
256:       assertTrue(integer2.equals((Object)integer3));
257:       assertTrue(integer2.equals((Object)integer4));
258:       assertTrue(integer2.equals((Object)integer1));
259:       assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry5);
260:       assertEquals((-228), (int)integer7);
261:       assertNotNull(integer7);
262:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
263:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
264:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
265:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
266:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
267:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
268:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
269:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
270:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
271:       
272:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
273:       assertTrue(integer0.equals((Object)integer1));
274:       assertTrue(integer0.equals((Object)integer7));
275:       assertTrue(integer0.equals((Object)integer4));
276:       assertFalse(integer0.equals((Object)integer6));
277:       assertTrue(integer0.equals((Object)integer5));
278:       assertTrue(integer0.equals((Object)integer3));
279:       assertTrue(integer0.equals((Object)integer2));
280:       assertTrue(integer1.equals((Object)integer7));
281:       assertTrue(integer1.equals((Object)integer3));
282:       assertTrue(integer1.equals((Object)integer2));
283:       assertFalse(integer1.equals((Object)integer6));
284:       assertTrue(integer1.equals((Object)integer0));
285:       assertTrue(integer1.equals((Object)integer5));
286:       assertTrue(integer1.equals((Object)integer4));
287:       assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry5));
288:       assertFalse(boolean1 == boolean0);
289:       assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry5);
290:       assertTrue(boolean1);
291:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
292:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
293:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
294:   }
295: }
RegularFileObject[/tmp/EvoSuite_35_1605585570617/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:30 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:31.026 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-228));
assertEquals((-228), (int)integer0);
assertNotNull(integer0);

Integer integer1 = new Integer((-228));
assertTrue(integer1.equals((Object)integer0));
assertEquals((-228), (int)integer1);
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer1, (-228));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "so8_@rnqfmR#", (-228));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry1.getKey();
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Integer integer2 = new Integer((-228));
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertEquals((-228), (int)integer2);
assertNotNull(integer2);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Integer integer3 = new Integer((-228));
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));
assertEquals((-228), (int)integer3);
assertNotNull(integer3);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer3, (-228));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, (String) null, (-228));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Integer integer4 = new Integer((-228));
assertTrue(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)integer2));
assertTrue(integer4.equals((Object)integer1));
assertEquals((-228), (int)integer4);
assertNotNull(integer4);

abstractPatriciaTrie_TrieEntry0.value = integer4;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-228);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleEntry<String, String>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>, AbstractMap.SimpleEntry<String, String>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>) comparator0);
assertNotNull(comparator1);

Integer integer5 = abstractPatriciaTrie_TrieEntry3.setValue(integer1);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer4));
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer4));
assertTrue(integer5.equals((Object)integer1));
assertTrue(integer5.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer4));
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)integer4));
assertTrue(integer3.equals((Object)integer0));
assertEquals((-228), (int)integer5);
assertNotNull(integer5);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

Integer integer6 = new Integer((-1154));
assertFalse(integer6.equals((Object)integer4));
assertFalse(integer6.equals((Object)integer1));
assertFalse(integer6.equals((Object)integer2));
assertFalse(integer6.equals((Object)integer5));
assertFalse(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer0));
assertEquals((-1154), (int)integer6);
assertNotNull(integer6);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer6, (-228));
assertFalse(integer6.equals((Object)integer4));
assertFalse(integer6.equals((Object)integer1));
assertFalse(integer6.equals((Object)integer2));
assertFalse(integer6.equals((Object)integer5));
assertFalse(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry5;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Integer integer7 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractPatriciaTrie_TrieEntry2, integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer6));
assertTrue(integer0.equals((Object)integer5));
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer6));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer5));
assertTrue(integer1.equals((Object)integer4));
assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry5));
assertTrue(integer7.equals((Object)integer3));
assertTrue(integer7.equals((Object)integer2));
assertTrue(integer7.equals((Object)integer1));
assertTrue(integer7.equals((Object)integer5));
assertTrue(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer2.equals((Object)integer6));
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer5));
assertTrue(integer2.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer4));
assertTrue(integer2.equals((Object)integer1));
assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry5);
assertEquals((-228), (int)integer7);
assertNotNull(integer7);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer7));
assertTrue(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer6));
assertTrue(integer0.equals((Object)integer5));
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer7));
assertTrue(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer6));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer5));
assertTrue(integer1.equals((Object)integer4));
assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry5));
assertFalse(boolean1 == boolean0);
assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry5);
assertTrue(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());


[MASTER] 03:59:32.252 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_44_1605585572130/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_44_1605585572130/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:32.252 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:32.252 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:32.253 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 90
[MASTER] 03:59:32.269 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_44_1605585572130/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:32.269 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:32.270 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_44_1605585572130/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:32 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_44_tmp__ESTest extends AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
30:       assertNull(abstractPatriciaTrie_TrieEntry0);
31:       
32:       boolean boolean0 = patriciaTrie0.compareKeys("O\"E", "O\"E");
33:       assertTrue(boolean0);
34:       
35:       Integer integer0 = new Integer((-1));
36:       assertEquals((-1), (int)integer0);
37:       assertNotNull(integer0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer0, (-1));
40:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       
45:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry1, "");
46:       assertNotNull(abstractMap_SimpleEntry0);
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       
51:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.replace("O\"E", abstractMap_SimpleEntry0);
52:       assertNull(abstractMap_SimpleEntry1);
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       
57:       Integer integer1 = new Integer(0);
58:       assertFalse(integer1.equals((Object)integer0));
59:       assertEquals(0, (int)integer1);
60:       assertNotNull(integer1);
61:       
62:       Integer integer2 = new Integer(0);
63:       assertTrue(integer2.equals((Object)integer1));
64:       assertFalse(integer2.equals((Object)integer0));
65:       assertEquals(0, (int)integer2);
66:       assertNotNull(integer2);
67:       
68:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer2, 0);
69:       assertFalse(integer1.equals((Object)integer0));
70:       assertTrue(integer1.equals((Object)integer2));
71:       assertTrue(integer2.equals((Object)integer1));
72:       assertFalse(integer2.equals((Object)integer0));
73:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
77:       
78:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
87:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
88:       
89:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
90:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
91:       assertNotNull(comparator1);
92:       
93:       abstractPatriciaTrie_TrieEntry2.bitIndex = 3224;
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
97:       
98:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
99:       assertFalse(integer0.equals((Object)integer1));
100:       assertFalse(integer0.equals((Object)integer2));
101:       assertFalse(boolean1 == boolean0);
102:       assertFalse(boolean1);
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
106:       
107:       boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
108:       assertFalse(integer0.equals((Object)integer1));
109:       assertFalse(integer0.equals((Object)integer2));
110:       assertFalse(boolean2 == boolean1);
111:       assertTrue(boolean2 == boolean0);
112:       assertTrue(boolean2);
113:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
116:       
117:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
118:       assertNotNull(patriciaTrie1);
119:       
120:       Object object0 = patriciaTrie1.put("Cannot determine prefix outside of Character boundaries", (Object) null);
121:       assertNull(object0);
122:       
123:       Integer integer3 = new Integer((-1713));
124:       assertFalse(integer3.equals((Object)integer1));
125:       assertFalse(integer3.equals((Object)integer0));
126:       assertFalse(integer3.equals((Object)integer2));
127:       assertEquals((-1713), (int)integer3);
128:       assertNotNull(integer3);
129:       
130:       boolean boolean3 = patriciaTrie1.replace("O\"E", (Object) comparator1, (Object) integer3);
131:       assertFalse(integer3.equals((Object)integer1));
132:       assertFalse(integer3.equals((Object)integer0));
133:       assertFalse(integer3.equals((Object)integer2));
134:       assertFalse(boolean3 == boolean2);
135:       assertFalse(boolean3 == boolean0);
136:       assertTrue(boolean3 == boolean1);
137:       assertFalse(boolean3);
138:       
139:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("jo&[z$\"6z%K");
140:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
141:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
143:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
144:       
145:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, abstractMap_SimpleEntry0, (-1713));
146:       assertFalse(integer0.equals((Object)integer1));
147:       assertFalse(integer0.equals((Object)integer2));
148:       assertFalse(integer0.equals((Object)integer3));
149:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
150:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
151:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
154:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
155:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
156:       
157:       boolean boolean4 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
158:       assertFalse(integer0.equals((Object)integer1));
159:       assertFalse(integer0.equals((Object)integer2));
160:       assertFalse(integer0.equals((Object)integer3));
161:       assertFalse(boolean4 == boolean3);
162:       assertTrue(boolean4 == boolean2);
163:       assertTrue(boolean4 == boolean0);
164:       assertFalse(boolean4 == boolean1);
165:       assertTrue(boolean4);
166:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
167:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
168:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
169:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
170:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
171:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
172:   }
173: }
RegularFileObject[/tmp/EvoSuite_44_1605585572130/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:32 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:32.274 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry0);

boolean boolean0 = patriciaTrie0.compareKeys("O\"E", "O\"E");
assertTrue(boolean0);

Integer integer0 = new Integer((-1));
assertEquals((-1), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer0, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry1, "");
assertNotNull(abstractMap_SimpleEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.replace("O\"E", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Integer integer1 = new Integer(0);
assertFalse(integer1.equals((Object)integer0));
assertEquals(0, (int)integer1);
assertNotNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer2, 0);
assertFalse(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry2.bitIndex = 3224;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("Cannot determine prefix outside of Character boundaries", (Object) null);
assertNull(object0);

Integer integer3 = new Integer((-1713));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertEquals((-1713), (int)integer3);
assertNotNull(integer3);

boolean boolean3 = patriciaTrie1.replace("O\"E", (Object) comparator1, (Object) integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("jo&[z$\"6z%K");
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, abstractMap_SimpleEntry0, (-1713));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer3));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

boolean boolean4 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer3));
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());


[MASTER] 03:59:35.992 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1605585575883/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1605585575883/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:35.993 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:35.993 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:35.995 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 35
[MASTER] 03:59:35.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 45
[MASTER] 03:59:35.997 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 49
[MASTER] 03:59:35.997 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_71_1605585575883/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:35.998 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:35.998 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1605585575883/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:35 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_71_tmp__ESTest extends AbstractPatriciaTrie_71_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer((-3254));
28:       assertEquals((-3254), (int)integer0);
29:       assertNotNull(integer0);
30:       
31:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, integer0);
32:       assertNotNull(abstractMap_SimpleEntry0);
33:       
34:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
35:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
36:       assertNotNull(comparator1);
37:       
38:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1120);
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       
44:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
45:       Comparator<Map.Entry<String, Integer>> comparator3 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator2);
46:       assertNotNull(comparator3);
47:       
48:       Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator4);
50:       assertNotNull(comparator5);
51:       
52:       Integer integer1 = new Integer(368);
53:       assertFalse(integer1.equals((Object)integer0));
54:       assertEquals(368, (int)integer1);
55:       assertNotNull(integer1);
56:       
57:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, abstractMap_SimpleEntry0);
58:       assertFalse(integer0.equals((Object)integer1));
59:       assertFalse(integer1.equals((Object)integer0));
60:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
61:       assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
62:       assertNotNull(abstractMap_SimpleEntry1);
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       
67:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, abstractMap_SimpleEntry0);
68:       assertFalse(integer0.equals((Object)integer1));
69:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
70:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
71:       assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
72:       assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
73:       assertNotNull(abstractMap_SimpleEntry2);
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       
78:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
79:       assertFalse(integer0.equals((Object)integer1));
80:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
81:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
82:       assertFalse(boolean0);
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       
87:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
88:       assertNotNull(patriciaTrie0);
89:       
90:       patriciaTrie0.clear();
91:       String string0 = "j[xlIJ&;9";
92:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(patriciaTrie0, "j[xlIJ&;9");
93:       assertNotNull(abstractMap_SimpleImmutableEntry0);
94:       
95:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
96:       assertNull(abstractMap_SimpleImmutableEntry1);
97:       
98:       Object object0 = new Object();
99:       assertNotNull(object0);
100:       
101:       // Undeclared exception!
102:       try { 
103:         patriciaTrie0.remove(object0);
104:         fail("Expecting exception: ClassCastException");
105:       
106:       } catch(ClassCastException e) {
107:          //
108:          // no message in exception (getMessage() returned null)
109:          //
110:       }
111:   }
112: }
RegularFileObject[/tmp/EvoSuite_71_1605585575883/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:35 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_71_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:36.001 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-3254));
assertEquals((-3254), (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1120);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator3 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator2);
assertNotNull(comparator3);

Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator4);
assertNotNull(comparator5);

Integer integer1 = new Integer(368);
assertFalse(integer1.equals((Object)integer0));
assertEquals(368, (int)integer1);
assertNotNull(integer1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, abstractMap_SimpleEntry0);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer0));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, abstractMap_SimpleEntry0);
assertFalse(integer0.equals((Object)integer1));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(integer0.equals((Object)integer1));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

patriciaTrie0.clear();
String string0 = "j[xlIJ&;9";
AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(patriciaTrie0, "j[xlIJ&;9");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

Object object0 = new Object();
assertNotNull(object0);

patriciaTrie0.remove(object0);

[MASTER] 03:59:42.492 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_126_1605585582362/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_126_1605585582362/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:42.492 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:42.492 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:42.494 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>>: 167
[MASTER] 03:59:42.495 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_126_1605585582362/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:42.495 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:42.496 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_126_1605585582362/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:42 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.NoSuchElementException;
16: import java.util.Set;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_126_tmp__ESTest extends AbstractPatriciaTrie_126_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       
35:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("");
36:       assertFalse(boolean0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1);
42:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
43:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
46:       
47:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
57:       
58:       Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
59:       assertNotNull(comparator0);
60:       
61:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0.parent;
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
74:       
75:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
85:       
86:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
87:       assertEquals("Entry(key= [1], value=, parent= [1], left= [1], right=null, predecessor= [1])", string0);
88:       assertNotNull(string0);
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
92:       
93:       Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
94:       assertSame(comparator1, comparator0);
95:       assertNotNull(comparator1);
96:       
97:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "Entry(key= [1], value=, parent= [1], left= [1], right=null, predecessor= [1])", 1);
98:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
102:       
103:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
104:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
112:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
113:       
114:       abstractPatriciaTrie_TrieEntry0.value = "";
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       
119:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
120:       assertFalse(boolean1 == boolean0);
121:       assertTrue(boolean1);
122:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
125:       
126:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
127:       assertNotNull(patriciaTrie0);
128:       
129:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
130:       assertNotNull(abstractMap_SimpleEntry0);
131:       
132:       Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByKey();
133:       assertNotNull(comparator2);
134:       
135:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
136:       assertNull(abstractMap_SimpleEntry1);
137:       
138:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
139:       assertNull(abstractPatriciaTrie_TrieEntry3);
140:       
141:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey("", 1);
142:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
143:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
144:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
145:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
146:       
147:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
148:       assertNotNull(patriciaTrie1);
149:       
150:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
151:       assertNotNull(abstractMap_SimpleImmutableEntry0);
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
153:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
155:       
156:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("", abstractMap_SimpleImmutableEntry0);
157:       assertNull(abstractMap_SimpleImmutableEntry1);
158:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
159:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
160:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
161:       
162:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "");
163:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
164:       assertNotNull(abstractMap_SimpleImmutableEntry2);
165:       
166:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
167:       Comparator<Map.Entry<Integer, Object>> comparator4 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator3);
168:       assertNotNull(comparator4);
169:       
170:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("", abstractMap_SimpleImmutableEntry2);
171:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
172:       assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
173:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
174:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
175:       assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
176:       assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
177:       assertNotNull(abstractMap_SimpleImmutableEntry3);
178:       
179:       Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, String>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, String>>>)patriciaTrie1.entrySet();
180:       assertNotNull(set0);
181:       assertFalse(set0.isEmpty());
182:       assertEquals(1, set0.size());
183:       
184:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
185:       assertNotNull(patriciaTrie2);
186:       
187:       // Undeclared exception!
188:       try { 
189:         patriciaTrie2.lastKey();
190:         fail("Expecting exception: NoSuchElementException");
191:       
192:       } catch(NoSuchElementException e) {
193:          //
194:          // no message in exception (getMessage() returned null)
195:          //
196:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
197:       }
198:   }
199: }
RegularFileObject[/tmp/EvoSuite_126_1605585582362/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:42 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_126_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:42.500 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("");
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0.parent;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key= [1], value=, parent= [1], left= [1], right=null, predecessor= [1])", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
assertSame(comparator1, comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "Entry(key= [1], value=, parent= [1], left= [1], right=null, predecessor= [1])", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

abstractPatriciaTrie_TrieEntry0.value = "";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey("", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
assertNotNull(patriciaTrie1);

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "");
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Object>> comparator4 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator3);
assertNotNull(comparator4);

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("", abstractMap_SimpleImmutableEntry2);
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry3);

Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, String>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, String>>>)patriciaTrie1.entrySet();
assertNotNull(set0);
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie2);

patriciaTrie2.lastKey();

[MASTER] 03:59:44.173 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_137_1605585584059/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_137_1605585584059/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:44.173 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:44.173 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:44.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>>: 49
[MASTER] 03:59:44.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_137_1605585584059/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:44.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:44.177 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_137_1605585584059/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:44 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_137_tmp__ESTest extends AbstractPatriciaTrie_137_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hmoF!`{:=", "hmoF!`{:=", 2);
26:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       
31:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hmoF!`{:=", (Object) null, 2);
32:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
33:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
36:       
37:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
47:       
48:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
50:       assertNotNull(comparator1);
51:       
52:       Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = Map.Entry.comparingByKey();
53:       assertNotNull(comparator2);
54:       
55:       Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Object>>> comparator3 = Map.Entry.comparingByKey();
56:       assertNotNull(comparator3);
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("_l+Lfpb4FQ$s", (Object) null, 2);
59:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
60:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       
64:       abstractPatriciaTrie_TrieEntry2.bitIndex = 2;
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
68:       
69:       abstractPatriciaTrie_TrieEntry2.value = (Object) abstractPatriciaTrie_TrieEntry0;
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
76:       
77:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
87:       
88:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
89:       assertFalse(boolean0);
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
93:   }
94: }
RegularFileObject[/tmp/EvoSuite_137_1605585584059/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:44 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_137_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:59:44.178 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hmoF!`{:=", "hmoF!`{:=", 2);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hmoF!`{:=", (Object) null, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Object>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("_l+Lfpb4FQ$s", (Object) null, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry2.bitIndex = 2;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry2.value = (Object) abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());


[MASTER] 04:00:18.406 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/20
* Done!

* Computation finished
