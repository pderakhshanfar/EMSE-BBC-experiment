* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 6525
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 3267840437
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:45:52.735 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:45:52.735 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:46:32.542 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:46:37.338 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 03:50:17.507 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.lang.Comparable<java.lang.Object>>.TrieEntry<java.lang.Comparable<java.lang.Object>, java.util.AbstractMap<java.lang.Object, java.lang.Integer>.SimpleEntry<java.lang.Object, java.lang.Object>> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 307s and 43 generations, 27704 statements, best individual has fitness: 1548.0
* Minimizing test suite
[MASTER] 03:52:02.753 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 54%
* Total number of goals: 822
* Number of covered goals: 447
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 602
* Number of covered goals: 280
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 311
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 186
* Number of covered goals: 89
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 602
* Number of covered goals: 277
* Generated 156 tests with total length 2984
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:52:57.074 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.70125% of time used, but only 17/156 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 03:53:13.773 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1605585193387/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1605585193387/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:13.774 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:13.774 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:13.778 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 62
[MASTER] 03:53:13.778 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 66
[MASTER] 03:53:13.779 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>>>: 69
[MASTER] 03:53:13.779 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 72
[MASTER] 03:53:13.799 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_25_1605585193387/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:13.799 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:13.810 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1605585193387/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:13 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_25_tmp__ESTest extends AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
32:       assertNotNull(patriciaTrie1);
33:       
34:       Integer integer0 = new Integer(0);
35:       assertEquals(0, (int)integer0);
36:       assertNotNull(integer0);
37:       
38:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "\"");
39:       assertNotNull(abstractMap_SimpleImmutableEntry0);
40:       
41:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
42:       assertNotNull(abstractMap_SimpleEntry0);
43:       
44:       String string0 = abstractMap_SimpleEntry0.setValue("7XxPO':[t:)h");
45:       assertEquals("\"", string0);
46:       assertNotNull(string0);
47:       
48:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
50:       assertNotNull(comparator1);
51:       
52:       Comparator<Map.Entry<Object, Object>> comparator2 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
53:       assertNotNull(comparator2);
54:       
55:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
56:       assertNotNull(abstractMap_SimpleImmutableEntry1);
57:       
58:       Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
59:       assertNotNull(comparator3);
60:       
61:       Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator4);
63:       assertNotNull(comparator5);
64:       
65:       Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
66:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator7 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator3);
67:       assertNotNull(comparator7);
68:       
69:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator8 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator6);
70:       assertNotNull(comparator8);
71:       
72:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator9 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator3);
73:       assertNotSame(comparator9, comparator7);
74:       assertNotNull(comparator9);
75:       assertFalse(comparator9.equals((Object)comparator7));
76:       
77:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = patriciaTrie1.put("7XxPO':[t:)h", abstractMap_SimpleImmutableEntry1);
78:       assertNull(abstractMap_SimpleImmutableEntry2);
79:       
80:       Comparator<? super String> comparator10 = patriciaTrie1.comparator();
81:       assertNotNull(comparator10);
82:       
83:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
84:       assertNotNull(patriciaTrie2);
85:       
86:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = patriciaTrie2.put("7XxPO':[t:)h", (AbstractMap.SimpleEntry<String, String>) null);
87:       assertNull(abstractMap_SimpleEntry1);
88:       
89:       String string1 = patriciaTrie2.lastKey();
90:       assertEquals("7XxPO':[t:)h", string1);
91:       assertNotNull(string1);
92:       assertFalse(string1.equals((Object)string0));
93:       
94:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "", 1);
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
99:       
100:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
103:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
104:       assertTrue(boolean0);
105:       
106:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
107:       assertNotNull(patriciaTrie3);
108:       
109:       Integer integer1 = new Integer(1);
110:       assertEquals(1, (int)integer1);
111:       assertNotNull(integer1);
112:       assertFalse(integer1.equals((Object)integer0));
113:       
114:       Integer integer2 = patriciaTrie3.put("", integer1);
115:       assertNull(integer2);
116:       assertFalse(integer1.equals((Object)integer0));
117:       
118:       Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie3.entrySet();
119:       assertFalse(set0.isEmpty());
120:       assertEquals(1, set0.size());
121:       assertNotNull(set0);
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lastEntry();
124:       assertNull(abstractPatriciaTrie_TrieEntry1);
125:       
126:       // Undeclared exception!
127:       try { 
128:         patriciaTrie3.containsKey(abstractMap_SimpleEntry0);
129:         fail("Expecting exception: ClassCastException");
130:       
131:       } catch(ClassCastException e) {
132:          //
133:          // no message in exception (getMessage() returned null)
134:          //
135:       }
136:   }
137: }
RegularFileObject[/tmp/EvoSuite_25_1605585193387/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:13 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:13.814 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "\"");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

String string0 = abstractMap_SimpleEntry0.setValue("7XxPO':[t:)h");
assertEquals("\"", string0);
assertNotNull(string0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<Object, Object>> comparator2 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator2);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);

Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator4);
assertNotNull(comparator5);

Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator7 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator3);
assertNotNull(comparator7);

Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator8 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator6);
assertNotNull(comparator8);

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator9 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator3);
assertNotSame(comparator9, comparator7);
assertNotNull(comparator9);
assertFalse(comparator9.equals((Object)comparator7));

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = patriciaTrie1.put("7XxPO':[t:)h", abstractMap_SimpleImmutableEntry1);
assertNull(abstractMap_SimpleImmutableEntry2);

Comparator<? super String> comparator10 = patriciaTrie1.comparator();
assertNotNull(comparator10);

PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie2);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = patriciaTrie2.put("7XxPO':[t:)h", (AbstractMap.SimpleEntry<String, String>) null);
assertNull(abstractMap_SimpleEntry1);

String string1 = patriciaTrie2.lastKey();
assertEquals("7XxPO':[t:)h", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "", 1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean0);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie3);

Integer integer1 = new Integer(1);
assertEquals(1, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = patriciaTrie3.put("", integer1);
assertNull(integer2);
assertFalse(integer1.equals((Object)integer0));

Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie3.entrySet();
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertNotNull(set0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lastEntry();
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie3.containsKey(abstractMap_SimpleEntry0);

[MASTER] 03:53:15.905 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_37_1605585195800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_37_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_37_1605585195800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_37_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:15.905 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:15.905 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:15.906 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 67
[MASTER] 03:53:15.919 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_37_1605585195800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_37_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:15.921 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:15.928 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_37_1605585195800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_37_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:15 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_37_tmp__ESTest extends AbstractPatriciaTrie_37_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       Object object0 = patriciaTrie0.put("", (Object) null);
30:       assertNull(object0);
31:       
32:       String string0 = "R]$(\"na/8D+.";
33:       Integer integer0 = new Integer(0);
34:       assertEquals(0, (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       Object object1 = patriciaTrie0.put("R]$(\"na/8D+.", integer0);
38:       assertNull(object1);
39:       
40:       Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("R]$(\"na/8D+.");
41:       assertNotNull(map_Entry0);
42:       
43:       Integer integer1 = new Integer(0);
44:       assertEquals(0, (int)integer1);
45:       assertNotNull(integer1);
46:       assertTrue(integer1.equals((Object)integer0));
47:       
48:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 32768);
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
53:       assertTrue(integer1.equals((Object)integer0));
54:       
55:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
56:       Integer integer2 = new Integer(32768);
57:       assertEquals(32768, (int)integer2);
58:       assertNotNull(integer2);
59:       assertFalse(integer2.equals((Object)integer1));
60:       assertFalse(integer2.equals((Object)integer0));
61:       
62:       abstractPatriciaTrie_TrieEntry0.value = integer2;
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       
67:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
68:       assertNotNull(comparator1);
69:       
70:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertTrue(boolean0);
75:       assertTrue(integer1.equals((Object)integer0));
76:       assertFalse(integer1.equals((Object)integer2));
77:       
78:       Comparator<? super String> comparator2 = patriciaTrie0.comparator();
79:       assertNotNull(comparator2);
80:       
81:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
82:       assertNotNull(patriciaTrie1);
83:       
84:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("R]$(\"na/8D+.", "{cYr:AKRUm`|bo", 0);
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
89:       
90:       abstractPatriciaTrie_TrieEntry1.key = "R]$(\"na/8D+.";
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
94:       
95:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
96:       assertNull(abstractPatriciaTrie_TrieEntry2);
97:       
98:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
99:       assertNull(abstractPatriciaTrie_TrieEntry3);
100:       
101:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", 2633);
102:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
105:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
106:       assertTrue(integer1.equals((Object)integer0));
107:       assertFalse(integer1.equals((Object)integer2));
108:       
109:       Integer integer3 = new Integer(1772);
110:       assertEquals(1772, (int)integer3);
111:       assertNotNull(integer3);
112:       assertFalse(integer3.equals((Object)integer2));
113:       assertFalse(integer3.equals((Object)integer0));
114:       assertFalse(integer3.equals((Object)integer1));
115:       
116:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer3, "R]$(\"na/8D+.", (-3));
117:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
120:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
121:       assertFalse(integer3.equals((Object)integer2));
122:       assertFalse(integer3.equals((Object)integer0));
123:       assertFalse(integer3.equals((Object)integer1));
124:       
125:       abstractPatriciaTrie_TrieEntry4.right = abstractPatriciaTrie_TrieEntry5;
126:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
129:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
131:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
132:       assertTrue(abstractPatriciaTrie_TrieEntry4.right.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry4.right.isInternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry4.right.isEmpty());
135:       
136:       abstractPatriciaTrie_TrieEntry4.bitIndex = (-3);
137:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
139:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
140:       
141:       boolean boolean1 = abstractPatriciaTrie_TrieEntry4.isEmpty();
142:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
144:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
145:       assertFalse(boolean1);
146:       assertTrue(integer1.equals((Object)integer0));
147:       assertFalse(integer1.equals((Object)integer3));
148:       assertFalse(integer1.equals((Object)integer2));
149:       assertFalse(boolean1 == boolean0);
150:       
151:       // Undeclared exception!
152:       try { 
153:         patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
154:         fail("Expecting exception: NullPointerException");
155:       
156:       } catch(NullPointerException e) {
157:          //
158:          // no message in exception (getMessage() returned null)
159:          //
160:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
161:       }
162:   }
163: }
RegularFileObject[/tmp/EvoSuite_37_1605585195800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_37_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:15 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_37_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_37_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_37_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_37_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:15.933 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("", (Object) null);
assertNull(object0);

String string0 = "R]$(\"na/8D+.";
Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Object object1 = patriciaTrie0.put("R]$(\"na/8D+.", integer0);
assertNull(object1);

Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("R]$(\"na/8D+.");
assertNotNull(map_Entry0);

Integer integer1 = new Integer(0);
assertEquals(0, (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 32768);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer1.equals((Object)integer0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer2 = new Integer(32768);
assertEquals(32768, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.value = integer2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(boolean0);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));

Comparator<? super String> comparator2 = patriciaTrie0.comparator();
assertNotNull(comparator2);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("R]$(\"na/8D+.", "{cYr:AKRUm`|bo", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.key = "R]$(\"na/8D+.";
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
assertNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", 2633);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));

Integer integer3 = new Integer(1772);
assertEquals(1772, (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer3, "R]$(\"na/8D+.", (-3));
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry4.right = abstractPatriciaTrie_TrieEntry5;
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.right.isEmpty());

abstractPatriciaTrie_TrieEntry4.bitIndex = (-3);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry4.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(boolean1);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer3));
assertFalse(integer1.equals((Object)integer2));
assertFalse(boolean1 == boolean0);

patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);

[MASTER] 03:53:17.600 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_50_1605585197490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_50_1605585197490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:17.601 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:17.601 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:17.602 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry,java.lang.Object>,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry,java.lang.Object>,java.lang.Object>>>: 59
[MASTER] 03:53:17.602 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_50_1605585197490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:17.602 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:17.603 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_50_1605585197490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:17 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_50_tmp__ESTest extends AbstractPatriciaTrie_50_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer((-826));
28:       assertEquals((-826), (int)integer0);
29:       assertNotNull(integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-826));
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       Integer integer1 = new Integer(0);
38:       assertEquals(0, (int)integer1);
39:       assertNotNull(integer1);
40:       assertFalse(integer1.equals((Object)integer0));
41:       
42:       String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, "");
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertEquals("", string0);
47:       assertNotNull(string0);
48:       assertFalse(integer0.equals((Object)integer1));
49:       assertFalse(integer1.equals((Object)integer0));
50:       
51:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
56:       assertFalse(integer0.equals((Object)integer1));
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
72:       
73:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertTrue(boolean0);
78:       assertFalse(integer0.equals((Object)integer1));
79:       
80:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
81:       assertTrue(hashMap0.isEmpty());
82:       assertEquals(0, hashMap0.size());
83:       assertNotNull(hashMap0);
84:       
85:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
86:       assertTrue(hashMap0.isEmpty());
87:       assertEquals(0, hashMap0.size());
88:       assertNotNull(patriciaTrie0);
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry((String) null);
91:       assertTrue(hashMap0.isEmpty());
92:       assertEquals(0, hashMap0.size());
93:       assertNull(abstractPatriciaTrie_TrieEntry2);
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_50_1605585197490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:17 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_50_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:17.605 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-826));
assertEquals((-826), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", (-826));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer(0);
assertEquals(0, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, "");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("", string0);
assertNotNull(string0);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, Object>>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(boolean0);
assertFalse(integer0.equals((Object)integer1));

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry((String) null);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry2);


[MASTER] 03:53:18.929 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_58_1605585198747/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_58_1605585198747/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:18.929 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:18.930 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:18.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 39
[MASTER] 03:53:18.931 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_58_1605585198747/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:18.932 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:18.938 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_58_1605585198747/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:18 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_58_tmp__ESTest extends AbstractPatriciaTrie_58_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       int int0 = 2236;
29:       Integer integer0 = new Integer(2236);
30:       assertEquals(2236, (int)integer0);
31:       assertNotNull(integer0);
32:       assertTrue(integer0.equals((Object)int0));
33:       
34:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
35:       assertNotNull(abstractMap_SimpleImmutableEntry0);
36:       assertTrue(integer0.equals((Object)int0));
37:       
38:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
40:       assertNotNull(comparator1);
41:       
42:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(abstractMap_SimpleImmutableEntry0, "", 2236);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
47:       assertTrue(integer0.equals((Object)int0));
48:       
49:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>> comparator2 = Map.Entry.comparingByValue();
50:       assertNotNull(comparator2);
51:       
52:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertEquals("", object0);
57:       assertNotNull(object0);
58:       assertTrue(integer0.equals((Object)int0));
59:       
60:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
64:       assertFalse(boolean0);
65:       assertTrue(integer0.equals((Object)int0));
66:       
67:       HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
68:       assertTrue(hashMap0.isEmpty());
69:       assertEquals(0, hashMap0.size());
70:       assertNotNull(hashMap0);
71:       
72:       Integer integer1 = new Integer(2236);
73:       assertEquals(2236, (int)integer1);
74:       assertNotNull(integer1);
75:       assertTrue(integer1.equals((Object)int0));
76:       assertTrue(integer1.equals((Object)integer0));
77:       
78:       Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
79:       assertNotNull(comparator3);
80:       
81:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, "8jSenof9S+~O_s7RhI", 2236);
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
86:       assertTrue(integer1.equals((Object)int0));
87:       assertTrue(integer1.equals((Object)integer0));
88:       
89:       Comparator<Map.Entry<String, Object>> comparator4 = Map.Entry.comparingByKey();
90:       assertSame(comparator4, comparator3);
91:       assertNotNull(comparator4);
92:       
93:       abstractPatriciaTrie_TrieEntry1.predecessor = null;
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
97:       
98:       Comparator<Map.Entry<String, Object>> comparator5 = Map.Entry.comparingByKey();
99:       assertSame(comparator5, comparator3);
100:       assertSame(comparator5, comparator4);
101:       assertNotNull(comparator5);
102:       
103:       abstractPatriciaTrie_TrieEntry1.value = null;
104:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       
108:       Object object1 = abstractPatriciaTrie_TrieEntry1.setValue("8jSenof9S+~O_s7RhI");
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
112:       assertNull(object1);
113:       assertTrue(integer1.equals((Object)int0));
114:       assertTrue(integer1.equals((Object)integer0));
115:       
116:       String string0 = (String)abstractPatriciaTrie_TrieEntry1.value;
117:       assertEquals("8jSenof9S+~O_s7RhI", string0);
118:       assertNotNull(string0);
119:       assertFalse(string0.equals((Object)object0));
120:       
121:       Integer integer2 = new Integer(2236);
122:       assertEquals(2236, (int)integer2);
123:       assertNotNull(integer2);
124:       assertTrue(integer2.equals((Object)integer1));
125:       assertTrue(integer2.equals((Object)int0));
126:       assertTrue(integer2.equals((Object)integer0));
127:       
128:       boolean boolean1 = hashMap0.remove((Object) "8jSenof9S+~O_s7RhI", (Object) integer2);
129:       assertTrue(hashMap0.isEmpty());
130:       assertEquals(0, hashMap0.size());
131:       assertFalse(boolean1);
132:       assertTrue(integer2.equals((Object)integer1));
133:       assertTrue(integer2.equals((Object)int0));
134:       assertTrue(integer2.equals((Object)integer0));
135:       assertTrue(boolean1 == boolean0);
136:       
137:       Object object2 = hashMap0.put("8jSenof9S+~O_s7RhI", comparator2);
138:       assertEquals(1, hashMap0.size());
139:       assertFalse(hashMap0.isEmpty());
140:       assertNull(object2);
141:       
142:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
143:       assertEquals(1, hashMap0.size());
144:       assertFalse(hashMap0.isEmpty());
145:       assertNotNull(patriciaTrie0);
146:       
147:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("");
148:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
150:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
151:       assertEquals(1, hashMap0.size());
152:       assertFalse(hashMap0.isEmpty());
153:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
154:       
155:       PatriciaTrie<String> patriciaTrie1 = null;
156:       try {
157:         patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
158:         fail("Expecting exception: NullPointerException");
159:       
160:       } catch(NullPointerException e) {
161:          //
162:          // no message in exception (getMessage() returned null)
163:          //
164:          verifyException("java.util.AbstractMap", e);
165:       }
166:   }
167: }
RegularFileObject[/tmp/EvoSuite_58_1605585198747/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:18 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_58_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:18.947 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 2236;
Integer integer0 = new Integer(2236);
assertEquals(2236, (int)integer0);
assertNotNull(integer0);
assertTrue(integer0.equals((Object)int0));

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(abstractMap_SimpleImmutableEntry0, "", 2236);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)int0));

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("", object0);
assertNotNull(object0);
assertTrue(integer0.equals((Object)int0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)int0));

HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

Integer integer1 = new Integer(2236);
assertEquals(2236, (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, "8jSenof9S+~O_s7RhI", 2236);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Comparator<Map.Entry<String, Object>> comparator4 = Map.Entry.comparingByKey();
assertSame(comparator4, comparator3);
assertNotNull(comparator4);

abstractPatriciaTrie_TrieEntry1.predecessor = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<String, Object>> comparator5 = Map.Entry.comparingByKey();
assertSame(comparator5, comparator3);
assertSame(comparator5, comparator4);
assertNotNull(comparator5);

abstractPatriciaTrie_TrieEntry1.value = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Object object1 = abstractPatriciaTrie_TrieEntry1.setValue("8jSenof9S+~O_s7RhI");
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNull(object1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

String string0 = (String)abstractPatriciaTrie_TrieEntry1.value;
assertEquals("8jSenof9S+~O_s7RhI", string0);
assertNotNull(string0);
assertFalse(string0.equals((Object)object0));

Integer integer2 = new Integer(2236);
assertEquals(2236, (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)int0));
assertTrue(integer2.equals((Object)integer0));

boolean boolean1 = hashMap0.remove((Object) "8jSenof9S+~O_s7RhI", (Object) integer2);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(boolean1);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)int0));
assertTrue(integer2.equals((Object)integer0));
assertTrue(boolean1 == boolean0);

Object object2 = hashMap0.put("8jSenof9S+~O_s7RhI", comparator2);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(object2);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("");
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);

[MASTER] 03:53:19.196 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_60_1605585199086/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_60_1605585199086/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:19.196 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.197 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.197 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>>: 104
[MASTER] 03:53:19.199 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_60_1605585199086/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:19.199 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:19.200 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_60_1605585199086/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:19 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_60_tmp__ESTest extends AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = null;
33:       Object object0 = patriciaTrie0.replace((String) null, (Object) null);
34:       assertNull(object0);
35:       
36:       Object object1 = patriciaTrie0.getOrDefault((Object) null, (Object) null);
37:       assertNull(object1);
38:       
39:       patriciaTrie0.incrementSize();
40:       Object object2 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
41:       assertNull(object2);
42:       
43:       SortedMap<String, Object> sortedMap0 = new PatriciaTrie<Object>();
44:       assertTrue(sortedMap0.isEmpty());
45:       assertEquals(0, sortedMap0.size());
46:       assertNotNull(sortedMap0);
47:       
48:       Set<String> set0 = patriciaTrie0.keySet();
49:       assertEquals(2, set0.size());
50:       assertFalse(set0.isEmpty());
51:       assertNotNull(set0);
52:       assertTrue(set0.contains("Cannot determine prefix outside of Character boundaries"));
53:       
54:       String string1 = "!";
55:       int int0 = (-1);
56:       Object object3 = patriciaTrie0.put("\n", "");
57:       assertNull(object3);
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("!", (-1));
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
64:       
65:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertNotNull(abstractMap_SimpleEntry0);
70:       
71:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
72:       assertNotNull(comparator0);
73:       
74:       Integer integer0 = new Integer((-1));
75:       assertEquals((-1), (int)integer0);
76:       assertNotNull(integer0);
77:       assertTrue(integer0.equals((Object)int0));
78:       
79:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer>(abstractMap_SimpleEntry0, integer0, (-1));
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
86:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
87:       assertTrue(integer0.equals((Object)int0));
88:       
89:       Integer integer1 = new Integer((-1));
90:       assertEquals((-1), (int)integer1);
91:       assertNotNull(integer1);
92:       assertTrue(integer1.equals((Object)int0));
93:       assertTrue(integer1.equals((Object)integer0));
94:       
95:       Object object4 = abstractMap_SimpleEntry0.setValue(integer1);
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertNull(object4);
100:       assertTrue(integer1.equals((Object)int0));
101:       assertTrue(integer1.equals((Object)integer0));
102:       
103:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
104:       Comparator<Map.Entry<Object, Integer>> comparator2 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
105:       assertNotNull(comparator2);
106:       
107:       Integer integer2 = new Integer(16);
108:       assertEquals(16, (int)integer2);
109:       assertNotNull(integer2);
110:       assertFalse(integer2.equals((Object)integer0));
111:       assertFalse(integer2.equals((Object)integer1));
112:       assertFalse(integer2.equals((Object)int0));
113:       
114:       Object object5 = patriciaTrie0.put("%Ecy0j", integer2);
115:       assertNull(object5);
116:       assertFalse(integer2.equals((Object)integer0));
117:       assertFalse(integer2.equals((Object)integer1));
118:       assertFalse(integer2.equals((Object)int0));
119:       
120:       Integer integer3 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry0, integer0);
121:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
122:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
124:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
127:       assertEquals((-1), (int)integer3);
128:       assertNotNull(integer3);
129:       assertTrue(integer3.equals((Object)int0));
130:       assertTrue(integer3.equals((Object)integer1));
131:       assertFalse(integer3.equals((Object)integer2));
132:       assertTrue(integer0.equals((Object)integer1));
133:       assertFalse(integer0.equals((Object)integer2));
134:       assertTrue(integer0.equals((Object)int0));
135:       
136:       // Undeclared exception!
137:       try { 
138:         Map.Entry.comparingByKey((Comparator<? super String>) null);
139:         fail("Expecting exception: NullPointerException");
140:       
141:       } catch(NullPointerException e) {
142:          //
143:          // no message in exception (getMessage() returned null)
144:          //
145:          verifyException("java.util.Objects", e);
146:       }
147:   }
148: }
RegularFileObject[/tmp/EvoSuite_60_1605585199086/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:19 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:19.202 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

String string0 = null;
Object object0 = patriciaTrie0.replace((String) null, (Object) null);
assertNull(object0);

Object object1 = patriciaTrie0.getOrDefault((Object) null, (Object) null);
assertNull(object1);

patriciaTrie0.incrementSize();
Object object2 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
assertNull(object2);

SortedMap<String, Object> sortedMap0 = new PatriciaTrie<Object>();
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(2, set0.size());
assertFalse(set0.isEmpty());
assertNotNull(set0);
assertTrue(set0.contains("Cannot determine prefix outside of Character boundaries"));

String string1 = "!";
int int0 = (-1);
Object object3 = patriciaTrie0.put("\n", "");
assertNull(object3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("!", (-1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Integer integer0 = new Integer((-1));
assertEquals((-1), (int)integer0);
assertNotNull(integer0);
assertTrue(integer0.equals((Object)int0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer>(abstractMap_SimpleEntry0, integer0, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)int0));

Integer integer1 = new Integer((-1));
assertEquals((-1), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Object object4 = abstractMap_SimpleEntry0.setValue(integer1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNull(object4);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Integer>> comparator2 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Integer integer2 = new Integer(16);
assertEquals(16, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));

Object object5 = patriciaTrie0.put("%Ecy0j", integer2);
assertNull(object5);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));

Integer integer3 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry0, integer0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals((-1), (int)integer3);
assertNotNull(integer3);
assertTrue(integer3.equals((Object)int0));
assertTrue(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)int0));

Map.Entry.comparingByKey((Comparator<? super String>) null);

[MASTER] 03:53:19.577 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_62_1605585199429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_62_1605585199429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:19.578 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.578 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.578 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 47
[MASTER] 03:53:19.579 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_62_1605585199429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:19.579 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:19.580 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_62_1605585199429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:19 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_62_tmp__ESTest extends AbstractPatriciaTrie_62_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer((-1));
28:       assertEquals((-1), (int)integer0);
29:       assertNotNull(integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("]={\n", integer0, (-2246));
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
38:       assertNotNull(patriciaTrie0);
39:       
40:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertNotNull(abstractMap_SimpleImmutableEntry0);
45:       
46:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
47:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
48:       assertNotNull(comparator1);
49:       
50:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("]={\n", abstractMap_SimpleImmutableEntry0);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertNull(abstractMap_SimpleImmutableEntry1);
55:       
56:       SortedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> sortedMap0 = patriciaTrie0.headMap("]={\n");
57:       assertTrue(sortedMap0.isEmpty());
58:       assertEquals(0, sortedMap0.size());
59:       assertNotNull(sortedMap0);
60:       
61:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
62:       assertNotNull(patriciaTrie1);
63:       
64:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-1));
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
69:       
70:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]={\n", " kSLR1</90`<.&4O", 1);
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
74:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
76:       
77:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
78:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
82:       
83:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry2);
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
88:       assertNull(abstractPatriciaTrie_TrieEntry4);
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
92:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
95:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
98:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
99:       assertNull(abstractPatriciaTrie_TrieEntry5);
100:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
101:   }
102: }
RegularFileObject[/tmp/EvoSuite_62_1605585199429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:19 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_62_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:19.583 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-1));
assertEquals((-1), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("]={\n", integer0, (-2246));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("]={\n", abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNull(abstractMap_SimpleImmutableEntry1);

SortedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> sortedMap0 = patriciaTrie0.headMap("]={\n");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]={\n", " kSLR1</90`<.&4O", 1);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));


[MASTER] 03:53:19.708 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1605585199592/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1605585199592/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:19.708 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.708 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:19.709 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>>: 103
[MASTER] 03:53:19.709 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1605585199592/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:19.709 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:19.710 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1605585199592/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:19 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_63_tmp__ESTest extends AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = null;
33:       Object object0 = patriciaTrie0.replace((String) null, (Object) null);
34:       assertNull(object0);
35:       
36:       patriciaTrie0.incrementSize();
37:       Object object1 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
38:       assertNull(object1);
39:       
40:       SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
41:       assertEquals(0, sortedMap0.size());
42:       assertTrue(sortedMap0.isEmpty());
43:       assertNotNull(sortedMap0);
44:       
45:       Set<String> set0 = patriciaTrie0.keySet();
46:       assertEquals(2, set0.size());
47:       assertFalse(set0.isEmpty());
48:       assertNotNull(set0);
49:       assertTrue(set0.contains("Cannot determine prefix outside of Character boundaries"));
50:       
51:       String string1 = "!";
52:       int int0 = (-1);
53:       Object object2 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
54:       assertEquals("Cannot determine prefix outside of Character boundaries", object2);
55:       assertNotNull(object2);
56:       assertFalse(object2.equals((Object)string1));
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("!", (-1));
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
63:       
64:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertNotNull(abstractMap_SimpleEntry0);
69:       
70:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
71:       assertNotNull(comparator0);
72:       
73:       Integer integer0 = new Integer((-1));
74:       assertEquals((-1), (int)integer0);
75:       assertNotNull(integer0);
76:       assertTrue(integer0.equals((Object)int0));
77:       
78:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer>(abstractMap_SimpleEntry0, integer0, (-1));
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
86:       assertTrue(integer0.equals((Object)int0));
87:       
88:       Integer integer1 = new Integer((-1));
89:       assertEquals((-1), (int)integer1);
90:       assertNotNull(integer1);
91:       assertTrue(integer1.equals((Object)int0));
92:       assertTrue(integer1.equals((Object)integer0));
93:       
94:       Object object3 = abstractMap_SimpleEntry0.setValue(integer1);
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertNull(object3);
99:       assertTrue(integer1.equals((Object)int0));
100:       assertTrue(integer1.equals((Object)integer0));
101:       
102:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
103:       Comparator<Map.Entry<Object, Integer>> comparator2 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
104:       assertNotNull(comparator2);
105:       
106:       Integer integer2 = new Integer(16);
107:       assertEquals(16, (int)integer2);
108:       assertNotNull(integer2);
109:       assertFalse(integer2.equals((Object)int0));
110:       assertFalse(integer2.equals((Object)integer0));
111:       assertFalse(integer2.equals((Object)integer1));
112:       
113:       Object object4 = patriciaTrie0.put("%Ecy0j", integer2);
114:       assertNull(object4);
115:       assertFalse(integer2.equals((Object)int0));
116:       assertFalse(integer2.equals((Object)integer0));
117:       assertFalse(integer2.equals((Object)integer1));
118:       
119:       Integer integer3 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry0, integer0);
120:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
126:       assertEquals((-1), (int)integer3);
127:       assertNotNull(integer3);
128:       assertFalse(integer3.equals((Object)integer2));
129:       assertTrue(integer3.equals((Object)int0));
130:       assertTrue(integer3.equals((Object)integer1));
131:       assertTrue(integer0.equals((Object)integer1));
132:       assertFalse(integer0.equals((Object)integer2));
133:       assertTrue(integer0.equals((Object)int0));
134:       
135:       // Undeclared exception!
136:       try { 
137:         Map.Entry.comparingByKey((Comparator<? super String>) null);
138:         fail("Expecting exception: NullPointerException");
139:       
140:       } catch(NullPointerException e) {
141:          //
142:          // no message in exception (getMessage() returned null)
143:          //
144:          verifyException("java.util.Objects", e);
145:       }
146:   }
147: }
RegularFileObject[/tmp/EvoSuite_63_1605585199592/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:19 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:19.731 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

String string0 = null;
Object object0 = patriciaTrie0.replace((String) null, (Object) null);
assertNull(object0);

patriciaTrie0.incrementSize();
Object object1 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
assertNull(object1);

SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(2, set0.size());
assertFalse(set0.isEmpty());
assertNotNull(set0);
assertTrue(set0.contains("Cannot determine prefix outside of Character boundaries"));

String string1 = "!";
int int0 = (-1);
Object object2 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
assertEquals("Cannot determine prefix outside of Character boundaries", object2);
assertNotNull(object2);
assertFalse(object2.equals((Object)string1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("!", (-1));
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Integer integer0 = new Integer((-1));
assertEquals((-1), (int)integer0);
assertNotNull(integer0);
assertTrue(integer0.equals((Object)int0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Integer>(abstractMap_SimpleEntry0, integer0, (-1));
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)int0));

Integer integer1 = new Integer((-1));
assertEquals((-1), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Object object3 = abstractMap_SimpleEntry0.setValue(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNull(object3);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Integer>> comparator2 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Integer integer2 = new Integer(16);
assertEquals(16, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Object object4 = patriciaTrie0.put("%Ecy0j", integer2);
assertNull(object4);
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Integer integer3 = abstractPatriciaTrie_TrieEntry1.setKeyValue(abstractMap_SimpleEntry0, integer0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals((-1), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer2));
assertTrue(integer3.equals((Object)int0));
assertTrue(integer3.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)int0));

Map.Entry.comparingByKey((Comparator<? super String>) null);

[MASTER] 03:53:21.816 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_82_1605585201725/org/apache/commons/collections4/trie/AbstractPatriciaTrie_82_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_82_1605585201725/org/apache/commons/collections4/trie/AbstractPatriciaTrie_82_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:21.816 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:21.817 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:21.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.Object>>: 59
[MASTER] 03:53:21.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_82_1605585201725/org/apache/commons/collections4/trie/AbstractPatriciaTrie_82_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:21.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:21.824 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_82_1605585201725/org/apache/commons/collections4/trie/AbstractPatriciaTrie_82_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:21 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_82_tmp__ESTest extends AbstractPatriciaTrie_82_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       boolean boolean0 = patriciaTrie0.containsKey(" r");
31:       assertFalse(boolean0);
32:       
33:       Integer integer0 = new Integer((-2828));
34:       assertEquals((-2828), (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       Integer integer1 = new Integer((-2828));
38:       assertEquals((-2828), (int)integer1);
39:       assertNotNull(integer1);
40:       assertTrue(integer1.equals((Object)integer0));
41:       
42:       Integer integer2 = patriciaTrie0.put(" r", integer1);
43:       assertNull(integer2);
44:       assertTrue(integer1.equals((Object)integer0));
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(" r", integer0, 2603);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       assertTrue(integer0.equals((Object)integer1));
52:       
53:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
54:       abstractPatriciaTrie_TrieEntry0.value = integer0;
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       
59:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       Integer integer3 = patriciaTrie0.put(" r", abstractPatriciaTrie_TrieEntry0.value);
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
66:       assertEquals((-2828), (int)integer3);
67:       assertNotNull(integer3);
68:       assertTrue(integer0.equals((Object)integer1));
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.value.equals((Object)integer1));
70:       assertTrue(integer3.equals((Object)integer0));
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertNull(abstractPatriciaTrie_TrieEntry1);
77:       assertTrue(integer0.equals((Object)integer1));
78:       assertTrue(integer0.equals((Object)integer3));
79:       
80:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
81:       assertFalse(boolean1);
82:       assertTrue(boolean1 == boolean0);
83:       
84:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
85:       assertNotNull(patriciaTrie1);
86:       
87:       SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("il9Q|bXo&?}RVG");
88:       assertTrue(sortedMap0.isEmpty());
89:       assertEquals(0, sortedMap0.size());
90:       assertNotNull(sortedMap0);
91:   }
92: }
RegularFileObject[/tmp/EvoSuite_82_1605585201725/org/apache/commons/collections4/trie/AbstractPatriciaTrie_82_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:21 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_82_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_82_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_82_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_82_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:21.827 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

boolean boolean0 = patriciaTrie0.containsKey(" r");
assertFalse(boolean0);

Integer integer0 = new Integer((-2828));
assertEquals((-2828), (int)integer0);
assertNotNull(integer0);

Integer integer1 = new Integer((-2828));
assertEquals((-2828), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = patriciaTrie0.put(" r", integer1);
assertNull(integer2);
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(" r", integer0, 2603);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry0.value = integer0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer3 = patriciaTrie0.put(" r", abstractPatriciaTrie_TrieEntry0.value);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertEquals((-2828), (int)integer3);
assertNotNull(integer3);
assertTrue(integer0.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry0.value.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer3));

boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("il9Q|bXo&?}RVG");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);


[MASTER] 03:53:22.442 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1605585202310/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1605585202310/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:22.442 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:22.442 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:22.442 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 100
[MASTER] 03:53:22.443 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>>: 129
[MASTER] 03:53:22.443 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_88_1605585202310/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:22.453 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:22.454 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1605585202310/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:22 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_88_tmp__ESTest extends AbstractPatriciaTrie_88_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       Object object0 = patriciaTrie0.put("", (Object) null);
30:       assertNull(object0);
31:       
32:       Integer integer0 = new Integer(0);
33:       assertEquals(0, (int)integer0);
34:       assertNotNull(integer0);
35:       
36:       Object object1 = patriciaTrie0.put("R]$(\"na/8D+.", integer0);
37:       assertNull(object1);
38:       
39:       Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("R]$(\"na/8D+.");
40:       assertNotNull(map_Entry0);
41:       
42:       Integer integer1 = new Integer(0);
43:       assertEquals(0, (int)integer1);
44:       assertNotNull(integer1);
45:       assertTrue(integer1.equals((Object)integer0));
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 32768);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
52:       assertTrue(integer1.equals((Object)integer0));
53:       
54:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Integer integer2 = new Integer(32768);
56:       assertEquals(32768, (int)integer2);
57:       assertNotNull(integer2);
58:       assertFalse(integer2.equals((Object)integer1));
59:       assertFalse(integer2.equals((Object)integer0));
60:       
61:       abstractPatriciaTrie_TrieEntry0.value = integer2;
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       
66:       boolean boolean0 = patriciaTrie0.containsKey("");
67:       assertTrue(boolean0);
68:       
69:       Integer integer3 = new Integer((-2));
70:       assertEquals((-2), (int)integer3);
71:       assertNotNull(integer3);
72:       assertFalse(integer3.equals((Object)integer1));
73:       assertFalse(integer3.equals((Object)integer0));
74:       assertFalse(integer3.equals((Object)integer2));
75:       
76:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
77:       AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-295));
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
82:       assertTrue(integer0.equals((Object)integer1));
83:       assertFalse(integer0.equals((Object)integer2));
84:       assertFalse(integer0.equals((Object)integer3));
85:       
86:       Comparable<Object> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
87:       assertSame(comparable1, comparable0);
88:       assertNotNull(comparable1);
89:       
90:       Object object2 = patriciaTrie0.put("", comparable1);
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
94:       assertSame(comparable1, comparable0);
95:       assertNull(object2);
96:       assertTrue(integer0.equals((Object)integer1));
97:       assertFalse(integer0.equals((Object)integer2));
98:       assertFalse(integer0.equals((Object)integer3));
99:       
100:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
101:       assertNotNull(comparator1);
102:       
103:       Integer integer4 = new Integer(1);
104:       assertEquals(1, (int)integer4);
105:       assertNotNull(integer4);
106:       assertFalse(integer4.equals((Object)integer2));
107:       assertFalse(integer4.equals((Object)integer0));
108:       assertFalse(integer4.equals((Object)integer3));
109:       assertFalse(integer4.equals((Object)integer1));
110:       
111:       Integer integer5 = new Integer(304);
112:       assertEquals(304, (int)integer5);
113:       assertNotNull(integer5);
114:       assertFalse(integer5.equals((Object)integer4));
115:       assertFalse(integer5.equals((Object)integer0));
116:       assertFalse(integer5.equals((Object)integer2));
117:       assertFalse(integer5.equals((Object)integer3));
118:       assertFalse(integer5.equals((Object)integer1));
119:       
120:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer5, "R]$(\"na/8D+.");
121:       assertNotNull(abstractMap_SimpleEntry0);
122:       assertFalse(integer5.equals((Object)integer4));
123:       assertFalse(integer5.equals((Object)integer0));
124:       assertFalse(integer5.equals((Object)integer2));
125:       assertFalse(integer5.equals((Object)integer3));
126:       assertFalse(integer5.equals((Object)integer1));
127:       
128:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
129:       Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
130:       assertNotNull(comparator3);
131:       
132:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
133:       assertNotNull(abstractMap_SimpleEntry1);
134:       assertFalse(integer5.equals((Object)integer4));
135:       assertFalse(integer5.equals((Object)integer0));
136:       assertFalse(integer5.equals((Object)integer2));
137:       assertFalse(integer5.equals((Object)integer3));
138:       assertFalse(integer5.equals((Object)integer1));
139:       
140:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
141:       assertNotNull(abstractMap_SimpleEntry2);
142:       assertFalse(integer5.equals((Object)integer4));
143:       assertFalse(integer5.equals((Object)integer0));
144:       assertFalse(integer5.equals((Object)integer2));
145:       assertFalse(integer5.equals((Object)integer3));
146:       assertFalse(integer5.equals((Object)integer1));
147:       
148:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 90);
149:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
150:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
152:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
153:       assertFalse(integer5.equals((Object)integer4));
154:       assertFalse(integer5.equals((Object)integer0));
155:       assertFalse(integer5.equals((Object)integer2));
156:       assertFalse(integer5.equals((Object)integer3));
157:       assertFalse(integer5.equals((Object)integer1));
158:       
159:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 32768);
160:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
161:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
163:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
164:       assertFalse(integer5.equals((Object)integer4));
165:       assertFalse(integer5.equals((Object)integer0));
166:       assertFalse(integer5.equals((Object)integer2));
167:       assertFalse(integer5.equals((Object)integer3));
168:       assertFalse(integer5.equals((Object)integer1));
169:       assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
170:       
171:       boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
172:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
173:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
174:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
175:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
176:       assertFalse(boolean1);
177:       assertFalse(integer5.equals((Object)integer4));
178:       assertFalse(integer5.equals((Object)integer0));
179:       assertFalse(integer5.equals((Object)integer2));
180:       assertFalse(integer5.equals((Object)integer3));
181:       assertFalse(integer5.equals((Object)integer1));
182:       assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
183:       assertFalse(boolean1 == boolean0);
184:   }
185: }
RegularFileObject[/tmp/EvoSuite_88_1605585202310/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:22 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_88_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader()));
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:53:22.457 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("", (Object) null);
assertNull(object0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Object object1 = patriciaTrie0.put("R]$(\"na/8D+.", integer0);
assertNull(object1);

Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("R]$(\"na/8D+.");
assertNotNull(map_Entry0);

Integer integer1 = new Integer(0);
assertEquals(0, (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 32768);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer1.equals((Object)integer0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer2 = new Integer(32768);
assertEquals(32768, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.value = integer2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean0 = patriciaTrie0.containsKey("");
assertTrue(boolean0);

Integer integer3 = new Integer((-2));
assertEquals((-2), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-295));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer3));

Comparable<Object> comparable1 = abstractPatriciaTrie_TrieEntry1.value;
assertSame(comparable1, comparable0);
assertNotNull(comparable1);

Object object2 = patriciaTrie0.put("", comparable1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertSame(comparable1, comparable0);
assertNull(object2);
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer3));

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer4 = new Integer(1);
assertEquals(1, (int)integer4);
assertNotNull(integer4);
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer1));

Integer integer5 = new Integer(304);
assertEquals(304, (int)integer5);
assertNotNull(integer5);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer5, "R]$(\"na/8D+.");
assertNotNull(abstractMap_SimpleEntry0);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 90);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 32768);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));

boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1);
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertFalse(boolean1 == boolean0);


[MASTER] 03:53:22.905 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1605585202827/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1605585202827/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:22.906 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:22.906 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:22.907 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>>: 109
[MASTER] 03:53:22.908 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 158
[MASTER] 03:53:22.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_93_1605585202827/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:22.909 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:22.910 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1605585202827/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:22 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_93_tmp__ESTest extends AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer((-2441));
27:       assertEquals((-2441), (int)integer0);
28:       assertNotNull(integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-2828));
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Comparable<Object>>>> comparator0 = Map.Entry.comparingByKey();
37:       assertNotNull(comparator0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-2441));
40:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
44:       
45:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator1 = Map.Entry.comparingByKey();
46:       assertNotNull(comparator1);
47:       
48:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
58:       
59:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       abstractPatriciaTrie_TrieEntry1.value = null;
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       
65:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       assertEquals("Entry(key=-2441 [-2441], value=null, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string0);
70:       assertNotNull(string0);
71:       
72:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertEquals("Entry(key=-2441 [-2828], value=null, parent=-2441 [-2441], left=-2441 [-2828], right=null, predecessor=-2441 [-2828])", string1);
77:       assertNotNull(string1);
78:       assertFalse(string1.equals((Object)string0));
79:       
80:       Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
81:       assertNotNull(comparator3);
82:       
83:       abstractPatriciaTrie_TrieEntry0.value = null;
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
87:       
88:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
98:       
99:       Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
100:       String string2 = abstractPatriciaTrie_TrieEntry1.toString();
101:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertEquals("Entry(key=-2441 [-2441], value=null, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string2);
105:       assertNotNull(string2);
106:       assertFalse(string2.equals((Object)string1));
107:       assertTrue(string2.equals((Object)string0));
108:       
109:       Comparator<Map.Entry<Integer, Object>> comparator5 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator4);
110:       assertNotNull(comparator5);
111:       assertFalse(comparator5.equals((Object)comparator3));
112:       
113:       Integer integer1 = new Integer((-2441));
114:       assertEquals((-2441), (int)integer1);
115:       assertNotNull(integer1);
116:       assertTrue(integer1.equals((Object)integer0));
117:       
118:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue(integer1);
119:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
122:       assertNull(object0);
123:       assertTrue(integer1.equals((Object)integer0));
124:       assertTrue(integer0.equals((Object)integer1));
125:       
126:       Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
127:       Integer integer2 = new Integer((-2441));
128:       assertEquals((-2441), (int)integer2);
129:       assertNotNull(integer2);
130:       assertTrue(integer2.equals((Object)integer1));
131:       assertTrue(integer2.equals((Object)integer0));
132:       
133:       Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer2, abstractPatriciaTrie_TrieEntry0.value);
134:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
135:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
137:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
139:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
140:       assertNull(object1);
141:       assertTrue(integer0.equals((Object)integer1));
142:       assertTrue(integer0.equals((Object)integer2));
143:       assertTrue(integer2.equals((Object)integer1));
144:       assertTrue(integer2.equals((Object)integer0));
145:       
146:       String string3 = abstractPatriciaTrie_TrieEntry1.toString();
147:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
149:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
150:       assertEquals("Entry(key=-2441 [-2441], value=-2441, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string3);
151:       assertNotNull(string3);
152:       assertTrue(integer0.equals((Object)integer1));
153:       assertTrue(integer0.equals((Object)integer2));
154:       assertFalse(string3.equals((Object)string1));
155:       assertFalse(string3.equals((Object)string2));
156:       assertFalse(string3.equals((Object)string0));
157:       
158:       Comparator<Map.Entry<String, Object>> comparator7 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator6);
159:       assertNotNull(comparator7);
160:       
161:       Comparator<Map.Entry<String, Comparable<Object>>> comparator8 = Map.Entry.comparingByValue();
162:       assertNotNull(comparator8);
163:       
164:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
165:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
166:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
168:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
169:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
170:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
171:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
172:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
173:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
174:       
175:       Comparator<Map.Entry<String, Comparable<Object>>> comparator9 = Map.Entry.comparingByValue();
176:       assertSame(comparator9, comparator8);
177:       assertNotNull(comparator9);
178:       
179:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
180:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
181:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
182:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
183:       assertTrue(boolean0);
184:       assertTrue(integer0.equals((Object)integer1));
185:       assertTrue(integer0.equals((Object)integer2));
186:       
187:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
188:       assertNotNull(patriciaTrie0);
189:   }
190: }
RegularFileObject[/tmp/EvoSuite_93_1605585202827/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:22 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:22.914 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-2441));
assertEquals((-2441), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-2828));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Comparable<Object>>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-2441));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Map.Entry<Comparable<Object>, Object>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.value = null;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("Entry(key=-2441 [-2441], value=null, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string0);
assertNotNull(string0);

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertEquals("Entry(key=-2441 [-2828], value=null, parent=-2441 [-2441], left=-2441 [-2828], right=null, predecessor=-2441 [-2828])", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.value = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());

Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string2 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("Entry(key=-2441 [-2441], value=null, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string2);
assertNotNull(string2);
assertFalse(string2.equals((Object)string1));
assertTrue(string2.equals((Object)string0));

Comparator<Map.Entry<Integer, Object>> comparator5 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator4);
assertNotNull(comparator5);
assertFalse(comparator5.equals((Object)comparator3));

Integer integer1 = new Integer((-2441));
assertEquals((-2441), (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue(integer1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(object0);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer2 = new Integer((-2441));
assertEquals((-2441), (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer2, abstractPatriciaTrie_TrieEntry0.value);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNull(object1);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

String string3 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("Entry(key=-2441 [-2441], value=-2441, parent=null, left=-2441 [-2441], right=null, predecessor=-2441 [-2441])", string3);
assertNotNull(string3);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string0));

Comparator<Map.Entry<String, Object>> comparator7 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator6);
assertNotNull(comparator7);

Comparator<Map.Entry<String, Comparable<Object>>> comparator8 = Map.Entry.comparingByValue();
assertNotNull(comparator8);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Comparator<Map.Entry<String, Comparable<Object>>> comparator9 = Map.Entry.comparingByValue();
assertSame(comparator9, comparator8);
assertNotNull(comparator9);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);


[MASTER] 03:53:23.097 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_95_1605585203010/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_95_1605585203010/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:23.097 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:23.098 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:23.098 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Comparable<java.lang.Object>>,java.lang.Integer>>: 72
[MASTER] 03:53:23.099 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_95_1605585203010/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:23.099 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:23.100 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_95_1605585203010/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:23 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.Set;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_95_tmp__ESTest extends AbstractPatriciaTrie_95_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Integer integer0 = new Integer(8);
30:       assertEquals(8, (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
34:       assertNotNull(patriciaTrie0);
35:       
36:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
37:       assertNotNull(patriciaTrie1);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("sK,B]xO#", "sK,B]xO#", 1652);
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
44:       
45:       String string0 = abstractPatriciaTrie_TrieEntry0.key;
46:       assertEquals("sK,B]xO#", string0);
47:       assertNotNull(string0);
48:       
49:       Object object0 = patriciaTrie1.put("sK,B]xO#", "sK,B]xO#");
50:       assertNull(object0);
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("sK,B]xO#");
53:       assertNull(abstractPatriciaTrie_TrieEntry1);
54:       
55:       Set<String> set0 = patriciaTrie1.keySet();
56:       assertFalse(set0.isEmpty());
57:       assertEquals(1, set0.size());
58:       assertNotNull(set0);
59:       assertTrue(set0.contains("sK,B]xO#"));
60:       
61:       String string1 = "";
62:       AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("w~5fnd", integer0);
63:       assertNotNull(abstractMap_SimpleEntry0);
64:       
65:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Object>(abstractMap_SimpleEntry0, patriciaTrie1, 8);
66:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
69:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
70:       
71:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
73:       assertNotNull(comparator1);
74:       
75:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isEmpty();
76:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertFalse(boolean0);
80:       
81:       Integer integer1 = new Integer(18);
82:       assertEquals(18, (int)integer1);
83:       assertNotNull(integer1);
84:       assertFalse(integer1.equals((Object)integer0));
85:       
86:       HashMap<String, Integer> hashMap0 = null;
87:       try {
88:         hashMap0 = new HashMap<String, Integer>(8, 0.0F);
89:         fail("Expecting exception: IllegalArgumentException");
90:       
91:       } catch(IllegalArgumentException e) {
92:          //
93:          // Illegal load factor: 0.0
94:          //
95:          verifyException("java.util.HashMap", e);
96:       }
97:   }
98: }
RegularFileObject[/tmp/EvoSuite_95_1605585203010/org/apache/commons/collections4/trie/AbstractPatriciaTrie_95_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:23 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_95_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_95_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:23.102 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(8);
assertEquals(8, (int)integer0);
assertNotNull(integer0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("sK,B]xO#", "sK,B]xO#", 1652);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.key;
assertEquals("sK,B]xO#", string0);
assertNotNull(string0);

Object object0 = patriciaTrie1.put("sK,B]xO#", "sK,B]xO#");
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("sK,B]xO#");
assertNull(abstractPatriciaTrie_TrieEntry1);

Set<String> set0 = patriciaTrie1.keySet();
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertNotNull(set0);
assertTrue(set0.contains("sK,B]xO#"));

String string1 = "";
AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("w~5fnd", integer0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Object>(abstractMap_SimpleEntry0, patriciaTrie1, 8);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isEmpty();
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(boolean0);

Integer integer1 = new Integer(18);
assertEquals(18, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(8, 0.0F);

[MASTER] 03:53:24.829 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_114_1605585204766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_114_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_114_1605585204766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_114_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:24.830 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:24.830 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:24.830 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 39
[MASTER] 03:53:24.830 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_114_1605585204766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_114_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:24.831 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:24.831 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_114_1605585204766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_114_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:24 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_114_tmp__ESTest extends AbstractPatriciaTrie_114_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       int int0 = 2236;
29:       Integer integer0 = new Integer(2236);
30:       assertEquals(2236, (int)integer0);
31:       assertNotNull(integer0);
32:       assertTrue(integer0.equals((Object)int0));
33:       
34:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
35:       assertNotNull(abstractMap_SimpleImmutableEntry0);
36:       assertTrue(integer0.equals((Object)int0));
37:       
38:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
40:       assertNotNull(comparator1);
41:       
42:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(abstractMap_SimpleImmutableEntry0, "", 2236);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
47:       assertTrue(integer0.equals((Object)int0));
48:       
49:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>> comparator2 = Map.Entry.comparingByValue();
50:       assertNotNull(comparator2);
51:       
52:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertEquals("", object0);
57:       assertNotNull(object0);
58:       assertTrue(integer0.equals((Object)int0));
59:       
60:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(boolean0);
65:       assertTrue(integer0.equals((Object)int0));
66:       
67:       HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
68:       assertEquals(0, hashMap0.size());
69:       assertTrue(hashMap0.isEmpty());
70:       assertNotNull(hashMap0);
71:       
72:       Integer integer1 = new Integer(2236);
73:       assertEquals(2236, (int)integer1);
74:       assertNotNull(integer1);
75:       assertTrue(integer1.equals((Object)integer0));
76:       assertTrue(integer1.equals((Object)int0));
77:       
78:       Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
79:       assertNotNull(comparator3);
80:       
81:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, "8jSenof9S+~O_s7RhI", 2236);
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
86:       assertTrue(integer1.equals((Object)integer0));
87:       assertTrue(integer1.equals((Object)int0));
88:       
89:       Comparator<Map.Entry<String, Object>> comparator4 = Map.Entry.comparingByKey();
90:       assertSame(comparator4, comparator3);
91:       assertNotNull(comparator4);
92:       
93:       abstractPatriciaTrie_TrieEntry1.predecessor = null;
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
95:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
97:       
98:       Comparator<Map.Entry<String, Object>> comparator5 = Map.Entry.comparingByKey();
99:       assertSame(comparator5, comparator3);
100:       assertSame(comparator5, comparator4);
101:       assertNotNull(comparator5);
102:       
103:       Object object1 = hashMap0.put("", "8jSenof9S+~O_s7RhI");
104:       assertFalse(hashMap0.isEmpty());
105:       assertEquals(1, hashMap0.size());
106:       assertNull(object1);
107:       
108:       abstractPatriciaTrie_TrieEntry1.value = null;
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
112:       
113:       Object object2 = abstractPatriciaTrie_TrieEntry1.setValue("8jSenof9S+~O_s7RhI");
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
115:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       assertNull(object2);
118:       assertTrue(integer1.equals((Object)integer0));
119:       assertTrue(integer1.equals((Object)int0));
120:       
121:       String string0 = (String)abstractPatriciaTrie_TrieEntry1.value;
122:       assertEquals("8jSenof9S+~O_s7RhI", string0);
123:       assertNotNull(string0);
124:       assertFalse(string0.equals((Object)object0));
125:       
126:       Integer integer2 = new Integer(2236);
127:       assertEquals(2236, (int)integer2);
128:       assertNotNull(integer2);
129:       assertTrue(integer2.equals((Object)int0));
130:       assertTrue(integer2.equals((Object)integer1));
131:       assertTrue(integer2.equals((Object)integer0));
132:       
133:       boolean boolean1 = hashMap0.remove((Object) "8jSenof9S+~O_s7RhI", (Object) integer2);
134:       assertFalse(hashMap0.isEmpty());
135:       assertEquals(1, hashMap0.size());
136:       assertFalse(boolean1);
137:       assertTrue(integer2.equals((Object)int0));
138:       assertTrue(integer2.equals((Object)integer1));
139:       assertTrue(integer2.equals((Object)integer0));
140:       assertTrue(boolean1 == boolean0);
141:       
142:       Object object3 = hashMap0.put("8jSenof9S+~O_s7RhI", comparator2);
143:       assertFalse(hashMap0.isEmpty());
144:       assertEquals(2, hashMap0.size());
145:       assertNull(object3);
146:       
147:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
148:       assertFalse(hashMap0.isEmpty());
149:       assertEquals(2, hashMap0.size());
150:       assertNotNull(patriciaTrie0);
151:       
152:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("");
153:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
156:       assertFalse(hashMap0.isEmpty());
157:       assertEquals(2, hashMap0.size());
158:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
159:       
160:       PatriciaTrie<String> patriciaTrie1 = null;
161:       try {
162:         patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
163:         fail("Expecting exception: NullPointerException");
164:       
165:       } catch(NullPointerException e) {
166:          //
167:          // no message in exception (getMessage() returned null)
168:          //
169:          verifyException("java.util.AbstractMap", e);
170:       }
171:   }
172: }
RegularFileObject[/tmp/EvoSuite_114_1605585204766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_114_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:24 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_114_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_114_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_114_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_114_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:24.834 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 2236;
Integer integer0 = new Integer(2236);
assertEquals(2236, (int)integer0);
assertNotNull(integer0);
assertTrue(integer0.equals((Object)int0));

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(abstractMap_SimpleImmutableEntry0, "", 2236);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)int0));

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertEquals("", object0);
assertNotNull(object0);
assertTrue(integer0.equals((Object)int0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)int0));

HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

Integer integer1 = new Integer(2236);
assertEquals(2236, (int)integer1);
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)int0));

Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, "8jSenof9S+~O_s7RhI", 2236);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)int0));

Comparator<Map.Entry<String, Object>> comparator4 = Map.Entry.comparingByKey();
assertSame(comparator4, comparator3);
assertNotNull(comparator4);

abstractPatriciaTrie_TrieEntry1.predecessor = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Map.Entry<String, Object>> comparator5 = Map.Entry.comparingByKey();
assertSame(comparator5, comparator3);
assertSame(comparator5, comparator4);
assertNotNull(comparator5);

Object object1 = hashMap0.put("", "8jSenof9S+~O_s7RhI");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(object1);

abstractPatriciaTrie_TrieEntry1.value = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Object object2 = abstractPatriciaTrie_TrieEntry1.setValue("8jSenof9S+~O_s7RhI");
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNull(object2);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)int0));

String string0 = (String)abstractPatriciaTrie_TrieEntry1.value;
assertEquals("8jSenof9S+~O_s7RhI", string0);
assertNotNull(string0);
assertFalse(string0.equals((Object)object0));

Integer integer2 = new Integer(2236);
assertEquals(2236, (int)integer2);
assertNotNull(integer2);
assertTrue(integer2.equals((Object)int0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

boolean boolean1 = hashMap0.remove((Object) "8jSenof9S+~O_s7RhI", (Object) integer2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(boolean1);
assertTrue(integer2.equals((Object)int0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertTrue(boolean1 == boolean0);

Object object3 = hashMap0.put("8jSenof9S+~O_s7RhI", comparator2);
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertNull(object3);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("");
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);

[MASTER] 03:53:25.542 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1605585205237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1605585205237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:25.542 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:25.542 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:25.542 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>,java.lang.String>>: 43
[MASTER] 03:53:25.543 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_119_1605585205237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:25.543 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:25.544 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1605585205237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:25 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_119_tmp__ESTest extends AbstractPatriciaTrie_119_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "");
31:       assertNotNull(abstractMap_SimpleImmutableEntry0);
32:       
33:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
34:       assertNull(abstractMap_SimpleImmutableEntry1);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>("", abstractMap_SimpleImmutableEntry0, 880);
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
41:       
42:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
43:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
44:       assertNotNull(comparator1);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
47:       assertNull(abstractPatriciaTrie_TrieEntry1);
48:       
49:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
50:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
54:       
55:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
56:       assertNotNull(patriciaTrie1);
57:       
58:       patriciaTrie1.incrementSize();
59:       // Undeclared exception!
60:       try { 
61:         patriciaTrie1.ceilingEntry("");
62:         fail("Expecting exception: NullPointerException");
63:       
64:       } catch(NullPointerException e) {
65:          //
66:          // no message in exception (getMessage() returned null)
67:          //
68:       }
69:   }
70: }
RegularFileObject[/tmp/EvoSuite_119_1605585205237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:25 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_119_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:25.545 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>("", abstractMap_SimpleImmutableEntry0, 880);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

patriciaTrie1.incrementSize();
patriciaTrie1.ceilingEntry("");

[MASTER] 03:53:25.720 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1605585205671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1605585205671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:25.721 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:25.721 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:25.722 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.Comparable<java.lang.Object>: 37
[MASTER] 03:53:25.722 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 03:53:25.723 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1605585205671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:25 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
12: import org.apache.commons.collections4.trie.PatriciaTrie;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class AbstractPatriciaTrie_121_tmp__ESTest extends AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
23:       assertNotNull(patriciaTrie0);
24:       
25:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(".:Ov6^p", patriciaTrie0, (-3));
26:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
27:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>>((Comparable<String>) null, (Comparable<Object>) null, (-3));
32:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
33:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
34:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
36:       
37:       Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
38:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
41:       assertNull(object0);
42:       
43:       boolean boolean0 = patriciaTrie0.remove((Object) ".:Ov6^p", (Object) null);
44:       assertFalse(boolean0);
45:       
46:       Integer integer0 = new Integer(1048);
47:       assertEquals(1048, (int)integer0);
48:       assertNotNull(integer0);
49:       
50:       Object object1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("A", integer0);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertNotNull(object1);
55:       
56:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 256);
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
63:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
64:       
65:       // Undeclared exception!
66:       try { 
67:         patriciaTrie0.headMap((String) null);
68:         fail("Expecting exception: IllegalArgumentException");
69:       
70:       } catch(IllegalArgumentException e) {
71:          //
72:          // must have a from or to!
73:          //
74:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
75:       }
76:   }
77: }
RegularFileObject[/tmp/EvoSuite_121_1605585205671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:25 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
97:       "org.apache.commons.collections4.IterableSortedMap",
98:       "org.apache.commons.collections4.OrderedMap",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
102:       "org.apache.commons.collections4.OrderedMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
105:       "org.apache.commons.collections4.Put",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
107:       "org.apache.commons.collections4.trie.KeyAnalyzer",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
109:       "org.apache.commons.collections4.IterableMap",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
112:       "org.apache.commons.collections4.OrderedIterator",
113:       "org.apache.commons.collections4.IterableGet"
114:     );
115:   } 
116: 
117:   private static void resetClasses() {
118:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
119: 
120:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
121:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
123:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
134:       "org.apache.commons.collections4.trie.PatriciaTrie",
135:       "org.apache.commons.collections4.trie.KeyAnalyzer",
136:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
144:     );
145:   }
146: }

[MASTER] 03:53:25.725 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(".:Ov6^p", patriciaTrie0, (-3));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>>((Comparable<String>) null, (Comparable<Object>) null, (-3));
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNull(object0);

boolean boolean0 = patriciaTrie0.remove((Object) ".:Ov6^p", (Object) null);
assertFalse(boolean0);

Integer integer0 = new Integer(1048);
assertEquals(1048, (int)integer0);
assertNotNull(integer0);

Object object1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("A", integer0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 256);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

patriciaTrie0.headMap((String) null);

[MASTER] 03:53:26.636 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_128_1605585206545/org/apache/commons/collections4/trie/AbstractPatriciaTrie_128_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_128_1605585206545/org/apache/commons/collections4/trie/AbstractPatriciaTrie_128_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:26.636 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:26.636 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:26.638 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Comparable<java.lang.Object>>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Comparable<java.lang.Object>>,java.lang.Comparable<java.lang.Integer>>>: 72
[MASTER] 03:53:26.638 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_128_1605585206545/org/apache/commons/collections4/trie/AbstractPatriciaTrie_128_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:26.638 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:26.639 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_128_1605585206545/org/apache/commons/collections4/trie/AbstractPatriciaTrie_128_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:26 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_128_tmp__ESTest extends AbstractPatriciaTrie_128_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
32:       doReturn((String) null).when(comparable0).toString();
33:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Trie[", comparable0, (-831));
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       Comparable<Object> comparable1 = abstractPatriciaTrie_TrieEntry0.setValue((Comparable<Object>) null);
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertSame(comparable1, comparable0);
44:       assertNotNull(comparable1);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Trie[", comparable1, (-831));
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
54:       
55:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
65:       
66:       Set<Map.Entry<String, Comparable<Object>>> set0 = (Set<Map.Entry<String, Comparable<Object>>>)patriciaTrie0.entrySet();
67:       assertEquals(0, set0.size());
68:       assertTrue(set0.isEmpty());
69:       assertNotNull(set0);
70:       
71:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Comparable<Object>>, Comparable<Integer>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Comparable<Object>>, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Comparable<Object>>>) comparator0);
73:       assertNotNull(comparator1);
74:       
75:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
76:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
79:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
80:       
81:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
91:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
92:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
93:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
95:       
96:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
97:       assertNotNull(patriciaTrie1);
98:       
99:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
100:       assertNull(abstractPatriciaTrie_TrieEntry4);
101:       
102:       Integer integer0 = new Integer((-2091));
103:       assertEquals((-2091), (int)integer0);
104:       assertNotNull(integer0);
105:       
106:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object>((AbstractMap.SimpleImmutableEntry<String, String>) null, integer0, (-831));
107:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
110:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
111:       
112:       boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isExternalNode();
113:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
115:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
116:       assertTrue(boolean0);
117:       
118:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
119:       assertNotNull(patriciaTrie2);
120:       
121:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, String>("Z.vK0(t!y", "Z.vK0(t!y", (-1243));
122:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
125:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
126:       
127:       patriciaTrie2.modCount = 976;
128:       int int0 = patriciaTrie2.bitIndex("", "Z.vK0(t!y");
129:       assertEquals(9, int0);
130:       
131:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry6.parent;
132:       assertNull(abstractPatriciaTrie_TrieEntry7);
133:       
134:       // Undeclared exception!
135:       try { 
136:         patriciaTrie2.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);
137:         fail("Expecting exception: NullPointerException");
138:       
139:       } catch(NullPointerException e) {
140:          //
141:          // no message in exception (getMessage() returned null)
142:          //
143:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
144:       }
145:   }
146: }
RegularFileObject[/tmp/EvoSuite_128_1605585206545/org/apache/commons/collections4/trie/AbstractPatriciaTrie_128_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:26 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_128_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_128_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_128_tmp__ESTest_scaffolding.class.getClassLoader()));
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_128_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_128_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:53:26.642 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
assertNotNull(patriciaTrie0);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(comparable0).toString();
AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Trie[", comparable0, (-831));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparable<Object> comparable1 = abstractPatriciaTrie_TrieEntry0.setValue((Comparable<Object>) null);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertSame(comparable1, comparable0);
assertNotNull(comparable1);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("Trie[", comparable1, (-831));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

Set<Map.Entry<String, Comparable<Object>>> set0 = (Set<Map.Entry<String, Comparable<Object>>>)patriciaTrie0.entrySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Comparable<Object>>, Comparable<Integer>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Comparable<Object>>, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Comparable<Object>>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
assertNull(abstractPatriciaTrie_TrieEntry4);

Integer integer0 = new Integer((-2091));
assertEquals((-2091), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Object>((AbstractMap.SimpleImmutableEntry<String, String>) null, integer0, (-831));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(boolean0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, String>("Z.vK0(t!y", "Z.vK0(t!y", (-1243));
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

patriciaTrie2.modCount = 976;
int int0 = patriciaTrie2.bitIndex("", "Z.vK0(t!y");
assertEquals(9, int0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry6.parent;
assertNull(abstractPatriciaTrie_TrieEntry7);

patriciaTrie2.followLeft((AbstractPatriciaTrie.TrieEntry<String, String>) null);

[MASTER] 03:53:27.190 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1605585207100/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1605585207100/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.java]]
[MASTER] 03:53:27.190 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:27.190 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:53:27.199 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Comparable<java.lang.Comparable>>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Comparable<java.lang.Comparable>>,java.lang.Integer>>: 45
[MASTER] 03:53:27.200 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_135_1605585207100/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:53:27.204 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:53:27.207 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1605585207100/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:53:27 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.Set;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_135_tmp__ESTest extends AbstractPatriciaTrie_135_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = patriciaTrie0.put("org.apache.commons.collections4.trieanalyze.StringKeyAnalyzer", "Y:W,");
33:       assertNull(string0);
34:       
35:       String string1 = patriciaTrie0.put("", "");
36:       assertNull(string1);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("si(cQlBXem_~}{8", (String) null, 32);
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       
44:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
45:       Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>> comparator1 = (Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Comparable<Comparable>>>) comparator0);
46:       assertNotNull(comparator1);
47:       
48:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertNull(abstractPatriciaTrie_TrieEntry1);
53:       
54:       String string2 = patriciaTrie0.putIfAbsent("si(cQlBXem_~}{8", (String) null);
55:       assertNull(string2);
56:       
57:       String string3 = patriciaTrie0.get("");
58:       assertEquals("", string3);
59:       assertNotNull(string3);
60:       
61:       String string4 = patriciaTrie0.put("si(cQlBXem_~}{8", "The offsets and lengths must be at Character boundaries");
62:       assertNull(string4);
63:       
64:       Set<String> set0 = patriciaTrie0.keySet();
65:       assertEquals(3, set0.size());
66:       assertFalse(set0.isEmpty());
67:       assertNotNull(set0);
68:       assertFalse(set0.contains("The offsets and lengths must be at Character boundaries"));
69:       assertTrue(set0.contains(""));
70:       
71:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
72:       assertNotNull(patriciaTrie1);
73:       
74:       SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("Y:W,");
75:       assertEquals(0, sortedMap0.size());
76:       assertTrue(sortedMap0.isEmpty());
77:       assertNotNull(sortedMap0);
78:       
79:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("Bi-xH1");
80:       assertNull(abstractPatriciaTrie_TrieEntry2);
81:       
82:       Integer integer0 = new Integer(3755);
83:       assertEquals(3755, (int)integer0);
84:       assertNotNull(integer0);
85:       
86:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, "Bi-xH1", (-1817));
87:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
90:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
91:       
92:       abstractPatriciaTrie_TrieEntry3.value = (Object) patriciaTrie0;
93:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
96:       
97:       Integer integer1 = new Integer(880);
98:       assertEquals(880, (int)integer1);
99:       assertNotNull(integer1);
100:       assertFalse(integer1.equals((Object)integer0));
101:       
102:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "C+<(bQoQ2D0h4z", (-1095));
103:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
105:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
106:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
107:       assertFalse(integer1.equals((Object)integer0));
108:       
109:       boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
110:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
113:       assertTrue(boolean0);
114:       assertFalse(integer1.equals((Object)integer0));
115:       
116:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
117:       assertEquals(0, hashMap0.size());
118:       assertTrue(hashMap0.isEmpty());
119:       assertNotNull(hashMap0);
120:       
121:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
122:       assertEquals(0, hashMap0.size());
123:       assertTrue(hashMap0.isEmpty());
124:       assertNotNull(patriciaTrie2);
125:       
126:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.lowerEntry("");
127:       assertEquals(0, hashMap0.size());
128:       assertTrue(hashMap0.isEmpty());
129:       assertNull(abstractPatriciaTrie_TrieEntry5);
130:       
131:       String string5 = patriciaTrie0.lastKey();
132:       assertEquals("si(cQlBXem_~}{8", string5);
133:       assertNotNull(string5);
134:       assertFalse(string5.equals((Object)string3));
135:   }
136: }
RegularFileObject[/tmp/EvoSuite_135_1605585207100/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:53:27 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_135_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:53:27.210 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("org.apache.commons.collections4.trieanalyze.StringKeyAnalyzer", "Y:W,");
assertNull(string0);

String string1 = patriciaTrie0.put("", "");
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("si(cQlBXem_~}{8", (String) null, 32);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>> comparator1 = (Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Comparable<Comparable>>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry1);

String string2 = patriciaTrie0.putIfAbsent("si(cQlBXem_~}{8", (String) null);
assertNull(string2);

String string3 = patriciaTrie0.get("");
assertEquals("", string3);
assertNotNull(string3);

String string4 = patriciaTrie0.put("si(cQlBXem_~}{8", "The offsets and lengths must be at Character boundaries");
assertNull(string4);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(3, set0.size());
assertFalse(set0.isEmpty());
assertNotNull(set0);
assertFalse(set0.contains("The offsets and lengths must be at Character boundaries"));
assertTrue(set0.contains(""));

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("Y:W,");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("Bi-xH1");
assertNull(abstractPatriciaTrie_TrieEntry2);

Integer integer0 = new Integer(3755);
assertEquals(3755, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, "Bi-xH1", (-1817));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry3.value = (Object) patriciaTrie0;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

Integer integer1 = new Integer(880);
assertEquals(880, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "C+<(bQoQ2D0h4z", (-1095));
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(boolean0);
assertFalse(integer1.equals((Object)integer0));

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.lowerEntry("");
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(abstractPatriciaTrie_TrieEntry5);

String string5 = patriciaTrie0.lastKey();
assertEquals("si(cQlBXem_~}{8", string5);
assertNotNull(string5);
assertFalse(string5.equals((Object)string3));


[MASTER] 03:54:02.285 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/9
* Done!

* Computation finished
