* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 12951
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 1689111005
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:49:07.924 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:49:07.924 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:49:34.057 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:50:14.948 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 308s and 29 generations, 24590 statements, best individual has fitness: 1540.0
* Minimizing test suite
[MASTER] 03:55:34.077 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 822
* Number of covered goals: 451
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 602
* Number of covered goals: 280
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 312
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 186
* Number of covered goals: 91
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 602
* Number of covered goals: 277
* Generated 142 tests with total length 2908
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:56:22.886 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6863833333333333% of time used, but only 15/142 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 03:56:43.852 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_18_1605585403721/org/apache/commons/collections4/trie/AbstractPatriciaTrie_18_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_18_1605585403721/org/apache/commons/collections4/trie/AbstractPatriciaTrie_18_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:43.852 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:43.854 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:43.860 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>>>: 48
[MASTER] 03:56:43.879 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_18_1605585403721/org/apache/commons/collections4/trie/AbstractPatriciaTrie_18_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:43.879 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:43.881 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_18_1605585403721/org/apache/commons/collections4/trie/AbstractPatriciaTrie_18_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:43 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_18_tmp__ESTest extends AbstractPatriciaTrie_18_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Integer integer0 = new Integer(224);
26:       assertNotNull(integer0);
27:       assertEquals(224, (int)integer0);
28:       
29:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((String) null, integer0);
30:       assertNotNull(abstractMap_SimpleImmutableEntry0);
31:       
32:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
33:       Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
34:       assertNotNull(comparator1);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>((String) null, abstractMap_SimpleImmutableEntry0, 224);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
41:       
42:       abstractPatriciaTrie_TrieEntry0.bitIndex = 224;
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       
47:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Integer>>) comparator2);
49:       assertNotNull(comparator3);
50:       
51:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
55:       assertFalse(boolean0);
56:       
57:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(boolean1);
62:       assertTrue(boolean1 == boolean0);
63:       
64:       Integer integer1 = new Integer(224);
65:       assertNotNull(integer1);
66:       assertEquals(224, (int)integer1);
67:       assertTrue(integer1.equals((Object)integer0));
68:       
69:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, (Object) null, 2419);
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
73:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
74:       assertTrue(integer1.equals((Object)integer0));
75:   }
76: }
RegularFileObject[/tmp/EvoSuite_18_1605585403721/org/apache/commons/collections4/trie/AbstractPatriciaTrie_18_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:43 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_18_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_18_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_18_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_18_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:43.882 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(224);
assertNotNull(integer0);
assertEquals(224, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((String) null, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>((String) null, abstractMap_SimpleImmutableEntry0, 224);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

abstractPatriciaTrie_TrieEntry0.bitIndex = 224;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Integer>>) comparator2);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Integer integer1 = new Integer(224);
assertNotNull(integer1);
assertEquals(224, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, (Object) null, 2419);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)integer0));


[MASTER] 03:56:49.278 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1605585409131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1605585409131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:49.301 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:49.302 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:49.303 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 58
[MASTER] 03:56:49.304 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_33_1605585409131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:49.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:49.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1605585409131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:49 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_33_tmp__ESTest extends AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Object object0 = new Object();
27:       assertNotNull(object0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(object0, "!aaB{=qwY=34.iJ@", (-309));
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       
35:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
36:       assertNotNull(patriciaTrie0);
37:       
38:       Integer integer0 = new Integer(0);
39:       assertNotNull(integer0);
40:       assertEquals(0, (int)integer0);
41:       
42:       Integer integer1 = patriciaTrie0.put("}\n", integer0);
43:       assertNull(integer1);
44:       
45:       Integer integer2 = new Integer(0);
46:       assertNotNull(integer2);
47:       assertEquals(0, (int)integer2);
48:       assertTrue(integer2.equals((Object)integer0));
49:       
50:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("!aaB{=qwY=34.iJ@", integer2, 0);
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       assertTrue(integer2.equals((Object)integer0));
56:       
57:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
58:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
59:       assertNotNull(comparator1);
60:       
61:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
62:       assertNull(abstractPatriciaTrie_TrieEntry2);
63:       
64:       // Undeclared exception!
65:       try { 
66:         patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
67:         fail("Expecting exception: NullPointerException");
68:       
69:       } catch(NullPointerException e) {
70:          //
71:          // no message in exception (getMessage() returned null)
72:          //
73:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
74:       }
75:   }
76: }
RegularFileObject[/tmp/EvoSuite_33_1605585409131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:49 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:49.307 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Object object0 = new Object();
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(object0, "!aaB{=qwY=34.iJ@", (-309));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Integer integer1 = patriciaTrie0.put("}\n", integer0);
assertNull(integer1);

Integer integer2 = new Integer(0);
assertNotNull(integer2);
assertEquals(0, (int)integer2);
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("!aaB{=qwY=34.iJ@", integer2, 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer2.equals((Object)integer0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);

[MASTER] 03:56:49.763 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_36_1605585409562/org/apache/commons/collections4/trie/AbstractPatriciaTrie_36_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_36_1605585409562/org/apache/commons/collections4/trie/AbstractPatriciaTrie_36_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:49.763 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:49.763 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:49.764 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 54
[MASTER] 03:56:49.764 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_36_1605585409562/org/apache/commons/collections4/trie/AbstractPatriciaTrie_36_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:49.764 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:49.765 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_36_1605585409562/org/apache/commons/collections4/trie/AbstractPatriciaTrie_36_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:49 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_36_tmp__ESTest extends AbstractPatriciaTrie_36_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
31:       assertNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
34:       assertEquals(12, int0);
35:       
36:       Integer integer0 = new Integer(1623);
37:       assertNotNull(integer0);
38:       assertEquals(1623, (int)integer0);
39:       assertFalse(integer0.equals((Object)int0));
40:       
41:       patriciaTrie0.modCount = 0;
42:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
43:       assertNotNull(abstractMap_SimpleEntry0);
44:       assertFalse(integer0.equals((Object)int0));
45:       
46:       Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
47:       assertNotNull(comparator0);
48:       
49:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
51:       assertNull(abstractMap_SimpleEntry1);
52:       assertFalse(integer0.equals((Object)int0));
53:       
54:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
55:       assertNotNull(comparator2);
56:       
57:       Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
58:       assertNotNull(comparator3);
59:       assertSame(comparator3, comparator0);
60:       
61:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
62:       assertNotNull(abstractMap_SimpleEntry2);
63:       assertFalse(integer0.equals((Object)int0));
64:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
65:       assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
66:       
67:       Comparator<? super String> comparator4 = patriciaTrie0.comparator();
68:       assertNotNull(comparator4);
69:       
70:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
71:       assertNotNull(patriciaTrie1);
72:       
73:       Integer integer1 = new Integer((-3957));
74:       assertNotNull(integer1);
75:       assertEquals((-3957), (int)integer1);
76:       assertFalse(integer1.equals((Object)int0));
77:       assertFalse(integer1.equals((Object)integer0));
78:       
79:       Integer integer2 = patriciaTrie1.put("", integer1);
80:       assertNull(integer2);
81:       assertFalse(integer1.equals((Object)int0));
82:       assertFalse(integer1.equals((Object)integer0));
83:       
84:       Integer integer3 = patriciaTrie1.put(";NS]#B2`03U", integer0);
85:       assertNull(integer3);
86:       assertFalse(integer0.equals((Object)integer1));
87:       assertFalse(integer0.equals((Object)int0));
88:       
89:       String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.PatriciaTrie");
90:       assertNotNull(string0);
91:       assertEquals(";NS]#B2`03U", string0);
92:       
93:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
94:       assertNotNull(patriciaTrie2);
95:       
96:       Collection<AbstractMap.SimpleEntry<Object, Integer>> collection0 = patriciaTrie2.values();
97:       assertNotNull(collection0);
98:       
99:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
100:       assertNotNull(patriciaTrie3);
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.ceilingEntry("~<0:?MHI@J)");
103:       assertNull(abstractPatriciaTrie_TrieEntry1);
104:   }
105: }
RegularFileObject[/tmp/EvoSuite_36_1605585409562/org/apache/commons/collections4/trie/AbstractPatriciaTrie_36_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:49 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_36_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_36_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_36_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_36_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:49.785 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
assertNull(abstractPatriciaTrie_TrieEntry0);

int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
assertEquals(12, int0);

Integer integer0 = new Integer(1623);
assertNotNull(integer0);
assertEquals(1623, (int)integer0);
assertFalse(integer0.equals((Object)int0));

patriciaTrie0.modCount = 0;
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
assertNotNull(abstractMap_SimpleEntry0);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);
assertSame(comparator3, comparator0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(integer0.equals((Object)int0));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

Comparator<? super String> comparator4 = patriciaTrie0.comparator();
assertNotNull(comparator4);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer((-3957));
assertNotNull(integer1);
assertEquals((-3957), (int)integer1);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = patriciaTrie1.put("", integer1);
assertNull(integer2);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

Integer integer3 = patriciaTrie1.put(";NS]#B2`03U", integer0);
assertNull(integer3);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)int0));

String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.PatriciaTrie");
assertNotNull(string0);
assertEquals(";NS]#B2`03U", string0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
assertNotNull(patriciaTrie2);

Collection<AbstractMap.SimpleEntry<Object, Integer>> collection0 = patriciaTrie2.values();
assertNotNull(collection0);

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.ceilingEntry("~<0:?MHI@J)");
assertNull(abstractPatriciaTrie_TrieEntry1);


[MASTER] 03:56:50.956 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_44_1605585410848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_44_1605585410848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:50.956 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:50.956 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:50.967 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 132
[MASTER] 03:56:50.967 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_44_1605585410848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:50.967 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:50.969 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_44_1605585410848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:50 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_44_tmp__ESTest extends AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasNext());
33:       assertFalse(orderedMapIterator0.hasPrevious());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
37:       assertEquals(0, sortedMap0.size());
38:       assertTrue(sortedMap0.isEmpty());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       Integer integer2 = new Integer(1);
76:       assertNotNull(integer2);
77:       assertEquals(1, (int)integer2);
78:       assertFalse(integer2.equals((Object)integer1));
79:       assertTrue(integer2.equals((Object)integer0));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertTrue(integer0.equals((Object)integer2));
87:       assertFalse(integer0.equals((Object)integer1));
88:       assertFalse(integer2.equals((Object)integer1));
89:       assertTrue(integer2.equals((Object)integer0));
90:       
91:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
96:       
97:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
111:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
130:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
131:       
132:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
133:       assertNotNull(comparator1);
134:       
135:       Integer integer3 = new Integer(1);
136:       assertNotNull(integer3);
137:       assertEquals(1, (int)integer3);
138:       assertFalse(integer3.equals((Object)integer1));
139:       assertTrue(integer3.equals((Object)integer0));
140:       assertTrue(integer3.equals((Object)integer2));
141:       
142:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
143:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
144:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
145:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
147:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
149:       
150:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
151:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
152:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
153:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
155:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
157:       assertNotNull(string0);
158:       assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", string0);
159:       
160:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
161:       assertNotNull(patriciaTrie1);
162:       
163:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", 1117);
164:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
167:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
168:       
169:       String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])");
170:       assertNull(string1);
171:   }
172: }
RegularFileObject[/tmp/EvoSuite_44_1605585410848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:50 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:50.976 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(1);
assertNotNull(integer3);
assertEquals(1, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));

abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", 1117);
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])");
assertNull(string1);


[MASTER] 03:56:51.219 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_45_1605585410977/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_45_1605585410977/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:51.222 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:51.222 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:51.223 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 94
[MASTER] 03:56:51.223 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_45_1605585410977/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:51.223 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:51.224 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_45_1605585410977/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:50 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_45_tmp__ESTest extends AbstractPatriciaTrie_45_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer(0);
27:       assertNotNull(integer0);
28:       assertEquals(0, (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", abstractPatriciaTrie_TrieEntry0, (-1590));
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
44:       
45:       abstractPatriciaTrie_TrieEntry1.value = (Object) "";
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       
53:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
63:       
64:       abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       
72:       abstractPatriciaTrie_TrieEntry0.key = (Object) "";
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       
77:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
78:       assertNotNull(comparator0);
79:       
80:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", integer0);
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertNotNull(object0);
85:       assertEquals(0, object0);
86:       
87:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(boolean0);
92:       
93:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
94:       Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
95:       assertNotNull(comparator2);
96:       
97:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertTrue(boolean1);
102:       assertFalse(boolean1 == boolean0);
103:       
104:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
105:       assertNotNull(patriciaTrie0);
106:       
107:       Integer integer1 = new Integer(0);
108:       assertNotNull(integer1);
109:       assertEquals(0, (int)integer1);
110:       assertTrue(integer1.equals((Object)integer0));
111:       assertTrue(integer1.equals((Object)object0));
112:       
113:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
114:       assertNotNull(abstractMap_SimpleEntry0);
115:       assertTrue(integer1.equals((Object)integer0));
116:       assertTrue(integer1.equals((Object)object0));
117:       
118:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
119:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
123:       assertTrue(integer1.equals((Object)integer0));
124:       assertTrue(integer1.equals((Object)object0));
125:       
126:       Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
127:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
130:       assertNotNull(object1);
131:       assertEquals("P?C';5|#", object1);
132:       assertTrue(integer1.equals((Object)integer0));
133:       assertTrue(integer1.equals((Object)object0));
134:       
135:       Object object2 = patriciaTrie0.put("", "P?C';5|#");
136:       assertNull(object2);
137:       
138:       int int0 = patriciaTrie0.lengthInBits("");
139:       assertEquals(0, int0);
140:       
141:       Object object3 = patriciaTrie0.put("", integer0);
142:       assertNotNull(object3);
143:       assertEquals("P?C';5|#", object3);
144:       assertTrue(integer0.equals((Object)integer1));
145:       assertTrue(integer0.equals((Object)int0));
146:       assertTrue(object3.equals((Object)object1));
147:       
148:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
149:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
152:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
153:       
154:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", 0);
155:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
156:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
157:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
158:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
159:       
160:       String string0 = abstractPatriciaTrie_TrieEntry4.setValue("");
161:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
162:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
163:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
164:       assertNotNull(string0);
165:       assertEquals("", string0);
166:       assertFalse(string0.equals((Object)object3));
167:       assertFalse(string0.equals((Object)object1));
168:       
169:       Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
170:       assertNotNull(comparator3);
171:       
172:       String string1 = abstractPatriciaTrie_TrieEntry4.toString();
173:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
174:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
175:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
176:       assertNotNull(string1);
177:       assertEquals("Entry(key=null [0], value=, parent=null, left=null [0], right=null, predecessor=null [0])", string1);
178:       assertFalse(string1.equals((Object)string0));
179:       assertFalse(string1.equals((Object)object3));
180:       assertFalse(string1.equals((Object)object1));
181:       
182:       boolean boolean2 = abstractPatriciaTrie_TrieEntry4.isEmpty();
183:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
184:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
185:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
186:       assertTrue(boolean2);
187:       assertFalse(boolean2 == boolean0);
188:       assertTrue(boolean2 == boolean1);
189:   }
190: }
RegularFileObject[/tmp/EvoSuite_45_1605585410977/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:51 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_45_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:51.280 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", abstractPatriciaTrie_TrieEntry0, (-1590));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.value = (Object) "";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = (Object) "";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", integer0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(object0);
assertEquals(0, object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
assertNotNull(comparator2);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(object1);
assertEquals("P?C';5|#", object1);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

Object object2 = patriciaTrie0.put("", "P?C';5|#");
assertNull(object2);

int int0 = patriciaTrie0.lengthInBits("");
assertEquals(0, int0);

Object object3 = patriciaTrie0.put("", integer0);
assertNotNull(object3);
assertEquals("P?C';5|#", object3);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)int0));
assertTrue(object3.equals((Object)object1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.floorEntry("");
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", 0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string0 = abstractPatriciaTrie_TrieEntry4.setValue("");
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(string0);
assertEquals("", string0);
assertFalse(string0.equals((Object)object3));
assertFalse(string0.equals((Object)object1));

Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

String string1 = abstractPatriciaTrie_TrieEntry4.toString();
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(string1);
assertEquals("Entry(key=null [0], value=, parent=null, left=null [0], right=null, predecessor=null [0])", string1);
assertFalse(string1.equals((Object)string0));
assertFalse(string1.equals((Object)object3));
assertFalse(string1.equals((Object)object1));

boolean boolean2 = abstractPatriciaTrie_TrieEntry4.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(boolean2);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);


[MASTER] 03:56:52.195 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_52_1605585412003/org/apache/commons/collections4/trie/AbstractPatriciaTrie_52_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_52_1605585412003/org/apache/commons/collections4/trie/AbstractPatriciaTrie_52_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:52.203 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:52.203 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:52.205 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 39
[MASTER] 03:56:52.205 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_52_1605585412003/org/apache/commons/collections4/trie/AbstractPatriciaTrie_52_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:52.206 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:52.207 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_52_1605585412003/org/apache/commons/collections4/trie/AbstractPatriciaTrie_52_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:52 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_52_tmp__ESTest extends AbstractPatriciaTrie_52_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
32:       assertNull(abstractPatriciaTrie_TrieEntry0);
33:       
34:       String string0 = "The offsets and lengths must be at Character boundaries";
35:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "The offsets and lengths must be at Character boundaries");
36:       assertNotNull(abstractMap_SimpleImmutableEntry0);
37:       
38:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
40:       assertNotNull(comparator1);
41:       
42:       Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
43:       assertNotNull(comparator2);
44:       
45:       String string1 = "J78}g>J,F[1slP";
46:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "J78}g>J,F[1slP", (-1387));
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
51:       
52:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       // Undeclared exception!
54:       try { 
55:         abstractMap_SimpleImmutableEntry0.setValue("1a<xg");
56:         fail("Expecting exception: UnsupportedOperationException");
57:       
58:       } catch(UnsupportedOperationException e) {
59:          //
60:          // no message in exception (getMessage() returned null)
61:          //
62:          verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
63:       }
64:   }
65: }
RegularFileObject[/tmp/EvoSuite_52_1605585412003/org/apache/commons/collections4/trie/AbstractPatriciaTrie_52_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:52 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_52_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_52_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_52_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_52_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:52.209 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

String string0 = "The offsets and lengths must be at Character boundaries";
AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "The offsets and lengths must be at Character boundaries");
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

String string1 = "J78}g>J,F[1slP";
AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "J78}g>J,F[1slP", (-1387));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractMap_SimpleImmutableEntry0.setValue("1a<xg");

[MASTER] 03:56:56.722 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1605585416539/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1605585416539/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:56.722 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:56.722 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:56.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 132
[MASTER] 03:56:56.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1605585416539/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:56.723 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:56.724 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1605585416539/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:56 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_63_tmp__ESTest extends AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasNext());
33:       assertFalse(orderedMapIterator0.hasPrevious());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
37:       assertTrue(sortedMap0.isEmpty());
38:       assertEquals(0, sortedMap0.size());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       Integer integer2 = new Integer(1);
76:       assertNotNull(integer2);
77:       assertEquals(1, (int)integer2);
78:       assertFalse(integer2.equals((Object)integer1));
79:       assertTrue(integer2.equals((Object)integer0));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertTrue(integer0.equals((Object)integer2));
87:       assertFalse(integer0.equals((Object)integer1));
88:       assertFalse(integer2.equals((Object)integer1));
89:       assertTrue(integer2.equals((Object)integer0));
90:       
91:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
96:       
97:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
103:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
106:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
111:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
118:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
124:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
130:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
131:       
132:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
133:       assertNotNull(comparator1);
134:       
135:       Integer integer3 = new Integer(1);
136:       assertNotNull(integer3);
137:       assertEquals(1, (int)integer3);
138:       assertFalse(integer3.equals((Object)integer1));
139:       assertTrue(integer3.equals((Object)integer0));
140:       assertTrue(integer3.equals((Object)integer2));
141:       
142:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
143:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
144:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
145:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
148:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
149:       
150:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
151:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
153:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
156:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
157:       assertNotNull(string0);
158:       assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", string0);
159:       
160:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
161:       assertNotNull(patriciaTrie1);
162:       
163:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("l", abstractPatriciaTrie_TrieEntry1.right, 277);
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
166:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
167:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
168:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
170:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
171:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
172:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
173:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
174:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
175:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
176:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
177:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
178:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
179:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
180:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
181:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
182:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
183:       assertTrue(integer0.equals((Object)integer3));
184:       assertTrue(integer0.equals((Object)integer2));
185:       assertFalse(integer0.equals((Object)integer1));
186:       assertTrue(integer2.equals((Object)integer3));
187:       assertFalse(integer2.equals((Object)integer1));
188:       assertTrue(integer2.equals((Object)integer0));
189:       
190:       AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry5 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry4.value;
191:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
192:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
193:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
194:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
195:       
196:       Object object0 = patriciaTrie1.put("F", abstractPatriciaTrie_TrieEntry5);
197:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
198:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
199:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
200:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
201:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
202:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
203:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
204:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
205:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
206:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
207:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
208:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
209:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
210:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
211:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
212:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
213:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
214:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
215:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
216:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
217:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
218:       assertNull(object0);
219:       assertTrue(integer0.equals((Object)integer3));
220:       assertTrue(integer0.equals((Object)integer2));
221:       assertFalse(integer0.equals((Object)integer1));
222:       assertTrue(integer2.equals((Object)integer3));
223:       assertFalse(integer2.equals((Object)integer1));
224:       assertTrue(integer2.equals((Object)integer0));
225:       assertSame(abstractPatriciaTrie_TrieEntry1.right, abstractPatriciaTrie_TrieEntry3);
226:       
227:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.getNearestEntryForKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", 1117);
228:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
229:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
230:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
231:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
232:       
233:       String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])");
234:       assertNull(string1);
235:   }
236: }
RegularFileObject[/tmp/EvoSuite_63_1605585416539/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:56 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:56.729 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(1);
assertNotNull(integer3);
assertEquals(1, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));

abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(string0);
assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("l", abstractPatriciaTrie_TrieEntry1.right, 277);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry5 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry4.value;
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Object object0 = patriciaTrie1.put("F", abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertNull(object0);
assertTrue(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertSame(abstractPatriciaTrie_TrieEntry1.right, abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.getNearestEntryForKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])", 1117);
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=qeE [1])");
assertNull(string1);


[MASTER] 03:56:57.373 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1605585417167/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1605585417167/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:57.373 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:57.376 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:57.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 54
[MASTER] 03:56:57.383 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_67_1605585417167/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:57.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:57.388 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1605585417167/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:57 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_67_tmp__ESTest extends AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
31:       assertNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
34:       assertEquals(12, int0);
35:       
36:       Integer integer0 = new Integer(1623);
37:       assertNotNull(integer0);
38:       assertEquals(1623, (int)integer0);
39:       assertFalse(integer0.equals((Object)int0));
40:       
41:       patriciaTrie0.modCount = 0;
42:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
43:       assertNotNull(abstractMap_SimpleEntry0);
44:       assertFalse(integer0.equals((Object)int0));
45:       
46:       Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
47:       assertNotNull(comparator0);
48:       
49:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
51:       assertNull(abstractMap_SimpleEntry1);
52:       assertFalse(integer0.equals((Object)int0));
53:       
54:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
55:       assertNotNull(comparator2);
56:       
57:       Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
58:       assertNotNull(comparator3);
59:       assertSame(comparator3, comparator0);
60:       
61:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
62:       assertNotNull(abstractMap_SimpleEntry2);
63:       assertFalse(integer0.equals((Object)int0));
64:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
65:       assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
66:       
67:       Comparator<? super String> comparator4 = patriciaTrie0.comparator();
68:       assertNotNull(comparator4);
69:       
70:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
71:       assertNotNull(patriciaTrie1);
72:       
73:       Integer integer1 = new Integer((-3957));
74:       assertNotNull(integer1);
75:       assertEquals((-3957), (int)integer1);
76:       assertFalse(integer1.equals((Object)int0));
77:       assertFalse(integer1.equals((Object)integer0));
78:       
79:       Integer integer2 = patriciaTrie1.put("", integer1);
80:       assertNull(integer2);
81:       assertFalse(integer1.equals((Object)int0));
82:       assertFalse(integer1.equals((Object)integer0));
83:       
84:       Integer integer3 = patriciaTrie1.put(";NS]#B2`03U", integer0);
85:       assertNull(integer3);
86:       assertFalse(integer0.equals((Object)integer1));
87:       assertFalse(integer0.equals((Object)int0));
88:       
89:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
90:       assertNotNull(patriciaTrie2);
91:       
92:       int int1 = patriciaTrie2.size();
93:       assertEquals(0, int1);
94:       assertFalse(int1 == int0);
95:       
96:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("%l@U7=V", ";NS]#B2`03U", 1623);
97:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
100:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
101:       
102:       // Undeclared exception!
103:       try { 
104:         AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
105:         fail("Expecting exception: NullPointerException");
106:       
107:       } catch(NullPointerException e) {
108:          //
109:          // no message in exception (getMessage() returned null)
110:          //
111:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
112:       }
113:   }
114: }
RegularFileObject[/tmp/EvoSuite_67_1605585417167/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:57 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:57.391 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
assertNull(abstractPatriciaTrie_TrieEntry0);

int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
assertEquals(12, int0);

Integer integer0 = new Integer(1623);
assertNotNull(integer0);
assertEquals(1623, (int)integer0);
assertFalse(integer0.equals((Object)int0));

patriciaTrie0.modCount = 0;
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
assertNotNull(abstractMap_SimpleEntry0);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);
assertSame(comparator3, comparator0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(integer0.equals((Object)int0));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

Comparator<? super String> comparator4 = patriciaTrie0.comparator();
assertNotNull(comparator4);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer((-3957));
assertNotNull(integer1);
assertEquals((-3957), (int)integer1);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = patriciaTrie1.put("", integer1);
assertNull(integer2);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

Integer integer3 = patriciaTrie1.put(";NS]#B2`03U", integer0);
assertNull(integer3);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)int0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

int int1 = patriciaTrie2.size();
assertEquals(0, int1);
assertFalse(int1 == int0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("%l@U7=V", ";NS]#B2`03U", 1623);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);

[MASTER] 03:56:59.056 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_80_1605585418873/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_80_1605585418873/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:59.056 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:59.056 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:59.058 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 158
[MASTER] 03:56:59.058 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_80_1605585418873/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:59.058 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:59.059 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_80_1605585418873/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:58 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_80_tmp__ESTest extends AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasPrevious());
33:       assertFalse(orderedMapIterator0.hasNext());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
37:       assertTrue(sortedMap0.isEmpty());
38:       assertEquals(0, sortedMap0.size());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1, 13);
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       
87:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
94:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
100:       
101:       Integer integer2 = new Integer(13);
102:       assertNotNull(integer2);
103:       assertEquals(13, (int)integer2);
104:       assertFalse(integer2.equals((Object)integer1));
105:       assertFalse(integer2.equals((Object)integer0));
106:       
107:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
111:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
112:       assertFalse(integer0.equals((Object)integer2));
113:       assertFalse(integer0.equals((Object)integer1));
114:       assertFalse(integer2.equals((Object)integer1));
115:       assertFalse(integer2.equals((Object)integer0));
116:       
117:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
118:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
119:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
121:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
122:       
123:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry4;
124:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
131:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
133:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
134:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
136:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
138:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
139:       
140:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
141:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry4;
142:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
143:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
144:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
145:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
149:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
151:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
152:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
157:       
158:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
159:       assertNotNull(comparator1);
160:       
161:       Integer integer3 = new Integer(1);
162:       assertNotNull(integer3);
163:       assertEquals(1, (int)integer3);
164:       assertTrue(integer3.equals((Object)integer0));
165:       assertFalse(integer3.equals((Object)integer1));
166:       assertFalse(integer3.equals((Object)integer2));
167:       
168:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
169:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
170:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
171:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
172:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
173:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
174:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
175:       
176:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
177:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
178:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
179:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
180:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
181:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
182:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
183:       assertNotNull(string0);
184:       assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])", string0);
185:       
186:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
187:       assertNotNull(patriciaTrie1);
188:       
189:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qeE", "Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])", 1);
190:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
191:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
192:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
193:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
194:       
195:       String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])");
196:       assertNull(string1);
197:   }
198: }
RegularFileObject[/tmp/EvoSuite_80_1605585418873/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:58 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:56:59.065 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("qeE", 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1, 13);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());

Integer integer2 = new Integer(13);
assertNotNull(integer2);
assertEquals(13, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(1);
assertNotNull(integer3);
assertEquals(1, (int)integer3);
assertTrue(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));

abstractPatriciaTrie_TrieEntry1.value = (Object) integer3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])", string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qeE", "Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])", 1);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

String string1 = patriciaTrie1.nextKey("Entry(key=qeE [1], value=1, parent=1 [-123], left=qeE [1], right=1 [-123], predecessor=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT) [13])");
assertNull(string1);


[MASTER] 03:56:59.693 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1605585419543/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1605585419543/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.java]]
[MASTER] 03:56:59.693 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:59.693 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:56:59.694 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 56
[MASTER] 03:56:59.694 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.String: 108
[MASTER] 03:56:59.695 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_85_1605585419543/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:56:59.695 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:56:59.695 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 03:56:59.696 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1605585419543/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:56:59 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import java.util.SortedMap;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_85_tmp__ESTest extends AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
33:       assertNull(abstractPatriciaTrie_TrieEntry0);
34:       
35:       int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
36:       assertEquals(12, int0);
37:       
38:       Integer integer0 = new Integer(1623);
39:       assertNotNull(integer0);
40:       assertEquals(1623, (int)integer0);
41:       assertFalse(integer0.equals((Object)int0));
42:       
43:       patriciaTrie0.modCount = 0;
44:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
45:       assertNotNull(abstractMap_SimpleEntry0);
46:       assertFalse(integer0.equals((Object)int0));
47:       
48:       Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
49:       assertNotNull(comparator0);
50:       
51:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
52:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
53:       assertNull(abstractMap_SimpleEntry1);
54:       assertFalse(integer0.equals((Object)int0));
55:       
56:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
57:       assertNotNull(comparator2);
58:       
59:       Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
60:       assertNotNull(comparator3);
61:       assertSame(comparator3, comparator0);
62:       
63:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
64:       assertNotNull(abstractMap_SimpleEntry2);
65:       assertFalse(integer0.equals((Object)int0));
66:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
67:       assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
68:       
69:       Comparator<? super String> comparator4 = patriciaTrie0.comparator();
70:       assertNotNull(comparator4);
71:       
72:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
73:       assertNotNull(patriciaTrie1);
74:       
75:       Integer integer1 = new Integer((-3957));
76:       assertNotNull(integer1);
77:       assertEquals((-3957), (int)integer1);
78:       assertFalse(integer1.equals((Object)int0));
79:       assertFalse(integer1.equals((Object)integer0));
80:       
81:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie2);
83:       
84:       SortedMap<String, Object> sortedMap0 = patriciaTrie2.tailMap("");
85:       assertEquals(0, sortedMap0.size());
86:       assertTrue(sortedMap0.isEmpty());
87:       assertNotNull(sortedMap0);
88:       
89:       Object object0 = new Object();
90:       assertNotNull(object0);
91:       
92:       Integer integer2 = new Integer(6156);
93:       assertNotNull(integer2);
94:       assertEquals(6156, (int)integer2);
95:       assertFalse(integer2.equals((Object)integer0));
96:       assertFalse(integer2.equals((Object)int0));
97:       assertFalse(integer2.equals((Object)integer1));
98:       
99:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "ToKey is out of range: ", 0);
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
104:       assertFalse(integer2.equals((Object)integer0));
105:       assertFalse(integer2.equals((Object)int0));
106:       assertFalse(integer2.equals((Object)integer1));
107:       
108:       Object object1 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
112:       assertNotNull(object1);
113:       assertEquals("ToKey is out of range: ", object1);
114:       assertFalse(integer2.equals((Object)integer0));
115:       assertFalse(integer2.equals((Object)int0));
116:       assertFalse(integer2.equals((Object)integer1));
117:       
118:       Object object2 = patriciaTrie2.put("dEyIc]/k%`<AP%", "ToKey is out of range: ");
119:       assertNull(object2);
120:       
121:       BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
122:       Object object3 = new Object();
123:       assertNotNull(object3);
124:       assertFalse(object3.equals((Object)object0));
125:       
126:       Set<String> set0 = patriciaTrie2.keySet();
127:       assertFalse(set0.isEmpty());
128:       assertEquals(1, set0.size());
129:       assertNotNull(set0);
130:       assertTrue(set0.contains("dEyIc]/k%`<AP%"));
131:       assertFalse(set0.contains("Y}{[4)H"));
132:       
133:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("ToKey is out of range: ");
134:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
135:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
137:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
138:   }
139: }
RegularFileObject[/tmp/EvoSuite_85_1605585419543/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:56:59 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:56:59.699 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Y}{[4)H", 0, 1623);
assertNull(abstractPatriciaTrie_TrieEntry0);

int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
assertEquals(12, int0);

Integer integer0 = new Integer(1623);
assertNotNull(integer0);
assertEquals(1623, (int)integer0);
assertFalse(integer0.equals((Object)int0));

patriciaTrie0.modCount = 0;
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
assertNotNull(abstractMap_SimpleEntry0);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);
assertFalse(integer0.equals((Object)int0));

Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);
assertSame(comparator3, comparator0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(integer0.equals((Object)int0));
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

Comparator<? super String> comparator4 = patriciaTrie0.comparator();
assertNotNull(comparator4);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer((-3957));
assertNotNull(integer1);
assertEquals((-3957), (int)integer1);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

SortedMap<String, Object> sortedMap0 = patriciaTrie2.tailMap("");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

Object object0 = new Object();
assertNotNull(object0);

Integer integer2 = new Integer(6156);
assertNotNull(integer2);
assertEquals(6156, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "ToKey is out of range: ", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));

Object object1 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(object1);
assertEquals("ToKey is out of range: ", object1);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));

Object object2 = patriciaTrie2.put("dEyIc]/k%`<AP%", "ToKey is out of range: ");
assertNull(object2);

BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
Object object3 = new Object();
assertNotNull(object3);
assertFalse(object3.equals((Object)object0));

Set<String> set0 = patriciaTrie2.keySet();
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertNotNull(set0);
assertTrue(set0.contains("dEyIc]/k%`<AP%"));
assertFalse(set0.contains("Y}{[4)H"));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("ToKey is out of range: ");
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);


[MASTER] 03:57:02.566 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1605585422414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1605585422414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:02.588 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:02.588 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:02.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 171
[MASTER] 03:57:02.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_93_1605585422414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:02.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:02.592 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1605585422414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:02 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_93_tmp__ESTest extends AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       assertNotNull(hashMap0);
33:       
34:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
35:       assertTrue(hashMap1.isEmpty());
36:       assertEquals(0, hashMap1.size());
37:       assertNotNull(hashMap1);
38:       
39:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
40:       assertTrue(hashMap1.isEmpty());
41:       assertEquals(0, hashMap1.size());
42:       assertNotNull(patriciaTrie0);
43:       
44:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
45:       assertTrue(hashMap1.isEmpty());
46:       assertEquals(0, hashMap1.size());
47:       assertFalse(orderedMapIterator0.hasPrevious());
48:       assertFalse(orderedMapIterator0.hasNext());
49:       assertNotNull(orderedMapIterator0);
50:       
51:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
52:       assertTrue(hashMap1.isEmpty());
53:       assertEquals(0, hashMap1.size());
54:       assertEquals(0, sortedMap0.size());
55:       assertTrue(sortedMap0.isEmpty());
56:       assertNotNull(sortedMap0);
57:       
58:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
59:       assertTrue(hashMap1.isEmpty());
60:       assertEquals(0, hashMap1.size());
61:       assertNotNull(patriciaTrie1);
62:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
63:       
64:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey((String) null, 2620);
65:       assertTrue(hashMap1.isEmpty());
66:       assertEquals(0, hashMap1.size());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
71:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
72:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
73:       assertNotSame(patriciaTrie0, patriciaTrie1);
74:       assertNotSame(patriciaTrie1, patriciaTrie0);
75:       
76:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, 1);
77:       assertTrue(hashMap1.isEmpty());
78:       assertEquals(0, hashMap1.size());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
82:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
83:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
84:       
85:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 2);
86:       assertTrue(hashMap1.isEmpty());
87:       assertEquals(0, hashMap1.size());
88:       assertEquals(0, sortedMap0.size());
89:       assertTrue(sortedMap0.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
93:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
94:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
95:       
96:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
97:       assertTrue(hashMap1.isEmpty());
98:       assertEquals(0, hashMap1.size());
99:       assertEquals(0, sortedMap0.size());
100:       assertTrue(sortedMap0.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
110:       
111:       Integer integer0 = new Integer(0);
112:       assertNotNull(integer0);
113:       assertEquals(0, (int)integer0);
114:       
115:       Integer integer1 = new Integer((-2879));
116:       assertNotNull(integer1);
117:       assertEquals((-2879), (int)integer1);
118:       assertFalse(integer1.equals((Object)integer0));
119:       
120:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
121:       assertTrue(hashMap1.isEmpty());
122:       assertEquals(0, hashMap1.size());
123:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
124:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
126:       assertFalse(boolean0);
127:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
128:       assertNotSame(patriciaTrie0, patriciaTrie1);
129:       
130:       Integer integer2 = new Integer(1);
131:       assertNotNull(integer2);
132:       assertEquals(1, (int)integer2);
133:       assertFalse(integer2.equals((Object)integer1));
134:       assertFalse(integer2.equals((Object)integer0));
135:       
136:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, sortedMap0, 0);
137:       assertTrue(hashMap1.isEmpty());
138:       assertEquals(0, hashMap1.size());
139:       assertEquals(0, sortedMap0.size());
140:       assertTrue(sortedMap0.isEmpty());
141:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
142:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
144:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
145:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
146:       assertFalse(integer0.equals((Object)integer2));
147:       assertFalse(integer0.equals((Object)integer1));
148:       
149:       abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry1;
150:       assertTrue(hashMap1.isEmpty());
151:       assertEquals(0, hashMap1.size());
152:       assertEquals(0, sortedMap0.size());
153:       assertTrue(sortedMap0.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
157:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
158:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
159:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
160:       assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
161:       assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
163:       
164:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
165:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
166:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
168:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
169:       
170:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
171:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
172:       assertNotNull(comparator1);
173:       
174:       Integer integer3 = new Integer(2);
175:       assertNotNull(integer3);
176:       assertEquals(2, (int)integer3);
177:       assertFalse(integer3.equals((Object)integer1));
178:       assertFalse(integer3.equals((Object)integer2));
179:       assertFalse(integer3.equals((Object)integer0));
180:       
181:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
182:       assertTrue(hashMap1.isEmpty());
183:       assertEquals(0, hashMap1.size());
184:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
185:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
186:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
187:       assertNotNull(string0);
188:       assertEquals("Entry(key=Trie[0]={\n}\n [1], value=null, parent=null, left={} [2], right=null, predecessor=Trie[0]={\n}\n [1])", string0);
189:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
190:       assertNotSame(patriciaTrie0, patriciaTrie1);
191:       
192:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
193:       assertNotNull(patriciaTrie2);
194:       
195:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.getNearestEntryForKey("qeE", 1952);
196:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
197:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
198:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
199:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
200:       
201:       String string1 = patriciaTrie2.nextKey("qeE");
202:       assertNull(string1);
203:   }
204: }
RegularFileObject[/tmp/EvoSuite_93_1605585422414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:02 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:02.595 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

HashMap<String, String> hashMap1 = new HashMap<String, String>();
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertNotNull(hashMap1);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey((String) null, 2620);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, 1);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 2);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Integer integer1 = new Integer((-2879));
assertNotNull(integer1);
assertEquals((-2879), (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotSame(patriciaTrie0, patriciaTrie1);

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, sortedMap0, 0);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(2);
assertNotNull(integer3);
assertEquals(2, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(string0);
assertEquals("Entry(key=Trie[0]={\n}\n [1], value=null, parent=null, left={} [2], right=null, predecessor=Trie[0]={\n}\n [1])", string0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotSame(patriciaTrie0, patriciaTrie1);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.getNearestEntryForKey("qeE", 1952);
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

String string1 = patriciaTrie2.nextKey("qeE");
assertNull(string1);


[MASTER] 03:57:02.991 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1605585422857/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1605585422857/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:02.992 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:02.992 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:03.000 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 94
[MASTER] 03:57:03.001 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_96_1605585422857/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:03.001 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:03.002 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1605585422857/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:02 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_96_tmp__ESTest extends AbstractPatriciaTrie_96_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer(0);
27:       assertNotNull(integer0);
28:       assertEquals(0, (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("y", abstractPatriciaTrie_TrieEntry0, (-1590));
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
44:       
45:       abstractPatriciaTrie_TrieEntry1.value = (Object) "y";
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       
53:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
63:       
64:       abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       
72:       abstractPatriciaTrie_TrieEntry0.key = (Object) "";
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       
77:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
78:       assertNotNull(comparator0);
79:       
80:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("y", integer0);
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertNotNull(object0);
85:       assertEquals(0, object0);
86:       
87:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(boolean0);
92:       
93:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
94:       Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
95:       assertNotNull(comparator2);
96:       
97:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertTrue(boolean1);
102:       assertFalse(boolean1 == boolean0);
103:       
104:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
105:       assertNotNull(patriciaTrie0);
106:       
107:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) object0, (Object) null);
108:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
111:       assertNotNull(abstractMap_SimpleEntry0);
112:       
113:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
114:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
121:       
122:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("", abstractMap_SimpleEntry0, 32);
123:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
129:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
130:       
131:       abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry3;
132:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
135:       assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
138:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
140:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
141:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
143:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
144:       
145:       Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
146:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
148:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
149:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
151:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
152:       assertNotNull(object1);
153:       assertEquals("P?C';5|#", object1);
154:       
155:       Object object2 = patriciaTrie0.put("", "P?C';5|#");
156:       assertNull(object2);
157:       
158:       int int0 = patriciaTrie0.lengthInBits("y");
159:       assertEquals(16, int0);
160:       
161:       Object object3 = patriciaTrie0.put("", integer0);
162:       assertNotNull(object3);
163:       assertEquals("P?C';5|#", object3);
164:       assertFalse(integer0.equals((Object)int0));
165:       assertTrue(object3.equals((Object)object1));
166:       
167:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", 0);
168:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
170:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
171:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
172:       
173:       String string0 = abstractPatriciaTrie_TrieEntry4.setValue("");
174:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
175:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
176:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
177:       assertNotNull(string0);
178:       assertEquals("", string0);
179:       assertFalse(string0.equals((Object)object1));
180:       assertFalse(string0.equals((Object)object3));
181:       
182:       Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
183:       assertNotNull(comparator3);
184:       
185:       String string1 = abstractPatriciaTrie_TrieEntry4.toString();
186:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
187:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
188:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
189:       assertNotNull(string1);
190:       assertEquals("Entry(key=null [0], value=, parent=null, left=null [0], right=null, predecessor=null [0])", string1);
191:       assertFalse(string1.equals((Object)string0));
192:       assertFalse(string1.equals((Object)object3));
193:       assertFalse(string1.equals((Object)object1));
194:       
195:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("P?C';5|#");
196:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
197:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
198:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
199:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
200:   }
201: }
RegularFileObject[/tmp/EvoSuite_96_1605585422857/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:02 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_96_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:03.006 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("y", abstractPatriciaTrie_TrieEntry0, (-1590));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.value = (Object) "y";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = (Object) "";
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("y", integer0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(object0);
assertEquals(0, object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
assertNotNull(comparator2);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) object0, (Object) null);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("", abstractMap_SimpleEntry0, 32);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(object1);
assertEquals("P?C';5|#", object1);

Object object2 = patriciaTrie0.put("", "P?C';5|#");
assertNull(object2);

int int0 = patriciaTrie0.lengthInBits("y");
assertEquals(16, int0);

Object object3 = patriciaTrie0.put("", integer0);
assertNotNull(object3);
assertEquals("P?C';5|#", object3);
assertFalse(integer0.equals((Object)int0));
assertTrue(object3.equals((Object)object1));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", 0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string0 = abstractPatriciaTrie_TrieEntry4.setValue("");
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(string0);
assertEquals("", string0);
assertFalse(string0.equals((Object)object1));
assertFalse(string0.equals((Object)object3));

Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

String string1 = abstractPatriciaTrie_TrieEntry4.toString();
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(string1);
assertEquals("Entry(key=null [0], value=, parent=null, left=null [0], right=null, predecessor=null [0])", string1);
assertFalse(string1.equals((Object)string0));
assertFalse(string1.equals((Object)object3));
assertFalse(string1.equals((Object)object1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("P?C';5|#");
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);


[MASTER] 03:57:03.463 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_101_1605585423399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_101_1605585423399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:03.463 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:03.465 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:03.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 92
[MASTER] 03:57:03.466 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_101_1605585423399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:03.466 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:03.480 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_101_1605585423399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:03 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_101_tmp__ESTest extends AbstractPatriciaTrie_101_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer(0);
28:       assertNotNull(integer0);
29:       assertEquals(0, (int)integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("y", abstractPatriciaTrie_TrieEntry0, (-1590));
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
44:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
45:       
46:       abstractPatriciaTrie_TrieEntry1.value = (Object) "y";
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       
54:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
64:       
65:       abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       
73:       abstractPatriciaTrie_TrieEntry0.key = (Object) "";
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       
78:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("y", integer0);
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertNotNull(object0);
83:       assertEquals(0, object0);
84:       
85:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
89:       assertFalse(boolean0);
90:       
91:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
93:       assertNotNull(comparator1);
94:       
95:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertTrue(boolean1);
100:       assertFalse(boolean1 == boolean0);
101:       
102:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
103:       assertNotNull(patriciaTrie0);
104:       
105:       Integer integer1 = new Integer(0);
106:       assertNotNull(integer1);
107:       assertEquals(0, (int)integer1);
108:       assertTrue(integer1.equals((Object)integer0));
109:       assertTrue(integer1.equals((Object)object0));
110:       
111:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
112:       assertNotNull(abstractMap_SimpleEntry0);
113:       assertTrue(integer1.equals((Object)integer0));
114:       assertTrue(integer1.equals((Object)object0));
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
121:       assertTrue(integer1.equals((Object)integer0));
122:       assertTrue(integer1.equals((Object)object0));
123:       
124:       String string0 = abstractPatriciaTrie_TrieEntry2.toString();
125:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
127:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
128:       assertNotNull(string0);
129:       assertEquals("Entry(key=P?C';5|# [0], value=0=null, parent=null, left=P?C';5|# [0], right=null, predecessor=P?C';5|# [0])", string0);
130:       assertTrue(integer1.equals((Object)integer0));
131:       assertTrue(integer1.equals((Object)object0));
132:       
133:       Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
134:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
136:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
137:       assertNotNull(object1);
138:       assertEquals("P?C';5|#", object1);
139:       assertFalse(object1.equals((Object)string0));
140:       assertTrue(integer1.equals((Object)integer0));
141:       assertTrue(integer1.equals((Object)object0));
142:       
143:       Integer integer2 = new Integer(0);
144:       assertNotNull(integer2);
145:       assertEquals(0, (int)integer2);
146:       assertTrue(integer2.equals((Object)object0));
147:       assertTrue(integer2.equals((Object)integer1));
148:       assertTrue(integer2.equals((Object)integer0));
149:       
150:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer2, abstractPatriciaTrie_TrieEntry0, (-1590));
151:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
153:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
156:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
157:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
158:       assertTrue(integer0.equals((Object)integer2));
159:       assertTrue(integer0.equals((Object)integer1));
160:       assertTrue(integer2.equals((Object)object0));
161:       assertTrue(integer2.equals((Object)integer1));
162:       assertTrue(integer2.equals((Object)integer0));
163:       
164:       String string1 = abstractPatriciaTrie_TrieEntry3.toString();
165:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
167:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
168:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
169:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
170:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
171:       assertNotNull(string1);
172:       assertEquals("Entry(key=0 [-1590], value=Entry(key=y [-1590], value=0, parent=null, left=y [0], right=null, predecessor=y [-1590]), parent=null, left=0 [-1590], right=null, predecessor=0 [-1590])", string1);
173:       assertTrue(integer0.equals((Object)integer2));
174:       assertTrue(integer0.equals((Object)integer1));
175:       assertTrue(integer2.equals((Object)object0));
176:       assertTrue(integer2.equals((Object)integer1));
177:       assertTrue(integer2.equals((Object)integer0));
178:       assertFalse(string1.equals((Object)object1));
179:       assertFalse(string1.equals((Object)string0));
180:       
181:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
182:       assertNotNull(patriciaTrie1);
183:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
184:       
185:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("", 0);
186:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
187:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
188:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
189:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
190:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
191:       assertNotSame(patriciaTrie1, patriciaTrie0);
192:       
193:       // Undeclared exception!
194:       try { 
195:         patriciaTrie1.nextKey((String) null);
196:         fail("Expecting exception: NullPointerException");
197:       
198:       } catch(NullPointerException e) {
199:          //
200:          // no message in exception (getMessage() returned null)
201:          //
202:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
203:       }
204:   }
205: }
RegularFileObject[/tmp/EvoSuite_101_1605585423399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:03 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_101_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:03.483 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, (-1590));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("y", abstractPatriciaTrie_TrieEntry0, (-1590));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.value = (Object) "y";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = (Object) "";
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("y", integer0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object0);
assertEquals(0, object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("P?C';5|#", abstractMap_SimpleEntry0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

String string0 = abstractPatriciaTrie_TrieEntry2.toString();
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=P?C';5|# [0], value=0=null, parent=null, left=P?C';5|# [0], right=null, predecessor=P?C';5|# [0])", string0);
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(object1);
assertEquals("P?C';5|#", object1);
assertFalse(object1.equals((Object)string0));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)object0));

Integer integer2 = new Integer(0);
assertNotNull(integer2);
assertEquals(0, (int)integer2);
assertTrue(integer2.equals((Object)object0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer2, abstractPatriciaTrie_TrieEntry0, (-1590));
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)object0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

String string1 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(string1);
assertEquals("Entry(key=0 [-1590], value=Entry(key=y [-1590], value=0, parent=null, left=y [0], right=null, predecessor=y [-1590]), parent=null, left=0 [-1590], right=null, predecessor=0 [-1590])", string1);
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)object0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertFalse(string1.equals((Object)object1));
assertFalse(string1.equals((Object)string0));

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("", 0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie1, patriciaTrie0);

patriciaTrie1.nextKey((String) null);

[MASTER] 03:57:03.950 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1605585423879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1605585423879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:03.951 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:03.951 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:03.953 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 132
[MASTER] 03:57:03.953 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_103_1605585423879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:03.960 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:03.961 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1605585423879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:03 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_103_tmp__ESTest extends AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasPrevious());
33:       assertFalse(orderedMapIterator0.hasNext());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
37:       assertTrue(sortedMap0.isEmpty());
38:       assertEquals(0, sortedMap0.size());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("qeE", "qeE", 1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       Integer integer2 = new Integer(1);
76:       assertNotNull(integer2);
77:       assertEquals(1, (int)integer2);
78:       assertTrue(integer2.equals((Object)integer0));
79:       assertFalse(integer2.equals((Object)integer1));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertTrue(integer0.equals((Object)integer2));
87:       assertFalse(integer0.equals((Object)integer1));
88:       assertTrue(integer2.equals((Object)integer0));
89:       assertFalse(integer2.equals((Object)integer1));
90:       
91:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
96:       
97:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
122:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
131:       
132:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
133:       assertNotNull(comparator1);
134:       
135:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
136:       assertNotNull(patriciaTrie1);
137:       
138:       Object object0 = patriciaTrie1.put("qeE", patriciaTrie0);
139:       assertNull(object0);
140:       
141:       int int0 = patriciaTrie1.lengthInBits("qeE");
142:       assertEquals(48, int0);
143:       
144:       Object object1 = patriciaTrie1.put("qeE", abstractPatriciaTrie_TrieEntry0);
145:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
147:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
148:       assertNotNull(object1);
149:       
150:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.floorEntry("qeE");
151:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
153:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
154:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
155:       
156:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", 292);
157:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
158:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
159:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
160:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
161:       assertFalse(integer1.equals((Object)integer2));
162:       assertFalse(integer1.equals((Object)integer0));
163:       assertFalse(integer1.equals((Object)int0));
164:       
165:       String string0 = abstractPatriciaTrie_TrieEntry5.setValue("");
166:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
168:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
169:       assertNotNull(string0);
170:       assertEquals("", string0);
171:       assertFalse(integer1.equals((Object)integer2));
172:       assertFalse(integer1.equals((Object)integer0));
173:       assertFalse(integer1.equals((Object)int0));
174:       
175:       Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
176:       assertNotNull(comparator2);
177:       
178:       String string1 = abstractPatriciaTrie_TrieEntry5.toString();
179:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
180:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
181:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
182:       assertNotNull(string1);
183:       assertEquals("Entry(key=0 [292], value=, parent=null, left=0 [292], right=null, predecessor=0 [292])", string1);
184:       assertFalse(integer1.equals((Object)integer2));
185:       assertFalse(integer1.equals((Object)integer0));
186:       assertFalse(integer1.equals((Object)int0));
187:       assertFalse(string1.equals((Object)string0));
188:       
189:       boolean boolean1 = abstractPatriciaTrie_TrieEntry5.isEmpty();
190:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
191:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
192:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
193:       assertFalse(boolean1);
194:       assertFalse(integer1.equals((Object)integer2));
195:       assertFalse(integer1.equals((Object)integer0));
196:       assertFalse(integer1.equals((Object)int0));
197:       assertTrue(boolean1 == boolean0);
198:   }
199: }
RegularFileObject[/tmp/EvoSuite_103_1605585423879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:03 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:03.965 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("qeE", "qeE", 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qeE", abstractPatriciaTrie_TrieEntry0, 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("qeE", patriciaTrie0);
assertNull(object0);

int int0 = patriciaTrie1.lengthInBits("qeE");
assertEquals(48, int0);

Object object1 = patriciaTrie1.put("qeE", abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.floorEntry("qeE");
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", 292);
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));

String string0 = abstractPatriciaTrie_TrieEntry5.setValue("");
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotNull(string0);
assertEquals("", string0);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));

Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

String string1 = abstractPatriciaTrie_TrieEntry5.toString();
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotNull(string1);
assertEquals("Entry(key=0 [292], value=, parent=null, left=0 [292], right=null, predecessor=0 [292])", string1);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));
assertFalse(string1.equals((Object)string0));

boolean boolean1 = abstractPatriciaTrie_TrieEntry5.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(boolean1);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));
assertTrue(boolean1 == boolean0);


[MASTER] 03:57:05.442 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1605585425364/org/apache/commons/collections4/trie/AbstractPatriciaTrie_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1605585425364/org/apache/commons/collections4/trie/AbstractPatriciaTrie_115_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:05.443 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.443 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.444 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 94
[MASTER] 03:57:05.445 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_115_1605585425364/org/apache/commons/collections4/trie/AbstractPatriciaTrie_115_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:05.445 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:05.447 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1605585425364/org/apache/commons/collections4/trie/AbstractPatriciaTrie_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:05 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_115_tmp__ESTest extends AbstractPatriciaTrie_115_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.put("", "");
31:       assertNull(string0);
32:       
33:       PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
34:       assertNotNull(patriciaTrie1);
35:       
36:       int int0 = patriciaTrie0.bitIndex((String) null, "");
37:       assertEquals((-1), int0);
38:       
39:       boolean boolean0 = patriciaTrie1.compareKeys("", "");
40:       assertTrue(boolean0);
41:       
42:       SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
43:       assertTrue(sortedMap0.isEmpty());
44:       assertEquals(0, sortedMap0.size());
45:       assertNotNull(sortedMap0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2085);
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
52:       
53:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertNotNull(abstractMap_SimpleEntry0);
58:       
59:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, patriciaTrie1, 474);
60:       assertTrue(sortedMap0.isEmpty());
61:       assertEquals(0, sortedMap0.size());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
66:       
67:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(patriciaTrie1);
68:       assertTrue(sortedMap0.isEmpty());
69:       assertEquals(0, sortedMap0.size());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
73:       assertFalse(boolean1);
74:       assertFalse(boolean1 == boolean0);
75:       
76:       Integer integer0 = new Integer(3567);
77:       assertNotNull(integer0);
78:       assertEquals(3567, (int)integer0);
79:       assertFalse(integer0.equals((Object)int0));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "", 474);
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       
87:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KE8", "S[XL", (-1));
88:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
91:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
92:       
93:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
94:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
95:       assertNotNull(comparator1);
96:       
97:       Integer integer1 = new Integer((-1));
98:       assertNotNull(integer1);
99:       assertEquals((-1), (int)integer1);
100:       assertTrue(integer1.equals((Object)int0));
101:       assertFalse(integer1.equals((Object)integer0));
102:       
103:       String string1 = abstractPatriciaTrie_TrieEntry1.toString();
104:       assertTrue(sortedMap0.isEmpty());
105:       assertEquals(0, sortedMap0.size());
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
109:       assertNotNull(string1);
110:       assertEquals("Entry(key={} [474], value=Trie[1]={\n  RootEntry(key= [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n, parent=null, left={} [474], right=null, predecessor={} [474])", string1);
111:       
112:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
113:       assertNotNull(patriciaTrie2);
114:       
115:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.getNearestEntryForKey("", (-2976));
116:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
119:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
120:       
121:       String string2 = patriciaTrie2.nextKey("");
122:       assertNull(string2);
123:   }
124: }
RegularFileObject[/tmp/EvoSuite_115_1605585425364/org/apache/commons/collections4/trie/AbstractPatriciaTrie_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:05 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_115_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_115_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:05.449 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("", "");
assertNull(string0);

PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
assertNotNull(patriciaTrie1);

int int0 = patriciaTrie0.bitIndex((String) null, "");
assertEquals((-1), int0);

boolean boolean0 = patriciaTrie1.compareKeys("", "");
assertTrue(boolean0);

SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2085);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, patriciaTrie1, 474);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(patriciaTrie1);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

Integer integer0 = new Integer(3567);
assertNotNull(integer0);
assertEquals(3567, (int)integer0);
assertFalse(integer0.equals((Object)int0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "", 474);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KE8", "S[XL", (-1));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer1 = new Integer((-1));
assertNotNull(integer1);
assertEquals((-1), (int)integer1);
assertTrue(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

String string1 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(string1);
assertEquals("Entry(key={} [474], value=Trie[1]={\n  RootEntry(key= [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n, parent=null, left={} [474], right=null, predecessor={} [474])", string1);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.getNearestEntryForKey("", (-2976));
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string2 = patriciaTrie2.nextKey("");
assertNull(string2);


[MASTER] 03:57:05.627 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_116_1605585425454/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_116_1605585425454/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:05.627 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.627 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.629 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 142
[MASTER] 03:57:05.629 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_116_1605585425454/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:05.630 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:05.630 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_116_1605585425454/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:05 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_116_tmp__ESTest extends AbstractPatriciaTrie_116_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
31:       assertNull(object0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(boolean0);
44:       
45:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(boolean1);
50:       assertTrue(boolean1 == boolean0);
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
68:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
69:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
70:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
71:       
72:       Integer integer0 = new Integer(292);
73:       assertNotNull(integer0);
74:       assertEquals(292, (int)integer0);
75:       
76:       Integer integer1 = new Integer(292);
77:       assertNotNull(integer1);
78:       assertEquals(292, (int)integer1);
79:       assertTrue(integer1.equals((Object)integer0));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("v1n{Y|'k;4VfXfj", integer1, 292);
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
86:       assertTrue(integer1.equals((Object)integer0));
87:       
88:       Integer integer2 = new Integer(0);
89:       assertNotNull(integer2);
90:       assertEquals(0, (int)integer2);
91:       assertFalse(integer2.equals((Object)integer0));
92:       assertFalse(integer2.equals((Object)integer1));
93:       
94:       boolean boolean2 = abstractPatriciaTrie_TrieEntry3.equals(integer2);
95:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
98:       assertFalse(boolean2);
99:       assertTrue(integer1.equals((Object)integer0));
100:       assertFalse(integer1.equals((Object)integer2));
101:       assertFalse(integer2.equals((Object)integer0));
102:       assertFalse(integer2.equals((Object)integer1));
103:       assertTrue(boolean2 == boolean1);
104:       assertTrue(boolean2 == boolean0);
105:       
106:       Integer integer3 = new Integer(0);
107:       assertNotNull(integer3);
108:       assertEquals(0, (int)integer3);
109:       assertTrue(integer3.equals((Object)integer2));
110:       assertFalse(integer3.equals((Object)integer1));
111:       assertFalse(integer3.equals((Object)integer0));
112:       
113:       Integer integer4 = new Integer(292);
114:       assertNotNull(integer4);
115:       assertEquals(292, (int)integer4);
116:       assertFalse(integer4.equals((Object)integer2));
117:       assertTrue(integer4.equals((Object)integer0));
118:       assertFalse(integer4.equals((Object)integer3));
119:       assertTrue(integer4.equals((Object)integer1));
120:       
121:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer4, integer3, 292);
122:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
124:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
125:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
126:       assertTrue(integer3.equals((Object)integer2));
127:       assertFalse(integer3.equals((Object)integer4));
128:       assertFalse(integer3.equals((Object)integer1));
129:       assertFalse(integer3.equals((Object)integer0));
130:       assertFalse(integer4.equals((Object)integer2));
131:       assertTrue(integer4.equals((Object)integer0));
132:       assertFalse(integer4.equals((Object)integer3));
133:       assertTrue(integer4.equals((Object)integer1));
134:       
135:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
136:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
139:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
140:       
141:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
142:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
143:       assertNotNull(comparator1);
144:       
145:       Integer integer5 = new Integer(0);
146:       assertNotNull(integer5);
147:       assertEquals(0, (int)integer5);
148:       assertTrue(integer5.equals((Object)integer2));
149:       assertFalse(integer5.equals((Object)integer0));
150:       assertTrue(integer5.equals((Object)integer3));
151:       assertFalse(integer5.equals((Object)integer1));
152:       assertFalse(integer5.equals((Object)integer4));
153:       
154:       String string0 = abstractPatriciaTrie_TrieEntry3.toString();
155:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
156:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
158:       assertNotNull(string0);
159:       assertEquals("Entry(key=v1n{Y|'k;4VfXfj [292], value=292, parent=null, left=v1n{Y|'k;4VfXfj [292], right=null, predecessor=v1n{Y|'k;4VfXfj [292])", string0);
160:       assertTrue(integer1.equals((Object)integer0));
161:       assertFalse(integer1.equals((Object)integer2));
162:       assertFalse(integer1.equals((Object)integer3));
163:       assertTrue(integer1.equals((Object)integer4));
164:       assertFalse(integer1.equals((Object)integer5));
165:       
166:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
167:       assertNotNull(patriciaTrie1);
168:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
169:       
170:       // Undeclared exception!
171:       try { 
172:         patriciaTrie0.getNearestEntryForKey("", 292);
173:         fail("Expecting exception: StringIndexOutOfBoundsException");
174:       
175:       } catch(StringIndexOutOfBoundsException e) {
176:       }
177:   }
178: }
RegularFileObject[/tmp/EvoSuite_116_1605585425454/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:05 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_116_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:05.635 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(292);
assertNotNull(integer0);
assertEquals(292, (int)integer0);

Integer integer1 = new Integer(292);
assertNotNull(integer1);
assertEquals(292, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("v1n{Y|'k;4VfXfj", integer1, 292);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = new Integer(0);
assertNotNull(integer2);
assertEquals(0, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

boolean boolean2 = abstractPatriciaTrie_TrieEntry3.equals(integer2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(boolean2);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Integer integer3 = new Integer(0);
assertNotNull(integer3);
assertEquals(0, (int)integer3);
assertTrue(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));

Integer integer4 = new Integer(292);
assertNotNull(integer4);
assertEquals(292, (int)integer4);
assertFalse(integer4.equals((Object)integer2));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer4, integer3, 292);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer5 = new Integer(0);
assertNotNull(integer5);
assertEquals(0, (int)integer5);
assertTrue(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer0));
assertTrue(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer4));

String string0 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=v1n{Y|'k;4VfXfj [292], value=292, parent=null, left=v1n{Y|'k;4VfXfj [292], right=null, predecessor=v1n{Y|'k;4VfXfj [292])", string0);
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer4));
assertFalse(integer1.equals((Object)integer5));

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

patriciaTrie0.getNearestEntryForKey("", 292);

[MASTER] 03:57:05.873 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_119_1605585425785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_119_1605585425785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:05.873 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.873 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:05.874 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 132
[MASTER] 03:57:05.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_119_1605585425785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:05.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:05.876 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_119_1605585425785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:05 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_119_tmp__ESTest extends AbstractPatriciaTrie_119_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasNext());
33:       assertFalse(orderedMapIterator0.hasPrevious());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
37:       assertTrue(sortedMap0.isEmpty());
38:       assertEquals(0, sortedMap0.size());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", 1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q4<m-eE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       Integer integer2 = new Integer(1);
76:       assertNotNull(integer2);
77:       assertEquals(1, (int)integer2);
78:       assertTrue(integer2.equals((Object)integer0));
79:       assertFalse(integer2.equals((Object)integer1));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertTrue(integer0.equals((Object)integer2));
87:       assertFalse(integer0.equals((Object)integer1));
88:       assertTrue(integer2.equals((Object)integer0));
89:       assertFalse(integer2.equals((Object)integer1));
90:       
91:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
96:       
97:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
122:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
129:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
131:       
132:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
133:       assertNotNull(comparator1);
134:       
135:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer1;
136:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
138:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
140:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
141:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
142:       
143:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
144:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
148:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
150:       assertNotNull(string0);
151:       assertEquals("Entry(key=q4<m-eE [1], value=0, parent=1 [-123], left=q4<m-eE [1], right=1 [-123], predecessor=q4<m-eE [1])", string0);
152:       
153:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
154:       assertNotNull(patriciaTrie1);
155:       
156:       Object object0 = patriciaTrie1.put("", integer1);
157:       assertNull(object0);
158:       assertFalse(integer1.equals((Object)integer2));
159:       assertFalse(integer1.equals((Object)integer0));
160:       
161:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("", (-123));
162:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
166:       
167:       String string1 = patriciaTrie1.nextKey("");
168:       assertNull(string1);
169:   }
170: }
RegularFileObject[/tmp/EvoSuite_119_1605585425785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_119_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:05 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_119_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_119_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:05.879 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q4<m-eE", abstractPatriciaTrie_TrieEntry0, 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry1.value = (Object) integer1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(string0);
assertEquals("Entry(key=q4<m-eE [1], value=0, parent=1 [-123], left=q4<m-eE [1], right=1 [-123], predecessor=q4<m-eE [1])", string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("", integer1);
assertNull(object0);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("", (-123));
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string1 = patriciaTrie1.nextKey("");
assertNull(string1);


[MASTER] 03:57:08.032 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1605585427959/org/apache/commons/collections4/trie/AbstractPatriciaTrie_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1605585427959/org/apache/commons/collections4/trie/AbstractPatriciaTrie_129_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:08.032 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.032 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.050 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 132
[MASTER] 03:57:08.050 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_129_1605585427959/org/apache/commons/collections4/trie/AbstractPatriciaTrie_129_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:08.051 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:08.051 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1605585427959/org/apache/commons/collections4/trie/AbstractPatriciaTrie_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:07 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_129_tmp__ESTest extends AbstractPatriciaTrie_129_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
32:       assertFalse(orderedMapIterator0.hasPrevious());
33:       assertFalse(orderedMapIterator0.hasNext());
34:       assertNotNull(orderedMapIterator0);
35:       
36:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
37:       assertTrue(sortedMap0.isEmpty());
38:       assertEquals(0, sortedMap0.size());
39:       assertNotNull(sortedMap0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", 1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q4<m-eE", abstractPatriciaTrie_TrieEntry0, 1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Integer integer0 = new Integer(1);
57:       assertNotNull(integer0);
58:       assertEquals(1, (int)integer0);
59:       
60:       Integer integer1 = new Integer(0);
61:       assertNotNull(integer1);
62:       assertEquals(0, (int)integer1);
63:       assertFalse(integer1.equals((Object)integer0));
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(boolean0);
73:       assertFalse(integer1.equals((Object)integer0));
74:       
75:       Integer integer2 = new Integer(1);
76:       assertNotNull(integer2);
77:       assertEquals(1, (int)integer2);
78:       assertFalse(integer2.equals((Object)integer1));
79:       assertTrue(integer2.equals((Object)integer0));
80:       
81:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, 0);
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertFalse(integer0.equals((Object)integer1));
87:       assertTrue(integer0.equals((Object)integer2));
88:       assertFalse(integer2.equals((Object)integer1));
89:       assertTrue(integer2.equals((Object)integer0));
90:       
91:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
96:       
97:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
131:       
132:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
133:       assertNotNull(comparator1);
134:       
135:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer1;
136:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
138:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
140:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
141:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
142:       
143:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
144:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
148:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
150:       assertNotNull(string0);
151:       assertEquals("Entry(key=q4<m-eE [1], value=0, parent=1 [0], left=q4<m-eE [1], right=1 [0], predecessor=q4<m-eE [1])", string0);
152:       
153:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
154:       assertNotNull(patriciaTrie1);
155:       
156:       Object object0 = patriciaTrie1.put("Entry(key=q4<m-eE [1], value=0, parent=1 [0], left=q4<m-eE [1], right=1 [0], predecessor=q4<m-eE [1])", integer1);
157:       assertNull(object0);
158:       assertFalse(integer1.equals((Object)integer2));
159:       assertFalse(integer1.equals((Object)integer0));
160:       
161:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("q4<m-eE", 1);
162:       assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
164:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
166:       
167:       String string1 = patriciaTrie1.nextKey("q4<m-eE");
168:       assertNull(string1);
169:   }
170: }
RegularFileObject[/tmp/EvoSuite_129_1605585427959/org/apache/commons/collections4/trie/AbstractPatriciaTrie_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:07 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_129_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_129_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:08.054 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q4<m-eE", abstractPatriciaTrie_TrieEntry0, 1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean0);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, 0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry1.value = (Object) integer1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=q4<m-eE [1], value=0, parent=1 [0], left=q4<m-eE [1], right=1 [0], predecessor=q4<m-eE [1])", string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("Entry(key=q4<m-eE [1], value=0, parent=1 [0], left=q4<m-eE [1], right=1 [0], predecessor=q4<m-eE [1])", integer1);
assertNull(object0);
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.getNearestEntryForKey("q4<m-eE", 1);
assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

String string1 = patriciaTrie1.nextKey("q4<m-eE");
assertNull(string1);


[MASTER] 03:57:08.243 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_131_1605585428123/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_131_1605585428123/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:08.243 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.243 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.244 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 63
[MASTER] 03:57:08.245 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_131_1605585428123/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:08.246 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:08.247 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_131_1605585428123/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_131_tmp__ESTest extends AbstractPatriciaTrie_131_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", (-2682));
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
37:       assertNotNull(patriciaTrie1);
38:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
39:       
40:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
41:       assertNotNull(patriciaTrie2);
42:       
43:       int int0 = patriciaTrie2.bitsPerElement();
44:       assertEquals(16, int0);
45:       
46:       Integer integer0 = new Integer((-2682));
47:       assertNotNull(integer0);
48:       assertEquals((-2682), (int)integer0);
49:       assertFalse(integer0.equals((Object)int0));
50:       
51:       Integer integer1 = new Integer(64);
52:       assertNotNull(integer1);
53:       assertEquals(64, (int)integer1);
54:       assertFalse(integer1.equals((Object)int0));
55:       assertFalse(integer1.equals((Object)integer0));
56:       
57:       Integer integer2 = patriciaTrie2.put("q4<m-eE", integer0);
58:       assertNull(integer2);
59:       assertFalse(integer0.equals((Object)integer1));
60:       assertFalse(integer0.equals((Object)int0));
61:       
62:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
64:       assertNotNull(comparator1);
65:       
66:       Integer integer3 = new Integer((-636));
67:       assertNotNull(integer3);
68:       assertEquals((-636), (int)integer3);
69:       assertFalse(integer3.equals((Object)integer1));
70:       assertFalse(integer3.equals((Object)int0));
71:       assertFalse(integer3.equals((Object)integer0));
72:       
73:       Integer integer4 = new Integer(16);
74:       assertNotNull(integer4);
75:       assertEquals(16, (int)integer4);
76:       assertFalse(integer4.equals((Object)integer1));
77:       assertFalse(integer4.equals((Object)integer0));
78:       assertTrue(integer4.equals((Object)int0));
79:       assertFalse(integer4.equals((Object)integer3));
80:       
81:       Integer integer5 = new Integer(16);
82:       assertNotNull(integer5);
83:       assertEquals(16, (int)integer5);
84:       assertFalse(integer5.equals((Object)integer0));
85:       assertFalse(integer5.equals((Object)integer3));
86:       assertTrue(integer5.equals((Object)integer4));
87:       assertTrue(integer5.equals((Object)int0));
88:       assertFalse(integer5.equals((Object)integer1));
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("q4<m-eE", integer5, 256);
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
94:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
95:       assertFalse(integer5.equals((Object)integer0));
96:       assertFalse(integer5.equals((Object)integer3));
97:       assertTrue(integer5.equals((Object)integer4));
98:       assertTrue(integer5.equals((Object)int0));
99:       assertFalse(integer5.equals((Object)integer1));
100:       
101:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
102:       assertNull(abstractPatriciaTrie_TrieEntry2);
103:       
104:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry1);
105:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
106:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
111:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
112:       assertFalse(integer5.equals((Object)integer0));
113:       assertFalse(integer5.equals((Object)integer3));
114:       assertTrue(integer5.equals((Object)integer4));
115:       assertTrue(integer5.equals((Object)int0));
116:       assertFalse(integer5.equals((Object)integer1));
117:       
118:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer3, integer4, 256);
119:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
123:       assertFalse(integer3.equals((Object)integer1));
124:       assertFalse(integer3.equals((Object)int0));
125:       assertFalse(integer3.equals((Object)integer4));
126:       assertFalse(integer3.equals((Object)integer5));
127:       assertFalse(integer3.equals((Object)integer0));
128:       assertFalse(integer4.equals((Object)integer1));
129:       assertTrue(integer4.equals((Object)integer5));
130:       assertFalse(integer4.equals((Object)integer0));
131:       assertTrue(integer4.equals((Object)int0));
132:       assertFalse(integer4.equals((Object)integer3));
133:       
134:       String string0 = abstractPatriciaTrie_TrieEntry4.toString();
135:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
138:       assertNotNull(string0);
139:       assertEquals("Entry(key=-636 [256], value=16, parent=null, left=-636 [256], right=null, predecessor=-636 [256])", string0);
140:       assertFalse(integer3.equals((Object)integer1));
141:       assertFalse(integer3.equals((Object)int0));
142:       assertFalse(integer3.equals((Object)integer4));
143:       assertFalse(integer3.equals((Object)integer5));
144:       assertFalse(integer3.equals((Object)integer0));
145:       assertFalse(integer4.equals((Object)integer1));
146:       assertTrue(integer4.equals((Object)integer5));
147:       assertFalse(integer4.equals((Object)integer0));
148:       assertTrue(integer4.equals((Object)int0));
149:       assertFalse(integer4.equals((Object)integer3));
150:       
151:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
152:       assertNotNull(patriciaTrie3);
153:       
154:       Object object0 = patriciaTrie3.put(" H0@Fxn@~%,-Z", abstractPatriciaTrie_TrieEntry4);
155:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
157:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
158:       assertNull(object0);
159:       assertFalse(integer3.equals((Object)integer1));
160:       assertFalse(integer3.equals((Object)int0));
161:       assertFalse(integer3.equals((Object)integer4));
162:       assertFalse(integer3.equals((Object)integer5));
163:       assertFalse(integer3.equals((Object)integer0));
164:       assertFalse(integer4.equals((Object)integer1));
165:       assertTrue(integer4.equals((Object)integer5));
166:       assertFalse(integer4.equals((Object)integer0));
167:       assertTrue(integer4.equals((Object)int0));
168:       assertFalse(integer4.equals((Object)integer3));
169:       
170:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.getNearestEntryForKey("q4<m-eE", (-2682));
171:       assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
172:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
173:       assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
174:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
175:       
176:       // Undeclared exception!
177:       try { 
178:         patriciaTrie3.nextKey((String) null);
179:         fail("Expecting exception: NullPointerException");
180:       
181:       } catch(NullPointerException e) {
182:          //
183:          // no message in exception (getMessage() returned null)
184:          //
185:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
186:       }
187:   }
188: }
RegularFileObject[/tmp/EvoSuite_131_1605585428123/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_131_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:08.298 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("q4<m-eE", "q4<m-eE", (-2682));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

int int0 = patriciaTrie2.bitsPerElement();
assertEquals(16, int0);

Integer integer0 = new Integer((-2682));
assertNotNull(integer0);
assertEquals((-2682), (int)integer0);
assertFalse(integer0.equals((Object)int0));

Integer integer1 = new Integer(64);
assertNotNull(integer1);
assertEquals(64, (int)integer1);
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = patriciaTrie2.put("q4<m-eE", integer0);
assertNull(integer2);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)int0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer((-636));
assertNotNull(integer3);
assertEquals((-636), (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer0));

Integer integer4 = new Integer(16);
assertNotNull(integer4);
assertEquals(16, (int)integer4);
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)int0));
assertFalse(integer4.equals((Object)integer3));

Integer integer5 = new Integer(16);
assertNotNull(integer5);
assertEquals(16, (int)integer5);
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer4));
assertTrue(integer5.equals((Object)int0));
assertFalse(integer5.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("q4<m-eE", integer5, 256);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer4));
assertTrue(integer5.equals((Object)int0));
assertFalse(integer5.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
assertNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer4));
assertTrue(integer5.equals((Object)int0));
assertFalse(integer5.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer3, integer4, 256);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer5));
assertFalse(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)int0));
assertFalse(integer4.equals((Object)integer3));

String string0 = abstractPatriciaTrie_TrieEntry4.toString();
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(string0);
assertEquals("Entry(key=-636 [256], value=16, parent=null, left=-636 [256], right=null, predecessor=-636 [256])", string0);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer5));
assertFalse(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)int0));
assertFalse(integer4.equals((Object)integer3));

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie3);

Object object0 = patriciaTrie3.put(" H0@Fxn@~%,-Z", abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNull(object0);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer5));
assertFalse(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)int0));
assertFalse(integer4.equals((Object)integer3));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.getNearestEntryForKey("q4<m-eE", (-2682));
assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

patriciaTrie3.nextKey((String) null);

[MASTER] 03:57:08.443 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1605585428313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1605585428313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:08.443 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.445 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:08.451 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 74
[MASTER] 03:57:08.452 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_132_1605585428313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:08.453 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:08.454 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1605585428313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_132_tmp__ESTest extends AbstractPatriciaTrie_132_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
33:       assertFalse(orderedMapIterator0.hasNext());
34:       assertFalse(orderedMapIterator0.hasPrevious());
35:       assertNotNull(orderedMapIterator0);
36:       
37:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
38:       assertTrue(sortedMap0.isEmpty());
39:       assertEquals(0, sortedMap0.size());
40:       assertNotNull(sortedMap0);
41:       
42:       Integer integer0 = new Integer(1);
43:       assertNotNull(integer0);
44:       assertEquals(1, (int)integer0);
45:       
46:       Integer integer1 = new Integer(0);
47:       assertNotNull(integer1);
48:       assertEquals(0, (int)integer1);
49:       assertFalse(integer1.equals((Object)integer0));
50:       
51:       Integer integer2 = new Integer(1);
52:       assertNotNull(integer2);
53:       assertEquals(1, (int)integer2);
54:       assertTrue(integer2.equals((Object)integer0));
55:       assertFalse(integer2.equals((Object)integer1));
56:       
57:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
62:       assertFalse(integer0.equals((Object)integer1));
63:       assertTrue(integer0.equals((Object)integer2));
64:       assertTrue(integer2.equals((Object)integer0));
65:       assertFalse(integer2.equals((Object)integer1));
66:       
67:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
72:       
73:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
74:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
75:       assertNotNull(comparator1);
76:       
77:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
78:       assertNotNull(patriciaTrie1);
79:       
80:       Object object0 = patriciaTrie1.put("", integer1);
81:       assertNull(object0);
82:       assertFalse(integer1.equals((Object)integer0));
83:       assertFalse(integer1.equals((Object)integer2));
84:       
85:       BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
86:       AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)patriciaTrie1.merge("q4<m-eE", abstractPatriciaTrie_TrieEntry1, biFunction0);
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
96:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
97:       assertFalse(integer0.equals((Object)integer1));
98:       assertTrue(integer0.equals((Object)integer2));
99:       assertTrue(integer2.equals((Object)integer0));
100:       assertFalse(integer2.equals((Object)integer1));
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getNearestEntryForKey("", (-123));
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
106:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
107:       
108:       String string0 = patriciaTrie1.nextKey("");
109:       assertNotNull(string0);
110:       assertEquals("q4<m-eE", string0);
111:   }
112: }
RegularFileObject[/tmp/EvoSuite_132_1605585428313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_132_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:57:08.461 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("", integer1);
assertNull(object0);
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));

BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)patriciaTrie1.merge("q4<m-eE", abstractPatriciaTrie_TrieEntry1, biFunction0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getNearestEntryForKey("", (-123));
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie1.nextKey("");
assertNotNull(string0);
assertEquals("q4<m-eE", string0);


[MASTER] 03:57:10.321 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_137_1605585430234/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_137_1605585430234/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:10.321 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:10.321 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:10.321 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>>>>: 61
[MASTER] 03:57:10.322 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_137_1605585430234/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:10.323 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:10.323 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_137_1605585430234/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:10 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_137_tmp__ESTest extends AbstractPatriciaTrie_137_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
32:       assertNull(abstractMap_SimpleImmutableEntry0);
33:       
34:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
35:       assertTrue(hashMap0.isEmpty());
36:       assertEquals(0, hashMap0.size());
37:       assertNotNull(hashMap0);
38:       
39:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
40:       assertTrue(hashMap0.isEmpty());
41:       assertEquals(0, hashMap0.size());
42:       assertNotNull(patriciaTrie1);
43:       
44:       Integer integer0 = new Integer((-3298));
45:       assertNotNull(integer0);
46:       assertEquals((-3298), (int)integer0);
47:       
48:       BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
49:       Integer integer1 = patriciaTrie1.merge("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer0, biFunction0);
50:       assertTrue(hashMap0.isEmpty());
51:       assertEquals(0, hashMap0.size());
52:       assertNotNull(integer1);
53:       assertEquals((-3298), (int)integer1);
54:       
55:       boolean boolean0 = patriciaTrie1.containsKey((Object) null);
56:       assertTrue(hashMap0.isEmpty());
57:       assertEquals(0, hashMap0.size());
58:       assertFalse(boolean0);
59:       
60:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
61:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
62:       assertNotNull(comparator1);
63:       
64:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie1, integer1, (-3298));
65:       assertTrue(hashMap0.isEmpty());
66:       assertEquals(0, hashMap0.size());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
71:       
72:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
73:       assertTrue(hashMap0.isEmpty());
74:       assertEquals(0, hashMap0.size());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertNotNull(string0);
79:       assertEquals("Entry(key=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298], value=-3298, parent=null, left=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298], right=null, predecessor=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298])", string0);
80:       
81:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie2);
83:       
84:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
85:       assertNotNull(patriciaTrie3);
86:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
87:       
88:       Integer integer2 = new Integer(1);
89:       assertNotNull(integer2);
90:       assertEquals(1, (int)integer2);
91:       assertFalse(integer2.equals((Object)integer1));
92:       assertFalse(integer2.equals((Object)integer0));
93:       
94:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer2, (-3298));
95:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
98:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
99:       assertFalse(integer2.equals((Object)integer1));
100:       assertFalse(integer2.equals((Object)integer0));
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry1, (-4097));
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
109:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
110:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
111:       assertFalse(integer2.equals((Object)integer1));
112:       assertFalse(integer2.equals((Object)integer0));
113:       assertNotSame(patriciaTrie2, patriciaTrie3);
114:       
115:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.floorEntry("A/:x");
116:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
119:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
120:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
121:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
122:       assertNotSame(patriciaTrie2, patriciaTrie3);
123:       
124:       Integer integer3 = new Integer((-4097));
125:       assertNotNull(integer3);
126:       assertEquals((-4097), (int)integer3);
127:       assertFalse(integer3.equals((Object)integer0));
128:       assertFalse(integer3.equals((Object)integer2));
129:       assertFalse(integer3.equals((Object)integer1));
130:       
131:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("A/:x", integer3, 1168);
132:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
135:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
136:       assertFalse(integer3.equals((Object)integer0));
137:       assertFalse(integer3.equals((Object)integer2));
138:       assertFalse(integer3.equals((Object)integer1));
139:       
140:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.right;
141:       assertNull(abstractPatriciaTrie_TrieEntry5);
142:       
143:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
144:       assertTrue(hashMap0.isEmpty());
145:       assertEquals(0, hashMap0.size());
146:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
147:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
149:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
150:   }
151: }
RegularFileObject[/tmp/EvoSuite_137_1605585430234/org/apache/commons/collections4/trie/AbstractPatriciaTrie_137_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:10 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_137_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_137_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:57:10.331 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
assertNull(abstractMap_SimpleImmutableEntry0);

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer((-3298));
assertNotNull(integer0);
assertEquals((-3298), (int)integer0);

BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
Integer integer1 = patriciaTrie1.merge("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer0, biFunction0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(integer1);
assertEquals((-3298), (int)integer1);

boolean boolean0 = patriciaTrie1.containsKey((Object) null);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(boolean0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<String, Integer>>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie1, integer1, (-3298));
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298], value=-3298, parent=null, left=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298], right=null, predecessor=Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], value=-3298, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractBitwiseTrie [9])\n}\n [-3298])", string0);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

Integer integer2 = new Integer(1);
assertNotNull(integer2);
assertEquals(1, (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer2, (-3298));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry1, (-4097));
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));
assertNotSame(patriciaTrie2, patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.floorEntry("A/:x");
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie2, patriciaTrie3);

Integer integer3 = new Integer((-4097));
assertNotNull(integer3);
assertEquals((-4097), (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("A/:x", integer3, 1168);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.right;
assertNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry6);


[MASTER] 03:57:36.906 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/12
* Done!

* Computation finished
