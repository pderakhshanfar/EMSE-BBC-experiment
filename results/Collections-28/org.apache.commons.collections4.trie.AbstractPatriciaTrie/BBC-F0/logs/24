* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 6258
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 1445126450
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:52:54.520 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:52:54.520 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:53:40.760 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:56:56.560 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 304s and 42 generations, 25297 statements, best individual has fitness: 1531.0
* Minimizing test suite
[MASTER] 03:59:04.764 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 55%
* Total number of goals: 822
* Number of covered goals: 452
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 48%
* Total number of goals: 602
* Number of covered goals: 287
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 311
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 186
* Number of covered goals: 88
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 47%
* Total number of goals: 602
* Number of covered goals: 284
* Generated 126 tests with total length 1980
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:59:52.952 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67415% of time used, but only 10/126 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 04:00:03.329 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_10_1605585603025/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_10_1605585603025/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:03.329 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:03.329 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:03.356 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 112
[MASTER] 04:00:03.357 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_10_1605585603025/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:03 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Comparator;
11: import java.util.HashMap;
12: import java.util.Map;
13: import java.util.SortedMap;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_10_tmp__ESTest extends AbstractPatriciaTrie_10_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       assertTrue(hashMap0.isEmpty());
27:       assertEquals(0, hashMap0.size());
28:       assertNotNull(hashMap0);
29:       
30:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
31:       assertTrue(hashMap0.isEmpty());
32:       assertEquals(0, hashMap0.size());
33:       assertNotNull(patriciaTrie0);
34:       
35:       Integer integer0 = new Integer(0);
36:       assertEquals(0, (int)integer0);
37:       assertNotNull(integer0);
38:       
39:       Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
40:       assertFalse(hashMap0.isEmpty());
41:       assertEquals(1, hashMap0.size());
42:       assertNull(integer1);
43:       
44:       Integer integer2 = new Integer(0);
45:       assertTrue(integer2.equals((Object)integer0));
46:       assertEquals(0, (int)integer2);
47:       assertNotNull(integer2);
48:       
49:       Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
50:       assertFalse(hashMap0.isEmpty());
51:       assertEquals(1, hashMap0.size());
52:       assertTrue(integer2.equals((Object)integer0));
53:       assertNull(integer3);
54:       
55:       Comparator<? super String> comparator0 = patriciaTrie0.comparator();
56:       assertFalse(hashMap0.isEmpty());
57:       assertEquals(1, hashMap0.size());
58:       assertNotNull(comparator0);
59:       
60:       Integer integer4 = new Integer(2891);
61:       assertFalse(integer4.equals((Object)integer2));
62:       assertFalse(integer4.equals((Object)integer0));
63:       assertEquals(2891, (int)integer4);
64:       assertNotNull(integer4);
65:       
66:       Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
67:       assertFalse(hashMap0.isEmpty());
68:       assertEquals(1, hashMap0.size());
69:       assertFalse(integer4.equals((Object)integer2));
70:       assertFalse(integer4.equals((Object)integer0));
71:       assertNull(integer5);
72:       
73:       Integer integer6 = new Integer(0);
74:       assertTrue(integer6.equals((Object)integer0));
75:       assertFalse(integer6.equals((Object)integer4));
76:       assertTrue(integer6.equals((Object)integer2));
77:       assertEquals(0, (int)integer6);
78:       assertNotNull(integer6);
79:       
80:       Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
81:       assertFalse(hashMap0.isEmpty());
82:       assertEquals(1, hashMap0.size());
83:       assertTrue(integer6.equals((Object)integer0));
84:       assertFalse(integer6.equals((Object)integer4));
85:       assertTrue(integer6.equals((Object)integer2));
86:       assertTrue(integer7.equals((Object)integer0));
87:       assertFalse(integer7.equals((Object)integer4));
88:       assertTrue(integer7.equals((Object)integer2));
89:       assertEquals(0, (int)integer7);
90:       assertNotNull(integer7);
91:       
92:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
93:       assertNotNull(patriciaTrie1);
94:       
95:       boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
96:       assertFalse(hashMap0.isEmpty());
97:       assertEquals(1, hashMap0.size());
98:       assertFalse(boolean0);
99:       
100:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
101:       assertNull(abstractPatriciaTrie_TrieEntry0);
102:       
103:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
104:       assertNotNull(patriciaTrie2);
105:       
106:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
111:       
112:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
113:       assertFalse(hashMap0.isEmpty());
114:       assertEquals(1, hashMap0.size());
115:       assertNotNull(comparator1);
116:       
117:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
121:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
130:       assertNull(abstractPatriciaTrie_TrieEntry3);
131:       
132:       String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
133:       assertNull(string0);
134:       
135:       boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
136:       assertTrue(boolean1 == boolean0);
137:       assertFalse(boolean1);
138:       
139:       SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
140:       assertTrue(sortedMap0.isEmpty());
141:       assertEquals(0, sortedMap0.size());
142:       assertNotNull(sortedMap0);
143:       
144:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
145:       assertNull(abstractPatriciaTrie_TrieEntry4);
146:       
147:       Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
148:       assertNull(object0);
149:   }
150: }
RegularFileObject[/tmp/EvoSuite_10_1605585603025/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:03 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_10_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 04:00:03.376 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer2.equals((Object)integer0));
assertNull(integer3);

Comparator<? super String> comparator0 = patriciaTrie0.comparator();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator0);

Integer integer4 = new Integer(2891);
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertEquals(2891, (int)integer4);
assertNotNull(integer4);

Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertNull(integer5);

Integer integer6 = new Integer(0);
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertEquals(0, (int)integer6);
assertNotNull(integer6);

Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertTrue(integer7.equals((Object)integer2));
assertEquals(0, (int)integer7);
assertNotNull(integer7);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
assertNull(string0);

boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry4);

Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
assertNull(object0);


[MASTER] 04:00:05.837 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_24_1605585605513/org/apache/commons/collections4/trie/AbstractPatriciaTrie_24_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_24_1605585605513/org/apache/commons/collections4/trie/AbstractPatriciaTrie_24_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:05.837 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:05.837 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:05.838 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 73
[MASTER] 04:00:05.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 87
[MASTER] 04:00:05.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_24_1605585605513/org/apache/commons/collections4/trie/AbstractPatriciaTrie_24_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:05.839 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:05.840 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_24_1605585605513/org/apache/commons/collections4/trie/AbstractPatriciaTrie_24_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:05 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_24_tmp__ESTest extends AbstractPatriciaTrie_24_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "Lr?XA0mzCO( ", 326);
26:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       
31:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("T/FDZ79");
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
35:       assertEquals("Lr?XA0mzCO( ", string0);
36:       assertNotNull(string0);
37:       
38:       Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
39:       assertNotNull(comparator0);
40:       
41:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
42:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(string1.equals((Object)string0));
47:       assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], value=T/FDZ79, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326])", string1);
48:       assertNotNull(string1);
49:       
50:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Lr?XA0mzCO( ", "Cannot determine prefix outside of Character boundaries", 1635);
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       abstractPatriciaTrie_TrieEntry1.bitIndex = 326;
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       
61:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
71:       
72:       Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
73:       Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
74:       assertNotNull(comparator3);
75:       
76:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
86:       
87:       Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
88:       assertFalse(comparator4.equals((Object)comparator3));
89:       assertNotSame(comparator4, comparator3);
90:       assertNotNull(comparator4);
91:       
92:       String string2 = abstractPatriciaTrie_TrieEntry0.toString();
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
96:       assertFalse(string2.equals((Object)string1));
97:       assertFalse(string2.equals((Object)string0));
98:       assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], value=T/FDZ79, parent=Lr?XA0mzCO(  [326], left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326])", string2);
99:       assertNotNull(string2);
100:       
101:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0.parent);
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
111:       assertTrue(boolean0);
112:       
113:       Integer integer0 = new Integer(326);
114:       assertEquals(326, (int)integer0);
115:       assertNotNull(integer0);
116:       
117:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, ")", 326);
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
121:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
122:       
123:       boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
127:       assertFalse(boolean1 == boolean0);
128:       assertFalse(boolean1);
129:       
130:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
131:       assertNotNull(patriciaTrie0);
132:       
133:       Comparator<? super String> comparator5 = patriciaTrie0.comparator();
134:       assertNotNull(comparator5);
135:   }
136: }
RegularFileObject[/tmp/EvoSuite_24_1605585605513/org/apache/commons/collections4/trie/AbstractPatriciaTrie_24_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:05 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_24_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_24_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_24_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_24_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:05.843 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "Lr?XA0mzCO( ", 326);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("T/FDZ79");
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertEquals("Lr?XA0mzCO( ", string0);
assertNotNull(string0);

Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(string1.equals((Object)string0));
assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], value=T/FDZ79, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326])", string1);
assertNotNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Lr?XA0mzCO( ", "Cannot determine prefix outside of Character boundaries", 1635);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.bitIndex = 326;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
assertFalse(comparator4.equals((Object)comparator3));
assertNotSame(comparator4, comparator3);
assertNotNull(comparator4);

String string2 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], value=T/FDZ79, parent=Lr?XA0mzCO(  [326], left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator [326])", string2);
assertNotNull(string2);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0.parent);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertTrue(boolean0);

Integer integer0 = new Integer(326);
assertEquals(326, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, ")", 326);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

Comparator<? super String> comparator5 = patriciaTrie0.comparator();
assertNotNull(comparator5);


[MASTER] 04:00:06.017 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1605585605845/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1605585605845/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:06.017 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:06.017 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:06.018 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>>: 46
[MASTER] 04:00:06.036 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 101
[MASTER] 04:00:06.047 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_25_1605585605845/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:06.048 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:06.049 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1605585605845/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:05 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_25_tmp__ESTest extends AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       int int0 = (-688);
28:       Integer integer0 = new Integer((-688));
29:       assertTrue(integer0.equals((Object)int0));
30:       assertEquals((-688), (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       Object object0 = new Object();
34:       assertNotNull(object0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, object0, (-688));
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(integer0.equals((Object)int0));
41:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
42:       
43:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
44:       String string0 = "q5y7%{|y)GCin";
45:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
46:       Comparator<Map.Entry<Integer, Object>> comparator2 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
47:       assertNotNull(comparator2);
48:       
49:       Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByKey();
50:       assertNotNull(comparator3);
51:       
52:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(comparator2, (Object) null, (-688));
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       
58:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
68:       
69:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q5y7%{|y)GCin", (Object) null, (-688));
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
74:       
75:       Comparator<Map.Entry<Integer, String>> comparator4 = Map.Entry.comparingByKey();
76:       assertSame(comparator4, comparator3);
77:       assertNotNull(comparator4);
78:       
79:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
87:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
89:       
90:       int int1 = (-2257);
91:       abstractPatriciaTrie_TrieEntry1.bitIndex = (-688);
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
94:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
95:       
96:       abstractPatriciaTrie_TrieEntry1.bitIndex = (-2257);
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
100:       
101:       Comparator<Map.Entry<String, Integer>> comparator5 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
102:       assertNotNull(comparator5);
103:       
104:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
108:       assertFalse(integer0.equals((Object)int1));
109:       assertTrue(integer0.equals((Object)int0));
110:       assertFalse(boolean0);
111:       
112:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
113:       assertNotNull(patriciaTrie0);
114:       
115:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = null;
116:       try {
117:         abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Map.Entry<? extends Integer, ?>) null);
118:         fail("Expecting exception: NullPointerException");
119:       
120:       } catch(NullPointerException e) {
121:          //
122:          // no message in exception (getMessage() returned null)
123:          //
124:          verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
125:       }
126:   }
127: }
RegularFileObject[/tmp/EvoSuite_25_1605585605845/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:05 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:06.051 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = (-688);
Integer integer0 = new Integer((-688));
assertTrue(integer0.equals((Object)int0));
assertEquals((-688), (int)integer0);
assertNotNull(integer0);

Object object0 = new Object();
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, object0, (-688));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string0 = "q5y7%{|y)GCin";
Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Object>> comparator2 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(comparator2, (Object) null, (-688));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q5y7%{|y)GCin", (Object) null, (-688));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Map.Entry<Integer, String>> comparator4 = Map.Entry.comparingByKey();
assertSame(comparator4, comparator3);
assertNotNull(comparator4);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

int int1 = (-2257);
abstractPatriciaTrie_TrieEntry1.bitIndex = (-688);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = (-2257);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Map.Entry<String, Integer>> comparator5 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator5);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertFalse(boolean0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Map.Entry<? extends Integer, ?>) null);

[MASTER] 04:00:07.229 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1605585606999/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1605585606999/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:07.229 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:07.229 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:07.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 137
[MASTER] 04:00:07.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_33_1605585606999/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:07.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:07.248 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1605585606999/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:07 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_33_tmp__ESTest extends AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
29:       assertTrue(hashMap0.isEmpty());
30:       assertEquals(0, hashMap0.size());
31:       assertNotNull(hashMap0);
32:       
33:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
34:       assertTrue(hashMap0.isEmpty());
35:       assertEquals(0, hashMap0.size());
36:       assertNotNull(patriciaTrie0);
37:       
38:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = patriciaTrie0.put("Pk%", (AbstractMap.SimpleEntry<Object, Object>) null);
39:       assertTrue(hashMap0.isEmpty());
40:       assertEquals(0, hashMap0.size());
41:       assertNull(abstractMap_SimpleEntry0);
42:       
43:       String string0 = patriciaTrie0.selectKey("left=");
44:       assertTrue(hashMap0.isEmpty());
45:       assertEquals(0, hashMap0.size());
46:       assertEquals("Pk%", string0);
47:       assertNotNull(string0);
48:       
49:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.KeyAnalyzer", ",gEYi.Va=:km<MZI", (-1408));
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
54:       
55:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "Pk%", (-1361));
56:       assertTrue(hashMap0.isEmpty());
57:       assertEquals(0, hashMap0.size());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
62:       
63:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
64:       assertTrue(hashMap0.isEmpty());
65:       assertEquals(0, hashMap0.size());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
75:       
76:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
77:       assertTrue(hashMap0.isEmpty());
78:       assertEquals(0, hashMap0.size());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
88:       
89:       String string1 = patriciaTrie0.firstKey();
90:       assertTrue(hashMap0.isEmpty());
91:       assertEquals(0, hashMap0.size());
92:       assertEquals("Pk%", string1);
93:       assertNotNull(string1);
94:       
95:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertNotNull(abstractMap_SimpleEntry1);
100:       
101:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.predecessor;
102:       assertTrue(hashMap0.isEmpty());
103:       assertEquals(0, hashMap0.size());
104:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
116:       
117:       Object object0 = abstractMap_SimpleEntry1.setValue(patriciaTrie0);
118:       assertTrue(hashMap0.isEmpty());
119:       assertEquals(0, hashMap0.size());
120:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
123:       assertFalse(object0.equals((Object)string1));
124:       assertFalse(object0.equals((Object)string0));
125:       assertEquals(",gEYi.Va=:km<MZI", object0);
126:       assertNotNull(object0);
127:       
128:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = hashMap0.put("t4yH_V", abstractMap_SimpleEntry1);
129:       assertFalse(hashMap0.isEmpty());
130:       assertEquals(1, hashMap0.size());
131:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
134:       assertNull(abstractMap_SimpleEntry2);
135:       
136:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
137:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
138:       assertNotNull(comparator1);
139:       
140:       Object object1 = abstractMap_SimpleEntry1.setValue("left=");
141:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
142:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
144:       assertNotNull(object1);
145:       
146:       String string2 = abstractPatriciaTrie_TrieEntry0.toString();
147:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
148:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
150:       assertFalse(string2.equals((Object)string1));
151:       assertFalse(string2.equals((Object)string0));
152:       assertFalse(string2.equals((Object)object0));
153:       assertEquals("Entry(key=org.apache.commons.collections4.trie.KeyAnalyzer [-1408], value=,gEYi.Va=:km<MZI, parent=null, left=org.apache.commons.collections4.trie.KeyAnalyzer [-1408], right=null, predecessor=Trie[1]={\n  Entry(key=Pk% [9], value=null, parent=ROOT, left=ROOT, right=Pk% [9], predecessor=Pk% [9])\n}\n [-1361])", string2);
154:       assertNotNull(string2);
155:       
156:       // Undeclared exception!
157:       try { 
158:         patriciaTrie0.getOrDefault(hashMap0, abstractMap_SimpleEntry1);
159:         fail("Expecting exception: ClassCastException");
160:       
161:       } catch(ClassCastException e) {
162:          //
163:          // no message in exception (getMessage() returned null)
164:          //
165:       }
166:   }
167: }
RegularFileObject[/tmp/EvoSuite_33_1605585606999/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:07 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:07.251 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = patriciaTrie0.put("Pk%", (AbstractMap.SimpleEntry<Object, Object>) null);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractMap_SimpleEntry0);

String string0 = patriciaTrie0.selectKey("left=");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals("Pk%", string0);
assertNotNull(string0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.KeyAnalyzer", ",gEYi.Va=:km<MZI", (-1408));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "Pk%", (-1361));
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());

String string1 = patriciaTrie0.firstKey();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals("Pk%", string1);
assertNotNull(string1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractMap_SimpleEntry1);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.predecessor;
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());

Object object0 = abstractMap_SimpleEntry1.setValue(patriciaTrie0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(object0.equals((Object)string1));
assertFalse(object0.equals((Object)string0));
assertEquals(",gEYi.Va=:km<MZI", object0);
assertNotNull(object0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = hashMap0.put("t4yH_V", abstractMap_SimpleEntry1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(abstractMap_SimpleEntry2);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Object object1 = abstractMap_SimpleEntry1.setValue("left=");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object1);

String string2 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)object0));
assertEquals("Entry(key=org.apache.commons.collections4.trie.KeyAnalyzer [-1408], value=,gEYi.Va=:km<MZI, parent=null, left=org.apache.commons.collections4.trie.KeyAnalyzer [-1408], right=null, predecessor=Trie[1]={\n  Entry(key=Pk% [9], value=null, parent=ROOT, left=ROOT, right=Pk% [9], predecessor=Pk% [9])\n}\n [-1361])", string2);
assertNotNull(string2);

patriciaTrie0.getOrDefault(hashMap0, abstractMap_SimpleEntry1);

[MASTER] 04:00:07.510 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1605585607354/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1605585607354/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:07.515 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:07.515 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:07.516 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 120
[MASTER] 04:00:07.526 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1605585607354/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:07 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Collection;
11: import java.util.Comparator;
12: import java.util.HashMap;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_35_tmp__ESTest extends AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
27:       assertTrue(hashMap0.isEmpty());
28:       assertEquals(0, hashMap0.size());
29:       assertNotNull(hashMap0);
30:       
31:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
32:       assertTrue(hashMap0.isEmpty());
33:       assertEquals(0, hashMap0.size());
34:       assertNotNull(patriciaTrie0);
35:       
36:       Integer integer0 = new Integer(0);
37:       assertEquals(0, (int)integer0);
38:       assertNotNull(integer0);
39:       
40:       Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
41:       assertEquals(1, hashMap0.size());
42:       assertFalse(hashMap0.isEmpty());
43:       assertNull(integer1);
44:       
45:       Integer integer2 = new Integer(0);
46:       assertTrue(integer2.equals((Object)integer0));
47:       assertEquals(0, (int)integer2);
48:       assertNotNull(integer2);
49:       
50:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("NK07NF]:f^3g/p.l");
51:       assertEquals(1, hashMap0.size());
52:       assertFalse(hashMap0.isEmpty());
53:       assertEquals(0, sortedMap0.size());
54:       assertTrue(sortedMap0.isEmpty());
55:       assertNotNull(sortedMap0);
56:       
57:       Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
58:       assertEquals(1, hashMap0.size());
59:       assertFalse(hashMap0.isEmpty());
60:       assertTrue(integer2.equals((Object)integer0));
61:       assertNull(integer3);
62:       
63:       Comparator<? super String> comparator0 = patriciaTrie0.comparator();
64:       assertEquals(1, hashMap0.size());
65:       assertFalse(hashMap0.isEmpty());
66:       assertNotNull(comparator0);
67:       
68:       Integer integer4 = new Integer(2891);
69:       assertFalse(integer4.equals((Object)integer0));
70:       assertFalse(integer4.equals((Object)integer2));
71:       assertEquals(2891, (int)integer4);
72:       assertNotNull(integer4);
73:       
74:       Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
75:       assertEquals(1, hashMap0.size());
76:       assertFalse(hashMap0.isEmpty());
77:       assertFalse(integer4.equals((Object)integer0));
78:       assertFalse(integer4.equals((Object)integer2));
79:       assertNull(integer5);
80:       
81:       Integer integer6 = new Integer(0);
82:       assertFalse(integer6.equals((Object)integer4));
83:       assertTrue(integer6.equals((Object)integer0));
84:       assertTrue(integer6.equals((Object)integer2));
85:       assertEquals(0, (int)integer6);
86:       assertNotNull(integer6);
87:       
88:       Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
89:       assertEquals(1, hashMap0.size());
90:       assertFalse(hashMap0.isEmpty());
91:       assertFalse(integer6.equals((Object)integer4));
92:       assertTrue(integer6.equals((Object)integer0));
93:       assertTrue(integer6.equals((Object)integer2));
94:       assertTrue(integer7.equals((Object)integer0));
95:       assertFalse(integer7.equals((Object)integer4));
96:       assertTrue(integer7.equals((Object)integer2));
97:       assertEquals(0, (int)integer7);
98:       assertNotNull(integer7);
99:       
100:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
101:       assertNotNull(patriciaTrie1);
102:       
103:       boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
104:       assertEquals(1, hashMap0.size());
105:       assertFalse(hashMap0.isEmpty());
106:       assertFalse(boolean0);
107:       
108:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
109:       assertNull(abstractPatriciaTrie_TrieEntry0);
110:       
111:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
112:       assertNotNull(patriciaTrie2);
113:       
114:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
118:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
119:       
120:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
121:       assertEquals(1, hashMap0.size());
122:       assertFalse(hashMap0.isEmpty());
123:       assertNotNull(comparator1);
124:       
125:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
126:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
129:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
130:       
131:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
134:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
136:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
138:       assertNull(abstractPatriciaTrie_TrieEntry3);
139:       
140:       String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
141:       assertNull(string0);
142:       
143:       boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
144:       assertTrue(boolean1 == boolean0);
145:       assertFalse(boolean1);
146:       
147:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
148:       assertEquals(1, hashMap0.size());
149:       assertFalse(hashMap0.isEmpty());
150:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
151:       assertNotNull(patriciaTrie3);
152:       
153:       PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(hashMap0);
154:       assertEquals(1, hashMap0.size());
155:       assertFalse(hashMap0.isEmpty());
156:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
157:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
158:       assertNotNull(patriciaTrie4);
159:       
160:       Collection<Integer> collection0 = patriciaTrie4.values();
161:       assertEquals(1, hashMap0.size());
162:       assertFalse(hashMap0.isEmpty());
163:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
164:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
165:       assertTrue(collection0.contains(integer7));
166:       assertFalse(collection0.contains(integer4));
167:       assertNotSame(patriciaTrie4, patriciaTrie0);
168:       assertNotSame(patriciaTrie4, patriciaTrie3);
169:       assertNotNull(collection0);
170:       
171:       String string1 = patriciaTrie3.firstKey();
172:       assertEquals(1, hashMap0.size());
173:       assertFalse(hashMap0.isEmpty());
174:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
175:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
176:       assertNotSame(patriciaTrie3, patriciaTrie4);
177:       assertNotSame(patriciaTrie3, patriciaTrie0);
178:       assertEquals("NK07NF]:f^3g/p.l", string1);
179:       assertNotNull(string1);
180:   }
181: }
RegularFileObject[/tmp/EvoSuite_35_1605585607354/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:07 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 04:00:07.530 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("NK07NF]:f^3g/p.l");
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(integer2.equals((Object)integer0));
assertNull(integer3);

Comparator<? super String> comparator0 = patriciaTrie0.comparator();
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(comparator0);

Integer integer4 = new Integer(2891);
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertEquals(2891, (int)integer4);
assertNotNull(integer4);

Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertNull(integer5);

Integer integer6 = new Integer(0);
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer2));
assertEquals(0, (int)integer6);
assertNotNull(integer6);

Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertTrue(integer7.equals((Object)integer2));
assertEquals(0, (int)integer7);
assertNotNull(integer7);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
assertNull(string0);

boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie3);

PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(hashMap0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie4);

Collection<Integer> collection0 = patriciaTrie4.values();
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertTrue(collection0.contains(integer7));
assertFalse(collection0.contains(integer4));
assertNotSame(patriciaTrie4, patriciaTrie0);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertNotNull(collection0);

String string1 = patriciaTrie3.firstKey();
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie0);
assertEquals("NK07NF]:f^3g/p.l", string1);
assertNotNull(string1);


[MASTER] 04:00:08.632 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_43_1605585608571/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_43_1605585608571/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:08.633 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.633 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.634 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 132
[MASTER] 04:00:08.637 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_43_1605585608571/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.Comparator;
12: import java.util.HashMap;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_43_tmp__ESTest extends AbstractPatriciaTrie_43_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
27:       assertTrue(hashMap0.isEmpty());
28:       assertEquals(0, hashMap0.size());
29:       assertNotNull(hashMap0);
30:       
31:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
32:       assertTrue(hashMap0.isEmpty());
33:       assertEquals(0, hashMap0.size());
34:       assertNotNull(patriciaTrie0);
35:       
36:       Integer integer0 = new Integer(0);
37:       assertEquals(0, (int)integer0);
38:       assertNotNull(integer0);
39:       
40:       Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
41:       assertFalse(hashMap0.isEmpty());
42:       assertEquals(1, hashMap0.size());
43:       assertNull(integer1);
44:       
45:       Integer integer2 = new Integer(0);
46:       assertTrue(integer2.equals((Object)integer0));
47:       assertEquals(0, (int)integer2);
48:       assertNotNull(integer2);
49:       
50:       Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
51:       assertFalse(hashMap0.isEmpty());
52:       assertEquals(1, hashMap0.size());
53:       assertTrue(integer2.equals((Object)integer0));
54:       assertNull(integer3);
55:       
56:       Comparator<? super String> comparator0 = patriciaTrie0.comparator();
57:       assertFalse(hashMap0.isEmpty());
58:       assertEquals(1, hashMap0.size());
59:       assertNotNull(comparator0);
60:       
61:       Integer integer4 = new Integer(2891);
62:       assertFalse(integer4.equals((Object)integer0));
63:       assertFalse(integer4.equals((Object)integer2));
64:       assertEquals(2891, (int)integer4);
65:       assertNotNull(integer4);
66:       
67:       Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
68:       assertFalse(hashMap0.isEmpty());
69:       assertEquals(1, hashMap0.size());
70:       assertFalse(integer4.equals((Object)integer0));
71:       assertFalse(integer4.equals((Object)integer2));
72:       assertNull(integer5);
73:       
74:       Integer integer6 = new Integer(0);
75:       assertTrue(integer6.equals((Object)integer2));
76:       assertFalse(integer6.equals((Object)integer4));
77:       assertTrue(integer6.equals((Object)integer0));
78:       assertEquals(0, (int)integer6);
79:       assertNotNull(integer6);
80:       
81:       Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
82:       assertFalse(hashMap0.isEmpty());
83:       assertEquals(1, hashMap0.size());
84:       assertTrue(integer6.equals((Object)integer2));
85:       assertFalse(integer6.equals((Object)integer4));
86:       assertTrue(integer6.equals((Object)integer0));
87:       assertFalse(integer7.equals((Object)integer4));
88:       assertTrue(integer7.equals((Object)integer0));
89:       assertTrue(integer7.equals((Object)integer2));
90:       assertEquals(0, (int)integer7);
91:       assertNotNull(integer7);
92:       
93:       Integer integer8 = new Integer(0);
94:       assertTrue(integer8.equals((Object)integer7));
95:       assertFalse(integer8.equals((Object)integer4));
96:       assertTrue(integer8.equals((Object)integer0));
97:       assertTrue(integer8.equals((Object)integer2));
98:       assertTrue(integer8.equals((Object)integer6));
99:       assertEquals(0, (int)integer8);
100:       assertNotNull(integer8);
101:       
102:       Integer integer9 = hashMap0.put("", integer8);
103:       assertEquals(2, hashMap0.size());
104:       assertFalse(hashMap0.isEmpty());
105:       assertTrue(integer8.equals((Object)integer7));
106:       assertFalse(integer8.equals((Object)integer4));
107:       assertTrue(integer8.equals((Object)integer0));
108:       assertTrue(integer8.equals((Object)integer2));
109:       assertTrue(integer8.equals((Object)integer6));
110:       assertNull(integer9);
111:       
112:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
113:       assertNotNull(patriciaTrie1);
114:       
115:       boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
116:       assertEquals(2, hashMap0.size());
117:       assertFalse(hashMap0.isEmpty());
118:       assertFalse(boolean0);
119:       
120:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
121:       assertNull(abstractPatriciaTrie_TrieEntry0);
122:       
123:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
124:       assertNotNull(patriciaTrie2);
125:       
126:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
127:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
130:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
131:       
132:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
133:       assertEquals(2, hashMap0.size());
134:       assertFalse(hashMap0.isEmpty());
135:       assertNotNull(comparator1);
136:       
137:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
138:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
140:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
141:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
142:       
143:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
144:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
147:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
149:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
150:       assertNull(abstractPatriciaTrie_TrieEntry3);
151:       
152:       String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
153:       assertNull(string0);
154:       
155:       boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
156:       assertTrue(boolean1 == boolean0);
157:       assertFalse(boolean1);
158:       
159:       SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
160:       assertEquals(0, sortedMap0.size());
161:       assertTrue(sortedMap0.isEmpty());
162:       assertNotNull(sortedMap0);
163:       
164:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
165:       assertNull(abstractPatriciaTrie_TrieEntry4);
166:       
167:       Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
168:       assertNull(object0);
169:       
170:       // Undeclared exception!
171:       try { 
172:         patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
173:         fail("Expecting exception: NullPointerException");
174:       
175:       } catch(NullPointerException e) {
176:          //
177:          // no message in exception (getMessage() returned null)
178:          //
179:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
180:       }
181:   }
182: }
RegularFileObject[/tmp/EvoSuite_43_1605585608571/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_43_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 04:00:08.653 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer2.equals((Object)integer0));
assertNull(integer3);

Comparator<? super String> comparator0 = patriciaTrie0.comparator();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator0);

Integer integer4 = new Integer(2891);
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertEquals(2891, (int)integer4);
assertNotNull(integer4);

Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertNull(integer5);

Integer integer6 = new Integer(0);
assertTrue(integer6.equals((Object)integer2));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertEquals(0, (int)integer6);
assertNotNull(integer6);

Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer6.equals((Object)integer2));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertTrue(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer2));
assertEquals(0, (int)integer7);
assertNotNull(integer7);

Integer integer8 = new Integer(0);
assertTrue(integer8.equals((Object)integer7));
assertFalse(integer8.equals((Object)integer4));
assertTrue(integer8.equals((Object)integer0));
assertTrue(integer8.equals((Object)integer2));
assertTrue(integer8.equals((Object)integer6));
assertEquals(0, (int)integer8);
assertNotNull(integer8);

Integer integer9 = hashMap0.put("", integer8);
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(integer8.equals((Object)integer7));
assertFalse(integer8.equals((Object)integer4));
assertTrue(integer8.equals((Object)integer0));
assertTrue(integer8.equals((Object)integer2));
assertTrue(integer8.equals((Object)integer6));
assertNull(integer9);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
assertNull(string0);

boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry4);

Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
assertNull(object0);

patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);

[MASTER] 04:00:08.812 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_44_1605585608681/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_44_1605585608681/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:08.812 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.813 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.814 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>>: 50
[MASTER] 04:00:08.815 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_44_1605585608681/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:08.815 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:08.816 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_44_1605585608681/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_44_tmp__ESTest extends AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("n<:>y");
31:       assertNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("The offsets and lengths must be at Character boundaries", (-1702), 16);
34:       assertNull(abstractPatriciaTrie_TrieEntry1);
35:       
36:       Integer integer0 = new Integer(16);
37:       assertEquals(16, (int)integer0);
38:       assertNotNull(integer0);
39:       
40:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, (-1));
41:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
44:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
45:       
46:       Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("$}9}A72\",o");
47:       assertNull(map_Entry0);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<Object, Integer>> comparator1 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
51:       assertNotNull(comparator1);
52:       
53:       abstractPatriciaTrie_TrieEntry2.bitIndex = (-1);
54:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
57:       
58:       Integer integer1 = abstractPatriciaTrie_TrieEntry2.setKeyValue((Object) null, integer0);
59:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
62:       assertEquals(16, (int)integer1);
63:       assertNotNull(integer1);
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
69:       assertFalse(boolean0);
70:       
71:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
72:       assertNotNull(patriciaTrie1);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
75:       assertNull(abstractPatriciaTrie_TrieEntry3);
76:       
77:       Integer integer2 = new Integer(0);
78:       assertFalse(integer2.equals((Object)integer0));
79:       assertFalse(integer2.equals((Object)integer1));
80:       assertEquals(0, (int)integer2);
81:       assertNotNull(integer2);
82:       
83:       // Undeclared exception!
84:       try { 
85:         patriciaTrie1.remove((Object) integer2);
86:         fail("Expecting exception: ClassCastException");
87:       
88:       } catch(ClassCastException e) {
89:          //
90:          // no message in exception (getMessage() returned null)
91:          //
92:       }
93:   }
94: }
RegularFileObject[/tmp/EvoSuite_44_1605585608681/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:08.819 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("n<:>y");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("The offsets and lengths must be at Character boundaries", (-1702), 16);
assertNull(abstractPatriciaTrie_TrieEntry1);

Integer integer0 = new Integer(16);
assertEquals(16, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("$}9}A72\",o");
assertNull(map_Entry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Integer>> comparator1 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry2.bitIndex = (-1);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Integer integer1 = abstractPatriciaTrie_TrieEntry2.setKeyValue((Object) null, integer0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertEquals(16, (int)integer1);
assertNotNull(integer1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(boolean0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertNull(abstractPatriciaTrie_TrieEntry3);

Integer integer2 = new Integer(0);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

patriciaTrie1.remove((Object) integer2);

[MASTER] 04:00:10.547 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_56_1605585610441/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_56_1605585610441/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:10.548 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:10.548 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:10.550 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 123
[MASTER] 04:00:10.552 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_56_1605585610441/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:10 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Comparator;
11: import java.util.HashMap;
12: import java.util.Map;
13: import java.util.SortedMap;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_56_tmp__ESTest extends AbstractPatriciaTrie_56_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       assertEquals(0, hashMap0.size());
27:       assertTrue(hashMap0.isEmpty());
28:       assertNotNull(hashMap0);
29:       
30:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
31:       assertEquals(0, hashMap0.size());
32:       assertTrue(hashMap0.isEmpty());
33:       assertNotNull(patriciaTrie0);
34:       
35:       Integer integer0 = new Integer(0);
36:       assertEquals(0, (int)integer0);
37:       assertNotNull(integer0);
38:       
39:       Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
40:       assertFalse(hashMap0.isEmpty());
41:       assertEquals(1, hashMap0.size());
42:       assertNull(integer1);
43:       
44:       Integer integer2 = new Integer(0);
45:       assertTrue(integer2.equals((Object)integer0));
46:       assertEquals(0, (int)integer2);
47:       assertNotNull(integer2);
48:       
49:       Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
50:       assertFalse(hashMap0.isEmpty());
51:       assertEquals(1, hashMap0.size());
52:       assertTrue(integer2.equals((Object)integer0));
53:       assertNull(integer3);
54:       
55:       Comparator<? super String> comparator0 = patriciaTrie0.comparator();
56:       assertFalse(hashMap0.isEmpty());
57:       assertEquals(1, hashMap0.size());
58:       assertNotNull(comparator0);
59:       
60:       Integer integer4 = new Integer(2891);
61:       assertFalse(integer4.equals((Object)integer2));
62:       assertFalse(integer4.equals((Object)integer0));
63:       assertEquals(2891, (int)integer4);
64:       assertNotNull(integer4);
65:       
66:       Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
67:       assertFalse(hashMap0.isEmpty());
68:       assertEquals(1, hashMap0.size());
69:       assertFalse(integer4.equals((Object)integer2));
70:       assertFalse(integer4.equals((Object)integer0));
71:       assertNull(integer5);
72:       
73:       Integer integer6 = new Integer(0);
74:       assertFalse(integer6.equals((Object)integer4));
75:       assertTrue(integer6.equals((Object)integer2));
76:       assertTrue(integer6.equals((Object)integer0));
77:       assertEquals(0, (int)integer6);
78:       assertNotNull(integer6);
79:       
80:       Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
81:       assertFalse(hashMap0.isEmpty());
82:       assertEquals(1, hashMap0.size());
83:       assertFalse(integer6.equals((Object)integer4));
84:       assertTrue(integer6.equals((Object)integer2));
85:       assertTrue(integer6.equals((Object)integer0));
86:       assertFalse(integer7.equals((Object)integer4));
87:       assertTrue(integer7.equals((Object)integer0));
88:       assertTrue(integer7.equals((Object)integer2));
89:       assertEquals(0, (int)integer7);
90:       assertNotNull(integer7);
91:       
92:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
93:       assertNotNull(patriciaTrie1);
94:       
95:       boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
96:       assertFalse(hashMap0.isEmpty());
97:       assertEquals(1, hashMap0.size());
98:       assertFalse(boolean0);
99:       
100:       Object object0 = patriciaTrie1.put("NK07NF]:f^3g/p.l", integer7);
101:       assertFalse(hashMap0.isEmpty());
102:       assertEquals(1, hashMap0.size());
103:       assertFalse(integer6.equals((Object)integer4));
104:       assertTrue(integer6.equals((Object)integer2));
105:       assertTrue(integer6.equals((Object)integer0));
106:       assertFalse(integer7.equals((Object)integer4));
107:       assertTrue(integer7.equals((Object)integer0));
108:       assertTrue(integer7.equals((Object)integer2));
109:       assertNull(object0);
110:       
111:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
112:       assertNull(abstractPatriciaTrie_TrieEntry0);
113:       
114:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
115:       assertNotNull(patriciaTrie2);
116:       
117:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 2891);
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
121:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
122:       
123:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
124:       assertFalse(hashMap0.isEmpty());
125:       assertEquals(1, hashMap0.size());
126:       assertNotNull(comparator1);
127:       
128:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
131:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
132:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
133:       
134:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
135:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
140:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
141:       assertNull(abstractPatriciaTrie_TrieEntry3);
142:       
143:       SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("org.apache.commons.collections4.trie.KeyAnalyzer");
144:       assertTrue(sortedMap0.isEmpty());
145:       assertEquals(0, sortedMap0.size());
146:       assertNotNull(sortedMap0);
147:       
148:       String string0 = patriciaTrie1.lastKey();
149:       assertEquals("NK07NF]:f^3g/p.l", string0);
150:       assertNotNull(string0);
151:   }
152: }
RegularFileObject[/tmp/EvoSuite_56_1605585610441/org/apache/commons/collections4/trie/AbstractPatriciaTrie_56_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:10 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_56_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_56_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 04:00:10.556 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer2.equals((Object)integer0));
assertNull(integer3);

Comparator<? super String> comparator0 = patriciaTrie0.comparator();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator0);

Integer integer4 = new Integer(2891);
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertEquals(2891, (int)integer4);
assertNotNull(integer4);

Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertNull(integer5);

Integer integer6 = new Integer(0);
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer6.equals((Object)integer0));
assertEquals(0, (int)integer6);
assertNotNull(integer6);

Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertTrue(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer2));
assertEquals(0, (int)integer7);
assertNotNull(integer7);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(boolean0);

Object object0 = patriciaTrie1.put("NK07NF]:f^3g/p.l", integer7);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertTrue(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer2));
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 2891);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("org.apache.commons.collections4.trie.KeyAnalyzer");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

String string0 = patriciaTrie1.lastKey();
assertEquals("NK07NF]:f^3g/p.l", string0);
assertNotNull(string0);


[MASTER] 04:00:12.607 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_74_1605585612504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_74_1605585612504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:12.607 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:12.607 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:12.608 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 129
[MASTER] 04:00:12.611 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_74_1605585612504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:12 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.Comparator;
11: import java.util.HashMap;
12: import java.util.Map;
13: import java.util.SortedMap;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_74_tmp__ESTest extends AbstractPatriciaTrie_74_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       assertTrue(hashMap0.isEmpty());
27:       assertEquals(0, hashMap0.size());
28:       assertNotNull(hashMap0);
29:       
30:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
31:       assertTrue(hashMap0.isEmpty());
32:       assertEquals(0, hashMap0.size());
33:       assertNotNull(patriciaTrie0);
34:       
35:       Integer integer0 = new Integer(0);
36:       assertEquals(0, (int)integer0);
37:       assertNotNull(integer0);
38:       
39:       Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
40:       assertFalse(hashMap0.isEmpty());
41:       assertEquals(1, hashMap0.size());
42:       assertNull(integer1);
43:       
44:       Integer integer2 = new Integer(0);
45:       assertTrue(integer2.equals((Object)integer0));
46:       assertEquals(0, (int)integer2);
47:       assertNotNull(integer2);
48:       
49:       Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
50:       assertFalse(hashMap0.isEmpty());
51:       assertEquals(1, hashMap0.size());
52:       assertTrue(integer2.equals((Object)integer0));
53:       assertNull(integer3);
54:       
55:       Comparator<? super String> comparator0 = patriciaTrie0.comparator();
56:       assertFalse(hashMap0.isEmpty());
57:       assertEquals(1, hashMap0.size());
58:       assertNotNull(comparator0);
59:       
60:       Integer integer4 = new Integer(2891);
61:       assertFalse(integer4.equals((Object)integer2));
62:       assertFalse(integer4.equals((Object)integer0));
63:       assertEquals(2891, (int)integer4);
64:       assertNotNull(integer4);
65:       
66:       Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
67:       assertFalse(hashMap0.isEmpty());
68:       assertEquals(1, hashMap0.size());
69:       assertFalse(integer4.equals((Object)integer2));
70:       assertFalse(integer4.equals((Object)integer0));
71:       assertNull(integer5);
72:       
73:       Integer integer6 = new Integer(0);
74:       assertTrue(integer6.equals((Object)integer0));
75:       assertFalse(integer6.equals((Object)integer4));
76:       assertTrue(integer6.equals((Object)integer2));
77:       assertEquals(0, (int)integer6);
78:       assertNotNull(integer6);
79:       
80:       Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
81:       assertFalse(hashMap0.isEmpty());
82:       assertEquals(1, hashMap0.size());
83:       assertTrue(integer6.equals((Object)integer0));
84:       assertFalse(integer6.equals((Object)integer4));
85:       assertTrue(integer6.equals((Object)integer2));
86:       assertTrue(integer7.equals((Object)integer0));
87:       assertTrue(integer7.equals((Object)integer2));
88:       assertFalse(integer7.equals((Object)integer4));
89:       assertEquals(0, (int)integer7);
90:       assertNotNull(integer7);
91:       
92:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
93:       assertNotNull(patriciaTrie1);
94:       
95:       boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
96:       assertFalse(hashMap0.isEmpty());
97:       assertEquals(1, hashMap0.size());
98:       assertFalse(boolean0);
99:       
100:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
101:       assertNull(abstractPatriciaTrie_TrieEntry0);
102:       
103:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
104:       assertNotNull(patriciaTrie2);
105:       
106:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
111:       
112:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "org.apache.commons.collections4.trie.KeyAnalyzer", 0);
113:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
116:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
117:       
118:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
119:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
122:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
124:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
128:       
129:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
130:       assertFalse(hashMap0.isEmpty());
131:       assertEquals(1, hashMap0.size());
132:       assertNotNull(comparator1);
133:       
134:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
135:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
136:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
138:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
139:       
140:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry3);
141:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
142:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
143:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
144:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
145:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
147:       assertNull(abstractPatriciaTrie_TrieEntry4);
148:       
149:       String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
150:       assertNull(string0);
151:       
152:       boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
153:       assertTrue(boolean1 == boolean0);
154:       assertFalse(boolean1);
155:       
156:       SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
157:       assertTrue(sortedMap0.isEmpty());
158:       assertEquals(0, sortedMap0.size());
159:       assertNotNull(sortedMap0);
160:       
161:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
162:       assertNull(abstractPatriciaTrie_TrieEntry5);
163:       
164:       Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
165:       assertNull(object0);
166:   }
167: }
RegularFileObject[/tmp/EvoSuite_74_1605585612504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:12 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_74_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 04:00:12.615 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.put("NK07NF]:f^3g/p.l", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertEquals(0, (int)integer2);
assertNotNull(integer2);

Integer integer3 = patriciaTrie0.put("NK07NF]:f^3g/p.l", integer2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer2.equals((Object)integer0));
assertNull(integer3);

Comparator<? super String> comparator0 = patriciaTrie0.comparator();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator0);

Integer integer4 = new Integer(2891);
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertEquals(2891, (int)integer4);
assertNotNull(integer4);

Integer integer5 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer4);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertNull(integer5);

Integer integer6 = new Integer(0);
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertEquals(0, (int)integer6);
assertNotNull(integer6);

Integer integer7 = hashMap0.getOrDefault((Object) null, integer6);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer2));
assertFalse(integer7.equals((Object)integer4));
assertEquals(0, (int)integer7);
assertNotNull(integer7);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.remove((Object) "NK07NF]:f^3g/p.l", (Object) patriciaTrie0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("j$ ()(~Syb/' ut", "NK07NF]:f^3g/p.l", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "org.apache.commons.collections4.trie.KeyAnalyzer", 0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey(comparator0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry4);

String string0 = patriciaTrie2.put("NK07NF]:f^3g/p.l", "");
assertNull(string0);

boolean boolean1 = patriciaTrie2.replace("NK07NF]:f^3g/p.l", "NK07NF]:f^3g/p.l", "Z%G]y[");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

SortedMap<String, String> sortedMap0 = patriciaTrie2.subMap("\"DO3=wzTi", "NK07NF]:f^3g/p.l");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.higherEntry("j$ ()(~Syb/' ut");
assertNull(abstractPatriciaTrie_TrieEntry5);

Object object0 = patriciaTrie1.selectValue("NK07NF]:f^3g/p.l");
assertNull(object0);


[MASTER] 04:00:13.995 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1605585613842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1605585613842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:13.995 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:13.996 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:13.997 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>>: 54
[MASTER] 04:00:13.998 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_85_1605585613842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:13.999 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:14.001 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1605585613842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:13 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_85_tmp__ESTest extends AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = "^@13zn*5";
31:       String string1 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator";
32:       boolean boolean0 = patriciaTrie0.compareKeys("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", "^@13zn*5");
33:       assertFalse(boolean0);
34:       
35:       int int0 = patriciaTrie0.bitIndex("}E%S/$'lp/Mt(YL", ", ");
36:       assertEquals(9, int0);
37:       
38:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (AbstractMap.SimpleEntry<Object, String>) null);
39:       assertNull(abstractMap_SimpleEntry0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "^@13zn*5", 0);
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.PatriciaTrie", (-425));
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
52:       
53:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
54:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Object, String>>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Object, String>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
55:       assertNotNull(comparator1);
56:       
57:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(", ", (AbstractMap.SimpleEntry<Object, String>) null);
58:       assertNull(abstractMap_SimpleEntry1);
59:       
60:       abstractPatriciaTrie_TrieEntry1.key = (Object) "^@13zn*5";
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       
65:       Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
66:       assertNotNull(comparator2);
67:       
68:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
78:       
79:       Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByKey();
80:       assertNotNull(comparator3);
81:       
82:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
86:       assertFalse(boolean1 == boolean0);
87:       assertTrue(boolean1);
88:       
89:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
90:       assertNotNull(patriciaTrie1);
91:       
92:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.firstEntry();
93:       assertNull(abstractPatriciaTrie_TrieEntry2);
94:       
95:       Comparator<? super String> comparator4 = patriciaTrie1.comparator();
96:       assertNotNull(comparator4);
97:       
98:       // Undeclared exception!
99:       try { 
100:         patriciaTrie1.get(comparator4);
101:         fail("Expecting exception: ClassCastException");
102:       
103:       } catch(ClassCastException e) {
104:          //
105:          // no message in exception (getMessage() returned null)
106:          //
107:       }
108:   }
109: }
RegularFileObject[/tmp/EvoSuite_85_1605585613842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:13 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:14.004 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
assertNotNull(patriciaTrie0);

String string0 = "^@13zn*5";
String string1 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator";
boolean boolean0 = patriciaTrie0.compareKeys("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", "^@13zn*5");
assertFalse(boolean0);

int int0 = patriciaTrie0.bitIndex("}E%S/$'lp/Mt(YL", ", ");
assertEquals(9, int0);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (AbstractMap.SimpleEntry<Object, String>) null);
assertNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "^@13zn*5", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.PatriciaTrie", (-425));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Object, String>>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<Object, String>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(", ", (AbstractMap.SimpleEntry<Object, String>) null);
assertNull(abstractMap_SimpleEntry1);

abstractPatriciaTrie_TrieEntry1.key = (Object) "^@13zn*5";
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry2);

Comparator<? super String> comparator4 = patriciaTrie1.comparator();
assertNotNull(comparator4);

patriciaTrie1.get(comparator4);

[MASTER] 04:00:18.615 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1605585618501/org/apache/commons/collections4/trie/AbstractPatriciaTrie_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1605585618501/org/apache/commons/collections4/trie/AbstractPatriciaTrie_117_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:18.615 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:18.615 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:18.616 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.String>,java.lang.Integer>>: 49
[MASTER] 04:00:18.616 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 52
[MASTER] 04:00:18.617 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_117_1605585618501/org/apache/commons/collections4/trie/AbstractPatriciaTrie_117_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:18.617 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:18.618 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1605585618501/org/apache/commons/collections4/trie/AbstractPatriciaTrie_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:18 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_117_tmp__ESTest extends AbstractPatriciaTrie_117_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer((-2413));
31:       assertEquals((-2413), (int)integer0);
32:       assertNotNull(integer0);
33:       
34:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "Z\"0rDeg+G");
35:       assertNotNull(abstractMap_SimpleEntry0);
36:       
37:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
38:       assertNotNull(comparator0);
39:       
40:       String string0 = abstractMap_SimpleEntry0.setValue((String) null);
41:       assertEquals("Z\"0rDeg+G", string0);
42:       assertNotNull(string0);
43:       
44:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
45:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie0.put("cg_J^^)oRj$(4U3.ky", abstractMap_SimpleEntry0);
46:       assertNull(abstractMap_SimpleEntry1);
47:       
48:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, String>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, String>>) comparator2);
50:       assertNotNull(comparator3);
51:       
52:       Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
53:       assertNotNull(comparator4);
54:       
55:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("hx2# M}mqO>mMa9y:", (-2413));
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
60:       
61:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry2 = patriciaTrie0.replace((String) null, abstractMap_SimpleEntry0);
62:       assertNull(abstractMap_SimpleEntry2);
63:       
64:       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("", (AbstractMap.SimpleEntry<Integer, String>) null);
65:       assertNull(abstractMap_SimpleEntry3);
66:       
67:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("");
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
72:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
73:       
74:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
75:       assertNotNull(patriciaTrie1);
76:       
77:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap((String) null);
78:       assertFalse(sortedMap0.isEmpty());
79:       assertEquals(2, sortedMap0.size());
80:       assertNotNull(sortedMap0);
81:   }
82: }
RegularFileObject[/tmp/EvoSuite_117_1605585618501/org/apache/commons/collections4/trie/AbstractPatriciaTrie_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:18 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_117_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_117_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:18.620 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-2413));
assertEquals((-2413), (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "Z\"0rDeg+G");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

String string0 = abstractMap_SimpleEntry0.setValue((String) null);
assertEquals("Z\"0rDeg+G", string0);
assertNotNull(string0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie0.put("cg_J^^)oRj$(4U3.ky", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, String>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, String>>) comparator2);
assertNotNull(comparator3);

Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
assertNotNull(comparator4);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("hx2# M}mqO>mMa9y:", (-2413));
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry2 = patriciaTrie0.replace((String) null, abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry2);

AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("", (AbstractMap.SimpleEntry<Integer, String>) null);
assertNull(abstractMap_SimpleEntry3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("");
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap((String) null);
assertFalse(sortedMap0.isEmpty());
assertEquals(2, sortedMap0.size());
assertNotNull(sortedMap0);


[MASTER] 04:00:18.958 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1605585618829/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1605585618829/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:18.958 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:18.958 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:18.960 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 59
[MASTER] 04:00:18.960 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_121_1605585618829/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:18.960 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:18.973 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1605585618829/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:18 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_121_tmp__ESTest extends AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer(3784);
31:       assertEquals(3784, (int)integer0);
32:       assertNotNull(integer0);
33:       
34:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("|JXT{kj,=fUFc", integer0);
35:       assertNotNull(abstractMap_SimpleEntry0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("|JXT{kj,=fUFc", abstractMap_SimpleEntry0, 3784);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
47:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
48:       
49:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertNull(abstractPatriciaTrie_TrieEntry2);
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator2);
64:       assertNotNull(comparator3);
65:       
66:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("|JXT{kj,=fUFc", abstractMap_SimpleEntry0);
67:       assertNull(abstractMap_SimpleEntry1);
68:       
69:       String string0 = patriciaTrie0.lastKey();
70:       assertEquals("|JXT{kj,=fUFc", string0);
71:       assertNotNull(string0);
72:       
73:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("|JXT{kj,=fUFc", "|JXT{kj,=fUFc");
74:       assertNotNull(abstractMap_SimpleEntry2);
75:       
76:       String string1 = abstractMap_SimpleEntry2.setValue(" -> ");
77:       assertTrue(string1.equals((Object)string0));
78:       assertEquals("|JXT{kj,=fUFc", string1);
79:       assertNotNull(string1);
80:       
81:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry2);
82:       assertNotNull(abstractMap_SimpleImmutableEntry0);
83:       
84:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>("|JXT{kj,=fUFc", abstractMap_SimpleImmutableEntry0, 3784);
85:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
89:       
90:       abstractPatriciaTrie_TrieEntry3.predecessor = null;
91:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       
95:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry1, abstractMap_SimpleImmutableEntry0, 3784);
96:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
105:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
106:       
107:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
108:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
112:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
119:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
121:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
123:       
124:       String string2 = abstractPatriciaTrie_TrieEntry3.toString();
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
128:       assertFalse(string2.equals((Object)string1));
129:       assertFalse(string2.equals((Object)string0));
130:       assertEquals("Entry(key=|JXT{kj,=fUFc [3784], value=|JXT{kj,=fUFc= -> , parent=null, left=|JXT{kj,=fUFc [3784], right=Entry(key=|JXT{kj,=fUFc [3784], value=|JXT{kj,=fUFc=3784, parent=null, left=|JXT{kj,=fUFc [3784], right=null, predecessor=|JXT{kj,=fUFc [3784]) [3784], )", string2);
131:       assertNotNull(string2);
132:       
133:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
134:       assertNotNull(patriciaTrie1);
135:       
136:       Integer integer1 = new Integer(11);
137:       assertFalse(integer1.equals((Object)integer0));
138:       assertEquals(11, (int)integer1);
139:       assertNotNull(integer1);
140:       
141:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, comparator1, 4984);
142:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
143:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
144:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
145:       assertFalse(integer1.equals((Object)integer0));
146:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
147:       
148:       Object object0 = abstractPatriciaTrie_TrieEntry5.getValue();
149:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
152:       assertFalse(integer1.equals((Object)integer0));
153:       assertNotNull(object0);
154:       
155:       // Undeclared exception!
156:       try { 
157:         patriciaTrie1.getEntry(object0);
158:         fail("Expecting exception: ClassCastException");
159:       
160:       } catch(ClassCastException e) {
161:          //
162:          // no message in exception (getMessage() returned null)
163:          //
164:       }
165:   }
166: }
RegularFileObject[/tmp/EvoSuite_121_1605585618829/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:18 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:18.993 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(3784);
assertEquals(3784, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("|JXT{kj,=fUFc", integer0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("|JXT{kj,=fUFc", abstractMap_SimpleEntry0, 3784);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("|JXT{kj,=fUFc", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

String string0 = patriciaTrie0.lastKey();
assertEquals("|JXT{kj,=fUFc", string0);
assertNotNull(string0);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("|JXT{kj,=fUFc", "|JXT{kj,=fUFc");
assertNotNull(abstractMap_SimpleEntry2);

String string1 = abstractMap_SimpleEntry2.setValue(" -> ");
assertTrue(string1.equals((Object)string0));
assertEquals("|JXT{kj,=fUFc", string1);
assertNotNull(string1);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry2);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>("|JXT{kj,=fUFc", abstractMap_SimpleImmutableEntry0, 3784);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry3.predecessor = null;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry1, abstractMap_SimpleImmutableEntry0, 3784);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

String string2 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertEquals("Entry(key=|JXT{kj,=fUFc [3784], value=|JXT{kj,=fUFc= -> , parent=null, left=|JXT{kj,=fUFc [3784], right=Entry(key=|JXT{kj,=fUFc [3784], value=|JXT{kj,=fUFc=3784, parent=null, left=|JXT{kj,=fUFc [3784], right=null, predecessor=|JXT{kj,=fUFc [3784]) [3784], )", string2);
assertNotNull(string2);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer(11);
assertFalse(integer1.equals((Object)integer0));
assertEquals(11, (int)integer1);
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, comparator1, 4984);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Object object0 = abstractPatriciaTrie_TrieEntry5.getValue();
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer1.equals((Object)integer0));
assertNotNull(object0);

patriciaTrie1.getEntry(object0);

[MASTER] 04:00:57.325 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/24
* Done!

* Computation finished
