* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 14428
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 715728445
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:50:11.379 [logback-3] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:50:11.379 [logback-3] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:50:38.459 [logback-3] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:50:44.577 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 851: org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;:1076 - ReplaceArithmeticOperator - -> %
* Search finished after 305s and 46 generations, 37709 statements, best individual has fitness: 1484.0
* Minimizing test suite
[MASTER] 03:56:18.117 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 822
* Number of covered goals: 470
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 49%
* Total number of goals: 602
* Number of covered goals: 292
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 569
* Number of covered goals: 319
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 186
* Number of covered goals: 95
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 602
* Number of covered goals: 289
* Generated 132 tests with total length 2312
* Resulting test suite's coverage: 49% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:57:07.197 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6829333333333333% of time used, but only 5/132 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 03:57:15.297 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_7_1605585434944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_7_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_7_1605585434944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_7_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:15.297 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:15.297 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:15.302 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 50
[MASTER] 03:57:15.331 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_7_1605585434944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_7_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:15.332 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:15.333 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_7_1605585434944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_7_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:14 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_7_tmp__ESTest extends AbstractPatriciaTrie_7_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
27:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       
32:       Integer integer0 = new Integer(0);
33:       assertEquals(0, (int)integer0);
34:       assertNotNull(integer0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
43:       assertEquals("*7", string0);
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertNotNull(string0);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
51:       assertNotNull(comparator1);
52:       
53:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
63:       
64:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
74:       
75:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
85:       
86:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
94:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
96:       
97:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
98:       assertTrue(boolean0);
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
102:       
103:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
104:       assertNotNull(patriciaTrie0);
105:       
106:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0.left);
107:       assertTrue(boolean1);
108:       assertTrue(boolean1 == boolean0);
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
118:   }
119: }
RegularFileObject[/tmp/EvoSuite_7_1605585434944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_7_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:14 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_7_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_7_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_7_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_7_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:57:15.335 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
assertEquals("*7", string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0.left);
assertTrue(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());


[MASTER] 03:57:17.891 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_15_1605585437485/org/apache/commons/collections4/trie/AbstractPatriciaTrie_15_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_15_1605585437485/org/apache/commons/collections4/trie/AbstractPatriciaTrie_15_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:17.891 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:17.891 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:17.893 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 136
[MASTER] 03:57:17.893 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_15_1605585437485/org/apache/commons/collections4/trie/AbstractPatriciaTrie_15_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:17.893 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:17.894 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_15_1605585437485/org/apache/commons/collections4/trie/AbstractPatriciaTrie_15_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:17 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_15_tmp__ESTest extends AbstractPatriciaTrie_15_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "fromKey > toKey", 1109);
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       Integer integer0 = new Integer(0);
34:       assertEquals(0, (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("fromKey > toKey");
38:       assertEquals("fromKey > toKey", string0);
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertNotNull(string0);
43:       
44:       abstractPatriciaTrie_TrieEntry0.key = integer0;
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       
49:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(abstractPatriciaTrie_TrieEntry0.key, "u9g2-|vld]MYKjEiYg\"", 0);
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       
58:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
68:       
69:       String string1 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, "x%3+Oy/XWM^0#$I#:");
70:       assertEquals("fromKey > toKey", string1);
71:       assertTrue(string1.equals((Object)string0));
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertNotNull(string1);
76:       
77:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "fromKey > toKey", 1109);
78:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
82:       
83:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
91:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
93:       
94:       String string2 = abstractPatriciaTrie_TrieEntry0.setValue("fromKey > toKey");
95:       assertEquals("x%3+Oy/XWM^0#$I#:", string2);
96:       assertFalse(string2.equals((Object)string1));
97:       assertFalse(string2.equals((Object)string0));
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertNotNull(string2);
102:       
103:       Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
104:       assertNotNull(comparator0);
105:       
106:       Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByKey();
107:       assertSame(comparator1, comparator0);
108:       assertNotNull(comparator1);
109:       
110:       String string3 = abstractPatriciaTrie_TrieEntry0.toString();
111:       assertEquals("Entry(key=0 [1109], value=fromKey > toKey, parent=null [1109], left=0 [0], right=null, predecessor=0 [1109])", string3);
112:       assertFalse(string3.equals((Object)string2));
113:       assertFalse(string3.equals((Object)string1));
114:       assertFalse(string3.equals((Object)string0));
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
118:       assertNotNull(string3);
119:       
120:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
121:       assertTrue(boolean0);
122:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
123:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
125:       
126:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
127:       assertNotNull(patriciaTrie0);
128:       
129:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry2);
130:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
131:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
133:       assertNotNull(abstractMap_SimpleEntry0);
134:       
135:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
136:       Comparator<Map.Entry<Integer, String>> comparator3 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
137:       assertFalse(comparator3.equals((Object)comparator0));
138:       assertFalse(comparator3.equals((Object)comparator1));
139:       assertNotNull(comparator3);
140:       
141:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("eY2bX:8mq", abstractMap_SimpleEntry0, 0);
142:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
144:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
145:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
146:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
147:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
148:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
149:       
150:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("", abstractMap_SimpleEntry0, 0);
151:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
154:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
156:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
157:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
158:       
159:       abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry4;
160:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
161:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
162:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
168:       assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
170:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
171:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
172:       
173:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.right;
174:       assertNull(abstractPatriciaTrie_TrieEntry5);
175:       
176:       // Undeclared exception!
177:       try { 
178:         patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>) null);
179:         fail("Expecting exception: NullPointerException");
180:       
181:       } catch(NullPointerException e) {
182:          //
183:          // no message in exception (getMessage() returned null)
184:          //
185:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
186:       }
187:   }
188: }
RegularFileObject[/tmp/EvoSuite_15_1605585437485/org/apache/commons/collections4/trie/AbstractPatriciaTrie_15_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:17 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_15_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_15_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_15_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_15_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:57:17.908 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "fromKey > toKey", 1109);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("fromKey > toKey");
assertEquals("fromKey > toKey", string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);

abstractPatriciaTrie_TrieEntry0.key = integer0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(abstractPatriciaTrie_TrieEntry0.key, "u9g2-|vld]MYKjEiYg\"", 0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

String string1 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, "x%3+Oy/XWM^0#$I#:");
assertEquals("fromKey > toKey", string1);
assertTrue(string1.equals((Object)string0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "fromKey > toKey", 1109);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

String string2 = abstractPatriciaTrie_TrieEntry0.setValue("fromKey > toKey");
assertEquals("x%3+Oy/XWM^0#$I#:", string2);
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string2);

Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByKey();
assertSame(comparator1, comparator0);
assertNotNull(comparator1);

String string3 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=0 [1109], value=fromKey > toKey, parent=null [1109], left=0 [0], right=null, predecessor=0 [1109])", string3);
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string3);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator3 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
assertFalse(comparator3.equals((Object)comparator0));
assertFalse(comparator3.equals((Object)comparator1));
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("eY2bX:8mq", abstractMap_SimpleEntry0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("", abstractMap_SimpleEntry0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.right;
assertNull(abstractPatriciaTrie_TrieEntry5);

patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>) null);

[MASTER] 03:57:26.609 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_79_1605585446403/org/apache/commons/collections4/trie/AbstractPatriciaTrie_79_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_79_1605585446403/org/apache/commons/collections4/trie/AbstractPatriciaTrie_79_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:26.611 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:26.611 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:26.612 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 51
[MASTER] 03:57:26.612 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_79_1605585446403/org/apache/commons/collections4/trie/AbstractPatriciaTrie_79_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:26.613 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:26.614 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_79_1605585446403/org/apache/commons/collections4/trie/AbstractPatriciaTrie_79_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:26 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.OrderedMapIterator;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_79_tmp__ESTest extends AbstractPatriciaTrie_79_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       Integer integer0 = new Integer(0);
34:       assertEquals(0, (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
38:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
42:       
43:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
44:       assertEquals("*7", string0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertNotNull(string0);
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
64:       
65:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
75:       
76:       Integer integer1 = new Integer(3);
77:       assertEquals(3, (int)integer1);
78:       assertFalse(integer1.equals((Object)integer0));
79:       assertNotNull(integer1);
80:       
81:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
82:       assertNotNull(patriciaTrie0);
83:       
84:       OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
85:       assertFalse(orderedMapIterator0.hasNext());
86:       assertFalse(orderedMapIterator0.hasPrevious());
87:       assertNotNull(orderedMapIterator0);
88:       
89:       Integer integer2 = new Integer(3);
90:       assertEquals(3, (int)integer2);
91:       assertFalse(integer2.equals((Object)integer0));
92:       assertTrue(integer2.equals((Object)integer1));
93:       assertNotNull(integer2);
94:       
95:       Integer integer3 = patriciaTrie0.put(" [", integer2);
96:       assertFalse(integer2.equals((Object)integer0));
97:       assertTrue(integer2.equals((Object)integer1));
98:       assertNull(integer3);
99:       
100:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("4YqF]lhT)p#");
101:       assertNull(abstractPatriciaTrie_TrieEntry2);
102:       
103:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
104:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
105:       assertNotNull(patriciaTrie1);
106:       
107:       Integer integer4 = new Integer(2391);
108:       assertEquals(2391, (int)integer4);
109:       assertFalse(integer4.equals((Object)integer1));
110:       assertFalse(integer4.equals((Object)integer2));
111:       assertFalse(integer4.equals((Object)integer0));
112:       assertNotNull(integer4);
113:       
114:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
115:       assertNotNull(patriciaTrie2);
116:       
117:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "4YqF]lhT)p#", 0);
118:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
121:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry3, 1365);
124:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
130:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
131:   }
132: }
RegularFileObject[/tmp/EvoSuite_79_1605585446403/org/apache/commons/collections4/trie/AbstractPatriciaTrie_79_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:26 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_79_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_79_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_79_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_79_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:57:26.617 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
assertEquals("*7", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Integer integer1 = new Integer(3);
assertEquals(3, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

Integer integer2 = new Integer(3);
assertEquals(3, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertNotNull(integer2);

Integer integer3 = patriciaTrie0.put(" [", integer2);
assertFalse(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertNull(integer3);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("4YqF]lhT)p#");
assertNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

Integer integer4 = new Integer(2391);
assertEquals(2391, (int)integer4);
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));
assertNotNull(integer4);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "4YqF]lhT)p#", 0);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry3, 1365);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);


[MASTER] 03:57:27.740 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_88_1605585447648/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_88_1605585447648/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:27.741 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:27.741 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:27.741 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 51
[MASTER] 03:57:27.742 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_88_1605585447648/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:27.742 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:27.743 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_88_1605585447648/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:27 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_88_tmp__ESTest extends AbstractPatriciaTrie_88_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       Integer integer0 = new Integer(0);
34:       assertEquals(0, (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
38:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
39:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
42:       
43:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
44:       assertEquals("*7", string0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertNotNull(string0);
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
64:       
65:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
75:       
76:       Integer integer1 = new Integer(0);
77:       assertEquals(0, (int)integer1);
78:       assertTrue(integer1.equals((Object)integer0));
79:       assertNotNull(integer1);
80:       
81:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
82:       assertNotNull(patriciaTrie0);
83:       
84:       Integer integer2 = patriciaTrie0.put("*7", integer1);
85:       assertTrue(integer1.equals((Object)integer0));
86:       assertNull(integer2);
87:       
88:       patriciaTrie0.clear();
89:       Integer integer3 = patriciaTrie0.remove((Object) "*7");
90:       assertNull(integer3);
91:       
92:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
93:       assertNotNull(patriciaTrie1);
94:       
95:       Object object0 = patriciaTrie1.get((Object) null);
96:       assertNull(object0);
97:       
98:       Comparator<? super String> comparator2 = patriciaTrie1.comparator();
99:       assertNotNull(comparator2);
100:       
101:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("*7", "*7");
102:       assertEquals(0, sortedMap0.size());
103:       assertTrue(sortedMap0.isEmpty());
104:       assertNotNull(sortedMap0);
105:       
106:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
107:       assertNotNull(patriciaTrie2);
108:       
109:       Comparator<? super String> comparator3 = patriciaTrie2.comparator();
110:       assertNotSame(comparator3, comparator2);
111:       assertFalse(comparator3.equals((Object)comparator2));
112:       assertNotNull(comparator3);
113:   }
114: }
RegularFileObject[/tmp/EvoSuite_88_1605585447648/org/apache/commons/collections4/trie/AbstractPatriciaTrie_88_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:27 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_88_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_88_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 03:57:27.744 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("*7", "*7", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, " [", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("*7");
assertEquals("*7", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

Integer integer1 = new Integer(0);
assertEquals(0, (int)integer1);
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer2 = patriciaTrie0.put("*7", integer1);
assertTrue(integer1.equals((Object)integer0));
assertNull(integer2);

patriciaTrie0.clear();
Integer integer3 = patriciaTrie0.remove((Object) "*7");
assertNull(integer3);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.get((Object) null);
assertNull(object0);

Comparator<? super String> comparator2 = patriciaTrie1.comparator();
assertNotNull(comparator2);

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("*7", "*7");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

Comparator<? super String> comparator3 = patriciaTrie2.comparator();
assertNotSame(comparator3, comparator2);
assertFalse(comparator3.equals((Object)comparator2));
assertNotNull(comparator3);


[MASTER] 03:57:29.199 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_99_1605585448903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_99_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_99_1605585448903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_99_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:29.200 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:29.200 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:29.207 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 60
[MASTER] 03:57:29.207 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_99_1605585448903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_99_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:29.207 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:29.218 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_99_1605585448903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_99_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:29 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_99_tmp__ESTest extends AbstractPatriciaTrie_99_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Object object0 = patriciaTrie0.put("1X-t0e\"C9v[NkH$&", patriciaTrie0);
31:       assertNull(object0);
32:       
33:       Object object1 = patriciaTrie0.get("1X-t0e\"C9v[NkH$&");
34:       assertNotNull(object1);
35:       
36:       SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
37:       assertEquals(0, sortedMap0.size());
38:       assertTrue(sortedMap0.isEmpty());
39:       assertNotNull(sortedMap0);
40:       
41:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
42:       assertNotNull(patriciaTrie1);
43:       
44:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
45:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
46:       assertNotNull(patriciaTrie2);
47:       
48:       String string0 = patriciaTrie0.selectKey("1X-t0e\"C9v[NkH$&");
49:       assertEquals("1X-t0e\"C9v[NkH$&", string0);
50:       assertNotNull(string0);
51:       
52:       Integer integer0 = new Integer(0);
53:       assertEquals(0, (int)integer0);
54:       assertNotNull(integer0);
55:       
56:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("1X-t0e\"C9v[NkH$&");
57:       assertNull(abstractPatriciaTrie_TrieEntry0);
58:       
59:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
61:       assertNotNull(comparator1);
62:       
63:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "1X-t0e\"C9v[NkH$&", 0);
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
68:       
69:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
70:       assertNotNull(patriciaTrie3);
71:       
72:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
73:       assertFalse(boolean0);
74:   }
75: }
RegularFileObject[/tmp/EvoSuite_99_1605585448903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_99_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:29 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_99_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_99_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_99_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_99_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:29.220 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("1X-t0e\"C9v[NkH$&", patriciaTrie0);
assertNull(object0);

Object object1 = patriciaTrie0.get("1X-t0e\"C9v[NkH$&");
assertNotNull(object1);

SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie2);

String string0 = patriciaTrie0.selectKey("1X-t0e\"C9v[NkH$&");
assertEquals("1X-t0e\"C9v[NkH$&", string0);
assertNotNull(string0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("1X-t0e\"C9v[NkH$&");
assertNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "1X-t0e\"C9v[NkH$&", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
assertFalse(boolean0);


[MASTER] 03:57:29.719 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_104_1605585449636/org/apache/commons/collections4/trie/AbstractPatriciaTrie_104_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_104_1605585449636/org/apache/commons/collections4/trie/AbstractPatriciaTrie_104_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:29.719 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:29.719 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:29.721 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 99
[MASTER] 03:57:29.723 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Integer>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>>: 117
[MASTER] 03:57:29.724 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_104_1605585449636/org/apache/commons/collections4/trie/AbstractPatriciaTrie_104_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:29.724 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:29.725 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_104_1605585449636/org/apache/commons/collections4/trie/AbstractPatriciaTrie_104_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:29 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_104_tmp__ESTest extends AbstractPatriciaTrie_104_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Object object0 = new Object();
27:       assertNotNull(object0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", object0, 112);
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       
35:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", (-2429));
36:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
38:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
39:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
40:       
41:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
51:       
52:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
54:       assertNotNull(comparator1);
55:       
56:       Comparator<Map.Entry<Object, Integer>> comparator2 = Map.Entry.comparingByValue();
57:       assertNotNull(comparator2);
58:       
59:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator3 = Map.Entry.comparingByKey();
60:       assertNotNull(comparator3);
61:       
62:       abstractPatriciaTrie_TrieEntry0.value = object0;
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       
67:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
68:       assertTrue(boolean0);
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       
73:       Integer integer0 = new Integer(112);
74:       assertEquals(112, (int)integer0);
75:       assertNotNull(integer0);
76:       
77:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, (AbstractMap.SimpleImmutableEntry<Object, Object>) null, 2240);
78:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
82:       
83:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1, integer0);
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertNotNull(abstractMap_SimpleImmutableEntry0);
88:       
89:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, abstractMap_SimpleImmutableEntry0, (-1562));
90:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
96:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
97:       
98:       Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
99:       Comparator<Map.Entry<String, Integer>> comparator5 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
100:       assertNotNull(comparator5);
101:       
102:       abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
106:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
115:       
116:       Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
117:       Comparator<Map.Entry<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator7 = (Comparator<Map.Entry<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator6);
118:       assertNotNull(comparator7);
119:       
120:       abstractPatriciaTrie_TrieEntry2.bitIndex = (-1562);
121:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
124:       
125:       boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
126:       assertFalse(boolean1);
127:       assertFalse(boolean1 == boolean0);
128:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
130:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
131:       
132:       PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
133:       assertNotNull(patriciaTrie0);
134:       
135:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
136:       assertNotNull(patriciaTrie1);
137:       
138:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", comparator5, (-2429));
139:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
140:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
141:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
142:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
143:       
144:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>(",(.DZ$F^Q", patriciaTrie0, 208);
145:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
146:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
148:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
149:       
150:       abstractPatriciaTrie_TrieEntry4.parent = abstractPatriciaTrie_TrieEntry5;
151:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
152:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
157:       assertFalse(abstractPatriciaTrie_TrieEntry4.parent.isEmpty());
158:       assertFalse(abstractPatriciaTrie_TrieEntry4.parent.isInternalNode());
159:       assertTrue(abstractPatriciaTrie_TrieEntry4.parent.isExternalNode());
160:       
161:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry4);
162:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
165:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
168:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
169:       
170:       Object object1 = patriciaTrie1.put("", comparator7);
171:       assertNull(object1);
172:       
173:       Integer integer1 = new Integer((-1));
174:       assertEquals((-1), (int)integer1);
175:       assertFalse(integer1.equals((Object)integer0));
176:       assertNotNull(integer1);
177:       
178:       Object object2 = patriciaTrie1.put(")sE>.I6:_oM,#MmB!]", integer1);
179:       assertFalse(integer1.equals((Object)integer0));
180:       assertNull(object2);
181:       
182:       Object object3 = patriciaTrie1.selectValue("");
183:       assertFalse(object3.equals((Object)object0));
184:       assertNotNull(object3);
185:   }
186: }
RegularFileObject[/tmp/EvoSuite_104_1605585449636/org/apache/commons/collections4/trie/AbstractPatriciaTrie_104_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:29 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_104_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_104_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_104_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_104_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:57:29.728 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
Object object0 = new Object();
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", object0, 112);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "", (-2429));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Object, Integer>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.value = object0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Integer integer0 = new Integer(112);
assertEquals(112, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, (AbstractMap.SimpleImmutableEntry<Object, Object>) null, 2240);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1, integer0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, abstractMap_SimpleImmutableEntry0, (-1562));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator5 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
assertNotNull(comparator5);

abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator7 = (Comparator<Map.Entry<Comparable<Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator6);
assertNotNull(comparator7);

abstractPatriciaTrie_TrieEntry2.bitIndex = (-1562);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", comparator5, (-2429));
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>(",(.DZ$F^Q", patriciaTrie0, 208);
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

abstractPatriciaTrie_TrieEntry4.parent = abstractPatriciaTrie_TrieEntry5;
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.parent.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

Object object1 = patriciaTrie1.put("", comparator7);
assertNull(object1);

Integer integer1 = new Integer((-1));
assertEquals((-1), (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

Object object2 = patriciaTrie1.put(")sE>.I6:_oM,#MmB!]", integer1);
assertFalse(integer1.equals((Object)integer0));
assertNull(object2);

Object object3 = patriciaTrie1.selectValue("");
assertFalse(object3.equals((Object)object0));
assertNotNull(object3);


[MASTER] 03:57:30.221 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_108_1605585450110/org/apache/commons/collections4/trie/AbstractPatriciaTrie_108_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_108_1605585450110/org/apache/commons/collections4/trie/AbstractPatriciaTrie_108_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:30.239 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:30.240 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:30.243 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 68
[MASTER] 03:57:30.246 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_108_1605585450110/org/apache/commons/collections4/trie/AbstractPatriciaTrie_108_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:30.246 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:30.261 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_108_1605585450110/org/apache/commons/collections4/trie/AbstractPatriciaTrie_108_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:30 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_108_tmp__ESTest extends AbstractPatriciaTrie_108_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer(13);
31:       assertEquals(13, (int)integer0);
32:       assertNotNull(integer0);
33:       
34:       Integer integer1 = patriciaTrie0.put("", integer0);
35:       assertNull(integer1);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
42:       
43:       Integer integer2 = new Integer(1884);
44:       assertEquals(1884, (int)integer2);
45:       assertFalse(integer2.equals((Object)integer0));
46:       assertNotNull(integer2);
47:       
48:       Integer integer3 = new Integer(1884);
49:       assertEquals(1884, (int)integer3);
50:       assertTrue(integer3.equals((Object)integer2));
51:       assertFalse(integer3.equals((Object)integer0));
52:       assertNotNull(integer3);
53:       
54:       Integer integer4 = new Integer(1884);
55:       assertEquals(1884, (int)integer4);
56:       assertFalse(integer4.equals((Object)integer0));
57:       assertTrue(integer4.equals((Object)integer3));
58:       assertTrue(integer4.equals((Object)integer2));
59:       assertNotNull(integer4);
60:       
61:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
62:       assertNotNull(patriciaTrie1);
63:       
64:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry((String) null);
65:       assertNull(abstractPatriciaTrie_TrieEntry1);
66:       
67:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
68:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
69:       assertNotNull(comparator1);
70:       
71:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
72:       Integer integer5 = new Integer(1884);
73:       assertEquals(1884, (int)integer5);
74:       assertTrue(integer5.equals((Object)integer3));
75:       assertTrue(integer5.equals((Object)integer2));
76:       assertTrue(integer5.equals((Object)integer4));
77:       assertFalse(integer5.equals((Object)integer0));
78:       assertNotNull(integer5);
79:       
80:       AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer5, 192);
81:       assertTrue(integer5.equals((Object)integer3));
82:       assertTrue(integer5.equals((Object)integer2));
83:       assertTrue(integer5.equals((Object)integer4));
84:       assertFalse(integer5.equals((Object)integer0));
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
87:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
89:       
90:       Integer integer6 = abstractPatriciaTrie_TrieEntry2.value;
91:       assertEquals(1884, (int)integer6);
92:       assertTrue(integer6.equals((Object)integer4));
93:       assertTrue(integer6.equals((Object)integer2));
94:       assertTrue(integer6.equals((Object)integer3));
95:       assertFalse(integer6.equals((Object)integer0));
96:       assertNotNull(integer6);
97:       
98:       Object object0 = patriciaTrie1.put("^agC~0l", integer6);
99:       assertTrue(integer5.equals((Object)integer3));
100:       assertTrue(integer5.equals((Object)integer2));
101:       assertTrue(integer5.equals((Object)integer4));
102:       assertFalse(integer5.equals((Object)integer0));
103:       assertTrue(integer6.equals((Object)integer4));
104:       assertTrue(integer6.equals((Object)integer2));
105:       assertTrue(integer6.equals((Object)integer3));
106:       assertFalse(integer6.equals((Object)integer0));
107:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
110:       assertNull(object0);
111:       
112:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(comparator1, "", 1884);
113:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
116:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
117:       
118:       boolean boolean0 = AbstractBitwiseTrie.compare((Object) null, comparator1);
119:       assertFalse(boolean0);
120:   }
121: }
RegularFileObject[/tmp/EvoSuite_108_1605585450110/org/apache/commons/collections4/trie/AbstractPatriciaTrie_108_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:30 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_108_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_108_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_108_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_108_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_108_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:57:30.263 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(13);
assertEquals(13, (int)integer0);
assertNotNull(integer0);

Integer integer1 = patriciaTrie0.put("", integer0);
assertNull(integer1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer2 = new Integer(1884);
assertEquals(1884, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertNotNull(integer2);

Integer integer3 = new Integer(1884);
assertEquals(1884, (int)integer3);
assertTrue(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertNotNull(integer3);

Integer integer4 = new Integer(1884);
assertEquals(1884, (int)integer4);
assertFalse(integer4.equals((Object)integer0));
assertTrue(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer2));
assertNotNull(integer4);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
Integer integer5 = new Integer(1884);
assertEquals(1884, (int)integer5);
assertTrue(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertNotNull(integer5);

AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer5, 192);
assertTrue(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Integer integer6 = abstractPatriciaTrie_TrieEntry2.value;
assertEquals(1884, (int)integer6);
assertTrue(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer0));
assertNotNull(integer6);

Object object0 = patriciaTrie1.put("^agC~0l", integer6);
assertTrue(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer2));
assertTrue(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(comparator1, "", 1884);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

boolean boolean0 = AbstractBitwiseTrie.compare((Object) null, comparator1);
assertFalse(boolean0);


[MASTER] 03:57:31.807 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1605585451683/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1605585451683/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:31.808 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:31.808 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:31.810 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.String>,java.lang.Comparable<java.lang.String>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.String>,java.lang.Comparable<java.lang.String>>>>: 72
[MASTER] 03:57:31.823 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_121_1605585451683/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:31.824 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:31.826 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1605585451683/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:31 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_121_tmp__ESTest extends AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       Integer integer0 = new Integer(1520);
33:       assertEquals(1520, (int)integer0);
34:       assertNotNull(integer0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("?x", integer0, 3);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
41:       
42:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 3);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("{", integer0, 3);
52:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       
57:       Integer integer1 = new Integer(3);
58:       assertEquals(3, (int)integer1);
59:       assertFalse(integer1.equals((Object)integer0));
60:       assertNotNull(integer1);
61:       
62:       Integer integer2 = patriciaTrie0.put("?x", integer1);
63:       assertEquals(1520, (int)integer2);
64:       assertFalse(integer1.equals((Object)integer0));
65:       assertFalse(integer2.equals((Object)integer1));
66:       assertNotNull(integer2);
67:       
68:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("?Hemfj");
69:       assertNull(abstractPatriciaTrie_TrieEntry3);
70:       
71:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>) comparator0);
73:       assertNotNull(comparator1);
74:       
75:       Integer integer3 = new Integer(2340);
76:       assertEquals(2340, (int)integer3);
77:       assertFalse(integer3.equals((Object)integer0));
78:       assertFalse(integer3.equals((Object)integer2));
79:       assertFalse(integer3.equals((Object)integer1));
80:       assertNotNull(integer3);
81:       
82:       Integer integer4 = abstractPatriciaTrie_TrieEntry0.setKeyValue("{", integer3);
83:       assertEquals(3, (int)integer4);
84:       assertFalse(integer0.equals((Object)integer1));
85:       assertFalse(integer0.equals((Object)integer3));
86:       assertFalse(integer3.equals((Object)integer0));
87:       assertFalse(integer3.equals((Object)integer2));
88:       assertFalse(integer3.equals((Object)integer1));
89:       assertFalse(integer4.equals((Object)integer0));
90:       assertFalse(integer4.equals((Object)integer2));
91:       assertFalse(integer4.equals((Object)integer3));
92:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
95:       assertNotNull(integer4);
96:       
97:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
107:       
108:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
109:       assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
110:       assertFalse(integer0.equals((Object)integer4));
111:       assertFalse(integer0.equals((Object)integer1));
112:       assertFalse(integer0.equals((Object)integer3));
113:       assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
114:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
120:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
121:       
122:       HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
123:       assertEquals(0, hashMap0.size());
124:       assertTrue(hashMap0.isEmpty());
125:       assertNotNull(hashMap0);
126:       
127:       PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
128:       assertEquals(0, hashMap0.size());
129:       assertTrue(hashMap0.isEmpty());
130:       assertNotNull(patriciaTrie1);
131:       
132:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
133:       SortedMap<String, Comparable<Object>> sortedMap0 = patriciaTrie1.tailMap("{");
134:       assertTrue(sortedMap0.isEmpty());
135:       assertEquals(0, sortedMap0.size());
136:       assertEquals(0, hashMap0.size());
137:       assertTrue(hashMap0.isEmpty());
138:       assertNotNull(sortedMap0);
139:       
140:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("", comparable0, (-1268));
141:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
143:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
144:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
145:       
146:       Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
147:       doReturn((String) null, (String) null, (String) null).when(comparable1).toString();
148:       Comparable<Object> comparable2 = patriciaTrie1.put("k//Y6", comparable1);
149:       assertEquals(0, hashMap0.size());
150:       assertTrue(hashMap0.isEmpty());
151:       assertNull(comparable2);
152:       
153:       Comparator<Map.Entry<Comparable<Object>, Integer>> comparator2 = Map.Entry.comparingByKey();
154:       assertNotNull(comparator2);
155:       
156:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.firstEntry();
157:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
158:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
159:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
160:       assertEquals(0, hashMap0.size());
161:       assertTrue(hashMap0.isEmpty());
162:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
163:       
164:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry5.parent;
165:       assertNull(abstractPatriciaTrie_TrieEntry7);
166:       
167:       // Undeclared exception!
168:       try { 
169:         patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null);
170:         fail("Expecting exception: NullPointerException");
171:       
172:       } catch(NullPointerException e) {
173:          //
174:          // no message in exception (getMessage() returned null)
175:          //
176:       }
177:   }
178: }
RegularFileObject[/tmp/EvoSuite_121_1605585451683/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:31 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:57:31.829 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(1520);
assertEquals(1520, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("?x", integer0, 3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("{", integer0, 3);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Integer integer1 = new Integer(3);
assertEquals(3, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

Integer integer2 = patriciaTrie0.put("?x", integer1);
assertEquals(1520, (int)integer2);
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(integer2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("?Hemfj");
assertNull(abstractPatriciaTrie_TrieEntry3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(2340);
assertEquals(2340, (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertNotNull(integer3);

Integer integer4 = abstractPatriciaTrie_TrieEntry0.setKeyValue("{", integer3);
assertEquals(3, (int)integer4);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(integer4);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie1);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
SortedMap<String, Comparable<Object>> sortedMap0 = patriciaTrie1.tailMap("{");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("", comparable0, (-1268));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null, (String) null, (String) null).when(comparable1).toString();
Comparable<Object> comparable2 = patriciaTrie1.put("k//Y6", comparable1);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(comparable2);

Comparator<Map.Entry<Comparable<Object>, Integer>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.firstEntry();
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry5.parent;
assertNull(abstractPatriciaTrie_TrieEntry7);

patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null);

[MASTER] 03:57:32.132 [logback-3] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_124_1605585452055/org/apache/commons/collections4/trie/AbstractPatriciaTrie_124_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_124_1605585452055/org/apache/commons/collections4/trie/AbstractPatriciaTrie_124_tmp__ESTest_scaffolding.java]]
[MASTER] 03:57:32.132 [logback-3] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:32.132 [logback-3] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:57:32.133 [logback-3] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 105
[MASTER] 03:57:32.134 [logback-3] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_124_1605585452055/org/apache/commons/collections4/trie/AbstractPatriciaTrie_124_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:57:32.135 [logback-3] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:57:32.138 [logback-3] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_124_1605585452055/org/apache/commons/collections4/trie/AbstractPatriciaTrie_124_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:57:32 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import java.util.function.BiFunction;
18: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
19: import org.apache.commons.collections4.trie.PatriciaTrie;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.ViolatedAssumptionAnswer;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class AbstractPatriciaTrie_124_tmp__ESTest extends AbstractPatriciaTrie_124_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
31:       assertNotNull(patriciaTrie0);
32:       
33:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
34:       assertEquals(0, hashMap0.size());
35:       assertTrue(hashMap0.isEmpty());
36:       assertNotNull(hashMap0);
37:       
38:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
39:       assertEquals(0, hashMap0.size());
40:       assertTrue(hashMap0.isEmpty());
41:       assertNotNull(patriciaTrie1);
42:       
43:       Integer integer0 = new Integer(141);
44:       assertEquals(141, (int)integer0);
45:       assertNotNull(integer0);
46:       
47:       Collection<Integer> collection0 = patriciaTrie1.values();
48:       assertEquals(0, hashMap0.size());
49:       assertTrue(hashMap0.isEmpty());
50:       assertNotNull(collection0);
51:       assertFalse(collection0.contains(141));
52:       
53:       Integer integer1 = hashMap0.put("delegate", integer0);
54:       assertEquals(1, hashMap0.size());
55:       assertFalse(hashMap0.isEmpty());
56:       assertNull(integer1);
57:       
58:       BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
59:       doReturn((Object) null).when(biFunction0).apply(any() , any());
60:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("", (-1));
61:       assertEquals(1, hashMap0.size());
62:       assertFalse(hashMap0.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
67:       
68:       Integer integer2 = hashMap0.compute("delegate", biFunction0);
69:       assertEquals(0, hashMap0.size());
70:       assertTrue(hashMap0.isEmpty());
71:       assertNull(integer2);
72:       
73:       SortedMap<String, Integer> sortedMap0 = patriciaTrie1.headMap("delegate");
74:       assertEquals(0, hashMap0.size());
75:       assertTrue(hashMap0.isEmpty());
76:       assertEquals(0, sortedMap0.size());
77:       assertTrue(sortedMap0.isEmpty());
78:       assertNotNull(sortedMap0);
79:       
80:       String string0 = patriciaTrie1.nextKey("`)G)zUi-k<");
81:       assertEquals(0, hashMap0.size());
82:       assertTrue(hashMap0.isEmpty());
83:       assertNull(string0);
84:       
85:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 141);
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
89:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
90:       
91:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
93:       assertEquals(0, hashMap0.size());
94:       assertTrue(hashMap0.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
100:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
103:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
104:       
105:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
106:       assertNotNull(comparator1);
107:       
108:       Integer integer3 = new Integer(0);
109:       assertEquals(0, (int)integer3);
110:       assertFalse(integer3.equals((Object)integer0));
111:       assertNotNull(integer3);
112:       
113:       abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
117:       
118:       Integer integer4 = abstractPatriciaTrie_TrieEntry1.setKeyValue((String) null, integer3);
119:       assertEquals(141, (int)integer4);
120:       assertFalse(integer4.equals((Object)integer3));
121:       assertFalse(integer0.equals((Object)integer3));
122:       assertFalse(integer3.equals((Object)integer0));
123:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
124:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
126:       assertNotNull(integer4);
127:       
128:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
129:       assertFalse(integer0.equals((Object)integer3));
130:       assertEquals(0, hashMap0.size());
131:       assertTrue(hashMap0.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
134:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
135:       assertNull(abstractPatriciaTrie_TrieEntry2);
136:       
137:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
138:       assertEquals(0, hashMap0.size());
139:       assertTrue(hashMap0.isEmpty());
140:       assertNotNull(patriciaTrie2);
141:       
142:       Object object0 = patriciaTrie2.put("HZkv&rIc1%G7Mdj)P", patriciaTrie0);
143:       assertEquals(0, hashMap0.size());
144:       assertTrue(hashMap0.isEmpty());
145:       assertNull(object0);
146:       
147:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", collection0, (-2487));
148:       assertEquals(0, hashMap0.size());
149:       assertTrue(hashMap0.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
152:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
153:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
154:       assertFalse(collection0.contains(integer4));
155:       
156:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
157:       assertNull(abstractPatriciaTrie_TrieEntry4);
158:       
159:       // Undeclared exception!
160:       try { 
161:         patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 0);
162:         fail("Expecting exception: NullPointerException");
163:       
164:       } catch(NullPointerException e) {
165:          //
166:          // no message in exception (getMessage() returned null)
167:          //
168:       }
169:   }
170: }
RegularFileObject[/tmp/EvoSuite_124_1605585452055/org/apache/commons/collections4/trie/AbstractPatriciaTrie_124_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:57:32 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_124_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_124_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_124_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_124_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_124_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:57:32.142 [logback-3] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(141);
assertEquals(141, (int)integer0);
assertNotNull(integer0);

Collection<Integer> collection0 = patriciaTrie1.values();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(collection0);
assertFalse(collection0.contains(141));

Integer integer1 = hashMap0.put("delegate", integer0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(integer1);

BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(any() , any());
AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("", (-1));
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer2 = hashMap0.compute("delegate", biFunction0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(integer2);

SortedMap<String, Integer> sortedMap0 = patriciaTrie1.headMap("delegate");
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

String string0 = patriciaTrie1.nextKey("`)G)zUi-k<");
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 141);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(0);
assertEquals(0, (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertNotNull(integer3);

abstractPatriciaTrie_TrieEntry1.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Integer integer4 = abstractPatriciaTrie_TrieEntry1.setKeyValue((String) null, integer3);
assertEquals(141, (int)integer4);
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer3.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(integer4);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer3));
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie2);

Object object0 = patriciaTrie2.put("HZkv&rIc1%G7Mdj)P", patriciaTrie0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", collection0, (-2487));
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(collection0.contains(integer4));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
assertNull(abstractPatriciaTrie_TrieEntry4);

patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0/tests/15
* Done!

* Computation finished
