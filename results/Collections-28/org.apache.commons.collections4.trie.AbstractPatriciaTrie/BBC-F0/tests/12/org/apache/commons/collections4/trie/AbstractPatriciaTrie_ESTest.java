/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:57:49 GMT 2020
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Integer integer0 = new Integer(2550);
      assertNotNull(integer0);
      assertEquals(2550, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("value=", integer0, (-2352));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("value=", abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.remove((Object) "value=");
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.remove((Object) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = new Integer((-3298));
      assertNotNull(integer2);
      assertEquals((-3298), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer3 = patriciaTrie1.merge("value=", integer2, biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(integer3);
      assertEquals((-3298), (int)integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      
      String string0 = patriciaTrie1.selectKey("value=");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("value=", string0);
      
      Integer integer4 = new Integer(2550);
      assertNotNull(integer4);
      assertEquals(2550, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer4, "value=", (-1267));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      String string1 = "w";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.getOrDefault("w", object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object object2 = patriciaTrie0.put("", "||%02h'h5IZJ");
      assertNull(object2);
      
      int int0 = patriciaTrie0.lengthInBits("");
      assertEquals(0, int0);
      
      Object object3 = patriciaTrie0.put("OEB/.5*!lbR?;qr", "");
      assertNull(object3);
      
      String string2 = patriciaTrie0.firstKey();
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Integer integer0 = new Integer((-748));
      assertNotNull(integer0);
      assertEquals((-748), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(112);
      assertNotNull(integer1);
      assertEquals(112, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(abstractMap_SimpleImmutableEntry1, "=", 926);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Object object4 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(object4);
      assertEquals("=", object4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object4.equals((Object)string0));
      assertFalse(object4.equals((Object)string2));
      assertFalse(object4.equals((Object)string1));
      
      Object object5 = patriciaTrie0.put("", "");
      assertNotNull(object5);
      assertEquals("||%02h'h5IZJ", object5);
      assertFalse(object5.equals((Object)string2));
      assertFalse(object5.equals((Object)string0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)string1));
      
      String string3 = "y}Et|{tdN)4iZPc.A%n";
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      
      Object object7 = patriciaTrie0.put("y}Et|{tdN)4iZPc.A%n", object6);
      assertNull(object7);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertNotSame(object6, object0);
      assertNotSame(object6, object1);
      
      String string4 = patriciaTrie0.previousKey("");
      assertNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("@;v%HG");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object1));
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie0.merge((String) null, object8, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("x8:erJ!Qqm6,a[$", "x8:erJ!Qqm6,a[$");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("x8:erJ!Qqm6,a[$", "_QJ0UW>Y=[K", 1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("q4<m-eE", "", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("x8:erJ!Qqm6,a[$");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(263);
      assertNotNull(integer3);
      assertEquals(263, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer3, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      String string0 = (String)abstractPatriciaTrie_TrieEntry2.key;
      assertNotNull(string0);
      assertEquals("", string0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", "Ma&]!U8rlT", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      String string1 = abstractPatriciaTrie_TrieEntry3.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(string1);
      assertEquals("Entry(key= [0], value=Ma&]!U8rlT, parent=null, left= [0], right=null, predecessor= [0])", string1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      String string2 = abstractPatriciaTrie_TrieEntry3.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(string2);
      assertEquals("Entry(key= [0], value=Ma&]!U8rlT, parent=null, left= [0], right=null, predecessor= [0])", string2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer4 = new Integer(565);
      assertNotNull(integer4);
      assertEquals(565, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ma&]!U8rlT", sortedMap0, 263);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Object object0 = abstractPatriciaTrie_TrieEntry4.value;
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key= [0], value=Ma&]!U8rlT, parent=null, left= [0], right=null, predecessor= [0])", object0, 565);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry4, 1);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie2.floorEntry("_QJ0UW>Y=[K");
      assertTrue(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "By|%E", 32768);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(string0);
      assertEquals("Entry(key=null [32768], value=By|%E, parent=null, left=null [32768], right=null, predecessor=null [32768])", string0);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", "By|%E");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string1);
      assertEquals("By|%E", string1);
      assertFalse(string1.equals((Object)string0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = AbstractBitwiseTrie.compare((Object) null, patriciaTrie0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", (Object) null, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key= [292], value=null, parent=null, left= [292], right=null, predecessor= [292])", string0);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      String string1 = abstractPatriciaTrie_TrieEntry3.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(string1);
      assertEquals("Entry(key= [292], value=null, parent=null, left= [292], right=null, predecessor= [292])", string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("S2", "", (-17));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie4.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.floorEntry("Entry(key= [292], value=null, parent=null, left= [292], right=null, predecessor= [292])");
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry5));
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = AbstractBitwiseTrie.compare(object0, patriciaTrie0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(3, sortedMap0.size());
      assertNull(object4);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("'PJ -t|:", patriciaTrie2, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie0);
      
      int int0 = (-1185);
      String string0 = "5^| jt\\9K~6F";
      String string1 = "";
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) null, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("5^| jt9K~6F", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      patriciaTrie0.modCount = (-1185);
      String string2 = "<9?FDF";
      SortedMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> sortedMap0 = patriciaTrie0.tailMap("<9?FDF");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("6<-9B9{");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object>((AbstractMap.SimpleEntry<Object, String>) null, sortedMap0, (-1185));
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(32768);
      assertNotNull(integer0);
      assertEquals(32768, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("K", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      
      int int0 = patriciaTrie1.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      String string0 = ".zA}";
      Integer integer2 = new Integer(16);
      assertNotNull(integer2);
      assertEquals(16, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(1776);
      assertNotNull(integer3);
      assertEquals(1776, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      
      Integer integer4 = hashMap0.put("K", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, 912, 912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("K", (Integer) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      String string0 = ".zA}";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("K");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("^MYO", "^MYO", (-1516));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = hashMap0.put((String) null, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("^MYO", integer2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", "B?TMf<J6<");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("^MYO", "^MYO", (-1512));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("^MYO", "^MYO");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("^MYO");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.bitIndex("^MYO", "^MYO");
      assertEquals((-2), int0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean0 = patriciaTrie2.compareKeys((String) null, (String) null);
      assertTrue(boolean0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie2.prefixMap("^MYO");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.getNearestEntryForKey("^MYO", (-1512));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "^MYO", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer0 = new Integer(2085);
      assertNotNull(integer0);
      assertEquals(2085, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "mWsKk1e", (-1512));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      abstractPatriciaTrie_TrieEntry3.left = abstractPatriciaTrie_TrieEntry4;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.left.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("mWsKk1e", integer0, 955);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)int0));
      
      String string1 = abstractPatriciaTrie_TrieEntry5.key;
      assertNotNull(string1);
      assertEquals("mWsKk1e", string1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("^MYO", "mWsKk1e");
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "^MYO", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, (String) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      String string1 = "w";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.getOrDefault("w", object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object object2 = patriciaTrie0.put("", "||%02h'h5IZJ");
      assertNull(object2);
      
      int int0 = patriciaTrie0.lengthInBits("");
      assertEquals(0, int0);
      
      String string2 = patriciaTrie0.firstKey();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Integer integer0 = new Integer((-748));
      assertNotNull(integer0);
      assertEquals((-748), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(112);
      assertNotNull(integer1);
      assertEquals(112, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(abstractMap_SimpleImmutableEntry1, "=", 926);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Object object3 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(object3);
      assertEquals("=", object3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object3.equals((Object)string0));
      assertFalse(object3.equals((Object)string2));
      assertFalse(object3.equals((Object)string1));
      
      Object object4 = patriciaTrie0.put("||%02h'h5IZJ", "=");
      assertNull(object4);
      
      Object object5 = patriciaTrie0.put(",&$ \"$=l%m{-03h/", ",&$ \"$=l%m{-03h/");
      assertNull(object5);
      
      String string3 = "y}Et|{tdN)4iZPc.A%n";
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      
      Object object7 = patriciaTrie0.put("y}Et|{tdN)4iZPc.A%n", object6);
      assertNull(object7);
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertNotSame(object6, object1);
      assertNotSame(object6, object0);
      
      String string4 = patriciaTrie0.previousKey("");
      assertNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("@;v%HG");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object6));
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie0.merge((String) null, object8, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      Integer integer0 = new Integer(2550);
      assertNotNull(integer0);
      assertEquals(2550, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("value=", integer0, (-2352));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("value=", abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(abstractMap_SimpleImmutableEntry2);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.remove((Object) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer2 = new Integer((-3298));
      assertNotNull(integer2);
      assertEquals((-3298), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer3 = patriciaTrie1.merge("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer2, biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(integer3);
      assertEquals((-3298), (int)integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      
      String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie", string0);
      
      Integer integer4 = new Integer((-2828));
      assertNotNull(integer4);
      assertEquals((-2828), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer4, " .", (-1267));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertFalse(sortedMap1.isEmpty());
      assertEquals(1, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertEquals(4, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNull(object4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object5 = patriciaTrie0.compute("", biFunction0);
      assertNull(object5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie6.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie5);
      assertNotSame(patriciaTrie6, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie5.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", 1);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie6));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie6));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(patriciaTrie0, patriciaTrie6);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie0);
      assertNotSame(patriciaTrie5, patriciaTrie6);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie6.nextKey("2tHA^8e{]nRl06b");
      assertNull(string0);
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie5);
      assertNotSame(patriciaTrie6, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Integer integer0 = new Integer(2550);
      assertNotNull(integer0);
      assertEquals(2550, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("value=", integer0, (-2352));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("value=", abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(abstractMap_SimpleImmutableEntry2);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.remove((Object) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", (-4080));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, (String) null, 112);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("Trie[", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, (String) null, 776);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "Trie[", 112);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(boolean0);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      Integer integer0 = new Integer(2550);
      assertNotNull(integer0);
      assertEquals(2550, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("value=", integer0, (-2352));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("value=", abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.remove((Object) "value=");
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.remove((Object) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-3));
      assertNotNull(integer2);
      assertEquals((-3), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("The offsets and lengths must be at Character boundaries", (Integer) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("", (-23), (-2352));
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie4);
      
      // Undeclared exception!
      try { 
        patriciaTrie4.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string0);
      assertEquals("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Object object0 = patriciaTrie0.put("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)patriciaTrie0.put("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", integer0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      boolean boolean0 = patriciaTrie0.replace("", (Object) "", (Object) "");
      assertFalse(boolean0);
      
      String string1 = patriciaTrie0.lastKey();
      assertNotNull(string1);
      assertEquals("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", "", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      abstractPatriciaTrie_TrieEntry4.bitIndex = 757;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      Comparator<? super String> comparator2 = patriciaTrie2.comparator();
      assertNotNull(comparator2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = patriciaTrie3.computeIfPresent("", biFunction0);
      assertNull(integer1);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie3.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      OrderedMapIterator<String, String> orderedMapIterator1 = patriciaTrie1.mapIterator();
      assertFalse(orderedMapIterator1.hasNext());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      String string2 = patriciaTrie1.put("", "]={\n");
      assertNull(string2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.subtree("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)", (-1), 32768);
      assertNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains((-1)));
      assertFalse(collection0.contains("RootEntry(key= [-1], value=Trie[0]={\n}\n, parent=null, left=ROOT, right=null, predecessor=ROOT)"));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("q4<m-eE", "q4<m-eE");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer2, (-123));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1776;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("", integer1);
      assertNull(object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.getNearestEntryForKey("", (-123));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string0 = patriciaTrie1.nextKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie0.bitIndex(")", "");
      assertEquals(10, int0);
      
      boolean boolean0 = patriciaTrie1.compareKeys("", "");
      assertTrue(boolean0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, "");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", 10);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(boolean1);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(224);
      assertNotNull(integer0);
      assertEquals(224, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>>((String) null, abstractMap_SimpleEntry2, 2085);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie2.put("", "=");
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      String string1 = patriciaTrie2.put("y7>*-k9ll", "y7>*-k9ll");
      assertNull(string1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      boolean boolean0 = patriciaTrie2.containsKey("");
      assertTrue(boolean0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie2.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      String string2 = patriciaTrie2.put("", "");
      assertNotNull(string2);
      assertEquals("=", string2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      String string3 = patriciaTrie1.put("=", "=");
      assertNull(string3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.getNearestEntryForKey((String) null, 32768);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      String string4 = patriciaTrie2.put("y7>*-k9ll", (String) null);
      assertNotNull(string4);
      assertEquals("y7>*-k9ll", string4);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string5 = patriciaTrie1.computeIfPresent("y7>*-k9ll", biFunction0);
      assertNull(string5);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("%");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.lowerEntry("=");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      boolean boolean1 = patriciaTrie3.isBitSet("", 2346, (-2));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SortedMap<String, Comparable<String>> sortedMap1 = patriciaTrie3.subMap((String) null, ")");
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      
      Integer integer0 = new Integer(2346);
      assertNotNull(integer0);
      assertEquals(2346, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, String>(integer0, (String) null, 926);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Comparator<Map.Entry<Object, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Object, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      assertSame(comparator1, comparator0);
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Comparator<? super String> comparator2 = patriciaTrie1.comparator();
      assertNotNull(comparator2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie5);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Mp8W~_Oe#", "B?TMf<J6<");
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("Mp8W~_Oe#");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("Mp8W~_Oe#", (String) null);
      assertNotNull(string2);
      assertEquals("B?TMf<J6<", string2);
      
      String string3 = patriciaTrie0.lastKey();
      assertNotNull(string3);
      assertEquals("Mp8W~_Oe#", string3);
      assertFalse(string3.equals((Object)string2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("  ");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = 2696;
      Integer integer0 = new Integer(2696);
      assertNotNull(integer0);
      assertEquals(2696, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string4 = null;
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie1.merge((String) null, integer0, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("K", (Integer) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, int0);
      
      Integer integer1 = new Integer(3126);
      assertNotNull(integer1);
      assertEquals(3126, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer4 = patriciaTrie0.put(".zA}", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie1.subMap("K", "S5!>[s[F]w!TVxe7d");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("K", ":xz");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>(":xz", abstractMap_SimpleEntry0, 1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      patriciaTrie2.incrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie3);
      
      patriciaTrie3.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 2990);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Key cannot be null", integer6, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie4);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("pbo1G~uw", patriciaTrie0, (-1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie1);
      
      int int1 = patriciaTrie1.size();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("pbo1G~uw", integer0, 1616);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("pbo1G~uw", integer0, (-1953));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.left;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put(".K", (Integer) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, int0);
      
      Integer integer1 = new Integer(3132);
      assertNotNull(integer1);
      assertEquals(3132, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer4 = patriciaTrie0.put(".zA}", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-1806));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey("");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 682);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie1.bitsPerElement();
      assertEquals(16, int0);
      
      Integer integer0 = new Integer(682);
      assertNotNull(integer0);
      assertEquals(682, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1907));
      assertNotNull(integer1);
      assertEquals((-1907), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie1.put("ROOT", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer((-2));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer4 = hashMap0.put("", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      
      Integer integer5 = new Integer((-2425));
      assertNotNull(integer5);
      assertEquals((-2425), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 682, 16);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer6 = new Integer((-1975));
      assertNotNull(integer6);
      assertEquals((-1975), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      
      Integer integer7 = new Integer((-1975));
      assertNotNull(integer7);
      assertEquals((-1975), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      
      Integer integer8 = hashMap0.put("", integer7);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(integer8);
      assertEquals(682, (int)integer8);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      
      Integer integer9 = hashMap0.put("E:fK", integer0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer9);
      assertFalse(integer0.equals((Object)integer7));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer6));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, "rOm5gxw!ccu5", (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("", (-993), 1806);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.put("tT|YImEHR", "tT|YImEHR");
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object1 = patriciaTrie1.put("The offsets and lengths must be at Character boundaries", object0);
      assertNull(object1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.higherEntry("Z.4y6s!");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie5.floorEntry("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie5, patriciaTrie2);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie1, patriciaTrie5);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("K", (Integer) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, int0);
      
      Integer integer1 = new Integer(3132);
      assertNotNull(integer1);
      assertEquals(3132, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put(".zA}", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie1.subMap("K", "S5!>[s[F]w!TVxe7d");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("K", ":xz");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>(":xz", abstractMap_SimpleEntry0, 1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      patriciaTrie2.incrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie3);
      
      patriciaTrie3.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 2990);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Integer integer5 = new Integer(2);
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Key cannot be null", integer6, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie4);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-4185));
      assertNotNull(integer0);
      assertEquals((-4185), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("Xxd*GuV?0V8a'P%1c", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("z<2DxW%9_", abstractMap_SimpleEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("CD$ZrS6XdGFrOz9tK", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("D'ZA8", abstractMap_SimpleEntry0, 160);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-4185);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = patriciaTrie0.put("Xxd*GuV?0V8a'P%1c", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie0.subMap("Xxd*GuV?0V8a'P%1c", (String) null);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry2, "Xxd*GuV?0V8a'P%1c");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, "Xxd*GuV?0V8a'P%1c", (-1512));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("", integer1, (-4185));
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry7 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry7);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("ROOT", integer1);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer((-2));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer4 = new Integer(16);
      assertNotNull(integer4);
      assertEquals(16, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      
      Integer integer5 = hashMap0.put("", integer4);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      
      Integer integer6 = new Integer((-2));
      assertNotNull(integer6);
      assertEquals((-2), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      
      Integer integer7 = patriciaTrie0.put("", integer6);
      assertNull(integer7);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 727, 2263);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer8 = new Integer((-1975));
      assertNotNull(integer8);
      assertEquals((-1975), (int)integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer8, "", 727);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(object0);
      assertEquals((-1975), object0);
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer6));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, "oZH0in9");
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer6));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, "org.apache.commons.collections4.trie.PatriciaTrie", 16);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer6));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer6));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("", integer3, 12);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer8));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, (AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>) null, abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer8));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie0.bitIndex(")", "");
      assertEquals(10, int0);
      
      boolean boolean0 = patriciaTrie1.compareKeys("", "");
      assertTrue(boolean0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2089);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", (-1590));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, "");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "", 2089);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry3;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(boolean1);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = AbstractBitwiseTrie.compare((Object) null, patriciaTrie0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertFalse(sortedMap1.isEmpty());
      assertEquals(1, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertEquals(4, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNull(object4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      Integer integer0 = new Integer((-1772));
      assertNotNull(integer0);
      assertEquals((-1772), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, patriciaTrie0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, (String) null, (-2197));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(boolean2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      PatriciaTrie<Comparable<Integer>> patriciaTrie5 = new PatriciaTrie<Comparable<Integer>>();
      assertNotNull(patriciaTrie5);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("1CA6zgP ", integer0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie5.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.floorEntry("Z.4y6s!");
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey((String) null, 2620);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, 1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 2);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2879));
      assertNotNull(integer1);
      assertEquals((-2879), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, sortedMap0, 0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry1;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.left.left;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Integer integer3 = new Integer(603);
      assertNotNull(integer3);
      assertEquals(603, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      String string0 = abstractPatriciaTrie_TrieEntry1.left.toString();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key={} [2], value=null, parent=null, left={} [2], right=null, predecessor={} [2])", string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.getNearestEntryForKey("qeE", (-3));
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("K", (Integer) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(16, int0);
      
      Integer integer1 = new Integer(3132);
      assertNotNull(integer1);
      assertEquals(3132, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer4 = patriciaTrie0.put(".zA}", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Integer integer6 = new Integer(1409);
      assertNotNull(integer6);
      assertEquals(1409, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer7 = patriciaTrie0.merge("", integer6, biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(integer7);
      assertEquals(1409, (int)integer7);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.floorEntry("PXt P t9IRzrt]R.Hc");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(32768);
      assertNotNull(integer0);
      assertEquals(32768, (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("CXf)Pvi5FPKkO", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.replace("tOX`*+6xZOF", (Integer) null);
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("3.JHQqeUjg57N)na\"_");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = patriciaTrie0.put("\"pFK", integer0);
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer4 = new Integer(32768);
      assertNotNull(integer4);
      assertEquals(32768, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer4, "3.JHQqeUjg57N)na\"_");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer4.equals((Object)integer0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, String> sortedMap1 = patriciaTrie2.prefixMap("CXf)Pvi5FPKkO");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("\"pFK");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("=", "org.apache.commons.collections4.trie.AbstractPatriciaTrie", (-697));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie3.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Mp8W~_Oe#";
      String string1 = patriciaTrie0.put("{=zPdI`Kj=W", "B?TMf<J6<");
      assertNull(string1);
      
      String string2 = patriciaTrie0.previousKey("Mp8W~_Oe#");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("", (String) null);
      assertNull(string3);
      
      String string4 = patriciaTrie0.lastKey();
      assertNotNull(string4);
      assertEquals("{=zPdI`Kj=W", string4);
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "  ";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("  ");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string6 = patriciaTrie0.put("1:_s8-KUlH", "1:_s8-KUlH");
      assertNull(string6);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      PatriciaTrie<Integer> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-4185));
      assertNotNull(integer0);
      assertEquals((-4185), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("Xxd*GuV?0V8a'P%1c", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("z<2DxW%9_", abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("CD$ZrS6XdGFrOz9tK", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("D'ZA8", abstractMap_SimpleEntry0, 160);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-4185);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie0.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", (String) null);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      patriciaTrie1.incrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-4185));
      assertNotNull(integer1);
      assertEquals((-4185), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry5.right = abstractPatriciaTrie_TrieEntry6;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.right.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie3.select("");
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey((String) null, 2620);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, 1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 2);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2879));
      assertNotNull(integer1);
      assertEquals((-2879), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, sortedMap0, 0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry1;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.left.left;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Integer integer3 = new Integer(603);
      assertNotNull(integer3);
      assertEquals(603, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      String string0 = abstractPatriciaTrie_TrieEntry1.left.toString();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key={} [2], value=null, parent=null, left={} [2], right=null, predecessor={} [2])", string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry1.left, abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.getNearestEntryForKey((String) null, 2538);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      String string1 = patriciaTrie2.nextKey("&@5Hu\"#1}I,4aKJeK+j");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = "}";
      String string1 = hashMap0.put("]5D~", "}");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = hashMap0.merge("}", "}", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(string2);
      assertEquals("}", string2);
      assertTrue(string2.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = patriciaTrie1.getOrDefault("}", "}");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(string3);
      assertEquals("}", string3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(string3.equals((Object)string0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      boolean boolean0 = patriciaTrie1.compareKeys("org.apache.commons.collections4.trie.PatriciaTrie", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains("}"));
      assertFalse(set0.contains("org.apache.commons.collections4.trie.PatriciaTrie"));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, "}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      int int0 = 0;
      int int1 = patriciaTrie0.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      String string1 = null;
      Integer integer0 = new Integer(3132);
      assertNotNull(integer0);
      assertEquals(3132, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = hashMap0.put("", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer3 = patriciaTrie0.put("", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object1 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      SortedMap<String, Object> sortedMap2 = patriciaTrie0.tailMap("S2");
      assertFalse(sortedMap2.isEmpty());
      assertEquals(3, sortedMap2.size());
      assertNotNull(sortedMap2);
      assertFalse(sortedMap2.equals((Object)sortedMap0));
      assertFalse(sortedMap2.equals((Object)sortedMap1));
      assertNotSame(sortedMap2, sortedMap1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(3, sortedMap0.size());
      assertNull(object3);
      assertFalse(sortedMap0.equals((Object)sortedMap2));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(set0.contains("Z.4y6s!"));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie4.ceilingEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 292;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer(292);
      assertNotNull(integer0);
      assertEquals(292, (int)integer0);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = patriciaTrie3.merge("S2", integer0, biFunction0);
      assertNotNull(integer1);
      assertEquals(292, (int)integer1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      String string0 = patriciaTrie3.selectKey("v1n{Y|'k;4VfXfj");
      assertNotNull(string0);
      assertEquals("S2", string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      Integer integer2 = new Integer((-2852));
      assertNotNull(integer2);
      assertEquals((-2852), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(411);
      assertNotNull(integer3);
      assertEquals(411, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer3, "/e~Wye*(mgt m7h", (-2852));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.floorEntry("S2");
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Set<Map.Entry<String, Comparable<String>>> set0 = (Set<Map.Entry<String, Comparable<String>>>)patriciaTrie1.entrySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      int int0 = patriciaTrie0.bitIndex((String) null, "]={\n");
      assertEquals(9, int0);
      
      boolean boolean0 = patriciaTrie1.compareKeys("", "");
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      Object object0 = patriciaTrie3.put("8_mrE&<RF9gyw}2iRD", "8_mrE&<RF9gyw}2iRD");
      assertNull(object0);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      Set<Map.Entry<String, Integer>> set1 = (Set<Map.Entry<String, Integer>>)patriciaTrie2.entrySet();
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie2, patriciaTrie4);
      
      patriciaTrie3.clear();
      Integer integer0 = new Integer((-1872));
      assertNotNull(integer0);
      assertEquals((-1872), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Object object1 = patriciaTrie3.put("]={\n", integer0);
      assertNull(object1);
      assertFalse(integer0.equals((Object)int0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = patriciaTrie3.put("8_mrE&<RF9gyw}2iRD", object2);
      assertNull(object3);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie2);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.higherEntry("1CA6zgP ");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.floorEntry("3sh/pF-mYx");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie6));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie5));
      assertNotSame(patriciaTrie3, patriciaTrie6);
      assertNotSame(patriciaTrie3, patriciaTrie5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) orderedMapIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie0.bitIndex(")", "");
      assertEquals(10, int0);
      
      boolean boolean0 = patriciaTrie1.compareKeys("", "");
      assertTrue(boolean0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2089);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer integer0 = new Integer((-3168));
      assertNotNull(integer0);
      assertEquals((-3168), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      
      Integer integer1 = new Integer(2089);
      assertNotNull(integer1);
      assertEquals(2089, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer2 = hashMap0.put("l9:iEvlj", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer3 = new Integer((-3951));
      assertNotNull(integer3);
      assertEquals((-3951), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = hashMap0.put("S[XL", integer3);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, "E:fK", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("]5Dq~", "}");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotNull(sortedMap1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("wr@", "/=V2_|:A?");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = hashMap0.computeIfPresent("/=V2_|:A?", biFunction0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = hashMap0.replace("", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string3);
      assertEquals("", string3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string4 = null;
      String string5 = patriciaTrie1.lastKey();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(string5);
      assertEquals("wr@", string5);
      assertFalse(string5.equals((Object)string3));
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction1).apply(any() , any());
      hashMap0.replaceAll(biFunction1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = (-1004);
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, "R2fAz&\"M|:4>r6Ws/:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.clear();
      Object object0 = patriciaTrie0.put("Failed to put: ", "ccp#TCBPC");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("0iUsxl", 1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("", "Y+A&");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Object object2 = patriciaTrie0.merge("Y+A&", "Y+A&", biFunction0);
      assertNotNull(object2);
      assertEquals("Y+A&", object2);
      
      patriciaTrie0.clear();
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction1);
      Object object3 = patriciaTrie0.put("", "Y+A&");
      assertNull(object3);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("ccp#TCBPC"));
      assertTrue(set0.contains(""));
      
      Object object4 = new Object();
      assertNotNull(object4);
      
      Integer integer0 = new Integer(1601);
      assertNotNull(integer0);
      assertEquals(1601, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      int int1 = patriciaTrie2.bitIndex("", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("", 16);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, abstractPatriciaTrie_TrieEntry0, 2263);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, sortedMap0, 2263);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer2 = new Integer(3567);
      assertNotNull(integer2);
      assertEquals(3567, (int)integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer2, "", 474);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(474);
      assertNotNull(integer3);
      assertEquals(474, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=-1 [2263], value=RootEntry(key=null [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT), parent=null, left=-1 [2263], right=null, predecessor=-1 [2263])", string0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.getNearestEntryForKey("", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      String string1 = patriciaTrie3.nextKey("p%PgfF@qSL\"TkdHzZ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) "GHD|LM/% &~1B", (Object) "GHD|LM/% &~1B");
      assertFalse(boolean0);
      
      String string0 = patriciaTrie0.put("GHD|LM/% &~1B", "GHD|LM/% &~1B");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("tT|YImEHR", "tT|YImEHR");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", "");
      assertNull(string2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.lastKey();
      assertNotNull(string3);
      assertEquals("tT|YImEHR", string3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(313);
      assertNotNull(integer0);
      assertEquals(313, (int)integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = new Integer(777);
      assertNotNull(integer1);
      assertEquals(777, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("2 dgm_:#Zfz%PH7:nX");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Collection<Integer> collection0 = patriciaTrie2.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(integer1));
      
      Integer integer2 = new Integer((-2));
      assertNotNull(integer2);
      assertEquals((-2), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie2.put("0i% :e1F]x.c]-:X0", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer4 = new Integer((-2));
      assertNotNull(integer4);
      assertEquals((-2), (int)integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      patriciaTrie2.incrementSize();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Integer integer5 = new Integer(313);
      assertNotNull(integer5);
      assertEquals(313, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      
      Integer integer6 = hashMap1.put("2 dgm_:#Zfz%PH7:nX", integer5);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer6);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotSame(hashMap1, hashMap0);
      
      Integer integer7 = hashMap1.put("O[w1f52]dbB`", (Integer) null);
      assertFalse(hashMap1.isEmpty());
      assertEquals(2, hashMap1.size());
      assertNull(integer7);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap1, hashMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie2.replace("", integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = hashMap0.put("", integer3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.getNearestEntryForKey("", 16);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", (-354));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(integer1, (Object) null);
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "", 2085);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "ip@", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", 3476);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie0.put("ROOT", integer0);
      assertNull(integer1);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer2 = new Integer(727);
      assertNotNull(integer2);
      assertEquals(727, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer3 = new Integer(16);
      assertNotNull(integer3);
      assertEquals(16, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = hashMap0.put("", integer3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer5 = new Integer(2263);
      assertNotNull(integer5);
      assertEquals(2263, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      
      Integer integer6 = patriciaTrie0.put("", integer5);
      assertNull(integer6);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 727, 2263);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer7 = new Integer((-1975));
      assertNotNull(integer7);
      assertEquals((-1975), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie2.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(string1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry("ROOT");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie2.replace("", integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = hashMap0.put("", integer3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Collection<Integer> collection0 = patriciaTrie2.values();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(collection0);
      assertFalse(collection0.contains(0));
      
      Integer integer5 = patriciaTrie2.put("", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      
      Integer integer6 = new Integer(0);
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      patriciaTrie2.incrementSize();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer7 = new Integer(1646);
      assertNotNull(integer7);
      assertEquals(1646, (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      
      Integer integer8 = hashMap0.put("", integer7);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer8);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      
      Integer integer9 = new Integer((-2569));
      assertNotNull(integer9);
      assertEquals((-2569), (int)integer9);
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      
      Integer integer10 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer9);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer10);
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("  ");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(32768);
      assertNotNull(integer0);
      assertEquals(32768, (int)integer0);
      
      patriciaTrie0.decrementSize();
      Integer integer1 = patriciaTrie0.put("Ckf)P-FP/kO", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.replace("tOX`*+6xZOF", (Integer) null);
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap("3.JHQqeUjg57N)na\"_");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = patriciaTrie0.put("\"pFK", integer0);
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer4 = new Integer(32768);
      assertNotNull(integer4);
      assertEquals(32768, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(4652);
      assertNotNull(integer5);
      assertEquals(4652, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer6 = new Integer(32);
      assertNotNull(integer6);
      assertEquals(32, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      
      Integer integer7 = hashMap0.put("Ovv_B", integer6);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer7);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      
      Integer integer8 = new Integer(4652);
      assertNotNull(integer8);
      assertEquals(4652, (int)integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer5));
      
      Integer integer9 = hashMap0.put("5", integer8);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer9);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer5));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Ckf)P-FP/kO");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-4185));
      assertNotNull(integer0);
      assertEquals((-4185), (int)integer0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("z<2DxW%9_", abstractMap_SimpleEntry0, (-7));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("'ZA", abstractMap_SimpleEntry0, 160);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-4185);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry0.setValue(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = patriciaTrie0.put("Xxd*GuV?0V8a'P%1c", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
      assertNotNull(comparator2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry4);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry4, "value=", 3303);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry4, "P_ySQ", (-1284));
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry4, "Eg1y=z(gWn", 16);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer((-4185));
      assertNotNull(integer0);
      assertEquals((-4185), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("Xxd*GuV?0V8a'P%1c", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("z<2DxW%9_", abstractMap_SimpleEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("CD$ZrS6XdGFrOz9tK", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("D'ZA8", abstractMap_SimpleEntry0, 160);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-4185);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie0.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", (String) null);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      patriciaTrie1.incrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-4185));
      assertNotNull(integer1);
      assertEquals((-4185), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      abstractPatriciaTrie_TrieEntry5.right = abstractPatriciaTrie_TrieEntry6;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.right.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie3.select("");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 727);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1";
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = patriciaTrie0.computeIfPresent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", biFunction0);
      assertNull(string1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("-w0OnNh<RA+|4j=.g#", (Integer) null, (-2893));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(string2);
      assertEquals("Entry(key=-w0OnNh<RA+|4j=.g# [-2893], value=null, parent=null, left=-w0OnNh<RA+|4j=.g# [-2893], right=null, predecessor=-w0OnNh<RA+|4j=.g# [-2893])", string2);
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(2210);
      assertNotNull(integer0);
      assertEquals(2210, (int)integer0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(">", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 2663);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer1 = new Integer((-123));
      assertNotNull(integer1);
      assertEquals((-123), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 2663);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("x");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.clear();
      Object object0 = patriciaTrie0.put("Failed to put: ", "ccp#TCBPC");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("", "Y+A&");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Object object2 = patriciaTrie0.merge("Y+A&", "Y+A&", biFunction0);
      assertNotNull(object2);
      assertEquals("Y+A&", object2);
      
      patriciaTrie0.clear();
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction1);
      Object object3 = patriciaTrie0.put("Sz.5LWX4>7H2lQdx", "");
      assertNull(object3);
      
      Object object4 = patriciaTrie0.put("", "Y+A&");
      assertNull(object4);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(object2));
      assertTrue(set0.contains(""));
      
      int int0 = patriciaTrie0.size();
      assertEquals(2, int0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie2.putIfAbsent("Y+A&", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      Integer integer2 = new Integer(953);
      assertNotNull(integer2);
      assertEquals(953, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      boolean boolean0 = patriciaTrie2.replace("", integer2, integer2);
      assertFalse(boolean0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie3.previousKey("W");
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      
      Integer integer3 = patriciaTrie3.get("");
      assertNull(integer3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(";NS]#B2`03U", 0, 1623);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      int int0 = patriciaTrie0.bitIndex(";NS]#B2`03U", "7*JH9e(gtRO(<_Q");
      assertEquals(12, int0);
      
      Integer integer0 = new Integer(1623);
      assertNotNull(integer0);
      assertEquals(1623, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      patriciaTrie0.modCount = 0;
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)int0));
      
      Comparator<Map.Entry<Integer, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      assertFalse(integer0.equals((Object)int0));
      
      Comparator<Map.Entry<Integer, Object>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      assertSame(comparator1, comparator0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put(";NS]#B2`03U", abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(integer0.equals((Object)int0));
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      Comparator<? super String> comparator2 = patriciaTrie0.comparator();
      assertNotNull(comparator2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer((-3957));
      assertNotNull(integer1);
      assertEquals((-3957), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie1.put("", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put(";NS]#B2`03U", integer0);
      assertNull(integer3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      int int1 = patriciaTrie2.size();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("%l@U7=V", ";NS]#B2`03U", 1623);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3132);
      assertNotNull(integer0);
      assertEquals(3132, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer0.equals((Object)integer1));
      
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie0.merge((String) null, integer4, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(1802);
      assertNotNull(integer0);
      assertEquals(1802, (int)integer0);
      
      Integer integer1 = new Integer(1578);
      assertNotNull(integer1);
      assertEquals(1578, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByValue();
      assertNotNull(comparator2);
      assertSame(comparator2, comparator0);
      
      Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
      assertNotNull(comparator3);
      
      Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
      assertNotNull(comparator4);
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 1578);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<String, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=1802 [1578], value==1578, parent=null, left=1802 [0], right=null, predecessor=1802 [1578])", string0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.getEntry((Object) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("U9u4}<$OU1)", "1CA6zgP ");
      assertNull(object1);
      
      Integer integer0 = new Integer(292);
      assertNotNull(integer0);
      assertEquals(292, (int)integer0);
      
      Integer integer1 = new Integer(292);
      assertNotNull(integer1);
      assertEquals(292, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(patriciaTrie3);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = AbstractBitwiseTrie.compare((Object) null, patriciaTrie0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertEquals(4, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNull(object4);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      String string0 = patriciaTrie4.firstKey();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.floorEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("Bd6eC918XjR#8t", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = patriciaTrie1.firstKey();
      assertNotNull(string1);
      assertEquals("Bd6eC918XjR#8t", string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      patriciaTrie0.replaceAll(biFunction0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie2.put("xa&ytbb*%Fy$]", "xa&ytbb*%Fy$]");
      assertNull(string2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("Bd6eC918XjR#8t", (-2376), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("7i|&", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<String> set0 = hashMap0.keySet();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference"));
      assertTrue(set0.contains("7i|&"));
      
      String string1 = patriciaTrie0.put("], ", "], ");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "p<?^~u");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      String string3 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      Integer integer0 = new Integer((-669));
      assertNotNull(integer0);
      assertEquals((-669), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.KeyAnalyzer", integer0, (-669));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(boolean0);
      
      Integer integer1 = new Integer((-669));
      assertNotNull(integer1);
      assertEquals((-669), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer1, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, String>, Object>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, String>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Object>, String>>) comparator1);
      assertNotNull(comparator2);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Integer, String>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry1, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(boolean1);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(boolean1 == boolean0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Object object0 = patriciaTrie2.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "p<?^~u");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-669));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(integer0.equals((Object)integer1));
      
      String string4 = abstractPatriciaTrie_TrieEntry4.key;
      assertNull(string4);
      
      boolean boolean2 = patriciaTrie2.containsKey((Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 693);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie1.bitsPerElement();
      assertEquals(16, int0);
      
      String string1 = "";
      Integer integer0 = new Integer(693);
      assertNotNull(integer0);
      assertEquals(693, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      String string2 = "ROOT";
      Integer integer1 = new Integer((-1907));
      assertNotNull(integer1);
      assertEquals((-1907), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie1.put("ROOT", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer((-2));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer4 = hashMap0.put("", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = (-2404);
      Integer integer5 = new Integer((-2404));
      assertNotNull(integer5);
      assertEquals((-2404), (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 693, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      int int0 = 0;
      String string1 = null;
      String string2 = "";
      Integer integer0 = new Integer(3132);
      assertNotNull(integer0);
      assertEquals(3132, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = "";
      int int0 = 0;
      String string1 = null;
      Integer integer0 = new Integer(3132);
      assertNotNull(integer0);
      assertEquals(3132, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.computeIfPresent("/=V2_|:A?", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      String string2 = hashMap0.replace("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(string2);
      assertEquals("", string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertFalse(sortedMap1.isEmpty());
      assertEquals(1, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertEquals(4, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNull(object4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      assertNotSame(patriciaTrie0, patriciaTrie4);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      PatriciaTrie<Object> patriciaTrie6 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie6);
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie5.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", 1);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie6));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie6));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertNotSame(patriciaTrie0, patriciaTrie6);
      assertNotSame(patriciaTrie0, patriciaTrie5);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie0);
      assertNotSame(patriciaTrie5, patriciaTrie6);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie6.nextKey("2tHA^8e{]nRl06b");
      assertNull(string0);
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie0);
      assertNotSame(patriciaTrie6, patriciaTrie5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Collection<Integer> collection0 = hashMap0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer3 = hashMap0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer0.equals((Object)integer1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer4 = patriciaTrie1.replace("", integer0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer0.equals((Object)integer1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      Integer integer5 = hashMap0.put("RA", integer0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer0.equals((Object)integer1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer6 = hashMap0.computeIfPresent("RA", biFunction0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer7 = hashMap0.put("RA", (Integer) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer7);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer8 = new Integer(0);
      assertNotNull(integer8);
      assertEquals(0, (int)integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      Integer integer9 = patriciaTrie1.put("", integer8);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer9);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.tailMap("4oz");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree((String) null, (-1), 0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Ckf)P-FP/kO";
      Integer integer0 = patriciaTrie0.get("Ckf)P-FP/kO");
      assertNull(integer0);
      
      patriciaTrie0.decrementSize();
      Integer integer1 = patriciaTrie0.replace("tOX`*+6xZOF", (Integer) null);
      assertNull(integer1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap(", ");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("]5D~", "}");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("}", "}", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(string1);
      assertEquals("}", string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.getOrDefault("}", "}");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(string2);
      assertEquals("}", string2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.getOrDefault((Object) null, (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("JMQ_Uo-m@A-I18zP");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = patriciaTrie0.put("JMQ_Uo-m@A-I18zP", "JMQ_Uo-m@A-I18zP");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.get("JMQ_Uo-m@A-I18zP");
      assertNotNull(object2);
      assertEquals("JMQ_Uo-m@A-I18zP", object2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.compute("^^p/|esM*7Us$bsKb,", (BiFunction<? super String, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("^MYO", "^MYO", (-1512));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertEquals((-3), (int)integer0);
      
      Integer integer1 = hashMap0.put((String) null, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer((-3));
      assertNotNull(integer2);
      assertEquals((-3), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("^MYO", integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("", patriciaTrie0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.floorEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2373);
      assertNotNull(integer0);
      assertEquals(2373, (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("", integer0);
      assertNotNull(integer2);
      assertEquals(2373, (int)integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("+kqq0P~Zh");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.selectKey("+kqq0P~Zh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 727);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      int int0 = patriciaTrie2.bitsPerElement();
      assertEquals(16, int0);
      
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertEquals((-3), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1907));
      assertNotNull(integer1);
      assertEquals((-1907), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie2.put("ROOT", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer((-2));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer4 = new Integer(16);
      assertNotNull(integer4);
      assertEquals(16, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = hashMap0.put("", integer4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer5);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer6 = new Integer((-2404));
      assertNotNull(integer6);
      assertEquals((-2404), (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      
      Integer integer7 = patriciaTrie2.put("", integer6);
      assertNull(integer7);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 727, 2263);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer8 = new Integer((-1975));
      assertNotNull(integer8);
      assertEquals((-1975), (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      
      Integer integer9 = new Integer((-1975));
      assertNotNull(integer9);
      assertEquals((-1975), (int)integer9);
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer1));
      
      Integer integer10 = hashMap0.put("", integer9);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(integer10);
      assertEquals(16, (int)integer10);
      assertFalse(integer9.equals((Object)integer6));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer8));
      assertTrue(integer10.equals((Object)int0));
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer6));
      
      Integer integer11 = hashMap0.put("E:fK", integer4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer11);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer8));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer9));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie4.floorEntry("gD");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("", (Integer) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      Integer integer1 = new Integer(3132);
      assertNotNull(integer1);
      assertEquals(3132, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = hashMap0.put(".zA}", integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put(".zA}", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 0, 0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer6 = hashMap0.put("", integer5);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      
      Integer integer7 = hashMap0.put((String) null, (Integer) null);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer7);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.floorEntry("jnLz3G7_aFCz|^=TR+7");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = 3132;
      Integer integer0 = new Integer(3132);
      assertNotNull(integer0);
      assertEquals(3132, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie2.put(";/br.^/GIo/zc[R!'G", integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree((String) null, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Collection<Object> collection1 = patriciaTrie0.values();
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      int int0 = (-2);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<String, String>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Object object0 = patriciaTrie0.put("]={\n", comparator0);
      assertNull(object0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("pt", (Object) null);
      assertNull(object2);
      
      int int1 = patriciaTrie0.size();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      Comparator<? super String> comparator1 = patriciaTrie0.comparator();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = null;
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String>((AbstractMap.SimpleEntry<String, Object>) null, (String) null, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Map.Entry<Comparable<Object>, Object>> comparator2 = Map.Entry.comparingByKey();
      assertNotNull(comparator2);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = patriciaTrie2.bitsPerElement();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, int0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      Integer integer0 = new Integer((-41));
      assertNotNull(integer0);
      assertEquals((-41), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put(" is not an internal Entry!", (Integer) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = new Integer((-2291));
      assertNotNull(integer3);
      assertEquals((-2291), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("", integer3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("+VSx6PVLYaF", (-41), 304);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      Integer integer5 = new Integer(2822);
      assertNotNull(integer5);
      assertEquals(2822, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie0, patriciaTrie3);
      
      Integer integer6 = hashMap0.put("qeE", integer1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      assertFalse(integer1.equals((Object)integer5));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      
      Integer integer7 = hashMap0.put(" is not an internal Entry!", (Integer) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer7);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "The offsets and lengths must be at Character boundaries";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = null;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, (-144), 0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("\n", patriciaTrie0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("\\)m{Y*P[");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.computeIfPresent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", biFunction0);
      assertNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      int int0 = patriciaTrie1.bitIndex("}\n", " + ");
      assertEquals(9, int0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("}\n");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      String string1 = patriciaTrie1.nextKey("keyAnalyzer");
      assertNull(string1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("8u7m`lEmaQ@nHY,W", "8u7m`lEmaQ@nHY,W", (-153));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.setValue("8u7m`lEmaQ@nHY,W");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(string0);
      assertEquals("8u7m`lEmaQ@nHY,W", string0);
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 2587;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = "3BD=g7,~BB3G@-^s";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      int int0 = 16;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("3BD=g7,~BB3G@-^s", "", 16);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertFalse(sortedMap1.isEmpty());
      assertEquals(1, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      SortedMap<String, Object> sortedMap2 = new PatriciaTrie<Object>();
      assertEquals(0, sortedMap2.size());
      assertTrue(sortedMap2.isEmpty());
      assertNotNull(sortedMap2);
      assertFalse(sortedMap2.equals((Object)sortedMap1));
      assertFalse(sortedMap2.equals((Object)sortedMap0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(4, sortedMap0.size());
      assertNull(object4);
      assertFalse(sortedMap0.equals((Object)sortedMap2));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      assertNotSame(sortedMap0, sortedMap2);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("@|X[vA}.e");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie5 = null;
      try {
        patriciaTrie5 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("qeE", "qeE");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey((String) null, 2620);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, (Object) null, 1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 2);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2879));
      assertNotNull(integer1);
      assertEquals((-2879), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, sortedMap0, 0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry1;
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.left.left;
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      Integer integer3 = new Integer(603);
      assertNotNull(integer3);
      assertEquals(603, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      String string0 = abstractPatriciaTrie_TrieEntry1.left.toString();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key={} [2], value=null, parent=null, left={} [2], right=null, predecessor={} [2])", string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.getNearestEntryForKey((String) null, 2538);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      String string1 = patriciaTrie2.nextKey("&@5Hu\"#1}I,4aKJeK+j");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "T``Ss5Vi~Inn8", 64);
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry7);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry8);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 727);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      int int0 = patriciaTrie2.bitsPerElement();
      assertEquals(16, int0);
      
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertEquals((-3), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1907));
      assertNotNull(integer1);
      assertEquals((-1907), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = patriciaTrie2.put("ROOT", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer3 = new Integer((-2));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer4 = new Integer(16);
      assertNotNull(integer4);
      assertEquals(16, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = hashMap0.put("", integer4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer5);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer6 = new Integer((-2404));
      assertNotNull(integer6);
      assertEquals((-2404), (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      
      Integer integer7 = patriciaTrie2.put("", integer6);
      assertNull(integer7);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 727, 2263);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer8 = new Integer((-1975));
      assertNotNull(integer8);
      assertEquals((-1975), (int)integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      
      String string0 = patriciaTrie3.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      
      Integer integer9 = new Integer((-1975));
      assertNotNull(integer9);
      assertEquals((-1975), (int)integer9);
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie3.prefixMap("");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer((-4185));
      assertNotNull(integer0);
      assertEquals((-4185), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("Xxd*GuV?0V8a'P%1c", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("z<2DxW%9_", abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("CD$ZrS6XdGFrOz9tK", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-4185);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      SortedMap<String, AbstractMap.SimpleEntry<Object, Integer>> sortedMap0 = patriciaTrie0.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", (String) null);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.forEach(biConsumer0);
      patriciaTrie1.incrementSize();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-4185));
      assertNotNull(integer1);
      assertEquals((-4185), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry4.right = abstractPatriciaTrie_TrieEntry5;
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.right.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie3.select("");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("rW?]0E", "1CA6zgP ");
      assertNull(object1);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = "S2";
      Object object2 = patriciaTrie0.put("S2", patriciaTrie3);
      assertNull(object2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.subMap("", "=");
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      SortedMap<String, Object> sortedMap2 = patriciaTrie0.tailMap("S2");
      assertFalse(sortedMap2.isEmpty());
      assertEquals(4, sortedMap2.size());
      assertNotNull(sortedMap2);
      assertFalse(sortedMap2.equals((Object)sortedMap1));
      assertFalse(sortedMap2.equals((Object)sortedMap0));
      assertNotSame(sortedMap2, sortedMap1);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("Z.4y6s!", sortedMap0);
      assertEquals(4, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNull(object4);
      assertFalse(sortedMap0.equals((Object)sortedMap2));
      assertFalse(sortedMap0.equals((Object)sortedMap1));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      String string1 = "@|X[v\\A}.e";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.higherEntry("@|X[vA}.e");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie5 = null;
      try {
        patriciaTrie5 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" _E#^Bf{{m1c,", " _E#^Bf{{m1c,", 880);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key= _E#^Bf{{m1c, [880], value= _E#^Bf{{m1c,, parent=null, left= _E#^Bf{{m1c, [880], right=null, predecessor= _E#^Bf{{m1c, [880])", string0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, " _E#^Bf{{m1c,", (-527));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.nextKey("{*BC_Ur7bu=#w}h#%");
      assertNull(string1);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(" _E#^Bf{{m1c,", abstractMap_SimpleImmutableEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.right;
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.followRight((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("v1n{Y|'k;4VfXfj", "v1n{Y|'k;4VfXfj");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("v1n{Y|'k;4VfXfj", patriciaTrie0, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 292;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 292);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("VBF>");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      OrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      Comparator<? super String> comparator1 = patriciaTrie2.comparator();
      assertNotNull(comparator1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      Integer integer1 = new Integer(292);
      assertNotNull(integer1);
      assertEquals(292, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = abstractPatriciaTrie_TrieEntry5.setValue((Object) null);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(object1);
      assertEquals(292, object1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        patriciaTrie4.get(object1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.clear();
      Object object0 = patriciaTrie0.put("Failed to put: ", "ccp#TCBPC");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("", "Y+A&");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Object object2 = patriciaTrie0.merge("Y+A&", "Y+A&", biFunction0);
      assertNotNull(object2);
      assertEquals("Y+A&", object2);
      
      patriciaTrie0.clear();
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction1);
      Object object3 = patriciaTrie0.put("Sz.5LWX4>7H2lQdx", "");
      assertNull(object3);
      
      Object object4 = patriciaTrie0.put("", "Y+A&");
      assertNull(object4);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("Y+A&"));
      assertTrue(set0.contains(""));
      
      int int0 = patriciaTrie0.size();
      assertEquals(2, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "W", (-3));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("X", "X");
      assertNull(string0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie0.bitIndex((String) null, "");
      assertEquals((-1), int0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("S[XL");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2085);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, patriciaTrie1, 474);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(3567);
      assertNotNull(integer0);
      assertEquals(3567, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "", 474);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("KE8", "S[XL", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string1);
      assertEquals("Entry(key={} [474], value=Trie[1]={\n  Entry(key=X [9], value=X, parent=ROOT, left=ROOT, right=X [9], predecessor=X [9])\n}\n, parent=null, left={} [474], right=null, predecessor={} [474])", string1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.getNearestEntryForKey("", (-2976));
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string2 = patriciaTrie2.nextKey("");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("i,,c.h1vOl?  ", (AbstractMap.SimpleEntry<Object, Object>) null, (-858));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(string0);
      assertEquals("Entry(key=i,,c.h1vOl?   [-858], value=null, parent=null, left=i,,c.h1vOl?   [-858], right=null, predecessor=i,,c.h1vOl?   [-858])", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("'}W#/v%iCVK |8r@54", "'}W#/v%iCVK |8r@54", (-1294));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("'}W#/v%iCVK |8r@54", "'}W#/v%iCVK |8r@54", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1294));
      assertNotNull(integer1);
      assertEquals((-1294), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry0.left, abstractMap_SimpleImmutableEntry0, (-1294));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, (-1294));
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, (String) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(integer0.equals((Object)integer1));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("8$ C^hlGWN_.", "8$ C^hlGWN_.", 1253);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, "8$ C^hlGWN_.", 1253);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string0);
      assertEquals("Entry(key=Entry(key=8$ C^hlGWN_. [1253], value=8$ C^hlGWN_., parent=null, left=8$ C^hlGWN_. [1253], right=null, predecessor=8$ C^hlGWN_. [1253]) [1253], value=8$ C^hlGWN_., parent=null, left=Entry(key=8$ C^hlGWN_. [1253], value=8$ C^hlGWN_., parent=null, left=8$ C^hlGWN_. [1253], right=null, predecessor=8$ C^hlGWN_. [1253]) [1253], right=null, predecessor=Entry(key=8$ C^hlGWN_. [1253], value=8$ C^hlGWN_., parent=null, left=8$ C^hlGWN_. [1253], right=null, predecessor=8$ C^hlGWN_. [1253]) [1253])", string0);
      
      Integer integer0 = new Integer(1253);
      assertNotNull(integer0);
      assertEquals(1253, (int)integer0);
      
      Integer integer1 = new Integer((-135));
      assertNotNull(integer1);
      assertEquals((-135), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer1, 1253);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Integer>> comparator1 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "8$ C^hlGWN_.", (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = "~Azg>R /";
      Integer integer0 = new Integer(3485);
      assertNotNull(integer0);
      assertEquals(3485, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("~Azg>R /", integer0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer1 = patriciaTrie0.put("~Azg>R /", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("jnLz3G7_aFCz|^=TR+7");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("+kqq0P~Zh");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.selectKey("+kqq0P~Zh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("II8zJ3z#FkD' ciJ]A%", "  ");
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      
      String string1 = patriciaTrie0.put("&>wuplIa0$Kd0{=KO~j", (String) null);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      String string2 = patriciaTrie4.toString();
      assertNotNull(string2);
      assertEquals("Trie[0]={\n}\n", string2);
      
      String string3 = patriciaTrie2.selectKey("Q.d'4{/5");
      assertNotNull(string3);
      assertEquals("II8zJ3z#FkD' ciJ]A%", string3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      
      Integer integer0 = new Integer(295);
      assertNotNull(integer0);
      assertEquals(295, (int)integer0);
      
      Integer integer1 = patriciaTrie4.put("  ", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      String string4 = patriciaTrie1.put("Key is out of range: ", "II8zJ3z#FkD' ciJ]A%");
      assertNull(string4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("F/mNh,", integer2, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie4.addEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (-379));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      patriciaTrie0.mapIterator();
      patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      String string0 = "";
      // Undeclared exception!
      try { 
        patriciaTrie5.subMap("S2", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(32768);
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("Ckf)P-FP/kO", integer0);
      patriciaTrie0.replace("tOX`*+6xZOF", (Integer) null);
      patriciaTrie0.tailMap("3.JHQqeUjg57N)na\"_");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.put("\"pFK", integer0);
      Integer integer1 = new Integer(32768);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer1, "3.JHQqeUjg57N)na\"_");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      Object object0 = patriciaTrie2.remove((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      patriciaTrie0.mapIterator();
      patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-3298));
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.merge("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer0, biFunction0);
      String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNotNull(string0);
      
      Integer integer1 = new Integer((-2852));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, " .", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "";
      int int0 = (-533);
      Integer integer0 = new Integer((-533));
      patriciaTrie0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(1803);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1803);
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      Integer integer1 = new Integer((-1));
      patriciaTrie1.put("", integer1);
      patriciaTrie1.select("");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(hashMap0, "", (-1));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.getNearestEntryForKey("", 727);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.bitsPerElement();
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-1907));
      patriciaTrie2.put("ROOT", integer1);
      Integer integer2 = new Integer((-2));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer3 = new Integer(16);
      hashMap0.put("", integer3);
      Integer integer4 = new Integer((-2404));
      patriciaTrie2.put("", integer4);
      patriciaTrie2.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 727, 2263);
      Integer integer5 = new Integer((-1975));
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie3.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      Integer integer6 = new Integer((-1975));
      hashMap0.put("", integer6);
      hashMap0.put("E:fK", integer3);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      patriciaTrie4.keySet();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie0.bitIndex("", (String) null);
      patriciaTrie1.compareKeys((String) null, (String) null);
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie1.prefixMap("");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("org.apache.commons.collections4.trie.PatriciaTrie", 2085);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, (String) null, 2316);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "org.apache.commons.collections4.trie.PatriciaTrie", (-1));
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(sortedMap0);
      patriciaTrie2.clear();
      // Undeclared exception!
      try { 
        patriciaTrie2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = " [";
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.tailMap(" [");
      patriciaTrie0.clear();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put(" [", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Integer integer2 = new Integer(0);
      abstractPatriciaTrie_TrieEntry0.equals(integer2);
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.keySet();
      patriciaTrie1.put("hJy<:jFemU64.P0)C ", "hJy<:jFemU64.P0)C ");
      // Undeclared exception!
      try { 
        patriciaTrie1.get(sortedMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", (Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(3031);
      patriciaTrie2.put("null", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, (Integer) null, 3031);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry1, 3031);
      patriciaTrie2.nextKey("?vpQm19Z}zES5");
      Integer integer1 = patriciaTrie2.selectValue("x");
      assertEquals(3031, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie0.bitIndex(")", "");
      patriciaTrie1.compareKeys("", "");
      patriciaTrie1.prefixMap("S[XL");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("KE8", 2085);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry0, "", 2085);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, "");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "", 2085);
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie2.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(474, 474);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.previousKey("3ZmzSiX}`E@.db[hN");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(32768);
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("Ckf)P-FP/kO", integer0);
      patriciaTrie0.replace("tOX`*+6xZOF", (Integer) null);
      patriciaTrie0.tailMap("3.JHQqeUjg57N)na\"_");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.put("\"pFK", integer0);
      Integer integer1 = new Integer(32768);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer1, "3.JHQqeUjg57N)na\"_");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(abstractMap_SimpleImmutableEntry0, "grcFA1cN@/1>", 32768);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Mp8W~_Oe#", "B?TMf<J6<");
      patriciaTrie0.previousKey("Mp8W~_Oe#");
      patriciaTrie0.put("Mp8W~_Oe#", (String) null);
      patriciaTrie0.lastKey();
      patriciaTrie0.lowerEntry("  ");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      int int0 = 2696;
      Integer integer0 = new Integer(2696);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put((String) null, integer0);
      Integer integer1 = new Integer(2696);
      patriciaTrie2.put("B?TMf<J6<", integer1);
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("^A?", 2696, 2696);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie2.ceilingEntry("]]mR3C-=xO6M-0N:");
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie3.put("]]mR3C-=xO6M-0N:", integer0);
      patriciaTrie3.bitsPerElement();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie4);
      patriciaTrie5.put("7PmR\"=8@A`{T#~5m", (Integer) null);
      Integer integer1 = new Integer((-1));
      patriciaTrie5.selectValue("");
      patriciaTrie5.put("]]mR3C-=xO6M-0N:", integer1);
      patriciaTrie2.tailMap("]]mR3C-=xO6M-0N:");
      patriciaTrie0.mapIterator();
      patriciaTrie5.headMap("6;J");
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      patriciaTrie2.comparator();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("i_WB", "6;J");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("6;J", abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie6 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      patriciaTrie6.getNearestEntryForKey("", (-1));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = patriciaTrie6.selectValue("7PmR\"=8@A`{T#~5m");
      assertNull(abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "Mp8W~_Oe#";
      patriciaTrie0.previousKey("Mp8W~_Oe#");
      String string1 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }
}
