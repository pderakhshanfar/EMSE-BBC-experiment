/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:19:57 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      String string0 = null;
      String string1 = ";\\IDX,|\\;*McO+B";
      patriciaTrie0.select(";IDX,|;*McO+B");
      patriciaTrie0.mapIterator();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.decrementSize();
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.getEntry((Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "";
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      Integer integer1 = new Integer((-1));
      String string1 = "key=";
      patriciaTrie0.headMap("");
      Integer integer2 = new Integer((-1));
      patriciaTrie0.put("key=", integer2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, (-1));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0.left;
      String string2 = abstractPatriciaTrie_TrieEntry0.key;
      abstractPatriciaTrie_TrieEntry1.bitIndex = 3805;
      patriciaTrie0.remove((Object) "");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-1));
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.key = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3.parent;
      // Undeclared exception!
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      Integer integer1 = new Integer((-1));
      patriciaTrie0.headMap("");
      Integer integer2 = new Integer((-1));
      patriciaTrie0.put("key=", integer2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, (-1));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0.left;
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.remove((Object) "");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-1));
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.key = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.computeIfPresent("key=", biFunction0);
      patriciaTrie1.entrySet();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie2.tailMap("");
      patriciaTrie2.subMap("", "DLoe[_/@^\"+jlw?");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.replace("B/]}ik?=K(JHj", (Object) "@dO?");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("@dO?", (Object) null, 64);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 64);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.headMap("@dO?");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("Ijp%#Ve! %ts;OD", "Trie[");
      patriciaTrie1.put("Ijp%#Ve! %ts;OD", ".c");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("Trie[");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      patriciaTrie3.tailMap(".c");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      String string0 = "";
      int int0 = 3169;
      Integer integer0 = new Integer(3169);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 3169);
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(1049);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 673);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, 2208);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      patriciaTrie0.put("m(>U/3xL", integer0);
      patriciaTrie0.put("/DhDp\"|hTVYw8<H/p5N", integer0);
      patriciaTrie0.put("eeBu .O", integer0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.higherEntry("/DhDp\"|hTVYw8<H/p5N");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "]&dZ'DGJO_", 158);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      patriciaTrie0.higherEntry("");
      Integer integer0 = new Integer(158);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, abstractPatriciaTrie_TrieEntry0, 158);
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("?(r}|f", "?(r}|f");
      abstractMap_SimpleEntry0.setValue("?(r}|f");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, String>>((AbstractMap.SimpleEntry<String, String>) null, abstractMap_SimpleEntry0, (-316));
      abstractPatriciaTrie_TrieEntry0.toString();
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      hashMap0.put("6T", comparable0);
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "Cannot delete root Entry!");
      patriciaTrie0.putIfAbsent("", "]={\n");
      patriciaTrie0.put("]={\n", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(896);
      Integer integer1 = new Integer(256);
      patriciaTrie1.put("I0'L.PO=%:/rC", integer1);
      patriciaTrie1.put("eZ].~\"", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string0 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      int int0 = 2476;
      patriciaTrie0.selectKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      int int1 = 310;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null, 310);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      // Undeclared exception!
      try { 
        patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(1108);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer1);
      patriciaTrie1.put("m(>|/xL", integer0);
      Integer integer2 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer2);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(11);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.subtree("VlI!O!&]%m@2&-E*8utR", 0, 0);
      patriciaTrie4.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.computeIfPresent("(Jw39tYKz,H!{", biFunction0);
      patriciaTrie0.decrementSize();
      patriciaTrie0.subtree(",=4KYWKY;8", 1, 1);
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.putIfAbsent("", "drle3E.Bq?r/eOF4");
      patriciaTrie0.put("drle3E.Bq?r/eOF4", "");
      patriciaTrie0.lastEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(896);
      patriciaTrie1.compareKeys("ZWrSU_Y:%c^h0", "ZWrSU_Y:%c^h0");
      patriciaTrie1.put("", integer0);
      patriciaTrie1.tailMap("0.e");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.lowerEntry("2}j<Qw&M./0*lWfj?");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.entrySet();
      patriciaTrie0.put("u.Zt&C=Y~", "u.Zt&C=Y~");
      patriciaTrie0.getEntry("u.Zt&C=Y~");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", 0, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("y6ch$fn6", "orgapache.comons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      patriciaTrie0.putIfAbsent("", "]XX~t_spk:_");
      patriciaTrie0.put("]XX~t_spk:_", ",ZbU=!BlsAuUY0eXp-");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 67);
      patriciaTrie0.lastEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(160);
      patriciaTrie1.compareKeys("$2|FYR>XT,lx98n)1", (String) null);
      Integer integer1 = new Integer(67);
      patriciaTrie1.put("y6ch$fn6", integer1);
      patriciaTrie1.tailMap("?NR");
      patriciaTrie1.values();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>((Object) null, (AbstractMap.SimpleEntry<Object, Object>) null, 67);
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("null", "z-&{5UX\"kw*", 1);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 2097;
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("null", "z-&{5UX\"kw*", 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.put("z-&{5UX\"kw*", "z-&{5UX\"kw*");
      abstractPatriciaTrie_TrieEntry0.value = "RZ&<$l}q>`@YPH";
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.values();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      Function<String, String> function0 = Function.identity();
      patriciaTrie0.computeIfAbsent("%A", function0);
      patriciaTrie0.get((Object) null);
      patriciaTrie0.floorEntry((String) null);
      patriciaTrie0.put("", "");
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null, (AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", (-2695));
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-369));
      patriciaTrie0.put("", "");
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      PatriciaTrie<Object> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.putIfAbsent("/DhDp\"|hTVYw<H5N", "");
      int int0 = (-2537);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.put("/DhDp\"|hTVYw<H5N", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.ceilingEntry("");
      patriciaTrie1.ceilingEntry(",cHu-jO/'&");
      patriciaTrie2.lastEntry();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-3039));
      patriciaTrie3.put("", integer0);
      patriciaTrie3.tailMap("/DhDp\"|hTVYw<H5N");
      patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      patriciaTrie4.values();
      patriciaTrie4.headMap("");
      // Undeclared exception!
      try { 
        patriciaTrie2.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("T]AY4I8_+T`PS#R?");
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator";
      patriciaTrie0.values();
      Object object0 = new Object();
      String string1 = "'39W{I<C?bLw Vm]N^";
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "'39W{I<C?bLw Vm]N^");
      patriciaTrie0.values();
      patriciaTrie0.subtree("'39W{I<C?bLw Vm]N^", 11, 11);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", object0);
      patriciaTrie0.get((Object) null);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie0.lengthInBits("");
      patriciaTrie2.tailMap("");
      patriciaTrie2.bitIndex(" [.[2to$v[", "");
      Collection<Object> collection0 = patriciaTrie2.values();
      patriciaTrie2.lowerEntry("");
      patriciaTrie2.put("", "");
      patriciaTrie2.tailMap("");
      patriciaTrie1.replace("keyAnalyzer", (Object) collection0, (Object) patriciaTrie0);
      patriciaTrie2.values();
      patriciaTrie1.getNearestEntryForKey("", 32);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie3.lastEntry();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("org.apache.commons.collections4.trie.KeyAnalyzer", abstractMap_SimpleEntry0, (-50));
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.put("", "Cannot delete root Entry!");
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.put("", "QwtS68PTCxFQDSIPa");
      patriciaTrie0.modCount = (-2537);
      patriciaTrie0.ceilingEntry("QwtS68PTCxFQDSIPa");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-2537));
      patriciaTrie0.lastEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(896);
      patriciaTrie1.put("Cannot delete root Entry!", integer0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.tailMap("0.e");
      patriciaTrie1.values();
      patriciaTrie1.headMap("Cannot delete root Entry!");
      patriciaTrie0.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(sortedMap0, (AbstractMap.SimpleEntry<Object, Object>) null, 240);
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.putIfAbsent("/DhDp\"|hTVYw<H5N", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.put("/DhDp\"|hTVYw<H5N", "");
      patriciaTrie2.ceilingEntry("");
      patriciaTrie1.ceilingEntry(",cHu-jO/'&");
      patriciaTrie2.lastEntry();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-3039));
      patriciaTrie3.put("", integer0);
      patriciaTrie3.tailMap("/DhDp\"|hTVYw<H5N");
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      Collection<Integer> collection0 = patriciaTrie4.values();
      patriciaTrie4.headMap("");
      patriciaTrie2.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(collection0, (AbstractMap.SimpleEntry<Object, Object>) null, (-2537));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.put("", "Cannot delete root Entry!");
      patriciaTrie0.put("", "");
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.put("", "QwtS68PTCxFQDSIPa");
      patriciaTrie0.modCount = (-2537);
      patriciaTrie0.ceilingEntry("QwtS68PTCxFQDSIPa");
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.lastEntry();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(896);
      patriciaTrie1.put("", integer0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.tailMap("0.e");
      patriciaTrie1.values();
      patriciaTrie1.headMap("");
      patriciaTrie0.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(sortedMap0, (AbstractMap.SimpleEntry<Object, Object>) null, 240);
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.floorEntry("/DhDp\"|hTVYw8<H5N");
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(11);
      patriciaTrie0.put("o6v^,z03z,hPy*kjo]", integer1);
      patriciaTrie0.put("  ", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.PatriciaTrie", (Integer) null, 1);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1);
      Integer integer2 = new Integer(0);
      patriciaTrie0.put("/DhDp\"|hTVYw8<H5N", integer2);
      patriciaTrie0.put("eeBu .O", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      String string0 = "QpJ`m[3q^ZYg@p";
      patriciaTrie1.lengthInBits("QpJ`m[3q^ZYg@p");
      patriciaTrie1.put("*sk`P", (Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie1.getNearestEntryForKey("", 2912);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.right.setValue(integer0);
      abstractPatriciaTrie_TrieEntry0.setValue("");
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, 42);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.put("/DhDp\"|hTVYw8<H5N", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
      patriciaTrie2.toString();
      patriciaTrie2.floorEntry("Trie[2]={\n  Entry(key=/DhDp\"|hTVYw8<H5N [10], value=/DhDp\"|hTVYw8<H5N, parent=org.apache.commons.collections4.trie.AbstractPatriciaTrie [9], left=ROOT, right=/DhDp\"|hTVYw8<H5N [10], predecessor=/DhDp\"|hTVYw8<H5N [10])\n  Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie [9], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie, parent=ROOT, left=/DhDp\"|hTVYw8<H5N [10], right=org.apache.commons.collections4.trie.AbstractPatriciaTrie [9], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie [9])\n}\n");
      patriciaTrie2.get("org.apache.commons.collections4.trie.AbstractPatriciaTrie");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(2);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer1 = new Integer((-2375));
      patriciaTrie1.put("k 1H|", integer1);
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0);
      Integer integer2 = new Integer((-2375));
      patriciaTrie1.put("", integer2);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, integer0, (-2375));
      Integer integer3 = new Integer(2694);
      abstractPatriciaTrie_TrieEntry0.setValue(integer3);
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie1.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("/DhDp\"|hTVYw<H5N", "/DhDp\"|hTVYw<H5N");
      Integer integer0 = new Integer(224);
      patriciaTrie1.put("", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "D7O=bj>4", (-1));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.lastKey();
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry(" + ");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie2.prefixMap("/DhDp\"|hTVYw<H5N");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("null", "1+6T+KLg\"+v,#/");
      patriciaTrie1.lowerEntry("");
      patriciaTrie1.remove((Object) "1+6T+KLg\"+v,#/");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.compareKeys(", ", ", ");
      patriciaTrie1.higherEntry("`");
      patriciaTrie0.previousKey("`");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", integer0);
      Integer integer1 = new Integer((-1));
      patriciaTrie0.put("", integer0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("=<y:L~#VJYJa3M/ph\"/", (Integer) null);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, (-2));
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry2 = abstractPatriciaTrie_TrieEntry0.value;
      Integer integer2 = new Integer((-1));
      patriciaTrie1.put("u", integer2);
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("invalid lookup: ", (-2), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      hashMap0.put("", comparable1);
      Comparable<Object> comparable2 = hashMap0.put("", comparable0);
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      hashMap0.keySet();
      patriciaTrie1.put("", comparable2);
      patriciaTrie1.keySet();
      patriciaTrie1.put("", comparable2);
      patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie2.remove((Object) patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("/DhDp\"|hTVYw<H5N", "/DhDp\"|hTVYw<H5N");
      Integer integer0 = new Integer(224);
      patriciaTrie1.put("`", (String) null);
      patriciaTrie1.selectKey((String) null);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree((String) null, 224, 224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      Integer integer0 = new Integer(1977);
      Integer integer1 = new Integer((-1874));
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.put(":\b]O", integer0);
      Integer integer2 = new Integer(1977);
      patriciaTrie2.put(":\b]O", integer2);
      Integer integer3 = new Integer((-2703));
      patriciaTrie2.put(":\b]O", integer2);
      Integer integer4 = new Integer((-2441));
      Integer integer5 = new Integer(0);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(":\b]O", integer5, (-1753));
      patriciaTrie5.addEntry(abstractPatriciaTrie_TrieEntry0, (-2703));
      // Undeclared exception!
      try { 
        patriciaTrie5.subtree(":\b]O", (-2441), (-2441));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put(">uj:Va'm--Fdw}", ">uj:Va'm--Fdw}");
      patriciaTrie1.put(">uj:Va'm--Fdw}", ">uj:Va'm--Fdw}");
      Integer integer0 = new Integer(2);
      patriciaTrie1.put("$", "$");
      patriciaTrie1.lastKey();
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry("FLY1v");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put(":\b]O", (String) null);
      patriciaTrie1.toString();
      patriciaTrie0.selectKey("FG\"95?HH$GDRP\"@");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree((String) null, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("FromKey is out of range: ", "FromKey is out of range: ");
      patriciaTrie0.toString();
      patriciaTrie0.selectKey("The offsets and lengths must be at Character boundaries");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("FG\"95?HH$GDRP\"@", "Trie[2]={\n  RootEntry(key= [-1], value=, parent=null, left=FromKey is out of range:  [9], right=null, predecessor=FromKey is out of range:  [9])\n  Entry(key=FromKey is out of range:  [9], value=FromKey is out of range: , parent=ROOT, left=ROOT, right=FromKey is out of range:  [9], predecessor=FromKey is out of range:  [9])\n}\n");
      patriciaTrie0.comparator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]={\n", "]={\n");
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.floorEntry("nr3G-BR|TTo8XePBe66");
      patriciaTrie1.higherEntry((String) null);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie0.keySet();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("`KIQcw/Z)'RLJ/>", "`KIQcw/Z)'RLJ/>");
      Integer integer0 = new Integer(2406);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, integer0, (-143));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("kh^;DHBy");
      Integer integer1 = new Integer((-143));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, (-143));
      patriciaTrie0.tailMap("kh^;DHBy");
      abstractPatriciaTrie_TrieEntry2.toString();
      Integer integer2 = (Integer)abstractPatriciaTrie_TrieEntry2.value;
      patriciaTrie0.put("Entry(key=2406 [-143], value=-143, parent=null, left=2406 [-143], right=null, predecessor=2406 [-143])", "`KIQcw/Z)'RLJ/>");
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer2, integer1);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer0, (String) null);
      abstractMap_SimpleEntry0.setValue((String) null);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      int int0 = 880;
      abstractMap_SimpleEntry1.setValue((String) null);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(integer0, abstractMap_SimpleEntry1, 880);
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 880, (-143));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("/DhDp\"|hTVYw<H5N", "/DhDp\"|hTVYw<H5N");
      Integer integer0 = new Integer(224);
      patriciaTrie1.put("", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "gR*8&mk", 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry("");
      patriciaTrie1.put("dApnfz+z", "XC>`h$g2s,Xruzn~e");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.higherEntry("/DhDp\"|hTVYw<H5N");
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.keySet();
      patriciaTrie1.put("/DhDp\"|hTVYw<H5N", "/DhDp\"|hTVYw<H5N");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.put("$l=CwlAF", (String) null);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.floorEntry("/DhDp\"|hTVYw<H5N");
      patriciaTrie3.higherEntry("vM7e");
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.floorEntry("nr3G-BR|TTo8XePBe66");
      patriciaTrie1.higherEntry((String) null);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("]w ?I,BR}<k;V", "]w ?I,BR}<k;V");
      Integer integer0 = new Integer(4834);
      patriciaTrie1.put("pE4W<68.(yFL%gpj4", "/DhDp\"|hTVYw<H5N");
      String string0 = "*r_/+Rq6JM";
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, "keyAnalyzer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.compareKeys("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clone();
      hashMap0.put("r", "r");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("jT%4wa3", "jT%4wa3");
      patriciaTrie0.subMap((String) null, "hra`Y[M!_=X0z");
      patriciaTrie0.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("r", "K$", (-1423));
      patriciaTrie1.selectKey("r");
      patriciaTrie0.put("hra`Y[M!_=X0z", (String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap1);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie4.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", 652, (-1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.keySet();
      patriciaTrie0.put("#_r-", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "", (-91));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-3));
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie0.previousKey("#_r-");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie2.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(1108);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer1);
      patriciaTrie1.put("m(>|/xL", integer0);
      Integer integer2 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer2);
      patriciaTrie1.floorEntry("kke'N>rv@");
      Integer integer3 = new Integer(0);
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", integer2);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie4.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      patriciaTrie4.subtree("VlI!O!&]%m@2&-E*8utR", 0, 0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.keySet();
      patriciaTrie1.put("C-d5qz+B=(:6=GCU$", "");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-419));
      Integer integer1 = new Integer((-493));
      Integer integer2 = new Integer(275);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer2, 288);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      patriciaTrie3.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-788));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "Cannot determine prefix outside of Character boundaries", (-788));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "Cannot determine prefix outside of Character boundaries", (-788));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "+KmmzNf[9$(");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie0.subtree("", 224, 224);
      patriciaTrie0.put("}\n", "<RF");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(1108);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer1);
      patriciaTrie1.put("m(>|/xL", integer0);
      Integer integer2 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer2);
      Integer integer3 = new Integer(0);
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", integer2);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie4.subtree("VlI!O!&]%m@2&-E*8utR", 0, 0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, String>(abstractMap_SimpleEntry1, "", 1705);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, String>(abstractMap_SimpleEntry1, "", 5426);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.values();
      Map.Entry.comparingByValue();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      Integer integer0 = new Integer(5426);
      patriciaTrie3.put("", integer0);
      patriciaTrie3.getNearestEntryForKey("", 11);
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree("Entry(key== [1705], value=, parent== [5426], left== [1705], right== [5426], predecessor== [1705])", 295, (-2905));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      patriciaTrie1.put("m(>|/xL", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer1);
      Integer integer2 = new Integer(0);
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", integer1);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer2, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      Integer integer3 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer3, integer1, (-1210));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.setValue("");
      abstractPatriciaTrie_TrieEntry0.key = integer0;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry0.parent;
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", abstractPatriciaTrie_TrieEntry0, (-1696));
      abstractPatriciaTrie_TrieEntry3.toString();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(794);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, 846);
      Object object0 = new Object();
      Integer integer1 = new Integer(794);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(object0, integer1, 846);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.value = integer0;
      abstractPatriciaTrie_TrieEntry0.key = object0;
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.get(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.put("+GpTI*~T", "@>L");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("@72'n.Lw}=WpT~WR|5", "XHgFk");
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("/Y?NH$V", 0, 3082);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      patriciaTrie1.keySet();
      patriciaTrie1.values();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 1651, (-220));
      patriciaTrie1.put("", (String) null);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      Integer integer0 = new Integer((-220));
      patriciaTrie3.put("", integer0);
      patriciaTrie3.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", "/DhDp\"|hTVYw8<H5N");
      Integer integer0 = new Integer(224);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "pE4W<68.(yFL%gpj4");
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry(" + ");
      patriciaTrie1.put("", (String) null);
      patriciaTrie1.put("*r_/+Rq6JM", "");
      patriciaTrie1.previousKey("a.W");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("s8", patriciaTrie0);
      patriciaTrie1.higherEntry("s8");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-2944));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "s8", (-2944));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie1.lastKey();
      patriciaTrie1.floorEntry("*r_/+Rq6JM");
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "a.W");
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie1.previousKey("VlI!O!&]%m@2&-E*8utR");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.compareKeys("", "");
      patriciaTrie0.floorEntry("LNadvd");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.floorEntry("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie2.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((-788));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "Cannot determine prefix outside of Character boundaries", (-33));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "Cannot determine prefix outside of Character boundaries", (-788));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.put("", patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", "4pJdWt?");
      patriciaTrie2.nextKey("");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("8sCTw\"l[WYu", (String) null, 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      patriciaTrie4.incrementSize();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, 77);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.compareKeys("", "");
      patriciaTrie0.floorEntry("LNadvd");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.floorEntry((String) null);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-540));
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("su:L!D,*9n+0#", patriciaTrie0);
      patriciaTrie1.put(" !mb?V.])yf", abstractMap_SimpleImmutableEntry0);
      patriciaTrie1.decrementSize();
      patriciaTrie1.size();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.keySet();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 32768);
      abstractPatriciaTrie_TrieEntry0.setValue(integer1);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      patriciaTrie2.subtree("", 80, (-1));
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      patriciaTrie4.keySet();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-788));
      int int0 = (-33);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "Cannot determine prefix outside of Character boundaries", (-33));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "Cannot determine prefix outside of Character boundaries", (-788));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, (-4004));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("VlI!O!&]%m@2&-E*8utR", integer0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.ceilingEntry("VlI!O!&]%m@2&-E*8utR");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.remove((Object) "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      patriciaTrie2.selectValue("");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(hashMap1);
      patriciaTrie4.bitsPerElement();
      patriciaTrie4.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer(0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "/");
      patriciaTrie1.put("+GpTI*~T", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", "/Y?NH$V");
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 224, 224);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "", 0);
      patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie4.entrySet();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "a.W");
      patriciaTrie1.replace("a.W", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie1.previousKey("VlI!O!&]%m@2&-E*8utR");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "c|QX8wo%";
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("c|QX8wo%", "ax&jL~@8 3SP2}");
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.put("ax&jL~@8 3SP2}", ":phF\"dqU?F`zrXY");
      patriciaTrie0.put("Entry(", "Entry(");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "");
      // Undeclared exception!
      try { 
        patriciaTrie2.put((String) null, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer0;
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer1, (-1210));
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry0, abstractMap_SimpleEntry0, 1178);
      abstractPatriciaTrie_TrieEntry2.isEmpty();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer3 = new Integer(250);
      patriciaTrie0.put("", integer3);
      patriciaTrie0.put("0?", "");
      patriciaTrie0.floorEntry("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("0?", "_PC#k.NFsjY*6NZWCM", 1178);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("H}H\"S_oswc1u?C3!", ":n[K;P>/rT79=#!s6T");
      patriciaTrie0.keySet();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.values();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      String string0 = "";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", (String) null);
      String string1 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values";
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyString());
      patriciaTrie2.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        patriciaTrie2.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("org.apachebcomons.collections4.trie.PatriciaTrie", "org.apachebcomons.collections4.trie.PatriciaTrie");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer0;
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer1, (-1210));
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry0, abstractMap_SimpleEntry0, 1178);
      abstractPatriciaTrie_TrieEntry2.isEmpty();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer3 = new Integer(250);
      patriciaTrie0.put("", integer3);
      patriciaTrie0.put("0?", "");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "FromKey is out of range: ");
      patriciaTrie0.nextKey("");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("0?", "*Lz'_5x%{I(,ls", 32);
      patriciaTrie3.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer((-540));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.remove((Object) "}]NIR#X");
      patriciaTrie1.compareKeys("}]NIR#X", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("m t&5 Xp(\".[h@f", "Q7S._]>Vm{Ys", (-540));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("m t&5 Xp(\".[h@f", "}]NIR#X", (-540));
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(308);
      hashMap0.put("sjhK", integer0);
      Integer integer1 = new Integer(308);
      hashMap0.put("sjhK", integer1);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer2 = new Integer(9);
      hashMap0.put("", integer2);
      patriciaTrie0.higherEntry("W{");
      hashMap0.putAll(patriciaTrie0);
      Integer integer3 = new Integer(3560);
      hashMap0.put((String) null, integer3);
      patriciaTrie0.getNearestEntryForKey("}0~<PB", (-58));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "Cannot determine prefix outside of Character boundaries", (-1));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "Cannot determine prefix outside of Character boundaries", (-3));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Cannot determine prefix outside of Character boundaries", "5C-6Kn");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("jT%4wa3", (String) null);
      patriciaTrie0.subMap((String) null, "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.firstEntry();
      abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.selectKey("");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      patriciaTrie1.get("5C-6Kn");
      patriciaTrie1.incrementSize();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry3, 392);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer0;
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer1, (-1210));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      int int0 = 2;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", abstractPatriciaTrie_TrieEntry1, 2);
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      Integer integer0 = new Integer(1161);
      Map.Entry.comparingByKey();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.getOrDefault(patriciaTrie0, "i1X_=%nhjp");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap1);
      patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "");
      patriciaTrie3.keySet();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap1);
      patriciaTrie4.values();
      // Undeclared exception!
      try { 
        patriciaTrie4.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.ceilingEntry((String) null);
      patriciaTrie2.put("/DhDp\"|hTVYw8<H5N", (Object) null);
      patriciaTrie2.lowerEntry("VlI!O!&]%m@2&-E*8utR");
      patriciaTrie2.compareKeys("M", "Uf'J/`jjSj+yT2");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.put("", "Uf'J/`jjSj+yT2");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      patriciaTrie4.put("Uf'J/`jjSj+yT2", "M");
      patriciaTrie3.nextKey("]");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("FromKey is out of range: ", "], ", 4153);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.value = "/DhDp\"|hTVYw8<H5N";
      patriciaTrie4.addEntry(abstractPatriciaTrie_TrieEntry0, (-1496));
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie5.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>) null, (-3607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("H}H\"S_oswc1u?C3!", ":n[K;P>/rT79=#!s6T");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "H;)d~PWQY", (-91));
      Integer integer0 = new Integer(80);
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, object0, 80);
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.put("/DhDp\"|hTVYw8<H5N", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("VlI!O!&]%m@2&-E*8utR");
      patriciaTrie2.compareKeys("M", "Uf'J/`jjSj+yT2");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.floorEntry("<lP=\"*$+3/S*HuDc0O");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie1);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("H}H\"S_oswc1u?C3!", "r");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("jT%4wa3", "jT%4wa3");
      patriciaTrie0.subMap((String) null, "hra`Y[M!_=X0z");
      patriciaTrie0.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("H}H\"S_oswc1u?C3!", "K$", (-1423));
      abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      patriciaTrie1.selectKey("must have a from or to!");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap1);
      patriciaTrie0.ceilingEntry("");
      patriciaTrie2.get("must have a from or to!");
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.incrementSize();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      patriciaTrie4.incrementSize();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("H}H\"S_oswc1u?C3!", ":n[K;P>/rT79=#!s6T");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "H;)d~PWQY", (-91));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.higherEntry("");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.remove((Object) "l");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.higherEntry("_ #\u0001'6");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("_ #\u0001'6", patriciaTrie0, 1034);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      abstractPatriciaTrie_TrieEntry0.key = (Object) "_ #\u0001'6";
      patriciaTrie0.mapIterator();
      Integer integer0 = new Integer(1034);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(1034);
      abstractMap_SimpleEntry0.setValue(integer1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1034);
      abstractPatriciaTrie_TrieEntry1.value = abstractMap_SimpleEntry0;
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, 1335);
      Integer integer2 = new Integer(1034);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer2, 1335);
      Integer integer3 = new Integer(1034);
      abstractPatriciaTrie_TrieEntry3.setValue(integer3);
      abstractPatriciaTrie_TrieEntry3.toString();
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer0;
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer1, (-1210));
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry0, abstractMap_SimpleEntry0, 1178);
      abstractPatriciaTrie_TrieEntry2.isEmpty();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer3 = new Integer(250);
      patriciaTrie0.put("", integer3);
      patriciaTrie0.put("0?", "");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "FromKey is out of range: ");
      patriciaTrie0.nextKey("");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("*Lz'_5x%{I(,ls", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", 250);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry4, 2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "e`G", 32768);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", integer0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", "a.W");
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values";
      patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie2.previousKey("VlI!O!&]%m@2&-E*8utR");
      SortedMap<String, Integer> sortedMap0 = new PatriciaTrie<Integer>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer0);
      Integer integer1 = new Integer(0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.mapIterator();
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie2.previousKey(":n[K;P>/rT79=#!s6T");
      patriciaTrie2.selectValue("");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, (-1989));
      // Undeclared exception!
      try { 
        patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 2602);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1403));
      hashMap0.put("", integer0);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.comparator();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("fromKey > toKey", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(11);
      patriciaTrie0.put("m(>|/xL", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("/DhDp\"|hTVYw8<H5N", integer1);
      Integer integer2 = new Integer(11);
      patriciaTrie0.put("u", integer2);
      patriciaTrie0.put("eeBu .O", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      hashMap0.put("pC]p4A|sW%2l-cSocJ", "pC]p4A|sW%2l-cSocJ");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.higherEntry("lj");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", integer0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      patriciaTrie3.ceilingEntry("a.W");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      patriciaTrie0.mapIterator();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      String string0 = "/jT%4wa3";
      patriciaTrie0.put("/jT%4wa3", "");
      String string1 = "I}e\\QR";
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("I}eQR", "/jT%4wa3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      patriciaTrie2.compute("(),i+j1k)EnhFw0Y", biFunction0);
      patriciaTrie2.ceilingEntry("4h");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("rIU_pn.lPp(m<*&n", patriciaTrie1, 1);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie3.put("4h", "j@I*KIjB<");
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie3);
      patriciaTrie4.containsKey("4h");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "rIU_pn.lPp(m<*&n", 1);
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer((-540));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie1.tailMap("ToKey is out of range: ");
      patriciaTrie1.remove((Object) "}]NIR#X");
      patriciaTrie1.compareKeys("}]NIR#X", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.decrementSize();
      patriciaTrie2.bitIndex("0f{6;/@~#v", "keyAnalyzer");
      patriciaTrie2.floorEntry("=");
      patriciaTrie1.containsKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}]NIR#X", "  ", (-1385));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Cannot determine prefix outside of Character boundaries", "", (-1385));
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.lowerEntry("lG!#Vys,;6$)R)J");
      patriciaTrie1.remove((Object) "lG!#Vys,;6$)R)J");
      patriciaTrie1.remove((Object) null);
      patriciaTrie1.compareKeys("", "");
      patriciaTrie1.floorEntry("");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie2);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie4);
      patriciaTrie5.select("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.compareKeys("", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.floorEntry("");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie4.select("tSy");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.containsKey("5%a");
      patriciaTrie0.higherEntry("%[lJ#l DZ");
      patriciaTrie0.replace("<H%T63g", "5%a");
      patriciaTrie0.remove((Object) "5%a");
      patriciaTrie0.lengthInBits("6GIL~4n&!");
      patriciaTrie0.lastEntry();
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("%[lJ#l DZ", "6GIL~4n&!");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>("6GIL~4n&!", "ly_-h/,K1mwNP");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry1, 1);
      abstractPatriciaTrie_TrieEntry0.setValue(abstractMap_SimpleEntry1);
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(144);
      Integer integer0 = new Integer(144);
      hashMap0.getOrDefault("ly_-h/,K1mwNP", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.bitsPerElement();
      patriciaTrie1.ceilingEntry("%[lJ#l DZ");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie1.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.lowerEntry("lG!#Vys,;6$)R)J");
      patriciaTrie1.remove((Object) "lG!#Vys,;6$)R)J");
      String string0 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.lastEntry();
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      String string1 = "X/";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("X/", "lG!#Vys,;6$)R)J");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((Map.Entry<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.compareKeys("", "");
      patriciaTrie0.floorEntry("LNadvd");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      int int0 = 1168;
      Integer integer0 = new Integer(1168);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.floorEntry("predecessor=");
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
      patriciaTrie0.select("predecessor=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.KeyAnalyzer", (Object) null, 0);
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "";
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "gyTP:S{aB3kr");
      Set<String> set0 = patriciaTrie0.keySet();
      patriciaTrie0.values();
      hashMap0.getOrDefault(set0, "YH;#z,b{d_TG>G/.d");
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, integer0, 0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      Set<String> set0 = patriciaTrie1.keySet();
      patriciaTrie1.values();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(896);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(set0, integer0, 2);
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.lowerEntry("lG!#Vys,;6$)R)J");
      patriciaTrie1.remove((Object) "lG!#Vys,;6$)R)J");
      patriciaTrie1.compareKeys("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie4.select("AEkE^Vt~;");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie1.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 272);
      String string0 = "";
      abstractPatriciaTrie_TrieEntry1.setKeyValue("H", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "ri,HL<.4.#", 0);
      abstractPatriciaTrie_TrieEntry2.isEmpty();
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "", 0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.ceilingEntry("M%");
      patriciaTrie0.bitIndex((String) null, (String) null);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      patriciaTrie1.keySet();
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.incrementSize();
      Integer integer0 = new Integer((-151));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("%1r\"!Ke", "%1r\"!Ke");
      patriciaTrie1.lowerEntry("%1r\"!Ke");
      patriciaTrie1.remove((Object) "%1r\"!Ke");
      patriciaTrie1.compareKeys("bH?CI", "");
      patriciaTrie1.floorEntry(",'Ba?U*$6/mS$|");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie4.select((String) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) null, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer0, abstractMap_SimpleImmutableEntry0, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault((Object) null, "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "gyTP:S{aB3kr");
      patriciaTrie0.keySet();
      patriciaTrie0.values();
      Integer integer1 = new Integer(0);
      patriciaTrie0.subMap("", "kkm%|s.2");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("=Ue;", integer0);
      patriciaTrie0.put("=Ue;", (Integer) null);
      patriciaTrie0.put("=Ue;", integer0);
      patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer1 = new Integer(2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("uAw[G.>SP", integer1, 2);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.selectKey((String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.toString();
      patriciaTrie2.compareKeys("=Ue;", "");
      Integer integer2 = new Integer((-1259));
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie3);
      patriciaTrie5.select("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, patriciaTrie0, 1071);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie1.mapIterator();
      Integer integer0 = new Integer(1071);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(1071);
      abstractMap_SimpleEntry0.setValue(integer0);
      patriciaTrie1.clear();
      Integer integer2 = new Integer(1071);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(integer2, abstractMap_SimpleEntry0, 1071);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(orderedMapIterator0, abstractMap_SimpleEntry0, (-1));
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.isEmpty();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.subMap(">5FZ\".P`XU*K", ">5FZ\".P`XU*K");
      patriciaTrie2.put("", abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.put("", "Trie[");
      patriciaTrie1.put("fromKey > toKey", "FromKey is out of range: ");
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie4.nextKey("fromKey > toKey");
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 1335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      Set<String> set0 = patriciaTrie0.keySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      String string0 = "Eruv$g!";
      patriciaTrie1.lowerEntry("Eruv$g!");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.remove((Object) set0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      int int0 = 1071;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, patriciaTrie0, 1071);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie1.mapIterator();
      Integer integer0 = new Integer(1071);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(1071);
      abstractMap_SimpleEntry0.setValue(integer0);
      patriciaTrie1.clear();
      Integer integer2 = new Integer(1071);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(integer2, abstractMap_SimpleEntry0, 1071);
      int int1 = (-1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(orderedMapIterator0, abstractMap_SimpleEntry0, (-1));
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, String>>, Integer>> comparator0 = Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.isEmpty();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      String string0 = "VmK!!";
      patriciaTrie2.subMap((String) null, "VmK!!");
      patriciaTrie2.firstEntry();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(comparator0, "", (-1));
      abstractPatriciaTrie_TrieEntry3.equals(integer0);
      patriciaTrie1.selectKey("VmK!!");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.ceilingEntry("");
      // Undeclared exception!
      try { 
        patriciaTrie3.get(abstractPatriciaTrie_TrieEntry3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.selectKey((String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, (-2));
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.decrementSize();
      patriciaTrie0.getNearestEntryForKey("0k9/VLlS/", 897);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("HyCb1I", "es7->]");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, "HyCb1I", (-1188));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("eHd*t5!wtFYx'>", "^C29&F");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.remove((Object) "HyCb1I");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, (-1188));
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.getOrDefault(hashMap0, "mq~W");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap2);
      patriciaTrie1.put("", "");
      patriciaTrie1.keySet();
      patriciaTrie1.values();
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) null, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer0, abstractMap_SimpleImmutableEntry0, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "";
      hashMap0.getOrDefault((Object) null, "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("", "gyTP:S{aB3kr");
      patriciaTrie0.keySet();
      patriciaTrie0.values();
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, integer1, 0);
      hashMap0.put("V6 zQeF!{N2JC;k?,&", "");
      Object object0 = abstractPatriciaTrie_TrieEntry1.getValue();
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = null;
      Integer integer0 = new Integer(1969);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer0, 0);
      Map.Entry.comparingByKey();
      Integer integer1 = (Integer)abstractPatriciaTrie_TrieEntry1.key;
      // Undeclared exception!
      try { 
        patriciaTrie1.getEntry(integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.containsKey("5%a");
      patriciaTrie0.higherEntry("%z?J#Q DZ");
      patriciaTrie0.put("<H%T63g", "5%a");
      patriciaTrie0.replace("<H%T63g", "5%a");
      patriciaTrie0.remove((Object) "5%a");
      patriciaTrie0.lengthInBits("6GIL~4n&!");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("%z?J#Q DZ", "6GIL~4n&!");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      abstractMap_SimpleEntry0.setValue((String) null);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>("6GIL~4n&!", "ly_-h/,K1mwNP");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry1, 1);
      abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleEntry1);
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry1.isEmpty();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(144);
      Integer integer0 = new Integer(144);
      hashMap0.getOrDefault("ly_-h/,K1mwNP", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.bitsPerElement();
      patriciaTrie1.ceilingEntry("%z?J#Q DZ");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-540));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry("");
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.compareKeys("", "");
      patriciaTrie0.floorEntry("LNadvd");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.select("&suaMs?olt?r3;v=^");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.bitsPerElement();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("SmhNY?s>.", "qqvP5U(`/s.|k", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie3.previousEntry(abstractPatriciaTrie_TrieEntry1);
      String string0 = "parent=";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("parent=", abstractPatriciaTrie_TrieEntry0, 0);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("EcC!e", "EcC!e", (-1));
      abstractPatriciaTrie_TrieEntry0.key = null;
      Integer integer0 = new Integer((-1365));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-2582));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "8GU*N8/3/[46,", 1220);
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "DCUixrG@) R$=gucB{", (-2582));
      abstractPatriciaTrie_TrieEntry4.value = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      abstractPatriciaTrie_TrieEntry4.bitIndex = (-2582);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
      abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry5;
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.higherEntry("_ #\u0001'6");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("_ #\u0001'6", patriciaTrie0, 1034);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      abstractPatriciaTrie_TrieEntry0.key = (Object) "_ #\u0001'6";
      patriciaTrie0.mapIterator();
      Integer integer0 = new Integer(1034);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer(1034);
      abstractMap_SimpleEntry0.setValue(integer1);
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, 1034);
      abstractPatriciaTrie_TrieEntry1.value = abstractMap_SimpleEntry0;
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, 1335);
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.isEmpty();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("_ #\u0001'6", (Object) null);
      patriciaTrie1.put("*Lz'_5x%{I(,ls", abstractMap_SimpleEntry0);
      patriciaTrie0.put("m#", "_ #\u0001'6");
      patriciaTrie1.nextKey(",Z]#");
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.selectValue("");
      patriciaTrie0.incrementSize();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("", "", biFunction0);
      hashMap0.put((String) null, (String) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      hashMap0.putIfAbsent((String) null, (String) null);
      hashMap0.put((String) null, (String) null);
      hashMap0.put((String) null, (String) null);
      hashMap0.put("M5?_!KA", "M5?_!KA");
      hashMap0.put((String) null, (String) null);
      patriciaTrie0.previousKey("S}:8pcxAe>[^v1%");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 46);
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("=Ue;", integer0);
      patriciaTrie0.put("=Ue;", (Integer) null);
      patriciaTrie0.put("=Ue;", integer0);
      patriciaTrie0.prefixMap("_i ");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer1 = new Integer(2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("uAw[G.>SP", integer1, 2);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.selectKey((String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.toString();
      patriciaTrie2.compareKeys("=Ue;", "");
      Integer integer2 = new Integer((-1259));
      abstractPatriciaTrie_TrieEntry0.equals(integer2);
      patriciaTrie2.put("Entry(key=uAw[G.>SP [2], value=2, parent=null, left=uAw[G.>SP [2], right=null, predecessor=uAw[G.>SP [2])", "Trie[0]={\n}\n");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie2.headMap("Trie[0]={\n}\n");
      patriciaTrie3.tailMap("predecessor=");
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("H}H\"S_oswc1u?C3!", ":n[K;P>/rT79=#!s6T");
      patriciaTrie0.previousKey("");
      patriciaTrie0.selectValue("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "T+}Zmf%;E!", 2025);
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      // Undeclared exception!
      try { 
        patriciaTrie1.get(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.entrySet();
      String string0 = "tKkgm1\\+<ZU*&F2QS! ";
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      String string1 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "l3\\ndUtBc$DRw";
      String string1 = "";
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string0 = "0";
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "0", 0);
      int int1 = 3057;
      Integer integer1 = new Integer(3057);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", 1);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("0", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "C^v?#`?.9k`al:ZY";
      hashMap0.put("C^v?#`?.9k`al:ZY", "Fkq&]e}5]kJK#");
      hashMap0.put("=", "=");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      String string1 = "W^9Mt^aM`;|jly5o";
      hashMap0.put("W^9Mt^aM`;|jly5o", "W^9Mt^aM`;|jly5o");
      String string2 = "l8m~FVp*|NoKw=";
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.getEntry((Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 1786);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("delegate", "delegate", 905);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "MJ3.";
      hashMap0.put("MJ3.", "%#>`P8pJg1/#L:l;4\"K");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string1 = "";
      hashMap0.put("N4vN&K3S&A@-W(dJ", "N4vN&K3S&A@-W(dJ");
      patriciaTrie0.bitsPerElement();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("%#>`P8pJg1/#L:l;4\"K", "N4vN&K3S&A@-W(dJ", (-1));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      patriciaTrie0.keySet();
      patriciaTrie0.put("", "");
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("H}H\"S_oswc1u?C3!", ":n[K;P>/rT79=#!s6T");
      patriciaTrie0.previousKey("");
      patriciaTrie0.selectValue("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Key is out of range: ", "", 1);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "(fMn=SHs)";
      String string1 = ">weVu6EpDgzI[y";
      Integer integer0 = new Integer(1);
      hashMap0.put(">weVu6EpDgzI[y", integer0);
      int int0 = 2;
      Integer integer1 = new Integer(2);
      hashMap0.put(">weVu6EpDgzI[y", integer1);
      Integer integer2 = new Integer((-461));
      hashMap0.put("(fMn=SHs)", integer2);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      String string2 = "om";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("om", integer0, (-461));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      Map.Entry.comparingByValue();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      patriciaTrie1.put("/DhDp\"|hTVYw8<H5N", integer0);
      patriciaTrie1.selectValue("VlI!O&]%m@2&-E*8utR");
      patriciaTrie1.put("VlI!O&]%m@2&-E*8utR", integer0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("VlI!O&]%m@2&-E*8utR", "VlI!O&]%m@2&-E*8utR");
      patriciaTrie2.put("VlI!O&]%m@2&-E*8utR", "a.W");
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values";
      patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "/DhDp\"|hTVYw8<H5N");
      patriciaTrie2.previousKey("VlI!O&]%m@2&-E*8utR");
      // Undeclared exception!
      try { 
        patriciaTrie1.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry";
      String string1 = "";
      hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      hashMap0.put("", "P?lhqsLyjvJf");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.getOrDefault(patriciaTrie1, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.incrementSize();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.subtree("", 2460, 2460);
      patriciaTrie2.put("=", "=");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie1.decrementSize();
      patriciaTrie3.put("=", (String) null);
      // Undeclared exception!
      try { 
        patriciaTrie2.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("L?R3KX'5`", integer0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>("", abstractMap_SimpleEntry1, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Integer integer1 = new Integer(0);
      abstractMap_SimpleEntry0.setValue(integer1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Rgzj", "R~h4ju", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "`#%,Z m7,8C", 3116);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("VlI!O!&]%m@2&-E*8utR", "VlI!O!&]%m@2&-E*8utR");
      patriciaTrie1.firstKey();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie2.compareKeys("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (String) null);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie2.floorEntry((String) null);
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      String string0 = patriciaTrie1.firstKey();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = " > ";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(" > ", "must have come from somewhere!", 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("must have come from somewhere!", " > ", 0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.key = "";
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", " > ", 2);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.setKeyValue("Oat&`*y4[", "Oat&`*y4[");
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry1.predecessor;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.bitIndex("org.apache.commons.collections4.trie.PatriciaTrie", "L)");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      patriciaTrie1.keySet();
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", 250);
      Integer integer1 = new Integer(250);
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer0;
      Integer integer2 = new Integer(250);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer1, (-1210));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.setValue("");
      abstractPatriciaTrie_TrieEntry0.key = integer1;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 250;
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      Map.Entry.comparingByKey();
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=250 [250], value=, parent=250 [-1210], left=250 [250], right=null, )", string0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer(32768);
      int int0 = 0;
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Integer integer1 = new Integer(943);
      abstractPatriciaTrie_TrieEntry0.key = integer1;
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", 32768);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.setValue("");
      Integer integer2 = new Integer(943);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-1989);
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, integer2);
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.equals("");
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-3459));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 0);
      Map.Entry.comparingByKey();
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 0);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      Integer integer2 = new Integer(0);
      abstractPatriciaTrie_TrieEntry1.setKeyValue(integer2, integer2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(integer0, (AbstractMap.SimpleImmutableEntry<Object, String>) null, 0);
      Integer integer3 = new Integer(0);
      abstractPatriciaTrie_TrieEntry2.equals(integer3);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>("", (AbstractMap.SimpleImmutableEntry<Object, String>) null, 3916);
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.replace("aKXj[n+L+<tWlQ6@S/", "aKXj[n+L+<tWlQ6@S/", "aKXj[n+L+<tWlQ6@S/");
      patriciaTrie0.put("*}.e:< *P", "*}.e:< *P");
      patriciaTrie1.containsKey((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry1);
      patriciaTrie1.previousKey("");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(">j*+Q\"", (String) null, 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 2192);
      abstractPatriciaTrie_TrieEntry1.getValue();
      abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      abstractPatriciaTrie_TrieEntry0.setKeyValue(">j*+Q\"", ">j*+Q\"");
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=>j*+Q\" [0], value=>j*+Q\", parent=null, left=>j*+Q\" [0], right=null, predecessor=>j*+Q\" [0])", string0);
  }
}
