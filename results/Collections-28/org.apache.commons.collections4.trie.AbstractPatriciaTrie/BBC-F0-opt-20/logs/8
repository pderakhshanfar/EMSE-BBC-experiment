* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 18948
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 3938454264
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 11:06:12.289 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:06:12.289 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:06:17.204 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 11:07:05.419 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 11:07:10.770 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Map<K, V>.Entry<K, V> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 11:08:01.083 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.lang.Object>.TrieIterator<java.lang.String> canUseFunctionalMocks=false, canBeMocked: false
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 11:10:45.394 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Integer, java.lang.Object>.TrieEntry<java.lang.Object, java.lang.Integer> canUseFunctionalMocks=false, canBeMocked: false
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 11:14:57.092 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.String, java.lang.String>.TrieEntry<java.lang.Comparable<java.lang.Object>, java.lang.Object> canUseFunctionalMocks=false, canBeMocked: false
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 601s and 1145 generations, 392763 statements, best individual has fitness: 1449.0
* Minimizing test suite
[MASTER] 11:17:18.149 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 822
* Number of covered goals: 464
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 602
* Number of covered goals: 305
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 313
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 66%
* Total number of goals: 186
* Number of covered goals: 122
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 303
* Generated 194 tests with total length 2969
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:18:11.203 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.81485% of time used, but only 36/194 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 11:18:18.209 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1634037498099/org/apache/commons/collections4/trie/AbstractPatriciaTrie_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1634037498099/org/apache/commons/collections4/trie/AbstractPatriciaTrie_69_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:18.209 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.209 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.212 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.Object>,java.lang.String>>: 99
[MASTER] 11:18:18.212 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_69_1634037498099/org/apache/commons/collections4/trie/AbstractPatriciaTrie_69_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:18.212 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:18.213 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1634037498099/org/apache/commons/collections4/trie/AbstractPatriciaTrie_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_69_tmp__ESTest extends AbstractPatriciaTrie_69_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Object object0 = patriciaTrie0.put("%O+|[}#o;", "%O+|[}#o;");
31:       assertNull(object0);
32:       
33:       Integer integer0 = new Integer((-84));
34:       assertEquals((-84), (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "Key cannot be null", 0);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
42:       
43:       String string0 = (String)abstractPatriciaTrie_TrieEntry0.value;
44:       assertEquals("Key cannot be null", string0);
45:       assertNotNull(string0);
46:       
47:       Object object1 = patriciaTrie0.put("Key cannot be null", "Key cannot be null");
48:       assertNull(object1);
49:       
50:       Object object2 = patriciaTrie0.put("%O+|[}#o;", (Object) null);
51:       assertEquals("%O+|[}#o;", object2);
52:       assertNotNull(object2);
53:       assertFalse(object2.equals((Object)string0));
54:       
55:       Object object3 = patriciaTrie0.put("%O+|[}#o;", "%O+|[}#o;");
56:       assertNull(object3);
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
62:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
63:       
64:       Integer integer1 = new Integer(0);
65:       assertEquals(0, (int)integer1);
66:       assertNotNull(integer1);
67:       assertFalse(integer1.equals((Object)integer0));
68:       
69:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, "(,ot\"HWlzo}MiaGf~w`");
70:       assertNotNull(abstractMap_SimpleImmutableEntry0);
71:       assertFalse(integer1.equals((Object)integer0));
72:       
73:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<String, Object>) null, 0);
74:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
77:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
78:       assertFalse(integer1.equals((Object)integer0));
79:       
80:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<String, Object>) null, 0);
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
84:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
85:       assertFalse(integer1.equals((Object)integer0));
86:       
87:       abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
88:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
97:       
98:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
99:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
100:       assertNotNull(comparator1);
101:       
102:       abstractPatriciaTrie_TrieEntry2.left = null;
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       
107:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
108:       assertTrue(boolean0);
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
112:       assertFalse(integer1.equals((Object)integer0));
113:       
114:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
115:       assertNotNull(patriciaTrie1);
116:       
117:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
118:       assertTrue(hashMap0.isEmpty());
119:       assertEquals(0, hashMap0.size());
120:       assertNotNull(hashMap0);
121:       
122:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
123:       assertTrue(hashMap0.isEmpty());
124:       assertEquals(0, hashMap0.size());
125:       assertNotNull(patriciaTrie2);
126:       
127:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
128:       assertTrue(hashMap0.isEmpty());
129:       assertEquals(0, hashMap0.size());
130:       assertNotNull(patriciaTrie3);
131:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
132:       
133:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
134:       assertTrue(hashMap0.isEmpty());
135:       assertEquals(0, hashMap0.size());
136:       assertNotNull(patriciaTrie4);
137:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
138:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
139:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
140:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
141:       
142:       String string1 = patriciaTrie4.putIfAbsent("", "");
143:       assertNotSame(patriciaTrie2, patriciaTrie3);
144:       assertNotSame(patriciaTrie2, patriciaTrie4);
145:       assertNotSame(patriciaTrie3, patriciaTrie4);
146:       assertNotSame(patriciaTrie3, patriciaTrie2);
147:       assertNotSame(patriciaTrie4, patriciaTrie2);
148:       assertNotSame(patriciaTrie4, patriciaTrie3);
149:       assertTrue(hashMap0.isEmpty());
150:       assertEquals(0, hashMap0.size());
151:       assertNull(string1);
152:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
153:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
154:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
155:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
156:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
157:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
158:       
159:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 2);
160:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
161:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
162:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
163:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
164:       
165:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.right;
166:       assertNull(abstractPatriciaTrie_TrieEntry5);
167:       
168:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
169:       assertNotSame(patriciaTrie2, patriciaTrie3);
170:       assertNotSame(patriciaTrie2, patriciaTrie4);
171:       assertNotSame(patriciaTrie3, patriciaTrie4);
172:       assertNotSame(patriciaTrie3, patriciaTrie2);
173:       assertNotSame(patriciaTrie4, patriciaTrie2);
174:       assertNotSame(patriciaTrie4, patriciaTrie3);
175:       assertTrue(hashMap0.isEmpty());
176:       assertEquals(0, hashMap0.size());
177:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
178:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
179:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
180:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
181:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
182:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
183:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
184:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
185:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
186:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
187:       
188:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.lowerEntry("%O+|[}#o;");
189:       assertNull(abstractPatriciaTrie_TrieEntry7);
190:   }
191: }
RegularFileObject[/tmp/EvoSuite_69_1634037498099/org/apache/commons/collections4/trie/AbstractPatriciaTrie_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_69_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_69_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:18.216 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("%O+|[}#o;", "%O+|[}#o;");
assertNull(object0);

Integer integer0 = new Integer((-84));
assertEquals((-84), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "Key cannot be null", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = (String)abstractPatriciaTrie_TrieEntry0.value;
assertEquals("Key cannot be null", string0);
assertNotNull(string0);

Object object1 = patriciaTrie0.put("Key cannot be null", "Key cannot be null");
assertNull(object1);

Object object2 = patriciaTrie0.put("%O+|[}#o;", (Object) null);
assertEquals("%O+|[}#o;", object2);
assertNotNull(object2);
assertFalse(object2.equals((Object)string0));

Object object3 = patriciaTrie0.put("%O+|[}#o;", "%O+|[}#o;");
assertNull(object3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer1 = new Integer(0);
assertEquals(0, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, "(,ot\"HWlzo}MiaGf~w`");
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<String, Object>) null, 0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, (AbstractMap.SimpleImmutableEntry<String, Object>) null, 0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry2.left = null;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie2);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie4);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));

String string1 = patriciaTrie4.putIfAbsent("", "");
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(string1);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 2);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.right;
assertNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.lowerEntry("%O+|[}#o;");
assertNull(abstractPatriciaTrie_TrieEntry7);


[MASTER] 11:18:18.616 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_77_1634037498561/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_77_1634037498561/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:18.616 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.616 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.617 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.Object>,java.lang.String>>: 112
[MASTER] 11:18:18.617 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_77_1634037498561/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:18.617 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:18.618 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_77_1634037498561/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_77_tmp__ESTest extends AbstractPatriciaTrie_77_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
29:       assertEquals(0, hashMap0.size());
30:       assertTrue(hashMap0.isEmpty());
31:       assertNotNull(hashMap0);
32:       
33:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
34:       assertEquals(0, hashMap0.size());
35:       assertTrue(hashMap0.isEmpty());
36:       assertNotNull(patriciaTrie0);
37:       
38:       hashMap0.clear();
39:       assertEquals(0, hashMap0.size());
40:       assertTrue(hashMap0.isEmpty());
41:       
42:       Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
43:       assertEquals(0, hashMap0.size());
44:       assertTrue(hashMap0.isEmpty());
45:       assertNull(map_Entry0);
46:       
47:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
48:       assertNotNull(patriciaTrie1);
49:       
50:       boolean boolean0 = patriciaTrie1.containsKey("");
51:       assertFalse(boolean0);
52:       
53:       String string0 = hashMap0.put("s/Dw\"?^1/p", "");
54:       assertFalse(hashMap0.isEmpty());
55:       assertEquals(1, hashMap0.size());
56:       assertNull(string0);
57:       
58:       String string1 = hashMap0.put("", "}4#JQ`M_?3PELQa");
59:       assertFalse(hashMap0.isEmpty());
60:       assertEquals(2, hashMap0.size());
61:       assertNull(string1);
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1542);
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
68:       
69:       String string2 = abstractPatriciaTrie_TrieEntry0.setValue("");
70:       assertEquals("", string2);
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertNotNull(string2);
75:       
76:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
77:       assertTrue(boolean1);
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
81:       assertFalse(boolean1 == boolean0);
82:       
83:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("}\n", "}\n", 240);
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
88:       
89:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
90:       Integer integer0 = new Integer(467);
91:       assertEquals(467, (int)integer0);
92:       assertNotNull(integer0);
93:       
94:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "Cannot determine prefix outside of Character boundaries");
95:       assertNotNull(abstractMap_SimpleImmutableEntry0);
96:       
97:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertNotNull(abstractMap_SimpleImmutableEntry1);
102:       
103:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, 467);
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
110:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
111:       
112:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
113:       assertNotNull(comparator1);
114:       
115:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, (-1025));
116:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
119:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
123:       
124:       boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
125:       assertFalse(boolean2);
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
128:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
129:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
131:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
132:       assertTrue(boolean2 == boolean0);
133:       assertFalse(boolean2 == boolean1);
134:       
135:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
136:       assertNotNull(patriciaTrie2);
137:       
138:       SortedMap<String, Integer> sortedMap0 = patriciaTrie2.tailMap("");
139:       assertEquals(0, sortedMap0.size());
140:       assertTrue(sortedMap0.isEmpty());
141:       assertNotNull(sortedMap0);
142:       
143:       Comparator<? super String> comparator2 = patriciaTrie1.comparator();
144:       assertNotNull(comparator2);
145:       
146:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
147:       assertNotNull(patriciaTrie3);
148:       
149:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.firstEntry();
150:       assertNull(abstractPatriciaTrie_TrieEntry4);
151:   }
152: }
RegularFileObject[/tmp/EvoSuite_77_1634037498561/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_77_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:18.620 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

hashMap0.clear();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(map_Entry0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

boolean boolean0 = patriciaTrie1.containsKey("");
assertFalse(boolean0);

String string0 = hashMap0.put("s/Dw\"?^1/p", "");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(string0);

String string1 = hashMap0.put("", "}4#JQ`M_?3PELQa");
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1542);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string2 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertEquals("", string2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string2);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(boolean1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean1 == boolean0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("}\n", "}\n", 240);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer0 = new Integer(467);
assertEquals(467, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "Cannot determine prefix outside of Character boundaries");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, 467);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1, (-1025));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(boolean2);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

SortedMap<String, Integer> sortedMap0 = patriciaTrie2.tailMap("");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

Comparator<? super String> comparator2 = patriciaTrie1.comparator();
assertNotNull(comparator2);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry4);


[MASTER] 11:18:18.976 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_83_1634037498949/org/apache/commons/collections4/trie/AbstractPatriciaTrie_83_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_83_1634037498949/org/apache/commons/collections4/trie/AbstractPatriciaTrie_83_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:18.976 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.976 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:18.977 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.String>,java.lang.Integer>>: 69
[MASTER] 11:18:18.977 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_83_1634037498949/org/apache/commons/collections4/trie/AbstractPatriciaTrie_83_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:18.977 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:18.977 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_83_1634037498949/org/apache/commons/collections4/trie/AbstractPatriciaTrie_83_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_83_tmp__ESTest extends AbstractPatriciaTrie_83_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap(" -> ");
32:       assertEquals(0, sortedMap0.size());
33:       assertTrue(sortedMap0.isEmpty());
34:       assertNotNull(sortedMap0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 1, 1);
37:       assertNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       Set<String> set0 = patriciaTrie0.keySet();
40:       assertTrue(set0.isEmpty());
41:       assertEquals(0, set0.size());
42:       assertNotNull(set0);
43:       assertFalse(set0.contains(" -> "));
44:       
45:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("+Zo*z-b]OGQn8I");
46:       assertNull(abstractPatriciaTrie_TrieEntry1);
47:       
48:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("m<98%ub:ev+Edb3", "+Zo*z-b]OGQn8I", 1);
49:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
52:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
53:       
54:       Integer integer0 = new Integer(629);
55:       assertEquals(629, (int)integer0);
56:       assertNotNull(integer0);
57:       
58:       abstractPatriciaTrie_TrieEntry2.value = (Object) integer0;
59:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
62:       
63:       abstractPatriciaTrie_TrieEntry2.bitIndex = 1056;
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
67:       
68:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
69:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>>) comparator0);
70:       assertNotNull(comparator1);
71:       
72:       String string0 = abstractPatriciaTrie_TrieEntry2.toString();
73:       assertEquals("Entry(key=m<98%ub:ev+Edb3 [1056], value=629, parent=null, left=m<98%ub:ev+Edb3 [1056], right=null, predecessor=m<98%ub:ev+Edb3 [1056])", string0);
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
77:       assertNotNull(string0);
78:       
79:       Integer integer1 = new Integer(1366);
80:       assertEquals(1366, (int)integer1);
81:       assertNotNull(integer1);
82:       assertFalse(integer1.equals((Object)integer0));
83:       
84:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 1);
85:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
87:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
89:       assertFalse(integer1.equals((Object)integer0));
90:       
91:       abstractPatriciaTrie_TrieEntry3.parent = null;
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       
96:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByValue();
97:       assertNotNull(comparator2);
98:       
99:       abstractPatriciaTrie_TrieEntry3.value = integer1;
100:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
102:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
103:       
104:       abstractPatriciaTrie_TrieEntry3.parent = null;
105:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       
109:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
110:       assertFalse(boolean0);
111:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
114:       assertFalse(integer1.equals((Object)integer0));
115:       
116:       Set<Map.Entry<String, String>> set1 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
117:       assertTrue(set1.isEmpty());
118:       assertEquals(0, set1.size());
119:       assertNotNull(set1);
120:       
121:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
122:       assertNotNull(patriciaTrie1);
123:       
124:       Set<String> set2 = patriciaTrie1.keySet();
125:       assertNotSame(set2, set0);
126:       assertTrue(set2.isEmpty());
127:       assertEquals(0, set2.size());
128:       assertNotNull(set2);
129:       assertTrue(set2.equals((Object)set0));
130:       assertFalse(set2.contains("+Zo*z-b]OGQn8I"));
131:       
132:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.floorEntry("");
133:       assertNull(abstractPatriciaTrie_TrieEntry4);
134:   }
135: }
RegularFileObject[/tmp/EvoSuite_83_1634037498949/org/apache/commons/collections4/trie/AbstractPatriciaTrie_83_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_83_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_83_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_83_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_83_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:18.979 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap(" -> ");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 1, 1);
assertNull(abstractPatriciaTrie_TrieEntry0);

Set<String> set0 = patriciaTrie0.keySet();
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);
assertFalse(set0.contains(" -> "));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("+Zo*z-b]OGQn8I");
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("m<98%ub:ev+Edb3", "+Zo*z-b]OGQn8I", 1);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Integer integer0 = new Integer(629);
assertEquals(629, (int)integer0);
assertNotNull(integer0);

abstractPatriciaTrie_TrieEntry2.value = (Object) integer0;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

abstractPatriciaTrie_TrieEntry2.bitIndex = 1056;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>>) comparator0);
assertNotNull(comparator1);

String string0 = abstractPatriciaTrie_TrieEntry2.toString();
assertEquals("Entry(key=m<98%ub:ev+Edb3 [1056], value=629, parent=null, left=m<98%ub:ev+Edb3 [1056], right=null, predecessor=m<98%ub:ev+Edb3 [1056])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(string0);

Integer integer1 = new Integer(1366);
assertEquals(1366, (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, 1);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry3.parent = null;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry3.value = integer1;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry3.parent = null;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(integer1.equals((Object)integer0));

Set<Map.Entry<String, String>> set1 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
assertTrue(set1.isEmpty());
assertEquals(0, set1.size());
assertNotNull(set1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Set<String> set2 = patriciaTrie1.keySet();
assertNotSame(set2, set0);
assertTrue(set2.isEmpty());
assertEquals(0, set2.size());
assertNotNull(set2);
assertTrue(set2.equals((Object)set0));
assertFalse(set2.contains("+Zo*z-b]OGQn8I"));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.floorEntry("");
assertNull(abstractPatriciaTrie_TrieEntry4);


[MASTER] 11:18:19.417 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_91_1634037499369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_91_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_91_1634037499369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_91_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:19.417 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:19.417 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:19.418 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.String>,java.lang.Integer>>: 92
[MASTER] 11:18:19.431 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_91_1634037499369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_91_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:19.431 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:19.432 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_91_1634037499369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_91_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_91_tmp__ESTest extends AbstractPatriciaTrie_91_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
32:       assertTrue(hashMap0.isEmpty());
33:       assertEquals(0, hashMap0.size());
34:       assertNotNull(hashMap0);
35:       
36:       hashMap0.clear();
37:       assertTrue(hashMap0.isEmpty());
38:       assertEquals(0, hashMap0.size());
39:       
40:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
41:       assertNotNull(patriciaTrie1);
42:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
43:       
44:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
45:       assertNotNull(patriciaTrie2);
46:       
47:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.ceilingEntry("");
48:       assertNull(abstractPatriciaTrie_TrieEntry0);
49:       
50:       Integer integer0 = new Integer(1);
51:       assertEquals(1, (int)integer0);
52:       assertNotNull(integer0);
53:       
54:       Integer integer1 = new Integer((-2895));
55:       assertEquals((-2895), (int)integer1);
56:       assertNotNull(integer1);
57:       assertFalse(integer1.equals((Object)integer0));
58:       
59:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "[,f", 2625);
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
63:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
64:       assertFalse(integer1.equals((Object)integer0));
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=97>>]/^DYRqm4", "5r", 2);
67:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
70:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
71:       
72:       Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
73:       assertEquals("=97>>]/^DYRqm4", object0);
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
75:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
77:       assertNotNull(object0);
78:       
79:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "=97>>]/^DYRqm4", 2);
80:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
83:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
84:       
85:       Integer integer2 = new Integer(0);
86:       assertEquals(0, (int)integer2);
87:       assertNotNull(integer2);
88:       assertFalse(integer2.equals((Object)integer0));
89:       assertFalse(integer2.equals((Object)integer1));
90:       
91:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>>) comparator0);
93:       assertNotNull(comparator1);
94:       
95:       String string0 = abstractPatriciaTrie_TrieEntry3.toString();
96:       assertEquals("Entry(key= [2], value==97>>]/^DYRqm4, parent=null, left= [2], right=null, predecessor= [2])", string0);
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
100:       assertNotNull(string0);
101:       assertFalse(string0.equals((Object)object0));
102:       
103:       Integer integer3 = new Integer((-2895));
104:       assertEquals((-2895), (int)integer3);
105:       assertNotNull(integer3);
106:       assertFalse(integer3.equals((Object)integer0));
107:       assertTrue(integer3.equals((Object)integer1));
108:       assertFalse(integer3.equals((Object)integer2));
109:       
110:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry1, (Integer) null, 11);
111:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
112:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
115:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
118:       assertTrue(integer1.equals((Object)integer3));
119:       assertFalse(integer1.equals((Object)integer2));
120:       assertFalse(integer1.equals((Object)integer0));
121:       
122:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByValue();
123:       assertNotNull(comparator2);
124:       
125:       boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
126:       assertFalse(boolean0);
127:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
131:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
133:       assertTrue(integer1.equals((Object)integer3));
134:       assertFalse(integer1.equals((Object)integer2));
135:       assertFalse(integer1.equals((Object)integer0));
136:       
137:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
138:       assertNotNull(patriciaTrie3);
139:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
140:       
141:       Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie3.entrySet();
142:       assertNotSame(patriciaTrie3, patriciaTrie2);
143:       assertTrue(set0.isEmpty());
144:       assertEquals(0, set0.size());
145:       assertNotNull(set0);
146:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
147:       
148:       PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
149:       assertNotNull(patriciaTrie4);
150:       
151:       Set<String> set1 = patriciaTrie4.keySet();
152:       assertEquals(0, set1.size());
153:       assertTrue(set1.isEmpty());
154:       assertNotNull(set1);
155:       assertFalse(set1.contains(""));
156:       
157:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.floorEntry("");
158:       assertNotSame(patriciaTrie2, patriciaTrie3);
159:       assertNull(abstractPatriciaTrie_TrieEntry5);
160:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
161:   }
162: }
RegularFileObject[/tmp/EvoSuite_91_1634037499369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_91_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_91_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_91_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_91_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_91_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:19.434 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

hashMap0.clear();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

Integer integer1 = new Integer((-2895));
assertEquals((-2895), (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "[,f", 2625);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=97>>]/^DYRqm4", "5r", 2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
assertEquals("=97>>]/^DYRqm4", object0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "=97>>]/^DYRqm4", 2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

Integer integer2 = new Integer(0);
assertEquals(0, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>>) comparator0);
assertNotNull(comparator1);

String string0 = abstractPatriciaTrie_TrieEntry3.toString();
assertEquals("Entry(key= [2], value==97>>]/^DYRqm4, parent=null, left= [2], right=null, predecessor= [2])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(string0);
assertFalse(string0.equals((Object)object0));

Integer integer3 = new Integer((-2895));
assertEquals((-2895), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry1, (Integer) null, 11);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(integer1.equals((Object)integer3));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(integer1.equals((Object)integer3));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie3.entrySet();
assertNotSame(patriciaTrie3, patriciaTrie2);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie4);

Set<String> set1 = patriciaTrie4.keySet();
assertEquals(0, set1.size());
assertTrue(set1.isEmpty());
assertNotNull(set1);
assertFalse(set1.contains(""));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.floorEntry("");
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));


[MASTER] 11:18:25.156 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_172_1634037505120/org/apache/commons/collections4/trie/AbstractPatriciaTrie_172_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_172_1634037505120/org/apache/commons/collections4/trie/AbstractPatriciaTrie_172_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:25.156 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.156 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.158 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.String>>>: 88
[MASTER] 11:18:25.158 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_172_1634037505120/org/apache/commons/collections4/trie/AbstractPatriciaTrie_172_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:25.158 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:25.158 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_172_1634037505120/org/apache/commons/collections4/trie/AbstractPatriciaTrie_172_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:25 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.HashMap;
16: import java.util.Map;
17: import java.util.function.BiFunction;
18: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
19: import org.apache.commons.collections4.trie.PatriciaTrie;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.ViolatedAssumptionAnswer;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class AbstractPatriciaTrie_172_tmp__ESTest extends AbstractPatriciaTrie_172_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
31:       assertEquals(0, hashMap0.size());
32:       assertTrue(hashMap0.isEmpty());
33:       assertNotNull(hashMap0);
34:       
35:       Integer integer0 = new Integer((-709));
36:       assertEquals((-709), (int)integer0);
37:       assertNotNull(integer0);
38:       
39:       Integer integer1 = hashMap0.putIfAbsent("", integer0);
40:       assertFalse(hashMap0.isEmpty());
41:       assertEquals(1, hashMap0.size());
42:       assertNull(integer1);
43:       
44:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
45:       assertFalse(hashMap0.isEmpty());
46:       assertEquals(1, hashMap0.size());
47:       assertNotNull(patriciaTrie0);
48:       
49:       Integer integer2 = patriciaTrie0.put("j@REnGa33L/3X\"jdK", integer0);
50:       assertFalse(hashMap0.isEmpty());
51:       assertEquals(1, hashMap0.size());
52:       assertNull(integer2);
53:       
54:       Collection<Integer> collection0 = patriciaTrie0.values();
55:       assertFalse(hashMap0.isEmpty());
56:       assertEquals(1, hashMap0.size());
57:       assertNotNull(collection0);
58:       assertTrue(collection0.contains(integer0));
59:       
60:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
61:       assertFalse(hashMap0.isEmpty());
62:       assertEquals(1, hashMap0.size());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
67:       
68:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(collection0, "", (-709));
69:       assertFalse(hashMap0.isEmpty());
70:       assertEquals(1, hashMap0.size());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
74:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
75:       assertTrue(collection0.contains((-709)));
76:       
77:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
78:       assertEquals("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", string0);
79:       assertFalse(hashMap0.isEmpty());
80:       assertEquals(1, hashMap0.size());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertNotNull(string0);
85:       assertTrue(collection0.contains((-709)));
86:       
87:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
88:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
89:       assertNotNull(comparator1);
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", "ZA!74Zrfs3", (-709));
92:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
95:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
96:       
97:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("ZA!74Zrfs3", "ZA!74Zrfs3", 0);
98:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
101:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
102:       
103:       abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
110:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
112:       assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
113:       
114:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
115:       assertFalse(boolean0);
116:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
119:       
120:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
121:       assertFalse(hashMap0.isEmpty());
122:       assertEquals(1, hashMap0.size());
123:       assertNotNull(patriciaTrie1);
124:       
125:       boolean boolean1 = patriciaTrie1.compareKeys("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", "o{67pcG2-");
126:       assertFalse(boolean1);
127:       assertFalse(hashMap0.isEmpty());
128:       assertEquals(1, hashMap0.size());
129:       assertTrue(boolean1 == boolean0);
130:       
131:       BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
132:       doReturn((Object) null).when(biFunction0).apply(any() , any());
133:       hashMap0.replaceAll(biFunction0);
134:       assertFalse(hashMap0.isEmpty());
135:       assertEquals(1, hashMap0.size());
136:       
137:       // Undeclared exception!
138:       try { 
139:         patriciaTrie1.subtree("q/^H&;YiU0c[&xT_#", (-1), (-709));
140:         fail("Expecting exception: StringIndexOutOfBoundsException");
141:       
142:       } catch(StringIndexOutOfBoundsException e) {
143:       }
144:   }
145: }
RegularFileObject[/tmp/EvoSuite_172_1634037505120/org/apache/commons/collections4/trie/AbstractPatriciaTrie_172_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:25 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_172_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_172_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_172_tmp__ESTest_scaffolding.class.getClassLoader()));
110:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_172_tmp__ESTest_scaffolding.class.getClassLoader()));
111:   }
112: 
113:   private static void resetClasses() {
114:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_172_tmp__ESTest_scaffolding.class.getClassLoader()); 
115: 
116:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
119:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
130:       "org.apache.commons.collections4.trie.PatriciaTrie",
131:       "org.apache.commons.collections4.trie.KeyAnalyzer",
132:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
141:     );
142:   }
143: }

[MASTER] 11:18:25.160 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

Integer integer0 = new Integer((-709));
assertEquals((-709), (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.putIfAbsent("", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(patriciaTrie0);

Integer integer2 = patriciaTrie0.put("j@REnGa33L/3X\"jdK", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer2);

Collection<Integer> collection0 = patriciaTrie0.values();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(collection0);
assertTrue(collection0.contains(integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(collection0, "", (-709));
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(collection0.contains((-709)));

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", string0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(string0);
assertTrue(collection0.contains((-709)));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<String, String>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", "ZA!74Zrfs3", (-709));
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("ZA!74Zrfs3", "ZA!74Zrfs3", 0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(patriciaTrie1);

boolean boolean1 = patriciaTrie1.compareKeys("Entry(key=[-709, -709] [-709], value=, parent=null, left=[-709, -709] [-709], right=null, predecessor=[-709, -709] [-709])", "o{67pcG2-");
assertFalse(boolean1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(boolean1 == boolean0);

BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(any() , any());
hashMap0.replaceAll(biFunction0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

patriciaTrie1.subtree("q/^H&;YiU0c[&xT_#", (-1), (-709));

[MASTER] 11:18:25.536 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_179_1634037505369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_179_1634037505369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:25.537 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.537 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Integer>,java.lang.String>>>: 43
[MASTER] 11:18:25.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_179_1634037505369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:25.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:25.538 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_179_1634037505369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:25 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_179_tmp__ESTest extends AbstractPatriciaTrie_179_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer(160);
28:       assertEquals(160, (int)integer0);
29:       assertNotNull(integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Object, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<Integer>>(integer0, integer0, 160);
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       abstractPatriciaTrie_TrieEntry0.key = (Object) integer0;
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       
42:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
43:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Comparable<Integer>, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Comparable<Integer>, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
44:       assertNotNull(comparator1);
45:       
46:       abstractPatriciaTrie_TrieEntry0.predecessor = null;
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       
51:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
52:       assertEquals("Entry(key=160 [160], value=160, parent=null, left=160 [160], right=null, )", string0);
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertNotNull(string0);
57:       
58:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
59:       assertNotNull(patriciaTrie0);
60:       
61:       patriciaTrie0.modCount = 1;
62:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, abstractPatriciaTrie_TrieEntry0.key);
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertNotNull(abstractMap_SimpleEntry0);
67:       
68:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("_3?L\"SCBO7,+CwN\"&", abstractMap_SimpleEntry0);
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       assertNull(abstractMap_SimpleEntry1);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("_3?L\"SCBO7,+CwN\"&", abstractMap_SimpleEntry0, 160);
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
82:       
83:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.putIfAbsent("", abstractMap_SimpleEntry0);
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
87:       assertNull(abstractMap_SimpleEntry2);
88:       
89:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
90:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
93:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
94:       
95:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry2);
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
105:       assertNull(abstractPatriciaTrie_TrieEntry3);
106:       
107:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
108:       assertNotNull(patriciaTrie1);
109:       
110:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key=160 [160], value=160, parent=null, left=160 [160], right=null, )", (Object) null, 160);
111:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
112:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
114:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry4, 160);
117:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
122:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
123:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
124:       
125:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
126:       assertNotNull(patriciaTrie2);
127:       
128:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("<d(XJ';$LE", "_3?L\"SCBO7,+CwN\"&");
129:       assertNotNull(abstractMap_SimpleImmutableEntry0);
130:       
131:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
132:       assertNotNull(abstractMap_SimpleEntry3);
133:       
134:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("<d(XJ';$LE", abstractMap_SimpleEntry3, 0);
135:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
138:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
139:       
140:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry6.right;
141:       assertNull(abstractPatriciaTrie_TrieEntry7);
142:       
143:       // Undeclared exception!
144:       try { 
145:         patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>) null, 241);
146:         fail("Expecting exception: NullPointerException");
147:       
148:       } catch(NullPointerException e) {
149:          //
150:          // no message in exception (getMessage() returned null)
151:          //
152:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
153:       }
154:   }
155: }
RegularFileObject[/tmp/EvoSuite_179_1634037505369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:25 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_179_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:25.540 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(160);
assertEquals(160, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<Integer>>(integer0, integer0, 160);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

abstractPatriciaTrie_TrieEntry0.key = (Object) integer0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Comparable<Integer>, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Comparable<Integer>, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.predecessor = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=160 [160], value=160, parent=null, left=160 [160], right=null, )", string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

patriciaTrie0.modCount = 1;
AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, abstractPatriciaTrie_TrieEntry0.key);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("_3?L\"SCBO7,+CwN\"&", abstractMap_SimpleEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("_3?L\"SCBO7,+CwN\"&", abstractMap_SimpleEntry0, 160);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.putIfAbsent("", abstractMap_SimpleEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(abstractMap_SimpleEntry2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Entry(key=160 [160], value=160, parent=null, left=160 [160], right=null, )", (Object) null, 160);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry4, 160);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie2);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("<d(XJ';$LE", "_3?L\"SCBO7,+CwN\"&");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("<d(XJ';$LE", abstractMap_SimpleEntry3, 0);
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry6.right;
assertNull(abstractPatriciaTrie_TrieEntry7);

patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>) null, 241);

[MASTER] 11:18:25.818 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_187_1634037505767/org/apache/commons/collections4/trie/AbstractPatriciaTrie_187_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_187_1634037505767/org/apache/commons/collections4/trie/AbstractPatriciaTrie_187_tmp__ESTest_scaffolding.java]]
[MASTER] 11:18:25.818 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.818 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:18:25.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 115
[MASTER] 11:18:25.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_187_1634037505767/org/apache/commons/collections4/trie/AbstractPatriciaTrie_187_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:18:25.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:18:25.821 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_187_1634037505767/org/apache/commons/collections4/trie/AbstractPatriciaTrie_187_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:18:25 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import java.util.SortedMap;
17: import java.util.function.BiFunction;
18: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
19: import org.apache.commons.collections4.trie.PatriciaTrie;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.ViolatedAssumptionAnswer;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class AbstractPatriciaTrie_187_tmp__ESTest extends AbstractPatriciaTrie_187_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
31:       assertNotNull(patriciaTrie0);
32:       
33:       String string0 = patriciaTrie0.put("[0rv(T/ZjXC|a3g", "[0rv(T/ZjXC|a3g");
34:       assertNull(string0);
35:       
36:       String string1 = "B\\Z97s~";
37:       SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("BZ97s~");
38:       assertEquals(0, sortedMap0.size());
39:       assertTrue(sortedMap0.isEmpty());
40:       assertNotNull(sortedMap0);
41:       
42:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
43:       assertNotNull(patriciaTrie1);
44:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
45:       
46:       String string2 = patriciaTrie1.firstKey();
47:       assertEquals("[0rv(T/ZjXC|a3g", string2);
48:       assertNotSame(patriciaTrie0, patriciaTrie1);
49:       assertNotSame(patriciaTrie1, patriciaTrie0);
50:       assertNotNull(string2);
51:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
52:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
53:       assertFalse(string2.equals((Object)string1));
54:       
55:       String string3 = "";
56:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
57:       assertNotSame(patriciaTrie0, patriciaTrie1);
58:       assertNotSame(patriciaTrie1, patriciaTrie0);
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
63:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
64:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
65:       
66:       String string4 = null;
67:       String string5 = patriciaTrie1.put("", (String) null);
68:       assertNotSame(patriciaTrie0, patriciaTrie1);
69:       assertNotSame(patriciaTrie1, patriciaTrie0);
70:       assertNull(string5);
71:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
72:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
73:       
74:       Set<String> set0 = patriciaTrie1.keySet();
75:       assertNotSame(patriciaTrie0, patriciaTrie1);
76:       assertNotSame(patriciaTrie1, patriciaTrie0);
77:       assertFalse(set0.isEmpty());
78:       assertEquals(2, set0.size());
79:       assertNotNull(set0);
80:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
81:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
82:       assertFalse(set0.contains(string1));
83:       assertTrue(set0.contains(""));
84:       
85:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>>();
86:       assertNotNull(patriciaTrie2);
87:       
88:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
89:       assertNotSame(patriciaTrie0, patriciaTrie1);
90:       assertNotSame(patriciaTrie1, patriciaTrie0);
91:       assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
92:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
93:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
98:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
99:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
100:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
101:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
103:       
104:       int int0 = 160;
105:       Integer integer0 = new Integer(160);
106:       assertEquals(160, (int)integer0);
107:       assertNotNull(integer0);
108:       assertTrue(integer0.equals((Object)int0));
109:       
110:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "V80c$Sun$3");
111:       assertNotNull(abstractMap_SimpleImmutableEntry0);
112:       assertTrue(integer0.equals((Object)int0));
113:       
114:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
115:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
116:       assertNotNull(comparator1);
117:       
118:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
119:       assertNotNull(abstractMap_SimpleImmutableEntry1);
120:       assertTrue(integer0.equals((Object)int0));
121:       
122:       // Undeclared exception!
123:       try { 
124:         Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) null);
125:         fail("Expecting exception: NullPointerException");
126:       
127:       } catch(NullPointerException e) {
128:          //
129:          // no message in exception (getMessage() returned null)
130:          //
131:          verifyException("java.util.Objects", e);
132:       }
133:   }
134: }
RegularFileObject[/tmp/EvoSuite_187_1634037505767/org/apache/commons/collections4/trie/AbstractPatriciaTrie_187_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:18:25 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_187_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_187_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
89:       "org.apache.commons.collections4.IterableSortedMap",
90:       "org.apache.commons.collections4.OrderedMap",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
94:       "org.apache.commons.collections4.OrderedMapIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
97:       "org.apache.commons.collections4.Put",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
99:       "org.apache.commons.collections4.trie.KeyAnalyzer",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
101:       "org.apache.commons.collections4.IterableMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
104:       "org.apache.commons.collections4.OrderedIterator",
105:       "org.apache.commons.collections4.IterableGet"
106:     );
107:   } 
108:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_187_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_187_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:18:25.822 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("[0rv(T/ZjXC|a3g", "[0rv(T/ZjXC|a3g");
assertNull(string0);

String string1 = "B\\Z97s~";
SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("BZ97s~");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

String string2 = patriciaTrie1.firstKey();
assertEquals("[0rv(T/ZjXC|a3g", string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotNull(string2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(string2.equals((Object)string1));

String string3 = "";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

String string4 = null;
String string5 = patriciaTrie1.put("", (String) null);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNull(string5);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Set<String> set0 = patriciaTrie1.keySet();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(set0.isEmpty());
assertEquals(2, set0.size());
assertNotNull(set0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(set0.contains(string1));
assertTrue(set0.contains(""));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));

int int0 = 160;
Integer integer0 = new Integer(160);
assertEquals(160, (int)integer0);
assertNotNull(integer0);
assertTrue(integer0.equals((Object)int0));

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "V80c$Sun$3");
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertTrue(integer0.equals((Object)int0));

Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) null);

[MASTER] 11:18:26.450 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:26.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:26.672 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:26.757 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:26.857 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.083 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.337 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.611 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.775 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.852 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.925 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:27.986 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.112 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.174 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.310 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.500 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.583 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.826 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:28.995 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.117 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.205 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.324 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.490 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.549 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.688 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.786 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.852 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:29.984 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.067 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.153 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.235 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.468 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.826 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.911 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:30.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.056 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.278 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.453 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.536 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.725 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.823 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.895 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:31.985 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.264 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.401 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.644 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.719 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:32.897 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.001 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.069 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.169 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.239 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.306 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.445 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.526 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.650 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.831 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:33.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.035 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.179 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.286 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.451 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.759 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.915 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:34.978 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.052 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.486 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.547 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.894 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:35.971 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.029 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.092 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.154 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.291 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.395 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.522 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.587 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:36.655 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.388 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.571 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.646 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.770 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.827 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.883 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:37.941 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.003 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.070 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.119 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.172 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.228 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.311 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.362 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.493 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.616 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.730 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.779 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.920 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:38.977 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:39.042 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:39.100 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:39.195 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:39.271 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.343 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.432 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.572 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:42.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.073 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.407 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.455 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.625 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.747 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.820 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.890 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:43.952 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.013 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.145 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.304 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.374 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.440 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.563 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.661 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.720 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:44.817 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:49.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:54.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:18:54.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test034 -> class java.lang.StackOverflowError: null
* Writing tests to file
[MASTER] 11:18:54.294 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", "");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-1077));
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

String string0 = "D{qs=c>6;!mDD4K";
patriciaTrie0.higherEntry(string0);
Object object1 = null;
patriciaTrie0.containsKey(object1);
patriciaTrie0.putIfAbsent(string0, string0);
Object object2 = new Object();
BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
patriciaTrie0.merge(string0, object2, biFunction0);
String string1 = "";
patriciaTrie0.lowerEntry(string1);
PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
String string2 = "F~[V?{{h[WOLqB";
String string3 = "";
patriciaTrie1.subMap(string2, string3);

* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-opt-20/tests/8
* Done!

* Computation finished
