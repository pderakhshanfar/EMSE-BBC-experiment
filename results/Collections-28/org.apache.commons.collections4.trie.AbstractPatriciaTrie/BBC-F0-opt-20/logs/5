* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 10669
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 2140124877
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 11:05:09.756 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:05:09.757 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:05:14.513 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 11:06:23.391 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 1005 generations, 313322 statements, best individual has fitness: 1394.0
* Minimizing test suite
[MASTER] 11:16:15.159 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 822
* Number of covered goals: 487
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 602
* Number of covered goals: 318
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 569
* Number of covered goals: 323
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 186
* Number of covered goals: 120
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 316
* Generated 195 tests with total length 3177
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:17:08.014 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6715166666666667% of time used, but only 19/195 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 11:17:16.025 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_32_1634037435976/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_32_1634037435976/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:16.025 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.025 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.030 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 59
[MASTER] 11:17:16.031 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>>: 101
[MASTER] 11:17:16.031 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_32_1634037435976/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:16.031 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:16.031 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_32_1634037435976/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:15 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_32_tmp__ESTest extends AbstractPatriciaTrie_32_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "|oOY|T^o", 0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "qpg.Kp", 0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
52:       
53:       abstractPatriciaTrie_TrieEntry1.bitIndex = 223;
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
67:       
68:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
75:       assertNull(abstractPatriciaTrie_TrieEntry3);
76:       
77:       String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie");
78:       assertNull(string0);
79:       
80:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
81:       assertNotNull(patriciaTrie1);
82:       
83:       Integer integer0 = new Integer(0);
84:       assertNotNull(integer0);
85:       assertEquals(0, (int)integer0);
86:       
87:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("|oOY|T^o", (Object) null);
88:       assertNotNull(abstractMap_SimpleImmutableEntry0);
89:       
90:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry0);
91:       assertNull(abstractMap_SimpleImmutableEntry1);
92:       
93:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
94:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
95:       assertNotNull(abstractMap_SimpleImmutableEntry2);
96:       
97:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
98:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
99:       assertNull(abstractMap_SimpleImmutableEntry3);
100:       
101:       Comparator<Map.Entry<Object, Integer>> comparator3 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
102:       assertNotNull(comparator3);
103:       
104:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry2);
105:       assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
106:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
107:       assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
108:       assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
109:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
110:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
111:       assertNotNull(abstractMap_SimpleImmutableEntry4);
112:       
113:       SortedMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("|");
114:       assertFalse(sortedMap0.isEmpty());
115:       assertEquals(1, sortedMap0.size());
116:       assertNotNull(sortedMap0);
117:       
118:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
119:       assertNotNull(patriciaTrie2);
120:       
121:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = patriciaTrie2.get((Object) null);
122:       assertNull(abstractMap_SimpleEntry0);
123:       
124:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry1);
125:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.equals((Object)abstractPatriciaTrie_TrieEntry2));
126:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
134:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
135:       assertNotSame(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry2);
136:       assertTrue(boolean0);
137:   }
138: }
RegularFileObject[/tmp/EvoSuite_32_1634037435976/org/apache/commons/collections4/trie/AbstractPatriciaTrie_32_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:15 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_32_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_32_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:16.033 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "|oOY|T^o", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "qpg.Kp", 0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = 223;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie");
assertNull(string0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("|oOY|T^o", (Object) null);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
assertNull(abstractMap_SimpleImmutableEntry3);

Comparator<Map.Entry<Object, Integer>> comparator3 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry2);
assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry4);

SortedMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("|");
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertNotNull(sortedMap0);

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie2);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = patriciaTrie2.get((Object) null);
assertNull(abstractMap_SimpleEntry0);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry2);
assertTrue(boolean0);


[MASTER] 11:17:16.149 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1634037436111/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1634037436111/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:16.149 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.149 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.150 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Integer>,java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>,java.lang.Integer>>>: 77
[MASTER] 11:17:16.150 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_35_1634037436111/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:16.150 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:16.151 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1634037436111/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:16 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_35_tmp__ESTest extends AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       int int0 = 1888;
28:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "", 1888);
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
33:       
34:       String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((Object) null, "*~P}|QExok");
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertNotNull(string0);
39:       assertEquals("", string0);
40:       
41:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertFalse(boolean0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "", 1888);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-13);
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       
61:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       String string1 = abstractPatriciaTrie_TrieEntry1.toString();
63:       assertFalse(string1.equals((Object)string0));
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertNotNull(string1);
71:       assertEquals("Entry(key=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888], value=, parent=null, left=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888], right=null, predecessor=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888])", string1);
72:       
73:       Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
74:       assertNotNull(comparator1);
75:       
76:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
77:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>) comparator2);
78:       assertNotNull(comparator3);
79:       
80:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
90:       
91:       Comparator<Object> comparator4 = null;
92:       // Undeclared exception!
93:       try { 
94:         Map.Entry.comparingByValue((Comparator<? super String>) null);
95:         fail("Expecting exception: NullPointerException");
96:       
97:       } catch(NullPointerException e) {
98:          //
99:          // no message in exception (getMessage() returned null)
100:          //
101:          verifyException("java.util.Objects", e);
102:       }
103:   }
104: }
RegularFileObject[/tmp/EvoSuite_35_1634037436111/org/apache/commons/collections4/trie/AbstractPatriciaTrie_35_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:16 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_35_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_35_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:16.152 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 1888;
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "", 1888);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((Object) null, "*~P}|QExok");
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);
assertEquals("", string0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "", 1888);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.bitIndex = (-13);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string1 = abstractPatriciaTrie_TrieEntry1.toString();
assertFalse(string1.equals((Object)string0));
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string1);
assertEquals("Entry(key=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888], value=, parent=null, left=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888], right=null, predecessor=Entry(key=null [-13], value=*~P}|QExok, parent=null, left=null [-13], right=null, predecessor=null [-13]) [1888])", string1);

Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Integer>, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>) comparator2);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());

Comparator<Object> comparator4 = null;
Map.Entry.comparingByValue((Comparator<? super String>) null);

[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_38_1634037436237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_38_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_38_1634037436237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_38_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 53
[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_38_1634037436237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_38_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:16.283 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:16.284 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_38_1634037436237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_38_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:16 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_38_tmp__ESTest extends AbstractPatriciaTrie_38_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
32:       assertTrue(set0.isEmpty());
33:       assertEquals(0, set0.size());
34:       assertNotNull(set0);
35:       
36:       Integer integer0 = new Integer(0);
37:       assertNotNull(integer0);
38:       assertEquals(0, (int)integer0);
39:       
40:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
41:       assertNotNull(abstractMap_SimpleImmutableEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
44:       assertNull(abstractPatriciaTrie_TrieEntry0);
45:       
46:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
47:       assertNotNull(abstractMap_SimpleEntry0);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
51:       assertNotNull(comparator1);
52:       
53:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
54:       assertNotNull(comparator2);
55:       
56:       String string0 = patriciaTrie0.put("", "a*K:9WO|5V");
57:       assertNull(string0);
58:       
59:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 1112);
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
63:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
64:       
65:       Integer integer1 = new Integer(0);
66:       assertTrue(integer1.equals((Object)integer0));
67:       assertNotNull(integer1);
68:       assertEquals(0, (int)integer1);
69:       
70:       abstractPatriciaTrie_TrieEntry1.key = integer1;
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
74:       
75:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
76:       assertTrue(integer0.equals((Object)integer1));
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(boolean0);
81:       
82:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
83:       assertTrue(integer0.equals((Object)integer1));
84:       assertTrue(boolean1 == boolean0);
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
88:       assertFalse(boolean1);
89:       
90:       Collection<String> collection0 = patriciaTrie0.values();
91:       assertTrue(collection0.contains("a*K:9WO|5V"));
92:       assertFalse(collection0.contains(""));
93:       assertNotNull(collection0);
94:       
95:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
96:       assertNotNull(patriciaTrie1);
97:       
98:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
102:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
103:       
104:       int int0 = patriciaTrie1.lengthInBits("");
105:       assertEquals(0, int0);
106:       
107:       Collection<Object> collection1 = patriciaTrie1.values();
108:       assertFalse(collection1.contains(1112));
109:       assertTrue(collection1.contains("a*K:9WO|5V"));
110:       assertNotNull(collection1);
111:       
112:       Integer integer2 = new Integer(0);
113:       assertTrue(integer2.equals((Object)integer0));
114:       assertTrue(integer2.equals((Object)integer1));
115:       assertTrue(integer2.equals((Object)int0));
116:       assertNotNull(integer2);
117:       assertEquals(0, (int)integer2);
118:       
119:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("a*K:9WO|5V", integer2, 1112);
120:       assertTrue(integer2.equals((Object)integer0));
121:       assertTrue(integer2.equals((Object)integer1));
122:       assertTrue(integer2.equals((Object)int0));
123:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
125:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
126:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
127:       
128:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
129:       Comparator<Map.Entry<String, Object>> comparator4 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
130:       assertNotNull(comparator4);
131:       
132:       boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
133:       assertTrue(integer2.equals((Object)integer0));
134:       assertTrue(integer2.equals((Object)integer1));
135:       assertTrue(integer2.equals((Object)int0));
136:       assertFalse(boolean2 == boolean1);
137:       assertFalse(boolean2 == boolean0);
138:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
140:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
141:       assertTrue(boolean2);
142:   }
143: }
RegularFileObject[/tmp/EvoSuite_38_1634037436237/org/apache/commons/collections4/trie/AbstractPatriciaTrie_38_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:16 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_38_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_38_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_38_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_38_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:16.286 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
assertNotNull(comparator2);

String string0 = patriciaTrie0.put("", "a*K:9WO|5V");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 1112);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer1 = new Integer(0);
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(0, (int)integer1);

abstractPatriciaTrie_TrieEntry1.key = integer1;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
assertTrue(integer0.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(boolean0);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
assertTrue(integer0.equals((Object)integer1));
assertTrue(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(boolean1);

Collection<String> collection0 = patriciaTrie0.values();
assertTrue(collection0.contains("a*K:9WO|5V"));
assertFalse(collection0.contains(""));
assertNotNull(collection0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

int int0 = patriciaTrie1.lengthInBits("");
assertEquals(0, int0);

Collection<Object> collection1 = patriciaTrie1.values();
assertFalse(collection1.contains(1112));
assertTrue(collection1.contains("a*K:9WO|5V"));
assertNotNull(collection1);

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)int0));
assertNotNull(integer2);
assertEquals(0, (int)integer2);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("a*K:9WO|5V", integer2, 1112);
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator4 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
assertNotNull(comparator4);

boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertTrue(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)int0));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(boolean2);


[MASTER] 11:17:16.874 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1634037436705/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1634037436705/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:16.875 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.875 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.String>>: 109
[MASTER] 11:17:16.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_47_1634037436705/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:16.875 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:16.876 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1634037436705/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:16 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_47_tmp__ESTest extends AbstractPatriciaTrie_47_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
33:       patriciaTrie0.replaceAll(biFunction0);
34:       Integer integer0 = new Integer(444);
35:       assertNotNull(integer0);
36:       assertEquals(444, (int)integer0);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("\n", integer0, (-922));
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       
44:       Collection<Integer> collection0 = patriciaTrie0.values();
45:       assertFalse(collection0.contains(integer0));
46:       assertNotNull(collection0);
47:       
48:       String string0 = patriciaTrie0.selectKey("\n");
49:       assertNull(string0);
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("\n", (Integer) null, 444);
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
55:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
56:       
57:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
67:       
68:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
69:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
72:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
73:       
74:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
84:       
85:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-390));
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
96:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
97:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
98:       
99:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
100:       assertNotNull(patriciaTrie1);
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", (-390));
103:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
105:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
106:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
107:       
108:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
109:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
110:       assertNotNull(comparator1);
111:       
112:       String string1 = patriciaTrie1.put("", "");
113:       assertNull(string1);
114:       
115:       Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByValue();
116:       assertNotNull(comparator2);
117:       
118:       abstractPatriciaTrie_TrieEntry4.key = "";
119:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4);
124:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
127:       assertNull(abstractPatriciaTrie_TrieEntry5);
128:       
129:       String string2 = abstractPatriciaTrie_TrieEntry4.setKeyValue((String) null, "");
130:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
131:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
133:       assertNotNull(string2);
134:       assertEquals("\n", string2);
135:       
136:       Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("");
137:       assertNotNull(map_Entry0);
138:       
139:       String string3 = patriciaTrie1.selectKey("");
140:       assertFalse(string3.equals((Object)string2));
141:       assertNotNull(string3);
142:       assertEquals("", string3);
143:       
144:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", (String) null);
145:       assertNotNull(abstractMap_SimpleEntry0);
146:       
147:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>>((Object) null, abstractMap_SimpleEntry0, (-922));
148:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
149:       assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
151:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
152:       
153:       // Undeclared exception!
154:       try { 
155:         Map.Entry.comparingByKey((Comparator<? super String>) null);
156:         fail("Expecting exception: NullPointerException");
157:       
158:       } catch(NullPointerException e) {
159:          //
160:          // no message in exception (getMessage() returned null)
161:          //
162:          verifyException("java.util.Objects", e);
163:       }
164:   }
165: }
RegularFileObject[/tmp/EvoSuite_47_1634037436705/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:16 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_47_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:16.878 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
patriciaTrie0.replaceAll(biFunction0);
Integer integer0 = new Integer(444);
assertNotNull(integer0);
assertEquals(444, (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("\n", integer0, (-922));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Collection<Integer> collection0 = patriciaTrie0.values();
assertFalse(collection0.contains(integer0));
assertNotNull(collection0);

String string0 = patriciaTrie0.selectKey("\n");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("\n", (Integer) null, 444);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-390));
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotNull(abstractPatriciaTrie_TrieEntry3);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", (-390));
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

String string1 = patriciaTrie1.put("", "");
assertNull(string1);

Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry4.key = "";
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry5);

String string2 = abstractPatriciaTrie_TrieEntry4.setKeyValue((String) null, "");
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(string2);
assertEquals("\n", string2);

Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("");
assertNotNull(map_Entry0);

String string3 = patriciaTrie1.selectKey("");
assertFalse(string3.equals((Object)string2));
assertNotNull(string3);
assertEquals("", string3);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", (String) null);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, String>>((Object) null, abstractMap_SimpleEntry0, (-922));
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

Map.Entry.comparingByKey((Comparator<? super String>) null);

[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1634037436879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1634037436879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.String>>: 55
[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_48_1634037436879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:16.954 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:16.955 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1634037436879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:16 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_48_tmp__ESTest extends AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, String> hashMap0 = new HashMap<String, String>(4786, 4786);
29:       assertEquals(0, hashMap0.size());
30:       assertTrue(hashMap0.isEmpty());
31:       assertNotNull(hashMap0);
32:       
33:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
34:       assertEquals(0, hashMap0.size());
35:       assertTrue(hashMap0.isEmpty());
36:       assertNotNull(patriciaTrie0);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("(/k&,MbJ{S~kF]LI{`", "(/k&,MbJ{S~kF]LI{`", 4786);
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       
44:       String string0 = patriciaTrie0.put("(/k&,MbJ{S~kF]LI{`", "");
45:       assertEquals(0, hashMap0.size());
46:       assertTrue(hashMap0.isEmpty());
47:       assertNull(string0);
48:       
49:       String string1 = hashMap0.put("qyRqV 8de{BfZ~(lX", "");
50:       assertFalse(hashMap0.isEmpty());
51:       assertEquals(1, hashMap0.size());
52:       assertNull(string1);
53:       
54:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator0);
56:       assertNotNull(comparator1);
57:       
58:       Comparator<Map.Entry<String, Object>> comparator2 = Map.Entry.comparingByKey();
59:       assertNotNull(comparator2);
60:       
61:       String string2 = patriciaTrie0.put("(/k&,MbJ{S~kF]LI{`", "value=");
62:       assertFalse(hashMap0.isEmpty());
63:       assertEquals(1, hashMap0.size());
64:       assertNotNull(string2);
65:       assertEquals("", string2);
66:       
67:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
68:       assertNull(abstractPatriciaTrie_TrieEntry1);
69:       
70:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
71:       assertFalse(hashMap0.isEmpty());
72:       assertEquals(1, hashMap0.size());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
76:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
77:       
78:       String string3 = hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet");
79:       assertFalse(hashMap0.isEmpty());
80:       assertEquals(2, hashMap0.size());
81:       assertNull(string3);
82:       
83:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("]", abstractPatriciaTrie_TrieEntry2);
84:       assertFalse(hashMap0.isEmpty());
85:       assertEquals(2, hashMap0.size());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
89:       assertNotNull(abstractMap_SimpleEntry0);
90:       
91:       Comparator<Map.Entry<Object, Integer>> comparator3 = Map.Entry.comparingByValue();
92:       assertNotNull(comparator3);
93:       
94:       int int0 = 0;
95:       Comparator<Map.Entry<Object, Integer>> comparator4 = Map.Entry.comparingByValue();
96:       assertSame(comparator4, comparator3);
97:       assertNotNull(comparator4);
98:       
99:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, 0);
100:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
103:       assertFalse(hashMap0.isEmpty());
104:       assertEquals(2, hashMap0.size());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
106:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
108:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
109:       
110:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
111:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
114:       assertFalse(hashMap0.isEmpty());
115:       assertEquals(2, hashMap0.size());
116:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
119:       assertTrue(boolean0);
120:       
121:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
122:       assertNotNull(patriciaTrie1);
123:       
124:       Integer integer0 = new Integer(0);
125:       assertTrue(integer0.equals((Object)int0));
126:       assertNotNull(integer0);
127:       assertEquals(0, (int)integer0);
128:       
129:       // Undeclared exception!
130:       try { 
131:         patriciaTrie1.put((String) null, integer0);
132:         fail("Expecting exception: NullPointerException");
133:       
134:       } catch(NullPointerException e) {
135:          //
136:          // Key cannot be null
137:          //
138:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
139:       }
140:   }
141: }
RegularFileObject[/tmp/EvoSuite_48_1634037436879/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:16 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:16.956 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, String> hashMap0 = new HashMap<String, String>(4786, 4786);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("(/k&,MbJ{S~kF]LI{`", "(/k&,MbJ{S~kF]LI{`", 4786);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = patriciaTrie0.put("(/k&,MbJ{S~kF]LI{`", "");
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNull(string0);

String string1 = hashMap0.put("qyRqV 8de{BfZ~(lX", "");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(string1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<String, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

String string2 = patriciaTrie0.put("(/k&,MbJ{S~kF]LI{`", "value=");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(string2);
assertEquals("", string2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

String string3 = hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet");
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertNull(string3);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("]", abstractPatriciaTrie_TrieEntry2);
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Object, Integer>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

int int0 = 0;
Comparator<Map.Entry<Object, Integer>> comparator4 = Map.Entry.comparingByValue();
assertSame(comparator4, comparator3);
assertNotNull(comparator4);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, (Object) null, 0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(hashMap0.isEmpty());
assertEquals(2, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(boolean0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);
assertEquals(0, (int)integer0);

patriciaTrie1.put((String) null, integer0);

[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_55_1634037437200/org/apache/commons/collections4/trie/AbstractPatriciaTrie_55_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_55_1634037437200/org/apache/commons/collections4/trie/AbstractPatriciaTrie_55_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 63
[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_55_1634037437200/org/apache/commons/collections4/trie/AbstractPatriciaTrie_55_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:17.242 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:17.243 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_55_1634037437200/org/apache/commons/collections4/trie/AbstractPatriciaTrie_55_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:17 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_55_tmp__ESTest extends AbstractPatriciaTrie_55_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("d", "d", 32768);
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("d", "d", 32768);
33:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
34:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
36:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
39:       assertNull(abstractPatriciaTrie_TrieEntry2);
40:       
41:       abstractPatriciaTrie_TrieEntry0.left = null;
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       
46:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(boolean0);
51:       
52:       String string0 = abstractPatriciaTrie_TrieEntry1.setValue("s[[.X7miY.g1/2>PQ");
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertNotNull(string0);
57:       assertEquals("d", string0);
58:       
59:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
60:       assertNotNull(comparator0);
61:       
62:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<String, String>> comparator2 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
64:       assertNotNull(comparator2);
65:       
66:       abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       
71:       String string1 = abstractPatriciaTrie_TrieEntry0.setValue("s[[.X7miY.g1/2>PQ");
72:       assertTrue(string1.equals((Object)string0));
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertNotNull(string1);
77:       assertEquals("d", string1);
78:       
79:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("s[[.X7miY.g1/2>PQ", "d", 1);
80:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
84:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
85:       
86:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.parent;
87:       assertNull(abstractPatriciaTrie_TrieEntry4);
88:       
89:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
90:       assertNotNull(patriciaTrie0);
91:       
92:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
93:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
94:       assertNotNull(patriciaTrie1);
95:       
96:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
98:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
99:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
100:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
101:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
106:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
107:       assertNotSame(patriciaTrie0, patriciaTrie1);
108:       assertNotSame(patriciaTrie1, patriciaTrie0);
109:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
110:       
111:       // Undeclared exception!
112:       try { 
113:         AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry5, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
114:         fail("Expecting exception: NullPointerException");
115:       
116:       } catch(NullPointerException e) {
117:          //
118:          // no message in exception (getMessage() returned null)
119:          //
120:       }
121:   }
122: }
RegularFileObject[/tmp/EvoSuite_55_1634037437200/org/apache/commons/collections4/trie/AbstractPatriciaTrie_55_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:17 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_55_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_55_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_55_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_55_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:17.245 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("d", "d", 32768);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("d", "d", 32768);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.left = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

String string0 = abstractPatriciaTrie_TrieEntry1.setValue("s[[.X7miY.g1/2>PQ");
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(string0);
assertEquals("d", string0);

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator2 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string1 = abstractPatriciaTrie_TrieEntry0.setValue("s[[.X7miY.g1/2>PQ");
assertTrue(string1.equals((Object)string0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string1);
assertEquals("d", string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("s[[.X7miY.g1/2>PQ", "d", 1);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry5, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);

[MASTER] 11:17:17.620 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1634037437569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1634037437569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:17.620 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.620 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.621 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.String>>: 78
[MASTER] 11:17:17.621 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1634037437569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:17.621 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:17.621 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1634037437569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:17 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_63_tmp__ESTest extends AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer(0);
31:       assertNotNull(integer0);
32:       assertEquals(0, (int)integer0);
33:       
34:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("Trie[", integer0);
35:       assertNotNull(abstractMap_SimpleImmutableEntry0);
36:       
37:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("rj9Lh9", abstractMap_SimpleImmutableEntry0);
38:       assertNull(abstractMap_SimpleImmutableEntry1);
39:       
40:       Integer integer1 = new Integer(0);
41:       assertTrue(integer1.equals((Object)integer0));
42:       assertNotNull(integer1);
43:       assertEquals(0, (int)integer1);
44:       
45:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, Integer>("{N=v5*#;DMs", integer1);
46:       assertTrue(integer1.equals((Object)integer0));
47:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
48:       assertNotNull(abstractMap_SimpleImmutableEntry2);
49:       
50:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("Trie[", abstractMap_SimpleImmutableEntry2);
51:       assertTrue(integer1.equals((Object)integer0));
52:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
53:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
54:       assertNull(abstractMap_SimpleImmutableEntry3);
55:       
56:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("zwB1%s");
57:       assertNull(abstractPatriciaTrie_TrieEntry0);
58:       
59:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
60:       assertNotNull(patriciaTrie1);
61:       
62:       String string0 = patriciaTrie1.put("", "");
63:       assertNull(string0);
64:       
65:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", "", 202);
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
70:       
71:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", (String) null, 0);
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
75:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
76:       
77:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
78:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
79:       assertNotNull(comparator1);
80:       
81:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1019);
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
85:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
86:       
87:       String string1 = patriciaTrie1.put("fT-ZYajej", "");
88:       assertNull(string1);
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
91:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
93:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
94:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
95:       
96:       abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry4;
97:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
100:       assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
103:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       
110:       abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
111:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
114:       
115:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
116:       assertNotNull(comparator2);
117:       
118:       String string2 = abstractPatriciaTrie_TrieEntry3.setKeyValue("zwB1%s", "3Kqc,0WNWnUp^");
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
122:       assertNotNull(string2);
123:       assertEquals("", string2);
124:       
125:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
126:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
134:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
135:       
136:       // Undeclared exception!
137:       try { 
138:         patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
139:         fail("Expecting exception: NullPointerException");
140:       
141:       } catch(NullPointerException e) {
142:          //
143:          // no message in exception (getMessage() returned null)
144:          //
145:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
146:       }
147:   }
148: }
RegularFileObject[/tmp/EvoSuite_63_1634037437569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:17 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:17.623 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("Trie[", integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("rj9Lh9", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

Integer integer1 = new Integer(0);
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(0, (int)integer1);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, Integer>("{N=v5*#;DMs", integer1);
assertTrue(integer1.equals((Object)integer0));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("Trie[", abstractMap_SimpleImmutableEntry2);
assertTrue(integer1.equals((Object)integer0));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry3);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("zwB1%s");
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string0 = patriciaTrie1.put("", "");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", "", 202);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", (String) null, 0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1019);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

String string1 = patriciaTrie1.put("fT-ZYajej", "");
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

String string2 = abstractPatriciaTrie_TrieEntry3.setKeyValue("zwB1%s", "3Kqc,0WNWnUp^");
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(string2);
assertEquals("", string2);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);

[MASTER] 11:17:17.740 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_66_1634037437697/org/apache/commons/collections4/trie/AbstractPatriciaTrie_66_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_66_1634037437697/org/apache/commons/collections4/trie/AbstractPatriciaTrie_66_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:17.740 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.740 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.742 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry,java.lang.Integer>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.util.AbstractMap.SimpleEntry>>,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>: 153
[MASTER] 11:17:17.742 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_66_1634037437697/org/apache/commons/collections4/trie/AbstractPatriciaTrie_66_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:17.742 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:17.742 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_66_1634037437697/org/apache/commons/collections4/trie/AbstractPatriciaTrie_66_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:17 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_66_tmp__ESTest extends AbstractPatriciaTrie_66_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer((-1));
27:       assertNotNull(integer0);
28:       assertEquals((-1), (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("n3\"dNT[a)zCVPj0", integer0, (-1));
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>> comparator0 = Map.Entry.comparingByValue();
37:       assertNotNull(comparator0);
38:       
39:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertTrue(boolean0);
44:       
45:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
46:       assertNotNull(patriciaTrie0);
47:       
48:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 171);
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
53:       
54:       Integer integer1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("", integer0);
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
58:       assertNotNull(integer1);
59:       assertEquals((-1), (int)integer1);
60:       
61:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
71:       
72:       Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
73:       assertNotNull(comparator1);
74:       
75:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertNull(abstractPatriciaTrie_TrieEntry2);
80:       
81:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry0);
82:       assertFalse(boolean1 == boolean0);
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       assertFalse(boolean1);
87:       
88:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, patriciaTrie0, (-2));
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
91:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
92:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
93:       
94:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, (-1));
95:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
101:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
102:       
103:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
104:       assertNotNull(patriciaTrie1);
105:       
106:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry4);
107:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
111:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
113:       assertNull(abstractPatriciaTrie_TrieEntry5);
114:       
115:       Integer integer2 = new Integer((-1));
116:       assertTrue(integer2.equals((Object)integer1));
117:       assertTrue(integer2.equals((Object)integer0));
118:       assertNotNull(integer2);
119:       assertEquals((-1), (int)integer2);
120:       
121:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer1, (Object) null);
122:       assertTrue(integer0.equals((Object)integer2));
123:       assertTrue(integer1.equals((Object)integer2));
124:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
125:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
127:       assertNotNull(abstractMap_SimpleImmutableEntry0);
128:       
129:       Integer integer3 = new Integer((-1534));
130:       assertFalse(integer3.equals((Object)integer0));
131:       assertFalse(integer3.equals((Object)integer1));
132:       assertFalse(integer3.equals((Object)integer2));
133:       assertNotNull(integer3);
134:       assertEquals((-1534), (int)integer3);
135:       
136:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer3, abstractMap_SimpleImmutableEntry0, (-1748));
137:       assertFalse(integer0.equals((Object)integer3));
138:       assertTrue(integer0.equals((Object)integer2));
139:       assertFalse(integer3.equals((Object)integer0));
140:       assertFalse(integer3.equals((Object)integer1));
141:       assertFalse(integer3.equals((Object)integer2));
142:       assertTrue(integer1.equals((Object)integer2));
143:       assertFalse(integer1.equals((Object)integer3));
144:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
145:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
146:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
148:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
150:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
151:       
152:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
153:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, AbstractMap.SimpleEntry<Object, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator2);
154:       assertNotNull(comparator3);
155:       
156:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer2, abstractMap_SimpleImmutableEntry0, (-1));
157:       assertFalse(integer0.equals((Object)integer3));
158:       assertTrue(integer0.equals((Object)integer2));
159:       assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
160:       assertTrue(integer1.equals((Object)integer2));
161:       assertFalse(integer1.equals((Object)integer3));
162:       assertTrue(integer2.equals((Object)integer1));
163:       assertTrue(integer2.equals((Object)integer0));
164:       assertFalse(integer2.equals((Object)integer3));
165:       assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
166:       assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
167:       assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
168:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
169:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
170:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
171:       assertNotNull(abstractPatriciaTrie_TrieEntry7);
172:       
173:       boolean boolean2 = abstractPatriciaTrie_TrieEntry7.isExternalNode();
174:       assertFalse(integer0.equals((Object)integer3));
175:       assertTrue(integer0.equals((Object)integer2));
176:       assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
177:       assertTrue(boolean2 == boolean0);
178:       assertFalse(boolean2 == boolean1);
179:       assertTrue(integer1.equals((Object)integer2));
180:       assertFalse(integer1.equals((Object)integer3));
181:       assertTrue(integer2.equals((Object)integer1));
182:       assertTrue(integer2.equals((Object)integer0));
183:       assertFalse(integer2.equals((Object)integer3));
184:       assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
185:       assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
186:       assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
187:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
188:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
189:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
190:       assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
191:       assertTrue(boolean2);
192:       
193:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
194:       assertNotNull(patriciaTrie2);
195:       
196:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
197:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
198:       assertNotNull(patriciaTrie3);
199:       
200:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry8 = patriciaTrie2.ceilingEntry("");
201:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
202:       assertNotSame(patriciaTrie2, patriciaTrie3);
203:       assertNull(abstractPatriciaTrie_TrieEntry8);
204:   }
205: }
RegularFileObject[/tmp/EvoSuite_66_1634037437697/org/apache/commons/collections4/trie/AbstractPatriciaTrie_66_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:17 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_66_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_66_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_66_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_66_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:17.746 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-1));
assertNotNull(integer0);
assertEquals((-1), (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("n3\"dNT[a)zCVPj0", integer0, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Integer>, Integer>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 171);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("", integer0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(integer1);
assertEquals((-1), (int)integer1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry2);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry0);
assertFalse(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, patriciaTrie0, (-2));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNull(abstractPatriciaTrie_TrieEntry5);

Integer integer2 = new Integer((-1));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertNotNull(integer2);
assertEquals((-1), (int)integer2);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer1, (Object) null);
assertTrue(integer0.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry0);

Integer integer3 = new Integer((-1534));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertNotNull(integer3);
assertEquals((-1534), (int)integer3);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer3, abstractMap_SimpleImmutableEntry0, (-1748));
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry6);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, AbstractMap.SimpleEntry<Object, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, Integer>, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, AbstractMap.SimpleEntry<Object, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer2, abstractMap_SimpleImmutableEntry0, (-1));
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry7);

boolean boolean2 = abstractPatriciaTrie_TrieEntry7.isExternalNode();
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry6));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
assertTrue(boolean2);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry8 = patriciaTrie2.ceilingEntry("");
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNull(abstractPatriciaTrie_TrieEntry8);


[MASTER] 11:17:17.822 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1634037437785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1634037437785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:17.822 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.822 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:17.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 59
[MASTER] 11:17:17.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>>: 105
[MASTER] 11:17:17.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_68_1634037437785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:17.823 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:17.823 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1634037437785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:17 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_68_tmp__ESTest extends AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "|oOY|T^o", 0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "qpg.Kp", 0);
37:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
52:       
53:       abstractPatriciaTrie_TrieEntry1.bitIndex = 223;
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
63:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
67:       
68:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
75:       assertNull(abstractPatriciaTrie_TrieEntry3);
76:       
77:       String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie");
78:       assertNull(string0);
79:       
80:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
81:       assertNotNull(patriciaTrie1);
82:       
83:       Integer integer0 = new Integer(0);
84:       assertNotNull(integer0);
85:       assertEquals(0, (int)integer0);
86:       
87:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("|oOY|T^o", (Object) null);
88:       assertNotNull(abstractMap_SimpleImmutableEntry0);
89:       
90:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry0);
91:       assertNull(abstractMap_SimpleImmutableEntry1);
92:       
93:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
94:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
95:       assertNotNull(abstractMap_SimpleImmutableEntry2);
96:       
97:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
98:       Comparator<Map.Entry<Integer, Integer>> comparator3 = Map.Entry.comparingByValue();
99:       assertFalse(comparator3.equals((Object)comparator1));
100:       assertNotNull(comparator3);
101:       
102:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
103:       assertNull(abstractMap_SimpleImmutableEntry3);
104:       
105:       Comparator<Map.Entry<Object, Integer>> comparator4 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
106:       assertNotNull(comparator4);
107:       
108:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry2);
109:       assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
110:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
111:       assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
112:       assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
113:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
114:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
115:       assertNotNull(abstractMap_SimpleImmutableEntry4);
116:       
117:       SortedMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("|");
118:       assertFalse(sortedMap0.isEmpty());
119:       assertEquals(1, sortedMap0.size());
120:       assertNotNull(sortedMap0);
121:       
122:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
123:       assertNotNull(patriciaTrie2);
124:       
125:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = patriciaTrie2.get((Object) null);
126:       assertNull(abstractMap_SimpleEntry0);
127:       
128:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry1);
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
132:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
134:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
135:       assertTrue(boolean0);
136:       
137:       SortedMap<String, String> sortedMap1 = patriciaTrie0.prefixMap("|oOY|T^o");
138:       assertEquals(0, sortedMap1.size());
139:       assertTrue(sortedMap1.isEmpty());
140:       assertNotNull(sortedMap1);
141:   }
142: }
RegularFileObject[/tmp/EvoSuite_68_1634037437785/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:17 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:17.825 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "|oOY|T^o", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("|", "qpg.Kp", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

abstractPatriciaTrie_TrieEntry1.bitIndex = 223;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie");
assertNull(string0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("|oOY|T^o", (Object) null);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Object>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie");
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator3 = Map.Entry.comparingByValue();
assertFalse(comparator3.equals((Object)comparator1));
assertNotNull(comparator3);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
assertNull(abstractMap_SimpleImmutableEntry3);

Comparator<Map.Entry<Object, Integer>> comparator4 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
assertNotNull(comparator4);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("|", abstractMap_SimpleImmutableEntry2);
assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry4);

SortedMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> sortedMap0 = patriciaTrie1.headMap("|");
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertNotNull(sortedMap0);

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie2);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = patriciaTrie2.get((Object) null);
assertNull(abstractMap_SimpleEntry0);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.parent, abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(boolean0);

SortedMap<String, String> sortedMap1 = patriciaTrie0.prefixMap("|oOY|T^o");
assertEquals(0, sortedMap1.size());
assertTrue(sortedMap1.isEmpty());
assertNotNull(sortedMap1);


[MASTER] 11:17:18.370 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_80_1634037438316/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_80_1634037438316/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:18.370 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:18.370 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:18.371 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>,java.lang.String>>: 59
[MASTER] 11:17:18.371 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_80_1634037438316/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:18.371 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:18.372 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_80_1634037438316/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_80_tmp__ESTest extends AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer(0);
31:       assertNotNull(integer0);
32:       assertEquals(0, (int)integer0);
33:       
34:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("{N=v5*#;DMs", integer0);
35:       assertNotNull(abstractMap_SimpleImmutableEntry0);
36:       
37:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("Trie[", abstractMap_SimpleImmutableEntry0);
38:       assertNull(abstractMap_SimpleImmutableEntry1);
39:       
40:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
41:       assertNotNull(patriciaTrie1);
42:       
43:       String string0 = patriciaTrie1.put("", "");
44:       assertNull(string0);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", "", 202);
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", (String) null, 0);
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1019);
63:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
67:       
68:       String string1 = patriciaTrie1.put("fT-ZYajej", "");
69:       assertNull(string1);
70:       
71:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
72:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
75:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
76:       
77:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry3;
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
90:       
91:       abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
92:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
95:       
96:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
97:       assertNotNull(comparator2);
98:       
99:       String string2 = abstractPatriciaTrie_TrieEntry2.setKeyValue("zwB1%s", "");
100:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
103:       assertNotNull(string2);
104:       assertEquals("", string2);
105:       
106:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
107:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
113:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       
117:       // Undeclared exception!
118:       try { 
119:         patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
120:         fail("Expecting exception: NullPointerException");
121:       
122:       } catch(NullPointerException e) {
123:          //
124:          // no message in exception (getMessage() returned null)
125:          //
126:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
127:       }
128:   }
129: }
RegularFileObject[/tmp/EvoSuite_80_1634037438316/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:18.373 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("{N=v5*#;DMs", integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("Trie[", abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry1);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string0 = patriciaTrie1.put("", "");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", "", 202);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("zwB1%s", (String) null, 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1019);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

String string1 = patriciaTrie1.put("fT-ZYajej", "");
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());

abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

String string2 = abstractPatriciaTrie_TrieEntry2.setKeyValue("zwB1%s", "");
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string2);
assertEquals("", string2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);

[MASTER] 11:17:18.536 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_84_1634037438497/org/apache/commons/collections4/trie/AbstractPatriciaTrie_84_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_84_1634037438497/org/apache/commons/collections4/trie/AbstractPatriciaTrie_84_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:18.536 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:18.536 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:18.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 59
[MASTER] 11:17:18.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_84_1634037438497/org/apache/commons/collections4/trie/AbstractPatriciaTrie_84_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:18.537 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:18.537 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_84_1634037438497/org/apache/commons/collections4/trie/AbstractPatriciaTrie_84_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import java.util.Set;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_84_tmp__ESTest extends AbstractPatriciaTrie_84_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
33:       assertNotNull(patriciaTrie1);
34:       
35:       Set<String> set0 = patriciaTrie1.keySet();
36:       assertEquals(0, set0.size());
37:       assertTrue(set0.isEmpty());
38:       assertNotNull(set0);
39:       
40:       Integer integer0 = new Integer((-1615));
41:       assertNotNull(integer0);
42:       assertEquals((-1615), (int)integer0);
43:       
44:       Integer integer1 = patriciaTrie1.put("qIdS", integer0);
45:       assertNull(integer1);
46:       
47:       String string0 = patriciaTrie1.previousKey("");
48:       assertNull(string0);
49:       
50:       Integer integer2 = new Integer((-1615));
51:       assertTrue(integer2.equals((Object)integer0));
52:       assertNotNull(integer2);
53:       assertEquals((-1615), (int)integer2);
54:       
55:       Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
56:       assertNotNull(comparator0);
57:       
58:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator1);
60:       assertNotNull(comparator2);
61:       
62:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("qIdS", (Object) null);
63:       assertNotNull(abstractMap_SimpleEntry0);
64:       
65:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>((Integer) null, abstractMap_SimpleEntry0, 1112);
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
70:       
71:       Integer integer3 = new Integer(1112);
72:       assertFalse(integer3.equals((Object)integer2));
73:       assertFalse(integer3.equals((Object)integer0));
74:       assertNotNull(integer3);
75:       assertEquals(1112, (int)integer3);
76:       
77:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertFalse(boolean0);
82:       
83:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
84:       assertFalse(boolean1 == boolean0);
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
88:       assertTrue(boolean1);
89:       
90:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
91:       assertNotNull(patriciaTrie2);
92:       
93:       Collection<String> collection0 = patriciaTrie2.values();
94:       assertFalse(collection0.contains("qIdS"));
95:       assertNotNull(collection0);
96:       
97:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
98:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
99:       assertNotNull(patriciaTrie3);
100:       
101:       PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
102:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
103:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
104:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
105:       assertNotNull(patriciaTrie4);
106:       
107:       int int0 = patriciaTrie4.lengthInBits("");
108:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
109:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
110:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
111:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
112:       assertNotSame(patriciaTrie0, patriciaTrie3);
113:       assertNotSame(patriciaTrie0, patriciaTrie4);
114:       assertNotSame(patriciaTrie4, patriciaTrie0);
115:       assertNotSame(patriciaTrie4, patriciaTrie3);
116:       assertEquals(0, int0);
117:       
118:       Collection<Object> collection1 = patriciaTrie3.values();
119:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
120:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
121:       assertTrue(collection1.contains((-1615)));
122:       assertFalse(collection1.contains(1112));
123:       assertNotSame(patriciaTrie3, patriciaTrie0);
124:       assertNotSame(patriciaTrie3, patriciaTrie4);
125:       assertNotNull(collection1);
126:       
127:       String string1 = patriciaTrie3.lastKey();
128:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
129:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
130:       assertNotSame(patriciaTrie3, patriciaTrie0);
131:       assertNotSame(patriciaTrie3, patriciaTrie4);
132:       assertNotNull(string1);
133:       assertEquals("qIdS", string1);
134:       
135:       PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>();
136:       assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
137:       assertNotNull(patriciaTrie5);
138:       
139:       PatriciaTrie<Integer> patriciaTrie6 = new PatriciaTrie<Integer>(patriciaTrie1);
140:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie5));
141:       assertTrue(patriciaTrie6.equals((Object)patriciaTrie1));
142:       assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
143:       assertNotNull(patriciaTrie6);
144:       
145:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer2, (-1615));
146:       assertFalse(integer2.equals((Object)integer3));
147:       assertTrue(integer2.equals((Object)integer0));
148:       assertFalse(integer2.equals((Object)int0));
149:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
152:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
153:       
154:       Integer integer4 = abstractPatriciaTrie_TrieEntry1.key;
155:       assertFalse(integer4.equals((Object)int0));
156:       assertTrue(integer4.equals((Object)integer0));
157:       assertFalse(integer4.equals((Object)integer3));
158:       assertNotNull(integer4);
159:       assertEquals((-1615), (int)integer4);
160:       
161:       // Undeclared exception!
162:       try { 
163:         patriciaTrie5.get(integer4);
164:         fail("Expecting exception: ClassCastException");
165:       
166:       } catch(ClassCastException e) {
167:          //
168:          // no message in exception (getMessage() returned null)
169:          //
170:       }
171:   }
172: }
RegularFileObject[/tmp/EvoSuite_84_1634037438497/org/apache/commons/collections4/trie/AbstractPatriciaTrie_84_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_84_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_84_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_84_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_84_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:18.539 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Set<String> set0 = patriciaTrie1.keySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

Integer integer0 = new Integer((-1615));
assertNotNull(integer0);
assertEquals((-1615), (int)integer0);

Integer integer1 = patriciaTrie1.put("qIdS", integer0);
assertNull(integer1);

String string0 = patriciaTrie1.previousKey("");
assertNull(string0);

Integer integer2 = new Integer((-1615));
assertTrue(integer2.equals((Object)integer0));
assertNotNull(integer2);
assertEquals((-1615), (int)integer2);

Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("qIdS", (Object) null);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>((Integer) null, abstractMap_SimpleEntry0, 1112);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer3 = new Integer(1112);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertNotNull(integer3);
assertEquals(1112, (int)integer3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(boolean0);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isEmpty();
assertFalse(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(boolean1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

Collection<String> collection0 = patriciaTrie2.values();
assertFalse(collection0.contains("qIdS"));
assertNotNull(collection0);

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie3);

PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
assertNotNull(patriciaTrie4);

int int0 = patriciaTrie4.lengthInBits("");
assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
assertNotSame(patriciaTrie0, patriciaTrie3);
assertNotSame(patriciaTrie0, patriciaTrie4);
assertNotSame(patriciaTrie4, patriciaTrie0);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertEquals(0, int0);

Collection<Object> collection1 = patriciaTrie3.values();
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertTrue(collection1.contains((-1615)));
assertFalse(collection1.contains(1112));
assertNotSame(patriciaTrie3, patriciaTrie0);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotNull(collection1);

String string1 = patriciaTrie3.lastKey();
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertNotSame(patriciaTrie3, patriciaTrie0);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotNull(string1);
assertEquals("qIdS", string1);

PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>();
assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie5);

PatriciaTrie<Integer> patriciaTrie6 = new PatriciaTrie<Integer>(patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie5));
assertTrue(patriciaTrie6.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie6.equals((Object)patriciaTrie5));
assertNotNull(patriciaTrie6);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer2, integer2, (-1615));
assertFalse(integer2.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Integer integer4 = abstractPatriciaTrie_TrieEntry1.key;
assertFalse(integer4.equals((Object)int0));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer3));
assertNotNull(integer4);
assertEquals((-1615), (int)integer4);

patriciaTrie5.get(integer4);

[MASTER] 11:17:19.223 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1634037439159/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1634037439159/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:19.223 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.223 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.224 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.lang.Integer>>>: 71
[MASTER] 11:17:19.226 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.lang.Integer>>>: 109
[MASTER] 11:17:19.226 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_103_1634037439159/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:19.226 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:19.227 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1634037439159/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_103_tmp__ESTest extends AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
31:       assertNotNull(patriciaTrie1);
32:       
33:       String string0 = "U0.";
34:       int int0 = (-527);
35:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("x^g&:F", "x^g&:F", (-527));
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       
41:       String string1 = (String)abstractPatriciaTrie_TrieEntry0.key;
42:       assertFalse(string1.equals((Object)string0));
43:       assertNotNull(string1);
44:       assertEquals("x^g&:F", string1);
45:       
46:       Object object0 = patriciaTrie1.put("U0.", "x^g&:F");
47:       assertNull(object0);
48:       
49:       Object object1 = patriciaTrie1.put("*g-[}jxRmFl$/`y8", "x^g&:F");
50:       assertNull(object1);
51:       
52:       Object object2 = patriciaTrie1.get((Object) null);
53:       assertNull(object2);
54:       
55:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("x^g&:F", "x^g&:F", 1702);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
60:       
61:       Object object3 = abstractPatriciaTrie_TrieEntry1.setKeyValue("*g-[}jxRmFl$/`y8", patriciaTrie1);
62:       assertTrue(object3.equals((Object)string1));
63:       assertFalse(object3.equals((Object)string0));
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertNotNull(object3);
68:       assertEquals("x^g&:F", object3);
69:       
70:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
71:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>) comparator0);
72:       assertNotNull(comparator1);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("x^g&:F", "*g-[}jxRmFl$/`y8", 1702);
75:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
78:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
79:       
80:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
81:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>> comparator3 = Map.Entry.comparingByKey();
82:       assertNotNull(comparator3);
83:       
84:       abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry1;
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
94:       
95:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2.parent;
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
101:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
103:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
108:       
109:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>> comparator4 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>) comparator2);
110:       assertFalse(comparator4.equals((Object)comparator1));
111:       assertNotSame(comparator4, comparator1);
112:       assertNotNull(comparator4);
113:       
114:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
119:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
124:       
125:       Object object4 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
126:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
129:       assertNotNull(object4);
130:       
131:       patriciaTrie1.decrementSize();
132:       // Undeclared exception!
133:       try { 
134:         patriciaTrie1.subtree("", 4, 4);
135:         fail("Expecting exception: StringIndexOutOfBoundsException");
136:       
137:       } catch(StringIndexOutOfBoundsException e) {
138:       }
139:   }
140: }
RegularFileObject[/tmp/EvoSuite_103_1634037439159/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:19.228 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

String string0 = "U0.";
int int0 = (-527);
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("x^g&:F", "x^g&:F", (-527));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string1 = (String)abstractPatriciaTrie_TrieEntry0.key;
assertFalse(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("x^g&:F", string1);

Object object0 = patriciaTrie1.put("U0.", "x^g&:F");
assertNull(object0);

Object object1 = patriciaTrie1.put("*g-[}jxRmFl$/`y8", "x^g&:F");
assertNull(object1);

Object object2 = patriciaTrie1.get((Object) null);
assertNull(object2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("x^g&:F", "x^g&:F", 1702);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Object object3 = abstractPatriciaTrie_TrieEntry1.setKeyValue("*g-[}jxRmFl$/`y8", patriciaTrie1);
assertTrue(object3.equals((Object)string1));
assertFalse(object3.equals((Object)string0));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(object3);
assertEquals("x^g&:F", object3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("x^g&:F", "*g-[}jxRmFl$/`y8", 1702);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2.parent;
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>> comparator4 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, Integer>>) comparator2);
assertFalse(comparator4.equals((Object)comparator1));
assertNotSame(comparator4, comparator1);
assertNotNull(comparator4);

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Object object4 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(object4);

patriciaTrie1.decrementSize();
patriciaTrie1.subtree("", 4, 4);

[MASTER] 11:17:19.570 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1634037439532/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1634037439532/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:19.570 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.570 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.587 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 53
[MASTER] 11:17:19.587 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_109_1634037439532/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:19.587 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:19.588 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1634037439532/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_109_tmp__ESTest extends AbstractPatriciaTrie_109_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
32:       assertTrue(set0.isEmpty());
33:       assertEquals(0, set0.size());
34:       assertNotNull(set0);
35:       
36:       Integer integer0 = new Integer(2);
37:       assertNotNull(integer0);
38:       assertEquals(2, (int)integer0);
39:       
40:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
41:       assertNotNull(abstractMap_SimpleImmutableEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
44:       assertNull(abstractPatriciaTrie_TrieEntry0);
45:       
46:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
47:       assertNotNull(abstractMap_SimpleEntry0);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
51:       assertNotNull(comparator1);
52:       
53:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
54:       assertNotNull(comparator2);
55:       
56:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 2);
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
61:       
62:       abstractPatriciaTrie_TrieEntry1.key = integer0;
63:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
66:       
67:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertFalse(boolean0);
72:       
73:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
74:       assertTrue(boolean1 == boolean0);
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
78:       assertFalse(boolean1);
79:       
80:       Collection<String> collection0 = patriciaTrie0.values();
81:       assertFalse(collection0.contains("(x4eY\"oAD"));
82:       assertNotNull(collection0);
83:       
84:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
85:       assertNotNull(patriciaTrie1);
86:       
87:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("(x4eY\"oAD", 1, 0);
88:       assertNull(abstractPatriciaTrie_TrieEntry2);
89:       
90:       Object object0 = patriciaTrie1.remove((Object) "(x4eY\"oAD");
91:       assertNull(object0);
92:       
93:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
94:       assertNull(abstractPatriciaTrie_TrieEntry3);
95:       
96:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("(x4eY\"oAD", comparator1, 2);
97:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
98:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
100:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
101:       
102:       Object object1 = abstractPatriciaTrie_TrieEntry4.getKey();
103:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
106:       assertNotNull(object1);
107:       assertEquals("(x4eY\"oAD", object1);
108:       
109:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("(x4eY\"oAD", collection0);
110:       assertFalse(collection0.contains("(x4eY\"oAD"));
111:       assertNotNull(abstractMap_SimpleEntry1);
112:       
113:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>("", (Object) null);
114:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
115:       assertNotNull(abstractMap_SimpleEntry2);
116:       
117:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry2, "", 0);
118:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
119:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
123:       
124:       Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
125:       assertNotNull(comparator3);
126:       
127:       String string0 = abstractPatriciaTrie_TrieEntry5.toString();
128:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
129:       assertFalse(string0.equals((Object)object1));
130:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
131:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
133:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
134:       assertNotNull(string0);
135:       assertEquals("Entry(key==null [0], value=, parent=null, left==null [0], right=null, predecessor==null [0])", string0);
136:   }
137: }
RegularFileObject[/tmp/EvoSuite_109_1634037439532/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_109_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:19.590 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);

Integer integer0 = new Integer(2);
assertNotNull(integer0);
assertEquals(2, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 2);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.key = integer0;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean0);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
assertTrue(boolean1 == boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean1);

Collection<String> collection0 = patriciaTrie0.values();
assertFalse(collection0.contains("(x4eY\"oAD"));
assertNotNull(collection0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("(x4eY\"oAD", 1, 0);
assertNull(abstractPatriciaTrie_TrieEntry2);

Object object0 = patriciaTrie1.remove((Object) "(x4eY\"oAD");
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("(x4eY\"oAD", comparator1, 2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

Object object1 = abstractPatriciaTrie_TrieEntry4.getKey();
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(object1);
assertEquals("(x4eY\"oAD", object1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("(x4eY\"oAD", collection0);
assertFalse(collection0.contains("(x4eY\"oAD"));
assertNotNull(abstractMap_SimpleEntry1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>("", (Object) null);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertNotNull(abstractMap_SimpleEntry2);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry2, "", 0);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

String string0 = abstractPatriciaTrie_TrieEntry5.toString();
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(string0.equals((Object)object1));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
assertNotNull(string0);
assertEquals("Entry(key==null [0], value=, parent=null, left==null [0], right=null, predecessor==null [0])", string0);


[MASTER] 11:17:19.972 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_120_1634037439937/org/apache/commons/collections4/trie/AbstractPatriciaTrie_120_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_120_1634037439937/org/apache/commons/collections4/trie/AbstractPatriciaTrie_120_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:19.972 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.972 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:19.973 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 53
[MASTER] 11:17:19.973 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_120_1634037439937/org/apache/commons/collections4/trie/AbstractPatriciaTrie_120_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:19.973 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:19.974 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_120_1634037439937/org/apache/commons/collections4/trie/AbstractPatriciaTrie_120_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_120_tmp__ESTest extends AbstractPatriciaTrie_120_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
32:       assertEquals(0, set0.size());
33:       assertTrue(set0.isEmpty());
34:       assertNotNull(set0);
35:       
36:       Integer integer0 = new Integer(2);
37:       assertNotNull(integer0);
38:       assertEquals(2, (int)integer0);
39:       
40:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
41:       assertNotNull(abstractMap_SimpleImmutableEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
44:       assertNull(abstractPatriciaTrie_TrieEntry0);
45:       
46:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
47:       assertNotNull(abstractMap_SimpleEntry0);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
51:       assertNotNull(comparator1);
52:       
53:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
54:       assertNotNull(comparator2);
55:       
56:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 2);
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
61:       
62:       abstractPatriciaTrie_TrieEntry1.key = integer0;
63:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       
67:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertFalse(boolean0);
72:       
73:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
74:       assertTrue(boolean1 == boolean0);
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertFalse(boolean1);
79:       
80:       Collection<String> collection0 = patriciaTrie0.values();
81:       assertFalse(collection0.contains("(x4eY\"oAD"));
82:       assertNotNull(collection0);
83:       
84:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
85:       assertNotNull(patriciaTrie1);
86:       
87:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("(x4eY\"oAD", 1, 0);
88:       assertNull(abstractPatriciaTrie_TrieEntry2);
89:       
90:       Object object0 = patriciaTrie1.remove((Object) "(x4eY\"oAD");
91:       assertNull(object0);
92:       
93:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
94:       assertNull(abstractPatriciaTrie_TrieEntry3);
95:       
96:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("(x4eY\"oAD", comparator1, 2);
97:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
98:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
100:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
101:       
102:       Object object1 = abstractPatriciaTrie_TrieEntry4.getKey();
103:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
106:       assertNotNull(object1);
107:       assertEquals("(x4eY\"oAD", object1);
108:       
109:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("(x4eY\"oAD", collection0);
110:       assertFalse(collection0.contains(object1));
111:       assertNotNull(abstractMap_SimpleEntry1);
112:       
113:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>("", (Object) null);
114:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
115:       assertNotNull(abstractMap_SimpleEntry2);
116:       
117:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry2, "", 0);
118:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
119:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
123:       
124:       abstractPatriciaTrie_TrieEntry5.key = abstractMap_SimpleEntry1;
125:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
128:       
129:       Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
130:       assertNotNull(comparator3);
131:       
132:       String string0 = abstractPatriciaTrie_TrieEntry5.toString();
133:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
134:       assertFalse(string0.equals((Object)object1));
135:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
136:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
138:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
139:       assertNotNull(string0);
140:       assertEquals("Entry(key=(x4eY\"oAD=[] [0], value=, parent=null, left=(x4eY\"oAD=[] [0], right=null, predecessor=(x4eY\"oAD=[] [0])", string0);
141:   }
142: }
RegularFileObject[/tmp/EvoSuite_120_1634037439937/org/apache/commons/collections4/trie/AbstractPatriciaTrie_120_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_120_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_120_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_120_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_120_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:19.976 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

Integer integer0 = new Integer(2);
assertNotNull(integer0);
assertEquals(2, (int)integer0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Object>>) comparator0);
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 2);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.key = integer0;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("(x4eY\"oAD");
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean0);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
assertTrue(boolean1 == boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean1);

Collection<String> collection0 = patriciaTrie0.values();
assertFalse(collection0.contains("(x4eY\"oAD"));
assertNotNull(collection0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("(x4eY\"oAD", 1, 0);
assertNull(abstractPatriciaTrie_TrieEntry2);

Object object0 = patriciaTrie1.remove((Object) "(x4eY\"oAD");
assertNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lastEntry();
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("(x4eY\"oAD", comparator1, 2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

Object object1 = abstractPatriciaTrie_TrieEntry4.getKey();
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(object1);
assertEquals("(x4eY\"oAD", object1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>("(x4eY\"oAD", collection0);
assertFalse(collection0.contains(object1));
assertNotNull(abstractMap_SimpleEntry1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>("", (Object) null);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertNotNull(abstractMap_SimpleEntry2);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry2, "", 0);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

abstractPatriciaTrie_TrieEntry5.key = abstractMap_SimpleEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());

Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

String string0 = abstractPatriciaTrie_TrieEntry5.toString();
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(string0.equals((Object)object1));
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
assertNotNull(string0);
assertEquals("Entry(key=(x4eY\"oAD=[] [0], value=, parent=null, left=(x4eY\"oAD=[] [0], right=null, predecessor=(x4eY\"oAD=[] [0])", string0);


[MASTER] 11:17:24.161 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_171_1634037444081/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_171_1634037444081/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:24.161 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:24.161 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:24.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>,java.lang.Integer>>: 48
[MASTER] 11:17:24.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_171_1634037444081/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:24.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:24.163 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_171_1634037444081/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:24 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_171_tmp__ESTest extends AbstractPatriciaTrie_171_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Integer integer0 = new Integer(896);
32:       assertNotNull(integer0);
33:       assertEquals(896, (int)integer0);
34:       
35:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer0, 540);
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       
41:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertNotNull(abstractMap_SimpleEntry0);
46:       
47:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Integer>>) comparator0);
49:       assertNotNull(comparator1);
50:       
51:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
55:       assertNull(abstractMap_SimpleEntry1);
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
62:       
63:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
64:       assertNotNull(patriciaTrie1);
65:       
66:       Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
67:       assertEquals(0, set0.size());
68:       assertTrue(set0.isEmpty());
69:       assertNotNull(set0);
70:       
71:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
72:       assertEquals(0, hashMap0.size());
73:       assertTrue(hashMap0.isEmpty());
74:       assertNotNull(hashMap0);
75:       
76:       String string0 = hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
77:       assertEquals(1, hashMap0.size());
78:       assertFalse(hashMap0.isEmpty());
79:       assertNull(string0);
80:       
81:       String string1 = hashMap0.put("", "");
82:       assertEquals(2, hashMap0.size());
83:       assertFalse(hashMap0.isEmpty());
84:       assertNull(string1);
85:       
86:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
87:       assertEquals(2, hashMap0.size());
88:       assertFalse(hashMap0.isEmpty());
89:       assertNotNull(patriciaTrie2);
90:       
91:       String string2 = patriciaTrie2.put("Ay4Z?No=2", "");
92:       assertEquals(2, hashMap0.size());
93:       assertFalse(hashMap0.isEmpty());
94:       assertNull(string2);
95:       
96:       String string3 = patriciaTrie2.remove((Object) "");
97:       assertEquals(2, hashMap0.size());
98:       assertFalse(hashMap0.isEmpty());
99:       assertNotNull(string3);
100:       assertEquals("", string3);
101:   }
102: }
RegularFileObject[/tmp/EvoSuite_171_1634037444081/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:24 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_171_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:24.164 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(896);
assertNotNull(integer0);
assertEquals(896, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer0, 540);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Integer>>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = patriciaTrie0.put("", abstractMap_SimpleEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

String string0 = hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string0);

String string1 = hashMap0.put("", "");
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(patriciaTrie2);

String string2 = patriciaTrie2.put("Ay4Z?No=2", "");
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string2);

String string3 = patriciaTrie2.remove((Object) "");
assertEquals(2, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(string3);
assertEquals("", string3);


[MASTER] 11:17:24.611 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_184_1634037444558/org/apache/commons/collections4/trie/AbstractPatriciaTrie_184_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_184_1634037444558/org/apache/commons/collections4/trie/AbstractPatriciaTrie_184_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:24.613 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:24.613 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:24.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Object>>>: 155
[MASTER] 11:17:24.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_184_1634037444558/org/apache/commons/collections4/trie/AbstractPatriciaTrie_184_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:24.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:24.615 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_184_1634037444558/org/apache/commons/collections4/trie/AbstractPatriciaTrie_184_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:24 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_184_tmp__ESTest extends AbstractPatriciaTrie_184_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Object object0 = patriciaTrie0.put("{", "{");
31:       assertNull(object0);
32:       
33:       Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("{");
34:       assertNotNull(map_Entry0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("{", 16);
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
41:       
42:       String string0 = patriciaTrie0.firstKey();
43:       assertNotNull(string0);
44:       assertEquals("{", string0);
45:       
46:       Object object1 = patriciaTrie0.put("{", "{");
47:       assertNotNull(object1);
48:       assertEquals("{", object1);
49:       
50:       Object object2 = new Object();
51:       assertNotNull(object2);
52:       
53:       AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>>(object2, "{", 16);
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
58:       
59:       Object object3 = abstractPatriciaTrie_TrieEntry1.getValue();
60:       assertTrue(object3.equals((Object)object1));
61:       assertTrue(object3.equals((Object)string0));
62:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
65:       assertNotNull(object3);
66:       assertEquals("{", object3);
67:       
68:       Object object4 = patriciaTrie0.put("JFYQG?(qNJnCa!", "{");
69:       assertNull(object4);
70:       
71:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
72:       assertNotNull(patriciaTrie1);
73:       
74:       String string1 = patriciaTrie1.toString();
75:       assertFalse(string1.equals((Object)string0));
76:       assertFalse(string1.equals((Object)object3));
77:       assertFalse(string1.equals((Object)object1));
78:       assertNotNull(string1);
79:       assertEquals("Trie[0]={\n}\n", string1);
80:       
81:       String string2 = patriciaTrie1.put("", "The offsets and lengths must be at Character boundaries");
82:       assertNull(string2);
83:       
84:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 16);
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
89:       
90:       String string3 = abstractPatriciaTrie_TrieEntry2.setValue("{");
91:       assertFalse(string3.equals((Object)string0));
92:       assertFalse(string3.equals((Object)string1));
93:       assertFalse(string3.equals((Object)object1));
94:       assertFalse(string3.equals((Object)object3));
95:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
98:       assertNotNull(string3);
99:       assertEquals("", string3);
100:       
101:       String string4 = abstractPatriciaTrie_TrieEntry2.setValue("");
102:       assertTrue(string4.equals((Object)object1));
103:       assertFalse(string4.equals((Object)string1));
104:       assertFalse(string4.equals((Object)string3));
105:       assertTrue(string4.equals((Object)string0));
106:       assertTrue(string4.equals((Object)object3));
107:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
110:       assertNotNull(string4);
111:       assertEquals("{", string4);
112:       
113:       String string5 = abstractPatriciaTrie_TrieEntry2.setValue("The offsets and lengths must be at Character boundaries");
114:       assertFalse(string5.equals((Object)string0));
115:       assertFalse(string5.equals((Object)string1));
116:       assertFalse(string5.equals((Object)object3));
117:       assertFalse(string5.equals((Object)string4));
118:       assertTrue(string5.equals((Object)string3));
119:       assertFalse(string5.equals((Object)object1));
120:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertNotNull(string5);
124:       assertEquals("", string5);
125:       
126:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("The offsets and lengths must be at Character boundaries", "", (-1));
127:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
130:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
131:       
132:       abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
133:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
135:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
136:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
138:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
139:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
140:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
141:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
142:       
143:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
144:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
148:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
150:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
152:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
153:       
154:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
155:       Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Integer, Object>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Integer, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Integer, Object>>) comparator0);
156:       assertNotNull(comparator1);
157:       
158:       abstractPatriciaTrie_TrieEntry2.key = "org.apache.commons.collections4.trie.KeyAnalyzer";
159:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
160:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
161:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
162:       
163:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry2, 1);
164:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
165:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
167:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
168:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
169:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
170:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
171:       
172:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
173:       assertNotNull(patriciaTrie2);
174:       
175:       String string6 = patriciaTrie2.previousKey("eKu0gP@(s:Xbly[L7(");
176:       assertNull(string6);
177:       
178:       Collection<AbstractMap.SimpleEntry<Integer, Object>> collection0 = patriciaTrie2.values();
179:       assertNotNull(collection0);
180:       
181:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2.parent, abstractPatriciaTrie_TrieEntry3.right);
182:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.equals((Object)abstractPatriciaTrie_TrieEntry4));
183:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
184:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
185:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
186:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
187:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
188:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
189:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
190:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
191:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
192:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
193:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
194:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
195:       assertNotSame(abstractPatriciaTrie_TrieEntry2.parent, abstractPatriciaTrie_TrieEntry4);
196:       assertSame(abstractPatriciaTrie_TrieEntry3.right, abstractPatriciaTrie_TrieEntry4);
197:       assertNull(abstractPatriciaTrie_TrieEntry5);
198:   }
199: }
RegularFileObject[/tmp/EvoSuite_184_1634037444558/org/apache/commons/collections4/trie/AbstractPatriciaTrie_184_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:24 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_184_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_184_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_184_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_184_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 11:17:24.617 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("{", "{");
assertNull(object0);

Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("{");
assertNotNull(map_Entry0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("{", 16);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = patriciaTrie0.firstKey();
assertNotNull(string0);
assertEquals("{", string0);

Object object1 = patriciaTrie0.put("{", "{");
assertNotNull(object1);
assertEquals("{", object1);

Object object2 = new Object();
assertNotNull(object2);

AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>>(object2, "{", 16);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Object object3 = abstractPatriciaTrie_TrieEntry1.getValue();
assertTrue(object3.equals((Object)object1));
assertTrue(object3.equals((Object)string0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(object3);
assertEquals("{", object3);

Object object4 = patriciaTrie0.put("JFYQG?(qNJnCa!", "{");
assertNull(object4);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.toString();
assertFalse(string1.equals((Object)string0));
assertFalse(string1.equals((Object)object3));
assertFalse(string1.equals((Object)object1));
assertNotNull(string1);
assertEquals("Trie[0]={\n}\n", string1);

String string2 = patriciaTrie1.put("", "The offsets and lengths must be at Character boundaries");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 16);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

String string3 = abstractPatriciaTrie_TrieEntry2.setValue("{");
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)object1));
assertFalse(string3.equals((Object)object3));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string3);
assertEquals("", string3);

String string4 = abstractPatriciaTrie_TrieEntry2.setValue("");
assertTrue(string4.equals((Object)object1));
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string3));
assertTrue(string4.equals((Object)string0));
assertTrue(string4.equals((Object)object3));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string4);
assertEquals("{", string4);

String string5 = abstractPatriciaTrie_TrieEntry2.setValue("The offsets and lengths must be at Character boundaries");
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string1));
assertFalse(string5.equals((Object)object3));
assertFalse(string5.equals((Object)string4));
assertTrue(string5.equals((Object)string3));
assertFalse(string5.equals((Object)object1));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string5);
assertEquals("", string5);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("The offsets and lengths must be at Character boundaries", "", (-1));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Integer, Object>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Integer, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Integer, Object>>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry2.key = "org.apache.commons.collections4.trie.KeyAnalyzer";
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry2, 1);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie2);

String string6 = patriciaTrie2.previousKey("eKu0gP@(s:Xbly[L7(");
assertNull(string6);

Collection<AbstractMap.SimpleEntry<Integer, Object>> collection0 = patriciaTrie2.values();
assertNotNull(collection0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2.parent, abstractPatriciaTrie_TrieEntry3.right);
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.equals((Object)abstractPatriciaTrie_TrieEntry4));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry2.parent, abstractPatriciaTrie_TrieEntry4);
assertSame(abstractPatriciaTrie_TrieEntry3.right, abstractPatriciaTrie_TrieEntry4);
assertNull(abstractPatriciaTrie_TrieEntry5);


[MASTER] 11:17:25.346 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.493 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.866 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.949 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.037 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.141 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.225 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.903 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:27.073 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:27.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:27.329 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:27.410 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:27.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.566 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.631 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.815 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:28.976 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.056 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.212 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.288 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.477 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.630 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.696 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.870 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.941 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.015 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.102 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.174 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.264 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.552 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.691 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.895 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.961 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.031 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.182 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.667 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.744 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:31.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.255 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.576 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.653 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.719 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:32.936 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.010 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.081 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.166 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.228 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.453 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.604 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.696 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.808 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.996 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.237 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.316 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.404 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.555 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.639 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.903 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.221 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.298 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.467 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.545 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.743 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:35.943 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.152 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.226 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.307 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.400 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.578 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.850 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:36.943 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.003 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.107 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.174 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.423 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.704 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.795 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.886 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:37.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.061 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.167 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.331 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.667 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.755 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.850 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:38.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:39.015 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:39.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:39.159 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.462 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.611 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:41.960 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.337 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.401 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.462 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.557 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.688 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.746 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.901 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:42.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.118 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.191 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.449 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:43.530 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:48.157 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:53.038 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-opt-20/tests/5
* Done!

* Computation finished
