/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:20:58 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("}E<mSBh`]", "}E<mSBh`]");
      assertNull(object0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap((String) null, "}E<mSBh`]");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
      
      Object object1 = patriciaTrie0.put("v*#{pB},$@", "}E<mSBh`]");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("}E<mSBh`]", sortedMap0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=}E<mSBh`] [1], value={v*#{pB},$@=}E<mSBh`]}, parent=null, left=}E<mSBh`] [1], right=null, predecessor=}E<mSBh`] [1])", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("r|U1tK", "r|U1tK");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("m:t", "r|U1tK");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", "r|U1tK");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("o ^4");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("r|U1tK", "r|U1tK");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("r|U1tK", "r|U1tK");
      assertNotNull(string1);
      assertEquals("r|U1tK", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("ZbE 92PCa,0");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap((String) null, "");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
      
      Object object1 = patriciaTrie0.put("v*#{pB},$@", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", sortedMap0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key= [1], value={}, parent=null, left= [1], right=null, predecessor= [1])", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie0.put("u%uPZF,ixc{zS30iw1K", "u%uPZF,ixc{zS30iw1K");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("FY d=Q9");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("FY d=Q9", "FY d=Q9", 874);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      boolean boolean0 = patriciaTrie0.remove((Object) null, (Object) null);
      assertFalse(boolean0);
      
      Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 1945);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      String string1 = abstractPatriciaTrie_TrieEntry2.setValue("u%uPZF,ixc{zS30iw1K");
      assertNull(string1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.equals(patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<String>>(abstractPatriciaTrie_TrieEntry2, (Comparable<String>) null, 5403);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.left.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry4 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry3.getKey();
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      Object object0 = patriciaTrie1.put("", abstractPatriciaTrie_TrieEntry4);
      assertNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      String string2 = abstractPatriciaTrie_TrieEntry2.setValue("");
      assertNotNull(string2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertEquals("u%uPZF,ixc{zS30iw1K", string2);
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = 1945;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry1.right;
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Object object1 = patriciaTrie1.get((Object) null);
      assertNull(object1);
      
      int int0 = patriciaTrie1.size();
      assertEquals(1, int0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      Comparable<String> comparable0 = patriciaTrie2.getOrDefault((Object) null, "u%uPZF,ixc{zS30iw1K");
      assertNotNull(comparable0);
      assertEquals("u%uPZF,ixc{zS30iw1K", comparable0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie2.prefixMap("4.6!Hnn&xNC$#S[9d0O");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      Comparable<String> comparable1 = patriciaTrie2.put("", (Comparable<String>) null);
      assertNull(comparable1);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.getNearestEntryForKey("", 1945);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Y~N5J?cUh/C!K} ", "Y~N5J?cUh/C!K} ");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 2735);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", (-1), 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyonalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = (Object) "C<?qfSF{";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      
      String string1 = patriciaTrie0.lastKey();
      assertNull(string1);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertEquals("C<?qfSF{", object1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("The offsets and lengths must be at Character boundaries");
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      
      Object object2 = abstractPatriciaTrie_TrieEntry6.getKey();
      assertNotNull(object2);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.get(object2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("i)8L1|-T", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = patriciaTrie2.size();
      assertEquals(0, int0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("i)8L1|-T", sortedMap0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=i)8L1|-T [0], value={}, parent=null, left=i)8L1|-T [0], right=null, predecessor=i)8L1|-T [0])", string0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = null;
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("LjMt=", "LjMt=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("ROOT", (String) null);
      assertNull(string1);
      
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("5x+");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = patriciaTrie1.computeIfPresent("LjMt=", biFunction0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("5x+", 937, 937);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("HEh)o", object0, 2233);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("HEh)o", "HEh)o", 2233);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("f");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("f");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      Integer integer0 = new Integer(2298);
      assertNotNull(integer0);
      assertEquals(2298, (int)integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("Trie[", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>(abstractPatriciaTrie_TrieEntry0, abstractMap_SimpleImmutableEntry0, 2233);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>(abstractPatriciaTrie_TrieEntry3, abstractMap_SimpleImmutableEntry0, 2233);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry4));
      
      abstractPatriciaTrie_TrieEntry5.parent = abstractPatriciaTrie_TrieEntry6;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry5.toString();
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer1 = new Integer((-1500));
      assertNotNull(integer1);
      assertEquals((-1500), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer1, abstractPatriciaTrie_TrieEntry5.parent, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry7.toString();
      assertNotNull(string1);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertEquals("Entry(key=-1500 [1], value=Entry(key=Entry(key=HEh)o [2233], value=HEh)o, parent=null, left=HEh)o [2233], right=HEh)o [2233], predecessor=HEh)o [2233]) [2233], value=Trie[=2298, parent=null, left=Entry(key=HEh)o [2233], value=HEh)o, parent=null, left=HEh)o [2233], right=HEh)o [2233], predecessor=HEh)o [2233]) [2233], right=null, predecessor=Entry(key=HEh)o [2233], value=HEh)o, parent=null, left=HEh)o [2233], right=HEh)o [2233], predecessor=HEh)o [2233]) [2233]), parent=null, left=-1500 [1], right=null, predecessor=-1500 [1])", string1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap((String) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap1);
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotSame(sortedMap1, sortedMap0);
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", sortedMap0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0], value={}, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0])", string0);
      assertNotSame(sortedMap0, sortedMap1);
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", patriciaTrie0);
      assertNotNull(object0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(sortedMap0, sortedMap1);
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotSame(sortedMap0, sortedMap1);
      assertTrue(sortedMap0.equals((Object)sortedMap1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.put("", (String) null);
      assertNull(string1);
      
      String string2 = "qu^[HIk";
      int int1 = 3645;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qu^[HIk", patriciaTrie0, 3645);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry3;
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, String>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0], value={}, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator [0])", "ToKey is out of range: ", (-268));
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry4);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry7 = patriciaTrie2.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry7);
      
      OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Integer>> orderedMapIterator0 = patriciaTrie2.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("riUMt=", "riUMt=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "riUMt=");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("_Z5k%!MaO)Hg:)'}i5", "3tlV@auysJGKG<v`,", (-522));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("M$8r.b1;M?h2Q");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("riUMt=", (-522), (-522));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("'BwN!a^-(y#-OT-{8", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("'BwN!a^-(y#-OT-{8");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("riUMt=", "riUMt=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "riUMt=");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("riUMt=", (Object) null);
      assertNotNull(object0);
      assertEquals("riUMt=", object0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree("riUMt=", 48, 48);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      String string1 = "The offsets and lengths must be at Character boundaries";
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("By$+<,OY=_S3v4K}", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 40);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry(string1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 96);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 8);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractPatriciaTrie_TrieEntry2);
      assertNull(object0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = patriciaTrie0.put("FkZSq", integer0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(")");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("FkZSq", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer integer1 = abstractMap_SimpleEntry0.setValue(integer0);
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>("FkZSq", abstractMap_SimpleEntry0, (-2742));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      assertSame(comparator1, comparator0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertEquals("FkZSq", object1);
      
      Object object2 = patriciaTrie0.put(")", "FkZSq");
      assertNull(object2);
      
      Integer integer2 = new Integer((-2742));
      assertNotNull(integer2);
      assertEquals((-2742), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Object object3 = patriciaTrie0.put("FkZSq", integer2);
      assertNotNull(object3);
      assertEquals((-1), object3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object3.equals((Object)integer2));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Object object4 = patriciaTrie1.replace((String) null, (Object) null);
      assertNull(object4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.getEntry(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap((String) null, "");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", sortedMap0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", ">e+/", (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key= [0], value={}, parent=null, left= [0], right=ROOT, predecessor= [0])", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "{i$k0)I/_%v?iQu*3}", (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.key = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "{i$k0)I/_%v?iQu*3}", (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
      assertNotNull(comparator2);
      
      Comparator<Map.Entry<Object, Integer>> comparator3 = Map.Entry.comparingByValue();
      assertNotNull(comparator3);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      Comparator<Map.Entry<String, Object>> comparator4 = Map.Entry.comparingByKey();
      assertNotNull(comparator4);
      assertSame(comparator4, comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("px*_)wW[RBAQ^bLSl`n", integer0, (-1352));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("riht=", "riht=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.get("riht=");
      assertNotNull(string1);
      assertEquals("riht=", string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>((Object) null, (AbstractMap.SimpleEntry<Object, Object>) null, (-869));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>((Object) null, (AbstractMap.SimpleEntry<Object, Object>) null, (-869));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string2 = patriciaTrie1.selectValue("ta`rZ3?r5##&HkG`$+I");
      assertNull(string2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("ri&J", "ri&J");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, 784, 784);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = null;
      patriciaTrie0.decrementSize();
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("The offsets and lengths must be at Character boundaries", (String) null);
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, 1097, 1097);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry";
      int int0 = (-856);
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", abstractPatriciaTrie_TrieEntry0);
      assertNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      
      Object object1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(object2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertEquals(4875, object2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      boolean boolean1 = AbstractBitwiseTrie.compare(abstractPatriciaTrie_TrieEntry4, "keyAnalyzer");
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertTrue(boolean1 == boolean0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      
      SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("");
      assertNotNull(sortedMap1);
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("  ", (Integer) null);
      assertNull(integer0);
      
      Integer integer1 = new Integer(1955);
      assertNotNull(integer1);
      assertEquals(1955, (int)integer1);
      
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, (-136));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1879));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer2 = new Integer((-2081));
      assertNotNull(integer2);
      assertEquals((-2081), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = abstractPatriciaTrie_TrieEntry0.setValue(integer2);
      assertNotNull(integer3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals(1955, (int)integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer1.equals((Object)integer2));
      
      Integer integer4 = new Integer(1955);
      assertNotNull(integer4);
      assertEquals(1955, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = patriciaTrie0.put(">du/})67,k#IXC7G", integer4);
      assertNull(integer5);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Fv^jI;cUKp28jUzQ", integer0, (-3484));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Integer integer1 = new Integer((-3484));
      assertNotNull(integer1);
      assertEquals((-3484), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      patriciaTrie0.modCount = (-3484);
      Integer integer2 = patriciaTrie0.put("", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-1748);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1569;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer3 = new Integer((-1748));
      assertNotNull(integer3);
      assertEquals((-1748), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie0.put("", integer3);
      assertNotNull(integer4);
      assertEquals((-3484), (int)integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      abstractPatriciaTrie_TrieEntry0.value = integer0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=Fv^jI;cUKp28jUzQ [1569], value=-1, parent=null, left=null, right=null, )", string0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer3));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = patriciaTrie0.put("}\n", "}\n");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("value=", "value=");
      assertNull(string1);
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertSame(set1, set0);
      assertTrue(set1.contains("}\n"));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-7));
      assertNotNull(integer2);
      assertEquals((-7), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie0.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("", (-2560), 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(3876);
      assertNotNull(integer1);
      assertEquals(3876, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("[ `%kb&]{ [j_%Z>tZ]", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      String string0 = patriciaTrie0.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  Entry(key=[ `%kb&]{ [j_%Z>tZ] [9], value=3876, parent=ROOT, left=ROOT, right=[ `%kb&]{ [j_%Z>tZ] [9], predecessor=[ `%kb&]{ [j_%Z>tZ] [9])\n}\n", string0);
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[1]={\n  Entry(key=[ `%kb&]{ [j_%Z>tZ] [9], value=3876, parent=ROOT, left=ROOT, right=[ `%kb&]{ [j_%Z>tZ] [9], predecessor=[ `%kb&]{ [j_%Z>tZ] [9])\n}\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie2.firstKey();
      assertNotNull(string2);
      assertEquals("[ `%kb&]{ [j_%Z>tZ]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree(" > ", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 8);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertEquals(4875, object1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.toString();
      assertNotNull(string1);
      assertEquals("Trie[0]={\n}\n", string1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie0, abstractMap_SimpleEntry0, 12);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertTrue(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertTrue(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry4));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("ri&J", "ri&J");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("O={#q8XG h3W", "ri&J");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.subtree(" > ", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie0.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree(" > ", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("right=", "right=");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>((Object) null, (AbstractMap.SimpleEntry<Object, Object>) null, (-905));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>((Object) null, (AbstractMap.SimpleEntry<Object, Object>) null, (-801));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(collection0.contains(""));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.remove((Object) "");
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string1);
      
      String string2 = "vlHL@(p3PZ,Zl-+";
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("parent=", "", (-155));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("\"<`CHN9GffwR$4H");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Trie[");
      assertNull(string3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string4 = patriciaTrie0.merge("w.2;*]O+@l:e", "w.2;*]O+@l:e", biFunction0);
      assertNotNull(string4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("w.2;*]O+@l:e", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "Cannot determine prefix outside of Character boundaries");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyString() , any());
      String string2 = patriciaTrie0.compute("H^E/k5'x", biFunction0);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("t;m&:LLu", (Object) null, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-2373));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("H^E/k5'x");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      String string3 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator";
      Integer integer0 = new Integer((-328));
      assertNotNull(integer0);
      assertEquals((-328), (int)integer0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyString() , any());
      String string2 = patriciaTrie0.compute("H^E/k5'x", biFunction0);
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("keyAnalyzer", "");
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("Trie[", 2, 136);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("riUMt=", "riUMt=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("pJgUBj`EVf8tL~~", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 1097);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("riht=", "riht=");
      assertNull(string0);
      
      Integer integer0 = new Integer((-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie3.put("o?# >IUBlc%u:R+", integer1);
      assertNull(integer2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      String string1 = patriciaTrie2.toString();
      assertNotNull(string1);
      assertEquals("Trie[0]={\n}\n", string1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      String string2 = patriciaTrie3.toString();
      assertNotNull(string2);
      assertEquals("Trie[1]={\n  Entry(key=o?# >IUBlc%u:R+ [9], value=-1, parent=ROOT, left=ROOT, right=o?# >IUBlc%u:R+ [9], predecessor=o?# >IUBlc%u:R+ [9])\n}\n", string2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(string2.equals((Object)string1));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.subtree("Trie[1]={\n  Entry(key=o?# >IUBlc%u:R+ [9], value=-1, parent=ROOT, left=ROOT, right=o?# >IUBlc%u:R+ [9], predecessor=o?# >IUBlc%u:R+ [9])\n}\n", (-1), 1024);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("uX7n/FG", integer0);
      assertNull(integer1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(5);
      assertNotNull(integer2);
      assertEquals(5, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("uX7n/FG", integer2);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer4 = new Integer(6);
      assertNotNull(integer4);
      assertEquals(6, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      String string0 = patriciaTrie1.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  Entry(key=uX7n/FG [9], value=5, parent=ROOT, left=ROOT, right=uX7n/FG [9], predecessor=uX7n/FG [9])\n}\n", string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.toString();
      assertNotNull(string1);
      assertEquals("Trie[1]={\n  Entry(key=uX7n/FG [9], value=5, parent=ROOT, left=ROOT, right=uX7n/FG [9], predecessor=uX7n/FG [9])\n}\n", string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree("Trie[1]={\n  Entry(key=uX7n/FG [9], value=5, parent=ROOT, left=ROOT, right=uX7n/FG [9], predecessor=uX7n/FG [9])\n}\n", (-984), 304);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie1.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[0]={\n}\n", string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string1.equals((Object)string0));
      
      Integer integer3 = new Integer((-3));
      assertNotNull(integer3);
      assertEquals((-3), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.putIfAbsent("6kC=5Q=WmwOWb [6hFb", integer3);
      assertNull(integer4);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry(",oAvZ~;Au`Q?");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(1115);
      assertNotNull(integer0);
      assertEquals(1115, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("c)|3>", integer0, 1115);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      String string0 = patriciaTrie1.toString();
      assertNotNull(string0);
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=1, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie0.toString();
      assertNotNull(string1);
      assertEquals("Trie[0]={\n}\n", string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string1.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", 1, 0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 15);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Map<String, String> map0 = null;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("Cannot determine prefix outside of Character boundaries", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 4875);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie2 = null;
      try {
        patriciaTrie2 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1316));
      assertNotNull(integer0);
      assertEquals((-1316), (int)integer0);
      
      Object object0 = patriciaTrie0.put("null", integer0);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("*'J6B^B\"w;_~", "");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", "");
      assertNull(object2);
      
      Integer integer1 = new Integer(3886);
      assertNotNull(integer1);
      assertEquals(3886, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1115);
      assertNotNull(integer2);
      assertEquals(1115, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer1, integer2, (-1316));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Object object3 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertNotNull(object3);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals(1115, object3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object3.equals((Object)integer1));
      assertFalse(object3.equals((Object)integer0));
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object4 = new Object();
      assertNotNull(object4);
      
      Object object5 = patriciaTrie0.selectValue("");
      assertNotNull(object5);
      assertEquals("", object5);
      
      Object object6 = patriciaTrie0.selectValue("*'J6B^B\"w;_~");
      assertNotNull(object6);
      assertEquals("", object6);
      assertTrue(object6.equals((Object)object5));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.previousKey("null");
      assertNotNull(string0);
      assertEquals("*'J6B^B\"w;_~", string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string0.equals((Object)object6));
      assertFalse(string0.equals((Object)object5));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("kKo1");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-1316));
      assertNotNull(integer0);
      assertEquals((-1316), (int)integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer((-1316));
      assertNotNull(integer1);
      assertEquals((-1316), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = patriciaTrie1.put("", integer1);
      assertNull(object0);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object1 = patriciaTrie1.put("", (Object) null);
      assertNotNull(object1);
      assertEquals((-1316), object1);
      assertTrue(object1.equals((Object)integer0));
      
      Object object2 = patriciaTrie1.put("", "");
      assertNull(object2);
      
      Object object3 = patriciaTrie1.put("w;R0@_U6EFn^]DIi", integer0);
      assertNull(object3);
      assertTrue(integer0.equals((Object)object1));
      assertTrue(integer0.equals((Object)integer1));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object4 = patriciaTrie1.compute("tmUeYyyr Kd", biFunction0);
      assertNull(object4);
      
      Object object5 = patriciaTrie1.selectValue("");
      assertNotNull(object5);
      assertEquals("", object5);
      
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyonalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = (Object) "C<?qfSF{";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals("C<?qfSF{", object1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("The offsets and lengths must be at Character boundaries");
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(abstractMap_SimpleImmutableEntry0, integer0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      
      Object object2 = abstractPatriciaTrie_TrieEntry6.getKey();
      assertNotNull(object2);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.get(object2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1316));
      assertNotNull(integer0);
      assertEquals((-1316), (int)integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer((-1316));
      assertNotNull(integer1);
      assertEquals((-1316), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object0 = patriciaTrie1.put("", integer1);
      assertNull(object0);
      assertTrue(integer1.equals((Object)integer0));
      
      Object object1 = patriciaTrie1.put("", (Object) null);
      assertNotNull(object1);
      assertEquals((-1316), object1);
      assertTrue(object1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1316));
      assertNotNull(integer2);
      assertEquals((-1316), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      
      Object object2 = patriciaTrie1.put("", integer2);
      assertNull(object2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object3 = patriciaTrie2.compute("", biFunction0);
      assertNull(object3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Object object4 = patriciaTrie3.selectValue(".vtBboLM}!aXIV;");
      assertNull(object4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie4.previousKey("");
      assertNull(string0);
      assertNotSame(patriciaTrie1, patriciaTrie4);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie1);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "&wjYe=2");
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("}\n");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1316));
      assertNotNull(integer0);
      assertEquals((-1316), (int)integer0);
      
      Object object0 = patriciaTrie0.put("null", integer0);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("*'J6B^B\"w;_~", "");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", "");
      assertNull(object2);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object3 = patriciaTrie0.compute("", biFunction0);
      assertNull(object3);
      
      String string0 = patriciaTrie0.toString();
      assertNotNull(string0);
      assertEquals("Trie[2]={\n  Entry(key=*'J6B^B\"w;_~ [10], value=, parent=null [9], left=ROOT, right=*'J6B^B\"w;_~ [10], predecessor=*'J6B^B\"w;_~ [10])\n  Entry(key=null [9], value=-1316, parent=ROOT, left=*'J6B^B\"w;_~ [10], right=null [9], predecessor=null [9])\n}\n", string0);
      
      Object object4 = patriciaTrie0.selectValue("");
      assertNotNull(object4);
      assertEquals("", object4);
      assertFalse(object4.equals((Object)string0));
      
      String string1 = patriciaTrie0.previousKey(";DBLKx");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(880);
      assertNotNull(integer0);
      assertEquals(880, (int)integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer1 = patriciaTrie2.put("}", integer0);
      assertNull(integer1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      patriciaTrie2.incrementSize();
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer2 = patriciaTrie2.put("Y~N5J2?cUh/C!K} ", integer0);
      assertNull(integer2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie2.toString();
      assertNotNull(string0);
      assertEquals("Trie[3]={\n  Entry(key=Y~N5J2?cUh/C!K}  [10], value=880, parent=} [9], left=Y~N5J2?cUh/C!K}  [10], right=} [9], predecessor=Y~N5J2?cUh/C!K}  [10])\n  Entry(key=} [9], value=880, parent=ROOT, left=ROOT, right=Y~N5J2?cUh/C!K}  [10], predecessor=Y~N5J2?cUh/C!K}  [10])\n}\n", string0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("right=", "right=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("=", "=");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("\u0002lvTsWfn>zE", (String) null);
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectValue("");
      assertNull(string3);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("iTft6|yY!;AG");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("/Y+_w1an_H_&ghe~!5", "2");
      assertNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-1325));
      assertNotNull(integer0);
      assertEquals((-1325), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("H^E/k5'x", integer0, 687);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer1 = new Integer((-2315));
      assertNotNull(integer1);
      assertEquals((-2315), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      String string3 = patriciaTrie0.put("Q!D9]*", "3TgMl({>5");
      assertNull(string3);
      
      String string4 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("  ", (Integer) null);
      assertNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("4x\"zl))8w+#RZ2IG`XX", (Integer) null);
      assertNull(integer1);
      
      Integer integer2 = new Integer(1955);
      assertNotNull(integer2);
      assertEquals(1955, (int)integer2);
      
      patriciaTrie0.incrementSize();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("w;D");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("!VF5", "");
      assertNull(string1);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = patriciaTrie0.computeIfPresent((String) null, biFunction0);
      assertNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      String string3 = patriciaTrie0.put(",P`;LAx", "5:d(");
      assertNull(string3);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("Aqk+#ij df]ZB{~u<");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie2.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie0.put("L@N#KrqOI}]Ag/0+", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.floorEntry("B!K?TYuL/'h]wxAsJE");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie5.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie5, patriciaTrie0);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie4.lowerEntry("H^E/k5'x");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries", 2340);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.higherEntry("m");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie0.put("m", "m");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string1);
      assertEquals("m", string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie0.put("", "Cannot determine prefix outside of Character boundaries");
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie3.lowerEntry("m");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1316));
      assertNotNull(integer0);
      assertEquals((-1316), (int)integer0);
      
      Object object0 = patriciaTrie0.put("null", integer0);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("*'J6B^B\"w;_~", "");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", "");
      assertNull(object2);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object3 = patriciaTrie0.compute("", biFunction0);
      assertNull(object3);
      
      Object object4 = patriciaTrie0.selectValue("");
      assertNotNull(object4);
      assertEquals("", object4);
      
      String string0 = patriciaTrie0.previousKey(";DBLKx");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.bitIndex("QE", "QE");
      assertEquals((-2), int0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("(WA[<pOE*YU-YZVNbP", "Cannot determine prefix outside of Character boundaries");
      assertNull(string0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie0.decrementSize();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      boolean boolean0 = patriciaTrie1.isBitSet("Cannot determine prefix outside of Character boundaries", (-1), (-397));
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.getNearestEntryForKey("(WA[<pOE*YU-YZVNbP", 511);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.put("jIN", (String) null);
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.remove((Object) "Key cannot be null");
      assertNull(string2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-397));
      assertNotNull(integer1);
      assertEquals((-397), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(integer0, abstractMap_SimpleImmutableEntry0, 511);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      String string3 = abstractPatriciaTrie_TrieEntry3.toString();
      assertNotNull(string3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertEquals("Entry(key=-1 [511], value=-1=-397, parent=null, left=-1 [511], right=null, predecessor=-1 [511])", string3);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string2 = patriciaTrie0.compute("H^E/k5'x", biFunction0);
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("/Y+_w1an_H_&ghe~!5", "2");
      assertNull(string3);
      
      String string4 = patriciaTrie0.put("keyAnalyzer", "");
      assertNull(string4);
      
      String string5 = patriciaTrie0.selectValue("keyAnalyzer");
      assertNotNull(string5);
      assertEquals("", string5);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("ri&J", "ri&J");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("O={#q8XG h3W", "ri&J");
      assertNull(string1);
      
      boolean boolean0 = patriciaTrie0.replace("ri&J", (String) null, "O={#q8XG h3W");
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("ri&J", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("DLu[Zv#.zTH3ynUu(", integer0, 224);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer1 = patriciaTrie0.put("DLu[Zv#.zTH3ynUu(", integer0);
      assertNull(integer1);
      
      String string0 = patriciaTrie0.firstKey();
      assertNotNull(string0);
      assertEquals("DLu[Zv#.zTH3ynUu(", string0);
      
      Integer integer2 = new Integer(3726);
      assertNotNull(integer2);
      assertEquals(3726, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie0.containsKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.remove((Object) "?eS<3B%");
      assertNull(object0);
      
      OrderedMapIterator<String, Object> orderedMapIterator1 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator1);
      assertTrue(orderedMapIterator1.hasNext());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      String string1 = patriciaTrie1.firstKey();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"));
      assertTrue(set0.contains(string0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      int int0 = (-970);
      Integer integer4 = new Integer(3726);
      assertNotNull(integer4);
      assertEquals(3726, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      
      Integer integer5 = patriciaTrie0.put("", integer4);
      assertNotNull(integer5);
      assertEquals(3726, (int)integer5);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-970));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      Integer integer6 = new Integer(2);
      assertNotNull(integer6);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      
      Integer integer7 = patriciaTrie0.put("Kf~U@^C!yynFn", integer6);
      assertNull(integer7);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      
      // Undeclared exception!
      try { 
        patriciaTrie2.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = patriciaTrie0.remove((Object) "");
      assertNotNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap((String) null);
      assertNotNull(sortedMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(80);
      assertNotNull(integer0);
      assertEquals(80, (int)integer0);
      
      boolean boolean0 = patriciaTrie0.replace("", integer0, integer0);
      assertFalse(boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("", 3711, 32768);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.size();
      assertEquals(0, int0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("`-k%ixc`W7dl9VAAE:", "`-k%ixc`W7dl9VAAE:", 20);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string1);
      
      String string2 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string2);
      assertEquals("B]|gt%},hVs0Eb", string2);
      
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      Integer integer1 = new Integer(2662);
      assertNotNull(integer1);
      assertEquals(2662, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, 2457);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      Object object0 = patriciaTrie2.selectValue("B]|gt%},hVs0Eb");
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("B]|gt%},hVs0Eb"));
      
      patriciaTrie2.incrementSize();
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object object1 = patriciaTrie2.put("B]|gt%},hVs0Eb", integer0);
      assertNull(object1);
      
      String string0 = patriciaTrie2.lastKey();
      assertNotNull(string0);
      assertEquals("B]|gt%},hVs0Eb", string0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie3.subMap((String) null, "");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie4.put("=qp)cs6A];", integer1);
      assertNull(integer2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie3.selectValue("B]|gt%},hVs0Eb");
      assertNull(integer3);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      
      Integer integer4 = new Integer(1);
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      
      String string1 = patriciaTrie1.get("B]|gt%},hVs0Eb");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("right=", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("right=", "right=");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = patriciaTrie0.put("", "s:r");
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectValue("");
      assertNotNull(string3);
      assertEquals("s:r", string3);
      assertFalse(string3.equals((Object)string1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(collection0.contains(""));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put((String) null, "");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string2 = hashMap0.remove((Object) "");
      assertNotNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string2);
      
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string3 = patriciaTrie0.put("U.,+OY)", (String) null);
      assertNull(string3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      hashMap0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Trie[");
      assertNull(string4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("right=", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("right=", "right=");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = patriciaTrie0.put("", "s:r");
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectValue("9#0,aEV");
      assertNotNull(string3);
      assertEquals("s:r", string3);
      assertFalse(string3.equals((Object)string1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer((-2338));
      assertNotNull(integer0);
      assertEquals((-2338), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, (String) null, (-2338));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Integer integer1 = new Integer(979);
      assertNotNull(integer1);
      assertEquals(979, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      abstractPatriciaTrie_TrieEntry1.key = integer1;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string4 = abstractPatriciaTrie_TrieEntry1.toString();
      assertNotNull(string4);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals("Entry(key=979 [-2338], value=null, parent=null, left=979 [-2338], right=null, predecessor=979 [-2338])", string4);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("/Y+_w1an_H_&ghe~!5", "\n");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string4 = patriciaTrie1.firstKey();
      assertNotNull(string4);
      assertEquals("", string4);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("iD:"));
      assertTrue(collection0.contains(""));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      
      Comparator<? super String> comparator0 = patriciaTrie3.comparator();
      assertNotNull(comparator0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("H^E/k5'x");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = "*}[P()`u*IkK!D";
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.headMap("*}[P()`u*IkK!D");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      
      Object object0 = patriciaTrie1.put("", patriciaTrie0);
      assertNull(object0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Entry(", "Entry(");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", "Entry(");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("", "Entry(");
      assertNotNull(string3);
      assertEquals("Entry(", string3);
      
      String string4 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string4);
      
      String string5 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string5);
      assertEquals("B]|gt%},hVs0Eb", string5);
      assertFalse(string5.equals((Object)string3));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitIndex("", "");
      assertEquals((-1), int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("}\n", (-2890));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object0 = patriciaTrie0.selectValue("");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.putIfAbsent("=", "=");
      assertNull(object1);
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("=");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      int int1 = patriciaTrie0.size();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, (-2890));
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertEquals("Entry(key=0 [-2890], value=-1, parent=null, left=0 [-2890], right=null, predecessor=0 [-2890])", string0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(1296);
      assertNotNull(integer0);
      assertEquals(1296, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1296);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      patriciaTrie2.modCount = 136;
      Object object0 = patriciaTrie2.selectValue("B]|gt%},hVs0Eb");
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("B]|gt%},hVs0Eb"));
      
      Object object1 = patriciaTrie2.put("=qp)cs6A];", (Object) null);
      assertNull(object1);
      
      patriciaTrie2.incrementSize();
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object2 = patriciaTrie2.put("B]|gt%},hVs0Eb", integer1);
      assertNull(object2);
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = patriciaTrie2.lastKey();
      assertNotNull(string0);
      assertEquals("B]|gt%},hVs0Eb", string0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie4.put("=qp)cs6A];", integer2);
      assertNull(integer3);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      
      Integer integer4 = patriciaTrie3.selectValue("B]|gt%},hVs0Eb");
      assertNull(integer4);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      Integer integer5 = patriciaTrie3.remove((Object) null);
      assertNull(integer5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.getNearestEntryForKey("B]|gt%},hVs0Eb", 1296);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("C<?qfSF{", 4875, 4);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertNotNull(object1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals(4875, object1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry4.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(boolean1 == boolean0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      
      SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("");
      assertNotNull(sortedMap1);
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.modCount = 136;
      Object object0 = patriciaTrie2.selectValue("B]|gt%},hVs0Eb");
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("B]|gt%},hVs0Eb"));
      
      Object object1 = patriciaTrie2.put("=qp)cs6A];", (Object) null);
      assertNull(object1);
      
      patriciaTrie2.incrementSize();
      Integer integer0 = new Integer(138);
      assertNotNull(integer0);
      assertEquals(138, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("bkr7t+");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object2 = patriciaTrie2.put("B]|gt%},hVs0Eb", integer0);
      assertNull(object2);
      
      String string0 = patriciaTrie2.lastKey();
      assertNotNull(string0);
      assertEquals("B]|gt%},hVs0Eb", string0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string1 = patriciaTrie1.put("=qp)cs6A];", "=qp)cs6A];");
      assertNull(string1);
      
      boolean boolean0 = patriciaTrie1.containsKey((Object) null);
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie5);
      assertFalse(patriciaTrie5.equals((Object)patriciaTrie2));
      
      // Undeclared exception!
      try { 
        patriciaTrie2.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = patriciaTrie1.put("", (Integer) null);
      assertNull(integer0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      Integer integer1 = new Integer((-2));
      assertNotNull(integer1);
      assertEquals((-2), (int)integer1);
      
      Integer integer2 = new Integer(368);
      assertNotNull(integer2);
      assertEquals(368, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = patriciaTrie1.put("", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer4 = new Integer(3450);
      assertNotNull(integer4);
      assertEquals(3450, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer integer5 = new Integer(3450);
      assertNotNull(integer5);
      assertEquals(3450, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = patriciaTrie1.put("XXO\"ds)P", integer5);
      assertNull(integer6);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer7 = new Integer(3450);
      assertNotNull(integer7);
      assertEquals(3450, (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      
      Integer integer8 = patriciaTrie1.put("XXO\"ds)P", (Integer) null);
      assertNotNull(integer8);
      assertEquals(3450, (int)integer8);
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer4));
      
      String string0 = patriciaTrie1.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
      assertNull(string0);
      
      String string1 = patriciaTrie1.nextKey("XXO\"ds)P");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      Integer integer0 = new Integer((-457));
      assertNotNull(integer0);
      assertEquals((-457), (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-457));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.put("", "");
      assertNull(string2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = patriciaTrie1.selectValue("iD:");
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      String string4 = patriciaTrie2.selectKey("H^E/k5'x");
      assertNotNull(string4);
      assertEquals("H^E/k5'x", string4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(string4.equals((Object)string3));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("yPIIsrsi3'<WYj4dB*");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer((-300));
      assertNotNull(integer0);
      assertEquals((-300), (int)integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("UK +D+~:B~hOKgk", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, String>(abstractMap_SimpleImmutableEntry0, "UK +D+~:B~hOKgk", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.setValue("UK +D+~:B~hOKgk");
      assertNotNull(string0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("UK +D+~:B~hOKgk", string0);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=UK +D+~:B~hOKgk=-300 [0], value=UK +D+~:B~hOKgk, parent=null, left=UK +D+~:B~hOKgk=-300 [0], right=null, predecessor=UK +D+~:B~hOKgk=-300 [0])", string1);
      assertFalse(string1.equals((Object)string0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "k");
      assertNull(string2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string3 = patriciaTrie1.selectValue("-2Uhux4|6");
      assertNotNull(string3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("k", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("UK +D+~:B~hOKgk");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("<{`G^8RPv?4", ", ");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("<{`G^8RPv?4", ", ");
      assertNotNull(string1);
      assertEquals(", ", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string2 = patriciaTrie0.lastKey();
      assertNotNull(string2);
      assertEquals("<{`G^8RPv?4", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = patriciaTrie0.put("*|s%|++M]]ln", (String) null);
      assertNull(string3);
      
      Integer integer0 = new Integer(647);
      assertNotNull(integer0);
      assertEquals(647, (int)integer0);
      
      boolean boolean0 = patriciaTrie0.containsKey("Trie[");
      assertFalse(boolean0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap(",X?0rM`4nQ^s|F", "PfA7");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Entry(", "Entry(");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = "Trie[";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("FF36='w");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string3 = patriciaTrie0.put("dZTc0QN[4<hT[", "99");
      assertNull(string3);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = "";
      String string1 = hashMap0.put("", "");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(collection0.contains(""));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = hashMap0.remove((Object) "");
      assertNotNull(string2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Trie[");
      assertNull(string3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "Cannot determine prefix outside of Character boundaries");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectKey("");
      assertNull(string0);
      
      Integer integer0 = new Integer(4875);
      assertNotNull(integer0);
      assertEquals(4875, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer0, 4);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (Object) null);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals(4875, object1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("The offsets and lengths must be at Character boundaries", (String) null, 4875);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(boolean1 == boolean0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("");
      assertNotNull(sortedMap0);
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      
      SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("irY3$s5q_c~TU");
      assertNotNull(sortedMap1);
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = "";
      String string1 = patriciaTrie1.put("", "");
      assertNull(string1);
      
      int int0 = (-1015);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-1015));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie1.merge((String) null, "org.apache.commons.collections4.trie.PatriciaTrie", biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Integer integer0 = new Integer((-5076));
      assertNotNull(integer0);
      assertEquals((-5076), (int)integer0);
      
      Integer integer1 = new Integer((-5076));
      assertNotNull(integer1);
      assertEquals((-5076), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey("LDO]j]\"z~My");
      assertNull(string0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>("{II!T", abstractMap_SimpleImmutableEntry1, 32);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "{II!T");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, String>(abstractMap_SimpleEntry0, (String) null, 2484);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer2 = patriciaTrie0.remove((Object) null);
      assertNull(integer2);
      
      Integer integer3 = new Integer((-1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-1));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.put("zWXWrbB#B?", (String) null);
      assertNull(string1);
      
      String string2 = patriciaTrie1.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      assertNull(string2);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.lowerEntry("{II!T");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("XKnP&", (Integer) null);
      assertNull(integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "XKnP&", 4875);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 3450);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("XXO\"ds)P");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      Object object0 = patriciaTrie1.put("BfPdZyj#oHCJTf6%{ {", "delegate");
      assertNull(object0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(boolean1 == boolean0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie3.headMap("delegate");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("/Y+_w1an_H_&ghe~!5", "\n");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string3);
      
      String string4 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string4);
      assertEquals("B]|gt%},hVs0Eb", string4);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("<xCAF/n?bVnK", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("", "");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(160);
      assertNotNull(integer0);
      assertEquals(160, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 160);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals(160, object0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put(";Aq .%F_Oh+Hk&S@", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = patriciaTrie0.selectKey("");
      assertNotNull(string0);
      assertEquals(";Aq .%F_Oh+Hk&S@", string0);
      
      Integer integer1 = new Integer((-177));
      assertNotNull(integer1);
      assertEquals((-177), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "/HEm+@GWzxj!'2sh%", (-177));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractMap_SimpleEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry3 = patriciaTrie0.put(";Aq .%F_Oh+Hk&S@", abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry2);
      assertSame(abstractMap_SimpleEntry3, abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      
      Map.Entry<String, AbstractMap.SimpleEntry<Integer, Object>> map_Entry0 = patriciaTrie0.select("");
      assertNotNull(map_Entry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      boolean boolean0 = patriciaTrie1.replace(";Aq .%F_Oh+Hk&S@", (Object) ";Aq .%F_Oh+Hk&S@", (Object) patriciaTrie0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = "C,";
      int int0 = (-692);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("right=", "C,", (-692));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      String string1 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(string1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = abstractPatriciaTrie_TrieEntry0.setValue("c\"d(:L[v-k4IcdBb");
      assertNotNull(string2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("C,", string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = patriciaTrie1.put("C,", "right=");
      assertNull(string3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Entry(", "Entry(");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string3);
      assertEquals("B]|gt%},hVs0Eb", string3);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      Comparator<? super String> comparator0 = patriciaTrie3.comparator();
      assertNotNull(comparator0);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.forEach((BiConsumer<? super String, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer((-1075));
      assertNotNull(integer0);
      assertEquals((-1075), (int)integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("BUi}<T]:", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>("fZx<210@R", abstractMap_SimpleEntry1, (-1075));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertNotNull(string0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=fZx<210@R [-1075], value=BUi}<T]:=-1075, parent=null, left=fZx<210@R [-1075], right=null, predecessor=fZx<210@R [-1075])", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(object0, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (-1075));
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertNotNull(string1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.put("Eu}!!;", "Eu}!!;");
      assertNull(string0);
      
      String string1 = "org.apache.commons.collections4.trie.KeyAnalyzer";
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("{p@:c&", "Trie[");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("{p@:c&", "{p@:c&");
      assertNotNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("Trie[", string1);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains("{p@:c&"));
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, int0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("Trie[").when(biFunction0).apply(any() , any());
      Object object0 = patriciaTrie0.compute("\n", biFunction0);
      assertNotNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("Trie[", object0);
      assertTrue(object0.equals((Object)string1));
      
      Object object1 = patriciaTrie0.put("B.", "{p@:c&");
      assertNull(object1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = hashMap0.put("{p@:c&", "wL\"xg$");
      assertNotNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{p@:c&", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      
      String string3 = "key=";
      Object object2 = patriciaTrie0.put("", "Trie[");
      assertNull(object2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "{p@:c&", 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(patriciaTrie0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      String string0 = patriciaTrie0.nextKey("must have come from somewhere!");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>("must have come from somewhere!", abstractMap_SimpleImmutableEntry0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertNotNull(object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("must have come from somewhere!", object0);
      
      Integer integer0 = patriciaTrie0.remove((Object) "must have come from somewhere!");
      assertNull(integer0);
      
      abstractPatriciaTrie_TrieEntry0.key = "zWXWrbB#B?";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = new Integer((-457));
      assertNotNull(integer2);
      assertEquals((-457), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, (Integer) null, 480);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer2.equals((Object)integer1));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertFalse(integer2.equals((Object)integer1));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.put("must have come from somewhere!", "zWXWrbB#B?");
      assertNull(string1);
      
      String string2 = patriciaTrie1.selectValue("");
      assertNotNull(string2);
      assertEquals("zWXWrbB#B?", string2);
      assertFalse(string2.equals((Object)object0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("7??!GmAz~q=cYL");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Y([n4u", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = patriciaTrie0.put("XKnP&", (Integer) null);
      assertNull(integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "XKnP&", 4875);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 3450);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("XXO\"ds)P");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = patriciaTrie1.put("BfPdZyj#oHCJTf6%{ {", "delegate");
      assertNull(object0);
      
      Object object1 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("XKnP&", object1);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.higherEntry("must have a from or to!");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = patriciaTrie1.selectKey("must have a from or to!");
      assertNotNull(string0);
      assertEquals("XKnP&", string0);
      assertTrue(string0.equals((Object)object1));
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertTrue(boolean1 == boolean0);
      
      patriciaTrie2.clear();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(collection0.contains(""));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.remove((Object) "");
      assertNotNull(string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string1);
      
      String string2 = "vlHL@(p3PZ,Zl-+";
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("\"<`CHN9GffwR$4H");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Trie[");
      assertNull(string3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string4 = patriciaTrie0.merge("w.2;*]O+@l:e", "w.2;*]O+@l:e", biFunction0);
      assertNotNull(string4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("w.2;*]O+@l:e", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "Cannot determine prefix outside of Character boundaries");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.put("zVV", abstractMap_SimpleImmutableEntry1);
      assertNull(abstractMap_SimpleImmutableEntry2);
      
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "", 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("/Y+_w1an_H_&ghe~!5", "2");
      assertNull(string2);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(4481);
      assertNotNull(integer0);
      assertEquals(4481, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 4481);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, 4481);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      Integer integer0 = new Integer((-1602));
      assertNotNull(integer0);
      assertEquals((-1602), (int)integer0);
      
      boolean boolean0 = patriciaTrie0.containsKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertFalse(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string3 = patriciaTrie3.toString();
      assertNotNull(string3);
      assertEquals("Trie[0]={\n}\n", string3);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(string3.equals((Object)string2));
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer1, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>(abstractMap_SimpleImmutableEntry0, "99", 1737);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>(abstractMap_SimpleImmutableEntry0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("right=", "right=");
      assertNull(string0);
      
      String string1 = patriciaTrie0.replace("", (String) null);
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string3);
      
      String string4 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string4);
      assertEquals("B]|gt%},hVs0Eb", string4);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("|XsEQtnh`f*_", "Trie[");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("{p@:c&", "{p@:c&");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("Trie["));
      assertTrue(set0.contains("|XsEQtnh`f*_"));
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(16, int0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object0 = patriciaTrie0.compute("\n", biFunction0);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Object object1 = patriciaTrie0.put("", "|XsEQtnh`f*_");
      assertNull(object1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string2 = hashMap0.put("{p@:c&", "xd%E$>$\"");
      assertNotNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("{p@:c&", string2);
      
      String string3 = "key=";
      Object object2 = patriciaTrie0.put("", (Object) null);
      assertNotNull(object2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("|XsEQtnh`f*_", object2);
      assertFalse(object2.equals((Object)string3));
      assertFalse(object2.equals((Object)string2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "{p@:c&", 16);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      
      hashMap0.putAll(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      String string0 = hashMap1.put("", "m'!=e");
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      String string1 = hashMap1.put("", "/ZN5NWVi g=OU`fX4t");
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals("m'!=e", string1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      String string2 = hashMap0.put("", "");
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      String string3 = hashMap1.put("", "");
      assertNotNull(string3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals("/ZN5NWVi g=OU`fX4t", string3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = hashMap0.put("Trie[", "Cannot determine prefix outside of Character boundaries");
      assertNull(string4);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer((-2756));
      assertNotNull(integer0);
      assertEquals((-2756), (int)integer0);
      
      Integer integer1 = new Integer(1712);
      assertNotNull(integer1);
      assertEquals(1712, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = patriciaTrie2.replace((String) null, integer0, integer1);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      
      Collection<String> collection1 = patriciaTrie0.values();
      assertNotNull(collection1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(collection1.contains("m'!=e"));
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertFalse(collection1.equals((Object)collection0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string0);
      
      String string1 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertNotNull(string1);
      assertEquals("B]|gt%},hVs0Eb", string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("9)?Iz", "H^E/k5'x");
      assertNull(string0);
      
      String string1 = patriciaTrie0.firstKey();
      assertNotNull(string1);
      assertEquals("9)?Iz", string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("9)?Iz");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("H^E/k5'x", "9)?Iz");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("-'*|P*p6/7+XliM]o", abstractMap_SimpleEntry0, 1);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = hashMap0.put(",-qCpXg()_|?", integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = "+5";
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put("+5", integer2);
      assertNull(integer3);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertNotNull(patriciaTrie0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = "zdC4<S||1l03|x(az";
      Integer integer4 = hashMap0.put("QUvNY,w|c`H{cJu-", integer0);
      assertNull(integer4);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(integer0.equals((Object)integer2));
      
      String string2 = patriciaTrie0.nextKey("zdC4<S||1l03|x(az");
      assertNull(string2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = "{T15*hJ~hNhtP.5`;K";
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("zdC4<S||1l03|x(az", "%Z;[!y|\"!g 5Z2h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie1.selectValue("B]|gt%},hVs0Eb");
      assertNotNull(string1);
      assertEquals("", string1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("IX60e)?");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("", "XXO\"ds)P");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("XKnP&", "XKnP&");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertNotNull(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.lowerEntry("XKnP&");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(collection0.contains(""));
      assertTrue(collection0.contains("XKnP&"));
      
      String string2 = patriciaTrie1.firstKey();
      assertNotNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", (-2688));
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-2688));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("delegate");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = patriciaTrie0.put("delegate", "5^tY%)GT'=4");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry3);
      assertNotNull(object1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", object1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(boolean0);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(boolean1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertFalse(boolean1 == boolean0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("]={\n");
      assertNotNull(sortedMap0);
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.selectKey("");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      String string0 = hashMap1.put("", "m'!=e");
      assertNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      String string1 = hashMap1.put("", "/ZN5NWVi g=OU`fX4t");
      assertNotNull(string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals("m'!=e", string1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      String string2 = hashMap0.put("", "");
      assertNull(string2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      String string3 = hashMap1.put("", "");
      assertNotNull(string3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals("/ZN5NWVi g=OU`fX4t", string3);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = hashMap0.put("Trie[", "Cannot determine prefix outside of Character boundaries");
      assertNull(string4);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie2, patriciaTrie4);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      Collection<String> collection1 = patriciaTrie0.values();
      assertNotNull(collection1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(collection1.contains("Trie["));
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(collection1.equals((Object)collection0));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie0.put("", "!0;aX|rCVRP");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("nK6B0yAR EO}+i%Hy");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.put("r+CTb.U![S", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, patriciaTrie1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("nK6B0yAR EO}+i%Hy");
      assertNotNull(sortedMap0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie2.tailMap("");
      assertNotNull(sortedMap1);
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(patriciaTrie1, abstractMap_SimpleImmutableEntry0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie1, "");
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      abstractPatriciaTrie_TrieEntry2.key = abstractMap_SimpleEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      Object object1 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertNotNull(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(object1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(boolean0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
      assertNotNull(comparator3);
      
      Object object2 = abstractPatriciaTrie_TrieEntry1.getKey();
      assertNotNull(object2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Object object3 = patriciaTrie2.put("nK6B0yAR EO}+i%Hy", object2);
      assertNull(object3);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie2.firstKey();
      assertNotNull(string2);
      assertEquals("nK6B0yAR EO}+i%Hy", string2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.getNearestEntryForKey("", 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      patriciaTrie1.decrementSize();
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, 1466);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 1466);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      
      Integer integer1 = new Integer(1466);
      assertNotNull(integer1);
      assertEquals(1466, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie1.put("", integer1);
      assertNull(integer2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", "\n");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = patriciaTrie0.put("iD:", "B]|gt%},hVs0Eb");
      assertNull(string3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie2);
      
      patriciaTrie2.modCount = 136;
      Object object0 = patriciaTrie2.selectValue("B]|gt%},hVs0Eb");
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("B]|gt%},hVs0Eb"));
      
      Object object1 = patriciaTrie2.put("=qp)cs6A];", (Object) null);
      assertNull(object1);
      
      patriciaTrie2.incrementSize();
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object object2 = patriciaTrie2.put("B]|gt%},hVs0Eb", integer0);
      assertNull(object2);
      
      String string0 = patriciaTrie2.lastKey();
      assertNotNull(string0);
      assertEquals("B]|gt%},hVs0Eb", string0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie4.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie4.put("=qp)cs6A];", integer1);
      assertNull(integer2);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie3.selectValue("B]|gt%},hVs0Eb");
      assertNull(integer3);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      Integer integer4 = patriciaTrie3.remove((Object) null);
      assertNull(integer4);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Collection<String> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree((String) null, (-3194), (-3194));
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.put("", "eyhIkW:6Hdiri+pP?nD");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap1);
      assertNotNull(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Object object0 = patriciaTrie1.selectValue("eyhIkW:6Hdiri+pP?nD");
      assertNull(object0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(set0.contains(""));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Object object1 = patriciaTrie1.put("], ", (Object) null);
      assertNull(object1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Object object2 = patriciaTrie1.put("", "");
      assertNull(object2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      String string1 = patriciaTrie1.lastKey();
      assertNotNull(string1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals("], ", string1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer((-3194));
      assertNotNull(integer0);
      assertEquals((-3194), (int)integer0);
      
      Integer integer1 = patriciaTrie3.put("], ", integer0);
      assertNull(integer1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer2 = patriciaTrie3.selectValue("");
      assertNotNull(integer2);
      assertEquals((-3194), (int)integer2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("", 32768);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Integer integer0 = new Integer((-257));
      assertNotNull(integer0);
      assertEquals((-257), (int)integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "{$XM\"UApV~";
      String string1 = patriciaTrie0.selectKey("{$XM\"UApV~");
      assertNull(string1);
      
      String string2 = "keyAnalyzer";
      int int0 = 4875;
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("The offsets and lengths must be at Character boundaries", "", 4875);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2082));
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("The offsets and lengths must be at Character boundaries");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Map.Entry<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
      
      String string0 = patriciaTrie0.put("", "{^z");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertNotNull(orderedMapIterator0);
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Object object0 = patriciaTrie1.put("\n", "{^z");
      assertNull(object0);
      
      Object object1 = patriciaTrie1.put("F\u0003R.w+$", "F\u0003R.w+$");
      assertNull(object1);
      
      Collection<Object> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains("\n"));
      assertTrue(collection0.contains("{^z"));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("XKnP&", (Integer) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "XKnP&", 4875);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 3450);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("XXO\"ds)P");
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      patriciaTrie1.put("BfPdZyj#oHCJTf6%{ {", "delegate");
      patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.lastEntry();
      abstractPatriciaTrie_TrieEntry2.isEmpty();
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.headMap("delegate");
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(patriciaTrie0, (Integer) null);
      patriciaTrie0.nextKey("must have come from somewhere!");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>("must have come from somewhere!", abstractMap_SimpleImmutableEntry0, 1);
      abstractPatriciaTrie_TrieEntry0.getKey();
      patriciaTrie0.remove((Object) "must have come from somewhere!");
      abstractPatriciaTrie_TrieEntry0.key = "sWXWrbB#B[";
      Integer integer0 = new Integer((-1));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.select("");
      Integer integer1 = new Integer(144);
      patriciaTrie1.put("", integer1);
      patriciaTrie1.firstKey();
      patriciaTrie1.values();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.comparator();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 0);
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1564);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      Map.Entry.comparingByValue();
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      Map.Entry.comparingByValue();
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      patriciaTrie0.put("", abstractMap_SimpleEntry0);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("", (AbstractMap.SimpleEntry<Integer, Integer>) null);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string0 = ">EvaBOwOh!";
      patriciaTrie1.put(">EvaBOwOh!", abstractMap_SimpleImmutableEntry1);
      patriciaTrie1.ceilingEntry("");
      patriciaTrie1.floorEntry("wft:/E/xk?6t");
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>("", integer1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Object>(abstractMap_SimpleEntry1, abstractPatriciaTrie_TrieEntry1, 546);
      AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry3 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry2.value;
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) comparator0, (Object) abstractPatriciaTrie_TrieEntry3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "");
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>>(patriciaTrie0, abstractMap_SimpleEntry0, 32768);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\\^z2~K8L;+5]v'", "\\^z2~K8L;+5]v'", (-787));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      patriciaTrie0.getEntry("\\^z2~K8L;+5]v'");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      int int0 = patriciaTrie2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "WQ5R&wbr+l";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      Integer integer0 = new Integer((-388));
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, "WQ5R&wbr+l");
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry1, (-388));
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = "|c8Tg`Py[[h,Q`";
      int int0 = 1;
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = null;
      patriciaTrie0.subtree((String) null, (-3194), (-3194));
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie1, (Object) null, 763);
      Integer integer0 = new Integer(763);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, integer0, 175);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 763;
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      Set<String> set0 = patriciaTrie2.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.firstEntry();
      patriciaTrie0.put("Eu}!!;", "Eu}!!;");
      patriciaTrie0.nextKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "hzJ");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("q1Ma/YXE");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Map.Entry.comparingByKey();
      Integer integer0 = new Integer((-493));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("g<`", integer0, (-1));
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "g<`", 1);
      abstractPatriciaTrie_TrieEntry2.setValue("fromKey > toKey");
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      String string0 = patriciaTrie0.firstKey();
      assertEquals("Eu}!!;", string0);
      
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry1);
      String string1 = patriciaTrie0.selectValue((String) null);
      assertNotNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>("PZ7Qt{=DQ'GIhvzt>6", (String) null, (-493));
      abstractPatriciaTrie_TrieEntry3.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, (Object) null, 2);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "b<q}e";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "key=";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("key=", integer0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("key=", integer1);
      Integer integer2 = new Integer((-2));
      // Undeclared exception!
      try { 
        patriciaTrie0.get(integer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      Integer integer0 = new Integer((-326));
      patriciaTrie1.put("", integer0);
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie2.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(",3kH;5Jbtp-", ",3kH;5Jbtp-", 1);
      abstractPatriciaTrie_TrieEntry0.value = ",3kH;5Jbtp-";
      abstractPatriciaTrie_TrieEntry0.key = "7?>Sp";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      patriciaTrie0.getEntry((Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.floorEntry("PZ7Qt{=DQ'GIhvzt>6");
      String string0 = "";
      Map.Entry.comparingByKey();
      int int0 = 1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "g<`", 1);
      abstractPatriciaTrie_TrieEntry2.predecessor = null;
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>("PZ7Qt{=DQ'GIhvzt>6", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 1);
      String string1 = "9";
      abstractPatriciaTrie_TrieEntry3.setValue("9");
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.firstEntry();
      String string0 = "null";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.keySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      patriciaTrie2.nextKey("Y@e=RZdD?l!d:");
      String string0 = "%w[";
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, patriciaTrie2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("XKnP&", (Integer) null);
      patriciaTrie0.entrySet();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("K(k%93KQKF");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie1.put("99", "K(k%93KQKF");
      Integer integer0 = new Integer(1);
      boolean boolean0 = patriciaTrie1.containsKey("99");
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  Entry(key=XKnP& [9], value=null, parent=ROOT, left=ROOT, right=XKnP& [9], predecessor=XKnP& [9])\n}\n", string0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>("99", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>(abstractMap_SimpleImmutableEntry0, "K(k%93KQKF", 1);
      boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("`-k%ixc`W7dl9VAAE:", "`-k%ixc`W7dl9VAAE:", 20);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      Integer integer0 = new Integer(20);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(patriciaTrie1);
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      patriciaTrie3.toString();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("z$-;\"LIa", "z$-;\"LIa", 1651);
      abstractPatriciaTrie_TrieEntry0.toString();
      String string0 = (String)abstractPatriciaTrie_TrieEntry0.value;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("z$-;\"LIa", "", 1651);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("`?G9>dtB=C_U9P9?K", "Xxi0b4vY\"G[?*$:v>j");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = (AbstractMap.SimpleEntry<Object, Object>) mock(AbstractMap.SimpleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractMap_SimpleEntry2).toString();
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2, 0);
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      Map.Entry.comparingByKey();
      hashMap0.getOrDefault(abstractMap_SimpleEntry1, "Xxi0b4vY\"G[?*$:v>j");
      hashMap0.putIfAbsent("Xxi0b4vY\"G[?*$:v>j", "Entry(key=`?G9>dtB=C_U9P9?K=Xxi0b4vY\"G[?*$:v>j [0], value=Mock for SimpleEntry, hashCode: 12110109, parent=null, left=`?G9>dtB=C_U9P9?K=Xxi0b4vY\"G[?*$:v>j [0], right=null, predecessor=`?G9>dtB=C_U9P9?K=Xxi0b4vY\"G[?*$:v>j [0])");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      hashMap0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.incrementSize();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("XKnP&", (Integer) null);
      patriciaTrie0.entrySet();
      Integer integer0 = new Integer((-2));
      patriciaTrie0.put("XXO\"ds)P", integer0);
      Integer integer1 = new Integer(1);
      patriciaTrie0.put("XXO\"ds)P", integer1);
      Integer integer2 = new Integer(3450);
      patriciaTrie0.put("XKnP&", integer2);
      patriciaTrie0.nextKey("");
      String string0 = patriciaTrie0.nextKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.firstEntry();
      patriciaTrie0.put("Eu}!!;", "Eu}!!;");
      patriciaTrie0.nextKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "hzJ");
      patriciaTrie0.values();
      patriciaTrie0.values();
      patriciaTrie0.values();
      patriciaTrie0.select("");
      String string0 = "";
      patriciaTrie0.higherEntry((String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Entry(", "Entry(");
      patriciaTrie0.put("H^E/k5'x", "H^E/k5'x");
      patriciaTrie0.higherEntry("FF36='w");
      patriciaTrie0.higherEntry("Entry(");
      patriciaTrie0.put("99", (String) null);
      patriciaTrie0.put(")", "99");
      patriciaTrie0.put("Entry(", "%:!q#E0ju^l.yS_Q][");
      patriciaTrie0.containsKey("Entry(");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = new PatriciaTrie<Object>();
      Set<String> set0 = patriciaTrie1.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.getEntry("rS-8+3q(>hbTi");
      patriciaTrie0.prefixMap("rS-8+3q(>hbTi");
      patriciaTrie0.getNearestEntryForKey("rS-8+3q(>hbTi", 856);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(856);
      patriciaTrie1.put("Trie[", integer0);
      patriciaTrie1.tailMap("rS-8+3q(>hbTi");
      patriciaTrie1.nextKey("F<al");
      patriciaTrie0.subMap("", "rS-8+3q(>hbTi");
      String string0 = "\n";
      patriciaTrie1.mapIterator();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\n", "\n", (-1471));
      abstractPatriciaTrie_TrieEntry0.key = "";
      abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put(" 8S|Gi$).,.BmiG#", "");
      String string0 = null;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      String string1 = "";
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.selectKey("");
      patriciaTrie0.put("  ", "  ");
      Integer integer0 = new Integer(315);
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", integer0);
      patriciaTrie0.nextKey("  ");
      patriciaTrie0.size();
      patriciaTrie0.tailMap("  ");
      PatriciaTrie<String> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
