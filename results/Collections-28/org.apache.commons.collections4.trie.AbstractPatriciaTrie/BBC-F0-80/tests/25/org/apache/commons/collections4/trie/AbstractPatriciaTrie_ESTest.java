/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:30:10 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.subMap("", "H-");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("parent=", (Integer) null, (-1));
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-3));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(32);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", 16, (-787));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("No7[KC7O$9T", (Integer) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("No7[KC7O$9T", 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.lowerEntry("1(K");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("Yg3>Wx", (Object) null);
      patriciaTrie0.put("", "");
      patriciaTrie0.ceilingEntry("2x\"#H'Y");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.higherEntry("YL|l$\"mn1e_'");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.entrySet();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(5111);
      Integer integer1 = hashMap0.put("], ", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.put("^F_X\"#]--\"k$fM", integer1);
      patriciaTrie0.subtree("^F_X\"#]--\"k$fM", 0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("", hashMap0);
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("dRdzFO1V8!Z", 9);
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", " > ", 0);
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-1311));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("a\"1", integer0, 32768);
      patriciaTrie0.put("81bI=p[zTe1'FX", "81bI=p[zTe1'FX");
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("H-", integer0, (-1));
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer1 = patriciaTrie0.put("T|d79}Wiqd$N]", integer0);
      patriciaTrie0.put("mDT7.MROe%Y7/']", integer1);
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("T|d79}Wiqd$N]", integer0);
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "}\n");
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer(2228);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer0, "Trie[");
      patriciaTrie0.put("Trie[", abstractMap_SimpleEntry0);
      patriciaTrie0.lowerEntry("]={\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("{1!+", "", 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(3391);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Rx6aB8", 3391);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("E0Z`", "E0Z`");
      patriciaTrie0.put("lXUgm<<x_!", "lXUgm<<x_!");
      patriciaTrie0.higherEntry(" <WHQ[}mfP~tM?:8[A");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("Key is out of range: ", integer0);
      patriciaTrie0.getNearestEntryForKey("", (-2872));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.getNearestEntryForKey("", 0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.getEntry(" 8sMkES5tX@%!^");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "");
      patriciaTrie0.getEntry("");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.get("Cannot delete root Entry!");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.get("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" s", "dRdzFO1V8!Z", 9);
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer((-325));
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("}\n", integer0, (-325));
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("((uY[32N'd USBn{", "((uY[32N'd USBn{");
      patriciaTrie0.firstKey();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("Yg3>Wx", (Object) null);
      patriciaTrie0.put("", "");
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("Yg3>Wx", (Object) null);
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 16);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 144);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H-", "H-", 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H-", "H-", (-1));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1.predecessor;
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 1);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer((-2168));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-2168));
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      patriciaTrie0.put("dRdzFO1V8!Z", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Comparable<Integer>> patriciaTrie1 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Comparable<Object>> hashMap0 = new HashMap<String, Comparable<Object>>();
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-1567));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("77%gMjD", object0, 0);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-325));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", (-2851));
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.put("", (Integer) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer((-325));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", (-2851));
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>((AbstractMap.SimpleEntry<Object, Object>) null, (Object) null, 89);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(3281);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 3281);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(" -> ", " -> ");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("", abstractMap_SimpleEntry0, 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      String string0 = "g";
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry(string0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.replaceAll(biFunction0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-2841));
      patriciaTrie0.put("}^", integer0);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.selectKey("/}>6z[&vi,h'xfJ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.select("org.apache.commons.collections4.rie.PatriciaTrie");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "i.).\u0016?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("$o");
      Integer integer0 = new Integer((-3852));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("a(iD4kI5E.Z3z", sortedMap0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, (-3852));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("YBg7", "'C<%8K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.headMap("v");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("PI5eOTllyT,E-CZ=ALh", (Object) null, (-4453));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("pm:QR", "pm:QR", 256);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2293));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("JvqT,Z[X{t", "eX@3pFj7(<#9f5]");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>>("eX@3pFj7(<#9f5]", abstractMap_SimpleImmutableEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet");
      hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", (String) null);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[2]={\n  Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values [939], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values [939])\n  Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values [939], value=null, parent=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet [9], right=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values [939], predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values [939])\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("JvqT,Z[X{t", "eX@3pFj7(<#9f5]");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, String>>("eX@3pFj7(<#9f5]", abstractMap_SimpleImmutableEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H-", "H-", 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("H-", "H-", (-1));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0.parent);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "}\n");
      patriciaTrie0.putIfAbsent("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("}\n", "Key cannot be null");
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(5111);
      hashMap0.put("], ", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("^F_X\"#]--\"k$fM", 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer((-325));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("}\n", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("}\n", 12, 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(32);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("p&f{d", 400, (-325));
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("_t/v", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(".6 zvT[.", 64, 64);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("=", (Integer) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 96, 96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("((uY[32N'd USBn{", 0, 0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("((uY[32N'd USBn{", "((uY[32N'd USBn{");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("((uY[32N'd USBn{");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(" F$^1|VJ<O]@@Te<C(", "<<U]*3M9z79F[$5f40B");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry1);
      patriciaTrie0.put("<<U]*3M9z79F[$5f40B", abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("<<U]*3M9z79F[$5f40B");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Function<String, String> function0 = Function.identity();
      patriciaTrie0.computeIfAbsent(" ", function0);
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry(" ");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      patriciaTrie0.put("", abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer(160);
      patriciaTrie0.put("2x\"#H'Y", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("2x\"#H'Y");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap((String) null);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      patriciaTrie0.put("", (Comparable<Object>) null);
      patriciaTrie0.put("\"M`cvv`2$.-Z.J", (Comparable<Object>) null);
      String string0 = patriciaTrie0.previousKey("\"M`cvv`2$.-Z.J");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-2841));
      patriciaTrie0.put("", integer0);
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]={\n", "delegate");
      patriciaTrie0.put("", "Cannot delete root Entry!");
      String string0 = patriciaTrie0.nextKey("");
      assertNotNull(string0);
      assertEquals("]={\n", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = patriciaTrie0.nextKey("OO2S?\"jY)+p8W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("k,u)G+u~{", "k,u)G+u~{");
      String string0 = patriciaTrie0.lastKey();
      assertEquals("k,u)G+u~{", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>(" ", (AbstractMap.SimpleEntry<Object, String>) null, 0);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.put("", (AbstractMap.SimpleEntry<Object, String>) null);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("<<U]*3M9z79F[$5f40B", "<<U]*3M9z79F[$5f40B");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(patriciaTrie0, hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>("-;!Jh^", abstractMap_SimpleImmutableEntry0, 32768);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("P", abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie1.put("y ^6z=4&9;", patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lastEntry();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.nextKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "}\n", 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-795));
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("a(iD4kI5E.Z3z", "", 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("TeV_jQ", "rS`[v>n[.5Bb a,H");
      patriciaTrie0.put("rS`[v>n[.5Bb a,H", "TeV_jQ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("]P2te8wBvO=");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-1146));
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("]P2te8wBvO=");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-1146));
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(" [", "h{)%\"gCH");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, " [", 1789);
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      patriciaTrie0.put(" [", object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      patriciaTrie0.put("0+*zn8i9LujUm%p37", "0+*zn8i9LujUm%p37");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("b(HY[32N'd.USBn{", "b(HY[32N'd.USBn{");
      String string0 = patriciaTrie0.remove((Object) "b(HY[32N'd.USBn{");
      assertEquals("b(HY[32N'd.USBn{", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      String string0 = patriciaTrie0.remove((Object) "mJ(cyAKiHk@aX");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", "");
      String string0 = patriciaTrie0.remove((Object) "?GUAS{Octq9,bm;~u");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Collection<Object> collection0 = patriciaTrie0.values();
      Collection<Object> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.keySet();
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("81bI=p[zTe1'FX", "81bI=p[zTe1'FX");
      boolean boolean0 = patriciaTrie0.containsKey("81bI=p[zTe1'FX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "Cannot delete root Entry!");
      boolean boolean0 = patriciaTrie0.remove((Object) "4<'g4D.jxjb }F,", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.getOrDefault((Object) null, "TeV_jQ");
      assertEquals("TeV_jQ", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.replace("Key cannot be null", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.put("'1^A\"gCg@igI(", (Integer) null);
      patriciaTrie0.put("ozi/[,'V{>Ix0z9", integer0);
      String string0 = patriciaTrie0.selectKey("");
      assertEquals("'1^A\"gCg@igI(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("Trie[", "a>!^NW");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.put("a>!^NW", abstractMap_SimpleEntry0);
      Map.Entry<String, AbstractMap.SimpleEntry<Object, String>> map_Entry0 = patriciaTrie0.select("Trie[");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = patriciaTrie0.selectKey("The offsets and lengths must be at Character boundaries");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = patriciaTrie0.selectValue("");
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("ozi/[,'V{>Ix0z9", integer0);
      String string0 = patriciaTrie0.previousKey("T#OX%&\"<RCoD");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put(")", "}ZKh{Q&j");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("The offsets and lengths must be at Character boundaries");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("<<U]*3M9z79F[$5f40B", "<<U]*3M9z79F[$5f40B");
      Object object0 = patriciaTrie0.put("<<U]*3M9z79F[$5f40B", (Object) null);
      assertEquals("<<U]*3M9z79F[$5f40B", object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      String string0 = patriciaTrie0.put("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", (Integer) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("((uY[32N'd USBn{", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("P", "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string0 = patriciaTrie0.selectValue("0S}'QyN");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("$o");
      patriciaTrie0.put("$o", "$o");
      Integer integer0 = new Integer((-3852));
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("a(iD4kI5E.Z3z", sortedMap0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(integer0, abstractMap_SimpleEntry0, (-3852));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals(1, sortedMap0.size());
      assertEquals("Entry(key=-3852 [-3852], value=a(iD4kI5E.Z3z={$o=$o}, parent=null, left=-3852 [-3852], right=null, predecessor=-3852 [-3852])", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("<<U]*3M9z79F[$5f40B", "<<U]*3M9z79F[$5f40B");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("=)d$Ph*Hrku#e^aV");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }
}
