* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 13215
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 601692642
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 19:03:13.264 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:03:13.265 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:03:16.425 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:03:19.008 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I52 Branch 97 IFEQ L907 - true
[MASTER] 19:04:23.945 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 19:06:09.379 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.util.AbstractMap<java.lang.Object, java.lang.Object>.SimpleImmutableEntry<java.lang.String, java.lang.Object>>.TrieEntry<java.lang.Object, java.lang.Comparable<java.lang.Object>> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:06:51.396 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.String, java.lang.Integer>.TrieEntry<java.lang.String, java.util.AbstractMap<java.lang.String, java.lang.Object>.SimpleImmutableEntry<java.lang.String, java.lang.Object>> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:10:16.579 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.util.AbstractMap<java.lang.Object, java.lang.Object>.SimpleImmutableEntry<java.lang.Object, java.lang.String>, java.lang.Integer>.TrieEntry<java.util.AbstractMap<java.lang.Object, java.lang.Object>.SimpleEntry<java.lang.Object, java.lang.String>, java.lang.String> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 602s and 782 generations, 282062 statements, best individual has fitness: 1462.0
* Minimizing test suite
[MASTER] 19:14:21.408 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 822
* Number of covered goals: 461
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 303
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 313
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 64%
* Total number of goals: 186
* Number of covered goals: 119
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 300
* Generated 193 tests with total length 2769
* Resulting test suite's coverage: 50% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:15:05.989 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6788166666666666% of time used, but only 8/193 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 19:15:13.784 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_10_1629227713691/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_10_1629227713691/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:13.784 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:13.784 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:13.787 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 66
[MASTER] 19:15:13.787 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_10_1629227713691/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:13.787 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:13.788 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_10_1629227713691/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:13 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_10_tmp__ESTest extends AbstractPatriciaTrie_10_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer(0);
27:       assertNotNull(integer0);
28:       assertEquals(0, (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 0);
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       
36:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
37:       Integer integer1 = new Integer(2);
38:       assertNotNull(integer1);
39:       assertFalse(integer1.equals((Object)integer0));
40:       assertEquals(2, (int)integer1);
41:       
42:       abstractPatriciaTrie_TrieEntry0.bitIndex = 2;
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       
47:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, integer0, (-1));
48:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
49:       assertFalse(integer0.equals((Object)integer1));
50:       assertFalse(integer1.equals((Object)integer0));
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       
55:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
65:       
66:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
67:       assertNotNull(comparator1);
68:       
69:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
70:       assertFalse(integer0.equals((Object)integer1));
71:       assertFalse(integer1.equals((Object)integer0));
72:       assertFalse(boolean0);
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       
80:       abstractPatriciaTrie_TrieEntry0.key = integer0;
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       
85:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
86:       assertFalse(integer0.equals((Object)integer1));
87:       assertFalse(boolean1 == boolean0);
88:       assertTrue(boolean1);
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
92:       
93:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
94:       assertNotNull(patriciaTrie0);
95:       
96:       String string0 = "vF8~jOE]~kr_x8~Vu";
97:       Object object0 = patriciaTrie0.put("vF8~jOE]~kr_x8~Vu", integer1);
98:       assertNull(object0);
99:       assertFalse(integer1.equals((Object)integer0));
100:       
101:       String string1 = "";
102:       Object object1 = new Object();
103:       assertNotNull(object1);
104:       
105:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("W6mh'}$FiJB?,5", object1, 2);
106:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
107:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
110:       
111:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
112:       assertNull(abstractPatriciaTrie_TrieEntry3);
113:       
114:       // Undeclared exception!
115:       try { 
116:         patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
117:         fail("Expecting exception: NullPointerException");
118:       
119:       } catch(NullPointerException e) {
120:          //
121:          // no message in exception (getMessage() returned null)
122:          //
123:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
124:       }
125:   }
126: }
RegularFileObject[/tmp/EvoSuite_10_1629227713691/org/apache/commons/collections4/trie/AbstractPatriciaTrie_10_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:13 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_10_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_10_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:13.790 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer1 = new Integer(2);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));
assertEquals(2, (int)integer1);

abstractPatriciaTrie_TrieEntry0.bitIndex = 2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer1, integer0, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer0));
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.key = integer0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(integer0.equals((Object)integer1));
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

String string0 = "vF8~jOE]~kr_x8~Vu";
Object object0 = patriciaTrie0.put("vF8~jOE]~kr_x8~Vu", integer1);
assertNull(object0);
assertFalse(integer1.equals((Object)integer0));

String string1 = "";
Object object1 = new Object();
assertNotNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("W6mh'}$FiJB?,5", object1, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
assertNull(abstractPatriciaTrie_TrieEntry3);

patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);

[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1629227716926/org/apache/commons/collections4/trie/AbstractPatriciaTrie_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1629227716926/org/apache/commons/collections4/trie/AbstractPatriciaTrie_73_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 71
[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_73_1629227716926/org/apache/commons/collections4/trie/AbstractPatriciaTrie_73_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:16.952 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:16.953 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1629227716926/org/apache/commons/collections4/trie/AbstractPatriciaTrie_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:16 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_73_tmp__ESTest extends AbstractPatriciaTrie_73_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
28:       assertNotNull(hashMap0);
29:       assertTrue(hashMap0.isEmpty());
30:       assertEquals(0, hashMap0.size());
31:       
32:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
33:       assertNotNull(patriciaTrie0);
34:       assertTrue(hashMap0.isEmpty());
35:       assertEquals(0, hashMap0.size());
36:       
37:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
38:       assertNotNull(patriciaTrie1);
39:       assertTrue(hashMap0.isEmpty());
40:       assertEquals(0, hashMap0.size());
41:       
42:       String string0 = "delegate";
43:       patriciaTrie1.incrementSize();
44:       assertTrue(hashMap0.isEmpty());
45:       assertEquals(0, hashMap0.size());
46:       
47:       Object object0 = patriciaTrie1.put("", hashMap0);
48:       assertNull(object0);
49:       assertTrue(hashMap0.isEmpty());
50:       assertEquals(0, hashMap0.size());
51:       
52:       Integer integer0 = new Integer(13);
53:       assertNotNull(integer0);
54:       assertEquals(13, (int)integer0);
55:       
56:       HashMap hashMap1 = (HashMap)patriciaTrie1.put("", integer0);
57:       assertNotNull(hashMap1);
58:       assertTrue(hashMap0.isEmpty());
59:       assertEquals(0, hashMap0.size());
60:       assertEquals(0, hashMap1.size());
61:       assertTrue(hashMap1.isEmpty());
62:       
63:       String string1 = null;
64:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
65:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       
70:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
71:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
72:       assertNotNull(comparator1);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
75:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
79:       
80:       // Undeclared exception!
81:       try { 
82:         patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
83:         fail("Expecting exception: NullPointerException");
84:       
85:       } catch(NullPointerException e) {
86:          //
87:          // no message in exception (getMessage() returned null)
88:          //
89:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
90:       }
91:   }
92: }
RegularFileObject[/tmp/EvoSuite_73_1629227716926/org/apache/commons/collections4/trie/AbstractPatriciaTrie_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:16 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_73_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_73_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:16.953 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertNotNull(patriciaTrie0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

String string0 = "delegate";
patriciaTrie1.incrementSize();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

Object object0 = patriciaTrie1.put("", hashMap0);
assertNull(object0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

Integer integer0 = new Integer(13);
assertNotNull(integer0);
assertEquals(13, (int)integer0);

HashMap hashMap1 = (HashMap)patriciaTrie1.put("", integer0);
assertNotNull(hashMap1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals(0, hashMap1.size());
assertTrue(hashMap1.isEmpty());

String string1 = null;
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);

[MASTER] 19:15:17.809 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_89_1629227717760/org/apache/commons/collections4/trie/AbstractPatriciaTrie_89_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_89_1629227717760/org/apache/commons/collections4/trie/AbstractPatriciaTrie_89_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:17.809 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:17.809 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:17.810 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>,java.lang.Integer>>: 111
[MASTER] 19:15:17.810 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_89_1629227717760/org/apache/commons/collections4/trie/AbstractPatriciaTrie_89_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:17.810 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:17.811 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_89_1629227717760/org/apache/commons/collections4/trie/AbstractPatriciaTrie_89_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:17 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_89_tmp__ESTest extends AbstractPatriciaTrie_89_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       String string0 = ".Q=(1Td?bi5tU3k";
29:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", ".Q=(1Td?bi5tU3k", (-1484));
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       
35:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("=", "", (-1));
36:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
37:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
40:       
41:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
51:       
52:       String string1 = abstractPatriciaTrie_TrieEntry1.toString();
53:       assertNotNull(string1);
54:       assertFalse(string1.equals((Object)string0));
55:       assertEquals("RootEntry(key== [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)", string1);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       
60:       String string2 = abstractPatriciaTrie_TrieEntry0.setKeyValue("P(~]0}'Cxg{;wS$SD", "");
61:       assertNotNull(string2);
62:       assertFalse(string2.equals((Object)string1));
63:       assertTrue(string2.equals((Object)string0));
64:       assertEquals(".Q=(1Td?bi5tU3k", string2);
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       
69:       String string3 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" [", ".Q=(1Td?bi5tU3k");
70:       assertNotNull(string3);
71:       assertFalse(string3.equals((Object)string1));
72:       assertFalse(string3.equals((Object)string0));
73:       assertFalse(string3.equals((Object)string2));
74:       assertEquals("", string3);
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       
79:       String string4 = abstractPatriciaTrie_TrieEntry0.toString();
80:       assertNotNull(string4);
81:       assertFalse(string4.equals((Object)string3));
82:       assertFalse(string4.equals((Object)string2));
83:       assertFalse(string4.equals((Object)string0));
84:       assertFalse(string4.equals((Object)string1));
85:       assertEquals("Entry(key= [ [-1484], value=.Q=(1Td?bi5tU3k, parent=null, left= [ [-1484], right=null, predecessor=ROOT)", string4);
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
89:       
90:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
91:       assertNotNull(patriciaTrie0);
92:       
93:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
94:       assertNotNull(patriciaTrie1);
95:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
96:       
97:       BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
98:       doReturn((Object) null).when(biFunction0).apply(any() , anyString());
99:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("=");
100:       assertNull(abstractPatriciaTrie_TrieEntry2);
101:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
102:       assertNotSame(patriciaTrie0, patriciaTrie1);
103:       
104:       patriciaTrie1.clear();
105:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
106:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
107:       assertNotSame(patriciaTrie0, patriciaTrie1);
108:       assertNotSame(patriciaTrie1, patriciaTrie0);
109:       
110:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
111:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
112:       assertNotNull(comparator1);
113:       
114:       String string5 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "}.omd0]-L]W|>x p91");
115:       assertNull(string5);
116:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
117:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
118:       assertNotSame(patriciaTrie0, patriciaTrie1);
119:       assertNotSame(patriciaTrie1, patriciaTrie0);
120:       
121:       patriciaTrie1.replaceAll(biFunction0);
122:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
123:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
124:       assertNotSame(patriciaTrie0, patriciaTrie1);
125:       assertNotSame(patriciaTrie1, patriciaTrie0);
126:       
127:       String string6 = patriciaTrie1.firstKey();
128:       assertNotNull(string6);
129:       assertFalse(string6.equals((Object)string3));
130:       assertFalse(string6.equals((Object)string4));
131:       assertFalse(string6.equals((Object)string2));
132:       assertFalse(string6.equals((Object)string0));
133:       assertFalse(string6.equals((Object)string1));
134:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
135:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
136:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", string6);
137:       assertNotSame(patriciaTrie0, patriciaTrie1);
138:       assertNotSame(patriciaTrie1, patriciaTrie0);
139:       
140:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
141:       assertNotNull(patriciaTrie2);
142:       
143:       Integer integer0 = new Integer((-1));
144:       assertNotNull(integer0);
145:       assertEquals((-1), (int)integer0);
146:       
147:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", integer0, 340);
148:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
149:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
150:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
152:       
153:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
154:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
155:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
158:       
159:       // Undeclared exception!
160:       try { 
161:         patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry4);
162:         fail("Expecting exception: NullPointerException");
163:       
164:       } catch(NullPointerException e) {
165:          //
166:          // no message in exception (getMessage() returned null)
167:          //
168:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
169:       }
170:   }
171: }
RegularFileObject[/tmp/EvoSuite_89_1629227717760/org/apache/commons/collections4/trie/AbstractPatriciaTrie_89_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:17 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_89_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_89_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_89_tmp__ESTest_scaffolding.class.getClassLoader()));
108:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_89_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_89_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 19:15:17.812 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = ".Q=(1Td?bi5tU3k";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", ".Q=(1Td?bi5tU3k", (-1484));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("=", "", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());

String string1 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));
assertEquals("RootEntry(key== [-1], value=, parent=null, left=ROOT, right=null, predecessor=ROOT)", string1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

String string2 = abstractPatriciaTrie_TrieEntry0.setKeyValue("P(~]0}'Cxg{;wS$SD", "");
assertNotNull(string2);
assertFalse(string2.equals((Object)string1));
assertTrue(string2.equals((Object)string0));
assertEquals(".Q=(1Td?bi5tU3k", string2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string3 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" [", ".Q=(1Td?bi5tU3k");
assertNotNull(string3);
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string2));
assertEquals("", string3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string4 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string4);
assertFalse(string4.equals((Object)string3));
assertFalse(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string1));
assertEquals("Entry(key= [ [-1484], value=.Q=(1Td?bi5tU3k, parent=null, left= [ [-1484], right=null, predecessor=ROOT)", string4);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(any() , anyString());
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("=");
assertNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotSame(patriciaTrie0, patriciaTrie1);

patriciaTrie1.clear();
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
assertNotNull(comparator1);

String string5 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "}.omd0]-L]W|>x p91");
assertNull(string5);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

patriciaTrie1.replaceAll(biFunction0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

String string6 = patriciaTrie1.firstKey();
assertNotNull(string6);
assertFalse(string6.equals((Object)string3));
assertFalse(string6.equals((Object)string4));
assertFalse(string6.equals((Object)string2));
assertFalse(string6.equals((Object)string0));
assertFalse(string6.equals((Object)string1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", string6);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer0 = new Integer((-1));
assertNotNull(integer0);
assertEquals((-1), (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", integer0, 340);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());

patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry4);

[MASTER] 19:15:18.377 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_105_1629227718313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_105_1629227718313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:18.377 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:18.377 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:18.378 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.String: 61
[MASTER] 19:15:18.378 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 19:15:18.379 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_105_1629227718313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
11: import org.apache.commons.collections4.trie.PatriciaTrie;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class AbstractPatriciaTrie_105_tmp__ESTest extends AbstractPatriciaTrie_105_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
22:       assertNotNull(patriciaTrie0);
23:       
24:       Integer integer0 = new Integer((-845));
25:       assertNotNull(integer0);
26:       assertEquals((-845), (int)integer0);
27:       
28:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1008);
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       
34:       Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
35:       assertNotNull(object0);
36:       assertEquals((-845), object0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       
41:       Object object1 = patriciaTrie0.put(".", object0);
42:       assertNull(object1);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       
47:       Integer integer1 = new Integer((-845));
48:       assertNotNull(integer1);
49:       assertTrue(integer1.equals((Object)object0));
50:       assertTrue(integer1.equals((Object)integer0));
51:       assertEquals((-845), (int)integer1);
52:       
53:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(".", integer1, 2);
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       assertTrue(integer1.equals((Object)object0));
56:       assertTrue(integer1.equals((Object)integer0));
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       
61:       Object object2 = abstractPatriciaTrie_TrieEntry1.setKeyValue((Object) null, (Object) null);
62:       assertNotNull(object2);
63:       assertTrue(integer1.equals((Object)object0));
64:       assertTrue(integer1.equals((Object)integer0));
65:       assertTrue(object2.equals((Object)object0));
66:       assertTrue(object2.equals((Object)integer0));
67:       assertEquals((-845), object2);
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>(".", object2, (-845));
73:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
74:       assertTrue(integer1.equals((Object)object0));
75:       assertTrue(integer1.equals((Object)integer0));
76:       assertTrue(object2.equals((Object)object0));
77:       assertTrue(object2.equals((Object)integer0));
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
84:       
85:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
86:       assertNull(abstractPatriciaTrie_TrieEntry3);
87:       
88:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("rI", "Ms7gZcq YJ", (-1412));
89:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
90:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
93:       
94:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
95:       assertNotNull(patriciaTrie1);
96:       
97:       Integer integer2 = new Integer(288);
98:       assertNotNull(integer2);
99:       assertFalse(integer2.equals((Object)integer0));
100:       assertFalse(integer2.equals((Object)object0));
101:       assertFalse(integer2.equals((Object)integer1));
102:       assertFalse(integer2.equals((Object)object2));
103:       assertEquals(288, (int)integer2);
104:       
105:       Integer integer3 = patriciaTrie1.put("m]o_A", integer2);
106:       assertNull(integer3);
107:       assertFalse(integer2.equals((Object)integer0));
108:       assertFalse(integer2.equals((Object)object0));
109:       assertFalse(integer2.equals((Object)integer1));
110:       assertFalse(integer2.equals((Object)object2));
111:       
112:       Integer integer4 = patriciaTrie1.put("Ms7gZcq YJ", integer1);
113:       assertNull(integer4);
114:       assertFalse(integer1.equals((Object)integer2));
115:       assertTrue(integer1.equals((Object)object0));
116:       assertTrue(integer1.equals((Object)integer0));
117:       
118:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
119:       assertNotNull(patriciaTrie2);
120:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
121:       
122:       patriciaTrie2.incrementSize();
123:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
124:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
125:       assertNotSame(patriciaTrie0, patriciaTrie2);
126:       assertNotSame(patriciaTrie2, patriciaTrie0);
127:       
128:       Object object3 = patriciaTrie2.put("", "m]o_A");
129:       assertNull(object3);
130:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
131:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
132:       assertNotSame(patriciaTrie0, patriciaTrie2);
133:       assertNotSame(patriciaTrie2, patriciaTrie0);
134:       
135:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.higherEntry("Ms7gZcq YJ");
136:       assertNull(abstractPatriciaTrie_TrieEntry5);
137:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
138:       assertNotSame(patriciaTrie0, patriciaTrie2);
139:   }
140: }
RegularFileObject[/tmp/EvoSuite_105_1629227718313/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class AbstractPatriciaTrie_105_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.collections4.MapIterator",
70:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
71:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
72:       "org.apache.commons.collections4.trie.PatriciaTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
74:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
76:       "org.apache.commons.collections4.Get",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
78:       "org.apache.commons.collections4.Trie",
79:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
80:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
81:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
83:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
86:       "org.apache.commons.collections4.IterableSortedMap",
87:       "org.apache.commons.collections4.OrderedMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
91:       "org.apache.commons.collections4.OrderedMapIterator",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
93:       "org.apache.commons.collections4.Put",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
95:       "org.apache.commons.collections4.trie.KeyAnalyzer",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
97:       "org.apache.commons.collections4.IterableMap",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
100:       "org.apache.commons.collections4.OrderedIterator",
101:       "org.apache.commons.collections4.IterableGet"
102:     );
103:   } 
104: 
105:   private static void resetClasses() {
106:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.class.getClassLoader()); 
107: 
108:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
109:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
111:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
122:       "org.apache.commons.collections4.trie.PatriciaTrie",
123:       "org.apache.commons.collections4.trie.KeyAnalyzer",
124:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
133:     );
134:   }
135: }

[MASTER] 19:15:18.380 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-845));
assertNotNull(integer0);
assertEquals((-845), (int)integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1008);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
assertNotNull(object0);
assertEquals((-845), object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object1 = patriciaTrie0.put(".", object0);
assertNull(object1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Integer integer1 = new Integer((-845));
assertNotNull(integer1);
assertTrue(integer1.equals((Object)object0));
assertTrue(integer1.equals((Object)integer0));
assertEquals((-845), (int)integer1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(".", integer1, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer1.equals((Object)object0));
assertTrue(integer1.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Object object2 = abstractPatriciaTrie_TrieEntry1.setKeyValue((Object) null, (Object) null);
assertNotNull(object2);
assertTrue(integer1.equals((Object)object0));
assertTrue(integer1.equals((Object)integer0));
assertTrue(object2.equals((Object)object0));
assertTrue(object2.equals((Object)integer0));
assertEquals((-845), object2);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>(".", object2, (-845));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer1.equals((Object)object0));
assertTrue(integer1.equals((Object)integer0));
assertTrue(object2.equals((Object)object0));
assertTrue(object2.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("rI", "Ms7gZcq YJ", (-1412));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer2 = new Integer(288);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)object0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)object2));
assertEquals(288, (int)integer2);

Integer integer3 = patriciaTrie1.put("m]o_A", integer2);
assertNull(integer3);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)object0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)object2));

Integer integer4 = patriciaTrie1.put("Ms7gZcq YJ", integer1);
assertNull(integer4);
assertFalse(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)object0));
assertTrue(integer1.equals((Object)integer0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));

patriciaTrie2.incrementSize();
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie0);

Object object3 = patriciaTrie2.put("", "m]o_A");
assertNull(object3);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.higherEntry("Ms7gZcq YJ");
assertNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertNotSame(patriciaTrie0, patriciaTrie2);


[MASTER] 19:15:19.504 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_136_1629227719430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_136_1629227719430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:19.504 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:19.504 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:19.505 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 66
[MASTER] 19:15:19.505 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_136_1629227719430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:19.505 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:19.505 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_136_1629227719430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.Set;
14: import org.apache.commons.collections4.OrderedMapIterator;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_136_tmp__ESTest extends AbstractPatriciaTrie_136_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       patriciaTrie0.modCount = 2476;
31:       Integer integer0 = new Integer(2476);
32:       assertNotNull(integer0);
33:       assertEquals(2476, (int)integer0);
34:       
35:       Integer integer1 = patriciaTrie0.put("], ", integer0);
36:       assertNull(integer1);
37:       
38:       int int0 = patriciaTrie0.size();
39:       assertEquals(1, int0);
40:       
41:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
42:       assertNotNull(patriciaTrie1);
43:       
44:       String string0 = patriciaTrie1.toString();
45:       assertNotNull(string0);
46:       assertEquals("Trie[0]={\n}\n", string0);
47:       
48:       OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie1.mapIterator();
49:       assertNotNull(orderedMapIterator0);
50:       assertFalse(orderedMapIterator0.hasPrevious());
51:       assertFalse(orderedMapIterator0.hasNext());
52:       
53:       Set<String> set0 = patriciaTrie1.keySet();
54:       assertFalse(set0.contains(string0));
55:       assertNotNull(set0);
56:       assertTrue(set0.isEmpty());
57:       assertEquals(0, set0.size());
58:       
59:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "], ", 2477);
60:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       
65:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
66:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
67:       assertNotNull(comparator1);
68:       
69:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
70:       assertFalse(boolean0);
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       
75:       int int1 = patriciaTrie1.size();
76:       assertFalse(int1 == int0);
77:       assertEquals(0, int1);
78:   }
79: }
RegularFileObject[/tmp/EvoSuite_136_1629227719430/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_136_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:19.506 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

patriciaTrie0.modCount = 2476;
Integer integer0 = new Integer(2476);
assertNotNull(integer0);
assertEquals(2476, (int)integer0);

Integer integer1 = patriciaTrie0.put("], ", integer0);
assertNull(integer1);

int int0 = patriciaTrie0.size();
assertEquals(1, int0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

String string0 = patriciaTrie1.toString();
assertNotNull(string0);
assertEquals("Trie[0]={\n}\n", string0);

OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertNotNull(orderedMapIterator0);
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());

Set<String> set0 = patriciaTrie1.keySet();
assertFalse(set0.contains(string0));
assertNotNull(set0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "], ", 2477);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

int int1 = patriciaTrie1.size();
assertFalse(int1 == int0);
assertEquals(0, int1);


[MASTER] 19:15:19.589 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_139_1629227719557/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_139_1629227719557/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:19.589 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:19.589 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:19.612 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.String>,java.lang.Integer>>: 60
[MASTER] 19:15:19.612 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_139_1629227719557/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:19.612 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:19.613 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_139_1629227719557/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_139_tmp__ESTest extends AbstractPatriciaTrie_139_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.previousKey("qrxkJ# Jgr!o]H");
31:       assertNull(string0);
32:       
33:       Integer integer0 = new Integer(184);
34:       assertNotNull(integer0);
35:       assertEquals(184, (int)integer0);
36:       
37:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
38:       AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, 1837);
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       
44:       String string1 = patriciaTrie0.previousKey("dEuuz");
45:       assertNull(string1);
46:       
47:       Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
48:       AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable1, 184);
49:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       
54:       abstractPatriciaTrie_TrieEntry0.key = integer0;
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       
59:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, String>>) comparator0);
61:       assertNotNull(comparator1);
62:       
63:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
73:       
74:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
84:       
85:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
86:       assertTrue(boolean0);
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("j]WF3Nwa");
92:       assertNull(abstractPatriciaTrie_TrieEntry2);
93:       
94:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
95:       assertNotNull(patriciaTrie1);
96:       
97:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("  ", "j]WF3Nwa", 184);
98:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
99:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
102:       
103:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "E@h(KtaladQ|s", 184);
104:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
105:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
107:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
108:       
109:       abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
110:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
117:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
118:       assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
119:       
120:       abstractPatriciaTrie_TrieEntry3.bitIndex = 184;
121:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
123:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
124:       
125:       abstractPatriciaTrie_TrieEntry4.right = abstractPatriciaTrie_TrieEntry3;
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
128:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
131:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry4.right.isInternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry4.right.isExternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry4.right.isEmpty());
135:       
136:       abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
137:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
139:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
140:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
141:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
142:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
144:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
145:       assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
146:       
147:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.predecessor;
148:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
149:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
151:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
152:       
153:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry5);
154:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
155:       assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry5));
156:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
158:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
159:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
160:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
161:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
165:       assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry6);
166:       assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry5);
167:       
168:       PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
169:       assertNotNull(patriciaTrie2);
170:       
171:       PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>(patriciaTrie2);
172:       assertNotNull(patriciaTrie3);
173:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
174:       
175:       Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
176:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable2, 184);
177:       assertNotNull(abstractPatriciaTrie_TrieEntry7);
178:       assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
179:       assertTrue(abstractPatriciaTrie_TrieEntry7.isEmpty());
180:       assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
181:       
182:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry8 = abstractPatriciaTrie_TrieEntry7.parent;
183:       assertNull(abstractPatriciaTrie_TrieEntry8);
184:       
185:       // Undeclared exception!
186:       try { 
187:         patriciaTrie3.addEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null, 1778);
188:         fail("Expecting exception: NullPointerException");
189:       
190:       } catch(NullPointerException e) {
191:          //
192:          // no message in exception (getMessage() returned null)
193:          //
194:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
195:       }
196:   }
197: }
RegularFileObject[/tmp/EvoSuite_139_1629227719557/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_139_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader()));
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 19:15:19.615 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.previousKey("qrxkJ# Jgr!o]H");
assertNull(string0);

Integer integer0 = new Integer(184);
assertNotNull(integer0);
assertEquals(184, (int)integer0);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string1 = patriciaTrie0.previousKey("dEuuz");
assertNull(string1);

Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable1, 184);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.key = integer0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("j]WF3Nwa");
assertNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("  ", "j]WF3Nwa", 184);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "E@h(KtaladQ|s", 184);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());

abstractPatriciaTrie_TrieEntry3.bitIndex = 184;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry4.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.right.isEmpty());

abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry5);
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertFalse(abstractPatriciaTrie_TrieEntry6.equals((Object)abstractPatriciaTrie_TrieEntry5));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry6);
assertNotSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry5);

PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
assertNotNull(patriciaTrie2);

PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>(patriciaTrie2);
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable2, 184);
assertNotNull(abstractPatriciaTrie_TrieEntry7);
assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry7.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry8 = abstractPatriciaTrie_TrieEntry7.parent;
assertNull(abstractPatriciaTrie_TrieEntry8);

patriciaTrie3.addEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null, 1778);

[MASTER] 19:15:20.249 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_159_1629227720214/org/apache/commons/collections4/trie/AbstractPatriciaTrie_159_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_159_1629227720214/org/apache/commons/collections4/trie/AbstractPatriciaTrie_159_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:20.250 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.250 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.250 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Comparable<java.lang.String>>>>: 55
[MASTER] 19:15:20.250 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_159_1629227720214/org/apache/commons/collections4/trie/AbstractPatriciaTrie_159_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:20.250 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:20.255 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_159_1629227720214/org/apache/commons/collections4/trie/AbstractPatriciaTrie_159_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:20 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_159_tmp__ESTest extends AbstractPatriciaTrie_159_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o;i9a", "BR::/DeJ%!})H9t", 1);
26:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       
31:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("BR::/DeJ%!})H9t", "BR::/DeJ%!})H9t", (-2765));
32:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
33:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
34:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
36:       
37:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
47:       
48:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "-9c,", 1);
49:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
50:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
53:       
54:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
56:       assertNotNull(comparator1);
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o;i9a", 16);
59:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
60:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
63:       
64:       abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
74:       
75:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
85:       
86:       abstractPatriciaTrie_TrieEntry3.bitIndex = 1;
87:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
90:       
91:       Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
92:       assertNotNull(comparator2);
93:       
94:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
95:       assertNotNull(string0);
96:       assertEquals("Entry(key=o;i9a [1], value=BR::/DeJ%!})H9t, parent=BR::/DeJ%!})H9t [-2765], left=o;i9a [1], right=org.apache.commons.collections4.trie.PatriciaTrie [1], predecessor=o;i9a [1])", string0);
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
100:   }
101: }
RegularFileObject[/tmp/EvoSuite_159_1629227720214/org/apache/commons/collections4/trie/AbstractPatriciaTrie_159_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:20 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_159_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_159_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_159_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_159_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:20.256 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o;i9a", "BR::/DeJ%!})H9t", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("BR::/DeJ%!})H9t", "BR::/DeJ%!})H9t", (-2765));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "-9c,", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o;i9a", 16);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

abstractPatriciaTrie_TrieEntry3.bitIndex = 1;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key=o;i9a [1], value=BR::/DeJ%!})H9t, parent=BR::/DeJ%!})H9t [-2765], left=o;i9a [1], right=org.apache.commons.collections4.trie.PatriciaTrie [1], predecessor=o;i9a [1])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());


[MASTER] 19:15:20.599 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_163_1629227720356/org/apache/commons/collections4/trie/AbstractPatriciaTrie_163_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_163_1629227720356/org/apache/commons/collections4/trie/AbstractPatriciaTrie_163_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:20.600 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.600 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.600 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.util.AbstractMap.SimpleEntry>>,java.lang.Integer>>: 36
[MASTER] 19:15:20.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_163_1629227720356/org/apache/commons/collections4/trie/AbstractPatriciaTrie_163_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:20.601 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:20.601 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_163_1629227720356/org/apache/commons/collections4/trie/AbstractPatriciaTrie_163_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:20 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_163_tmp__ESTest extends AbstractPatriciaTrie_163_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "eHc");
28:       assertNotNull(abstractMap_SimpleEntry0);
29:       
30:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
31:       assertNotNull(abstractMap_SimpleImmutableEntry0);
32:       
33:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
34:       doReturn((String) null).when(comparable0).toString();
35:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
36:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
37:       assertNotNull(comparator1);
38:       
39:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
40:       Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
41:       assertNotNull(comparator3);
42:       
43:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>>(abstractMap_SimpleImmutableEntry0, comparable0, 1);
44:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       
49:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
50:       assertNotNull(string0);
51:       assertEquals("Entry(key=null=eHc [1], value=null, parent=null, left=null=eHc [1], right=null, predecessor=null=eHc [1])", string0);
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
55:       
56:       PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
57:       assertNotNull(patriciaTrie0);
58:       
59:       int int0 = patriciaTrie0.bitsPerElement();
60:       assertEquals(16, int0);
61:       
62:       Comparable<Object> comparable1 = patriciaTrie0.get("eHc");
63:       assertNull(comparable1);
64:       
65:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
66:       assertNotNull(patriciaTrie1);
67:       
68:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
69:       assertNotNull(patriciaTrie2);
70:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
71:       
72:       Integer integer0 = new Integer(1);
73:       assertNotNull(integer0);
74:       assertFalse(integer0.equals((Object)int0));
75:       assertEquals(1, (int)integer0);
76:       
77:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("eHc", integer0, 2105);
78:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
79:       assertFalse(integer0.equals((Object)int0));
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       
84:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
85:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry2, 16);
91:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
92:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
93:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
94:       assertFalse(integer0.equals((Object)int0));
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
98:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
104:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
105:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
106:       assertNotSame(patriciaTrie1, patriciaTrie2);
107:       assertNotSame(patriciaTrie2, patriciaTrie1);
108:       
109:       String string1 = patriciaTrie2.nextKey("eHc");
110:       assertNull(string1);
111:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
112:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
113:       assertNotSame(patriciaTrie1, patriciaTrie2);
114:       assertNotSame(patriciaTrie2, patriciaTrie1);
115:       
116:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
117:       assertNotNull(patriciaTrie3);
118:       
119:       // Undeclared exception!
120:       try { 
121:         patriciaTrie3.headMap((String) null);
122:         fail("Expecting exception: IllegalArgumentException");
123:       
124:       } catch(IllegalArgumentException e) {
125:          //
126:          // must have a from or to!
127:          //
128:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
129:       }
130:   }
131: }
RegularFileObject[/tmp/EvoSuite_163_1629227720356/org/apache/commons/collections4/trie/AbstractPatriciaTrie_163_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:20 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_163_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_163_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_163_tmp__ESTest_scaffolding.class.getClassLoader()));
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_163_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_163_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 19:15:20.603 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "eHc");
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(comparable0).toString();
Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Comparable<Object>>(abstractMap_SimpleImmutableEntry0, comparable0, 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key=null=eHc [1], value=null, parent=null, left=null=eHc [1], right=null, predecessor=null=eHc [1])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
assertNotNull(patriciaTrie0);

int int0 = patriciaTrie0.bitsPerElement();
assertEquals(16, int0);

Comparable<Object> comparable1 = patriciaTrie0.get("eHc");
assertNull(comparable1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertFalse(integer0.equals((Object)int0));
assertEquals(1, (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("eHc", integer0, 2105);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry2, 16);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);

String string1 = patriciaTrie2.nextKey("eHc");
assertNull(string1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie3);

patriciaTrie3.headMap((String) null);

[MASTER] 19:15:20.690 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1629227720656/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1629227720656/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:20.690 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.690 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 84
[MASTER] 19:15:20.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_166_1629227720656/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:20.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:20.692 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1629227720656/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:20 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.SortedMap;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_166_tmp__ESTest extends AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer((-3));
27:       assertNotNull(integer0);
28:       assertEquals((-3), (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 80);
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       
36:       Integer integer1 = new Integer((-1));
37:       assertNotNull(integer1);
38:       assertFalse(integer1.equals((Object)integer0));
39:       assertEquals((-1), (int)integer1);
40:       
41:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-1));
42:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
43:       assertFalse(integer1.equals((Object)integer0));
44:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       
48:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
49:       assertNull(abstractPatriciaTrie_TrieEntry2);
50:       
51:       String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
52:       assertNotNull(string0);
53:       assertFalse(integer0.equals((Object)integer1));
54:       assertEquals("", string0);
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       
59:       String string1 = abstractPatriciaTrie_TrieEntry1.setValue("");
60:       assertNotNull(string1);
61:       assertFalse(integer1.equals((Object)integer0));
62:       assertTrue(string1.equals((Object)string0));
63:       assertEquals("", string1);
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       
68:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
69:       String string2 = abstractPatriciaTrie_TrieEntry1.setKeyValue((Integer) null, "!^?b4ua5nveG");
70:       assertNotNull(string2);
71:       assertFalse(integer1.equals((Object)integer0));
72:       assertTrue(string2.equals((Object)string0));
73:       assertTrue(string2.equals((Object)string1));
74:       assertEquals("", string2);
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
78:       
79:       abstractPatriciaTrie_TrieEntry1.bitIndex = 1120;
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       
84:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
85:       assertNotNull(comparator1);
86:       
87:       abstractPatriciaTrie_TrieEntry0.left = null;
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
91:       
92:       String string3 = abstractPatriciaTrie_TrieEntry0.toString();
93:       assertNotNull(string3);
94:       assertFalse(integer0.equals((Object)integer1));
95:       assertFalse(string3.equals((Object)string1));
96:       assertFalse(string3.equals((Object)string0));
97:       assertFalse(string3.equals((Object)string2));
98:       assertEquals("Entry(key=-3 [80], value=, parent=null, left=null, right=null, predecessor=-3 [80])", string3);
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
102:       
103:       Integer integer2 = new Integer((-1));
104:       assertNotNull(integer2);
105:       assertFalse(integer2.equals((Object)integer0));
106:       assertTrue(integer2.equals((Object)integer1));
107:       assertEquals((-1), (int)integer2);
108:       
109:       Integer integer3 = new Integer(80);
110:       assertNotNull(integer3);
111:       assertFalse(integer3.equals((Object)integer1));
112:       assertFalse(integer3.equals((Object)integer0));
113:       assertFalse(integer3.equals((Object)integer2));
114:       assertEquals(80, (int)integer3);
115:       
116:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, integer3, (-3));
117:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
118:       assertFalse(integer2.equals((Object)integer3));
119:       assertFalse(integer2.equals((Object)integer0));
120:       assertTrue(integer2.equals((Object)integer1));
121:       assertFalse(integer3.equals((Object)integer1));
122:       assertFalse(integer3.equals((Object)integer0));
123:       assertFalse(integer3.equals((Object)integer2));
124:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       
128:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer1, 912);
129:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
130:       assertFalse(integer1.equals((Object)integer3));
131:       assertFalse(integer1.equals((Object)integer0));
132:       assertTrue(integer1.equals((Object)integer2));
133:       assertFalse(integer3.equals((Object)integer1));
134:       assertFalse(integer3.equals((Object)integer0));
135:       assertFalse(integer3.equals((Object)integer2));
136:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
138:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
139:       
140:       Integer integer4 = new Integer(912);
141:       assertNotNull(integer4);
142:       assertFalse(integer4.equals((Object)integer2));
143:       assertFalse(integer4.equals((Object)integer1));
144:       assertFalse(integer4.equals((Object)integer3));
145:       assertFalse(integer4.equals((Object)integer0));
146:       assertEquals(912, (int)integer4);
147:       
148:       Integer integer5 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer4, integer0);
149:       assertNotNull(integer5);
150:       assertFalse(integer0.equals((Object)integer4));
151:       assertFalse(integer0.equals((Object)integer2));
152:       assertFalse(integer0.equals((Object)integer1));
153:       assertFalse(integer0.equals((Object)integer3));
154:       assertFalse(integer4.equals((Object)integer2));
155:       assertFalse(integer4.equals((Object)integer1));
156:       assertFalse(integer4.equals((Object)integer3));
157:       assertFalse(integer4.equals((Object)integer0));
158:       assertFalse(integer5.equals((Object)integer4));
159:       assertFalse(integer5.equals((Object)integer1));
160:       assertFalse(integer5.equals((Object)integer2));
161:       assertFalse(integer5.equals((Object)integer0));
162:       assertFalse(integer2.equals((Object)integer4));
163:       assertFalse(integer2.equals((Object)integer3));
164:       assertFalse(integer2.equals((Object)integer0));
165:       assertTrue(integer2.equals((Object)integer1));
166:       assertFalse(integer3.equals((Object)integer1));
167:       assertFalse(integer3.equals((Object)integer0));
168:       assertFalse(integer3.equals((Object)integer4));
169:       assertFalse(integer3.equals((Object)integer2));
170:       assertEquals(80, (int)integer5);
171:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
172:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
173:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
174:       
175:       abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
176:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
177:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
178:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
179:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
180:       assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
181:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
182:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
183:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
184:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
185:       
186:       String string4 = abstractPatriciaTrie_TrieEntry3.toString();
187:       assertNotNull(string4);
188:       assertFalse(string4.equals((Object)string2));
189:       assertFalse(string4.equals((Object)string3));
190:       assertFalse(string4.equals((Object)string0));
191:       assertFalse(string4.equals((Object)string1));
192:       assertFalse(integer2.equals((Object)integer4));
193:       assertFalse(integer2.equals((Object)integer3));
194:       assertFalse(integer2.equals((Object)integer0));
195:       assertFalse(integer2.equals((Object)integer5));
196:       assertTrue(integer2.equals((Object)integer1));
197:       assertFalse(integer3.equals((Object)integer1));
198:       assertFalse(integer3.equals((Object)integer0));
199:       assertFalse(integer3.equals((Object)integer4));
200:       assertFalse(integer3.equals((Object)integer2));
201:       assertEquals("Entry(key=912 [-3], value=-3, parent=null, left=912 [-3], right=null, predecessor=80 [912])", string4);
202:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
203:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
204:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
205:       
206:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
207:       assertNotNull(patriciaTrie0);
208:       
209:       Integer integer6 = patriciaTrie0.remove((Object) "");
210:       assertNull(integer6);
211:       
212:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
213:       assertNotNull(patriciaTrie1);
214:       
215:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
216:       assertNull(abstractPatriciaTrie_TrieEntry5);
217:       
218:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("");
219:       assertNotNull(sortedMap0);
220:       assertEquals(0, sortedMap0.size());
221:       assertTrue(sortedMap0.isEmpty());
222:   }
223: }
RegularFileObject[/tmp/EvoSuite_166_1629227720656/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:20 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:20.695 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-3));
assertNotNull(integer0);
assertEquals((-3), (int)integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 80);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Integer integer1 = new Integer((-1));
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));
assertEquals((-1), (int)integer1);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer1.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
assertNotNull(string0);
assertFalse(integer0.equals((Object)integer1));
assertEquals("", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string1 = abstractPatriciaTrie_TrieEntry1.setValue("");
assertNotNull(string1);
assertFalse(integer1.equals((Object)integer0));
assertTrue(string1.equals((Object)string0));
assertEquals("", string1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string2 = abstractPatriciaTrie_TrieEntry1.setKeyValue((Integer) null, "!^?b4ua5nveG");
assertNotNull(string2);
assertFalse(integer1.equals((Object)integer0));
assertTrue(string2.equals((Object)string0));
assertTrue(string2.equals((Object)string1));
assertEquals("", string2);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry1.bitIndex = 1120;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.left = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string3 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string3);
assertFalse(integer0.equals((Object)integer1));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string2));
assertEquals("Entry(key=-3 [80], value=, parent=null, left=null, right=null, predecessor=-3 [80])", string3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Integer integer2 = new Integer((-1));
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertEquals((-1), (int)integer2);

Integer integer3 = new Integer(80);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertEquals(80, (int)integer3);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, integer3, (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer1, 912);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer1.equals((Object)integer3));
assertFalse(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

Integer integer4 = new Integer(912);
assertNotNull(integer4);
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer0));
assertEquals(912, (int)integer4);

Integer integer5 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer4, integer0);
assertNotNull(integer5);
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer4));
assertFalse(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer0));
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer2));
assertEquals(80, (int)integer5);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

String string4 = abstractPatriciaTrie_TrieEntry3.toString();
assertNotNull(string4);
assertFalse(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string3));
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string1));
assertFalse(integer2.equals((Object)integer4));
assertFalse(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer5));
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(integer3.equals((Object)integer2));
assertEquals("Entry(key=912 [-3], value=-3, parent=null, left=912 [-3], right=null, predecessor=80 [912])", string4);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer6 = patriciaTrie0.remove((Object) "");
assertNull(integer6);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertNull(abstractPatriciaTrie_TrieEntry5);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());


[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_169_1629227720766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_169_1629227720766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>,java.lang.String>>: 61
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Comparable<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Object>>>>: 85
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_169_1629227720766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:20.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:20.827 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_169_1629227720766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:20 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_169_tmp__ESTest extends AbstractPatriciaTrie_169_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       int int0 = patriciaTrie0.bitIndex("n-T/?2yu*yH[+ o", "n-T/?2yu*yH[+ o");
32:       assertEquals((-2), int0);
33:       
34:       String string0 = patriciaTrie0.put("n-T/?2yu*yH[+ o", (String) null);
35:       assertNull(string0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("keyAnalyzer");
38:       assertNull(abstractPatriciaTrie_TrieEntry0);
39:       
40:       SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("");
41:       assertNotNull(sortedMap0);
42:       assertEquals(1, sortedMap0.size());
43:       assertFalse(sortedMap0.isEmpty());
44:       
45:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
46:       assertNotNull(abstractMap_SimpleEntry0);
47:       
48:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
49:       assertNotNull(abstractMap_SimpleEntry1);
50:       
51:       Comparator<Map.Entry<String, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
52:       assertNotNull(comparator0);
53:       
54:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, 2);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
59:       
60:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
61:       Comparator<Map.Entry<Comparable<AbstractMap.SimpleImmutableEntry<Object, Object>>, String>> comparator2 = (Comparator<Map.Entry<Comparable<AbstractMap.SimpleImmutableEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
62:       assertNotNull(comparator2);
63:       
64:       String string1 = abstractPatriciaTrie_TrieEntry1.toString();
65:       assertNotNull(string1);
66:       assertEquals("Entry(key== [2], value==, parent=null, left== [2], right=null, predecessor== [2])", string1);
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       
71:       Comparator<Map.Entry<String, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
72:       assertNotNull(comparator3);
73:       assertSame(comparator3, comparator0);
74:       
75:       Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator4 = Map.Entry.comparingByKey();
76:       assertNotNull(comparator4);
77:       
78:       Comparator<Map.Entry<Object, Comparable<Object>>> comparator5 = Map.Entry.comparingByValue();
79:       assertNotNull(comparator5);
80:       
81:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie1);
83:       
84:       Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
85:       Comparator<Map.Entry<String, Comparable<AbstractMap.SimpleEntry<Object, Object>>>> comparator7 = (Comparator<Map.Entry<String, Comparable<AbstractMap.SimpleEntry<Object, Object>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator6);
86:       assertNotNull(comparator7);
87:       
88:       Object object0 = patriciaTrie1.put("", (Object) null);
89:       assertNull(object0);
90:       
91:       String string2 = "";
92:       String string3 = patriciaTrie0.put("", "n-T/?2yu*yH[+ o");
93:       assertNull(string3);
94:       
95:       SortedMap<String, Object> sortedMap1 = patriciaTrie1.tailMap("Entry(key== [2], value==, parent=null, left== [2], right=null, predecessor== [2])");
96:       assertNotNull(sortedMap1);
97:       assertEquals(0, sortedMap1.size());
98:       assertTrue(sortedMap1.isEmpty());
99:       
100:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
101:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
103:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       
106:       PatriciaTrie<Integer> patriciaTrie2 = null;
107:       try {
108:         patriciaTrie2 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
109:         fail("Expecting exception: NullPointerException");
110:       
111:       } catch(NullPointerException e) {
112:          //
113:          // no message in exception (getMessage() returned null)
114:          //
115:       }
116:   }
117: }
RegularFileObject[/tmp/EvoSuite_169_1629227720766/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:20 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_169_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:20.828 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

int int0 = patriciaTrie0.bitIndex("n-T/?2yu*yH[+ o", "n-T/?2yu*yH[+ o");
assertEquals((-2), int0);

String string0 = patriciaTrie0.put("n-T/?2yu*yH[+ o", (String) null);
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("keyAnalyzer");
assertNull(abstractPatriciaTrie_TrieEntry0);

SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("");
assertNotNull(sortedMap0);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Map.Entry<String, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<AbstractMap.SimpleImmutableEntry<Object, Object>>, String>> comparator2 = (Comparator<Map.Entry<Comparable<AbstractMap.SimpleImmutableEntry<Object, Object>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
assertNotNull(comparator2);

String string1 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string1);
assertEquals("Entry(key== [2], value==, parent=null, left== [2], right=null, predecessor== [2])", string1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Map.Entry<String, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);
assertSame(comparator3, comparator0);

Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Map.Entry<Object, Comparable<Object>>> comparator5 = Map.Entry.comparingByValue();
assertNotNull(comparator5);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Comparable<AbstractMap.SimpleEntry<Object, Object>>>> comparator7 = (Comparator<Map.Entry<String, Comparable<AbstractMap.SimpleEntry<Object, Object>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator6);
assertNotNull(comparator7);

Object object0 = patriciaTrie1.put("", (Object) null);
assertNull(object0);

String string2 = "";
String string3 = patriciaTrie0.put("", "n-T/?2yu*yH[+ o");
assertNull(string3);

SortedMap<String, Object> sortedMap1 = patriciaTrie1.tailMap("Entry(key== [2], value==, parent=null, left== [2], right=null, predecessor== [2])");
assertNotNull(sortedMap1);
assertEquals(0, sortedMap1.size());
assertTrue(sortedMap1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);

[MASTER] 19:15:21.082 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_176_1629227721028/org/apache/commons/collections4/trie/AbstractPatriciaTrie_176_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_176_1629227721028/org/apache/commons/collections4/trie/AbstractPatriciaTrie_176_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:21.084 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:21.086 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:21.087 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Comparable<java.lang.String>>>>: 39
[MASTER] 19:15:21.087 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_176_1629227721028/org/apache/commons/collections4/trie/AbstractPatriciaTrie_176_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:21.087 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:21.088 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_176_1629227721028/org/apache/commons/collections4/trie/AbstractPatriciaTrie_176_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:21 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_176_tmp__ESTest extends AbstractPatriciaTrie_176_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o;i9a", "BR::/DeJ%!})H9t", 1);
27:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "-9c,", 1);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
37:       
38:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
40:       assertNotNull(comparator1);
41:       
42:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o;i9a", 16);
43:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
44:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
47:       
48:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
58:       
59:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
69:       
70:       Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
71:       assertNotNull(comparator2);
72:       
73:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
74:       assertNotNull(string0);
75:       assertEquals("Entry(key=o;i9a [1], value=BR::/DeJ%!})H9t, parent=null, left=o;i9a [1], right=org.apache.commons.collections4.trie.PatriciaTrie [1], predecessor=o;i9a [1])", string0);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       
80:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
81:       assertNotNull(patriciaTrie0);
82:       
83:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 16);
84:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
91:       
92:       AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("o;i9a", "BR::/DeJ%!})H9t");
93:       assertNotNull(abstractMap_SimpleImmutableEntry0);
94:       
95:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(abstractMap_SimpleImmutableEntry0, abstractPatriciaTrie_TrieEntry2, (-848));
96:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
103:       
104:       String string1 = abstractPatriciaTrie_TrieEntry4.toString();
105:       assertNotNull(string1);
106:       assertFalse(string1.equals((Object)string0));
107:       assertEquals("Entry(key=o;i9a=BR::/DeJ%!})H9t [-848], value=Entry(key= [16], value=o;i9a, parent=ROOT, left= [16], right=ROOT, predecessor= [16]), parent=null, left=o;i9a=BR::/DeJ%!})H9t [-848], right=null, predecessor=o;i9a=BR::/DeJ%!})H9t [-848])", string1);
108:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
114:   }
115: }
RegularFileObject[/tmp/EvoSuite_176_1629227721028/org/apache/commons/collections4/trie/AbstractPatriciaTrie_176_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:21 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_176_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_176_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_176_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_176_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
138:     );
139:   }
140: }

[MASTER] 19:15:21.089 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o;i9a", "BR::/DeJ%!})H9t", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "-9c,", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleEntry<Object, Comparable<String>>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o;i9a", 16);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key=o;i9a [1], value=BR::/DeJ%!})H9t, parent=null, left=o;i9a [1], right=org.apache.commons.collections4.trie.PatriciaTrie [1], predecessor=o;i9a [1])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 16);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("o;i9a", "BR::/DeJ%!})H9t");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(abstractMap_SimpleImmutableEntry0, abstractPatriciaTrie_TrieEntry2, (-848));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());

String string1 = abstractPatriciaTrie_TrieEntry4.toString();
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));
assertEquals("Entry(key=o;i9a=BR::/DeJ%!})H9t [-848], value=Entry(key= [16], value=o;i9a, parent=ROOT, left= [16], right=ROOT, predecessor= [16]), parent=null, left=o;i9a=BR::/DeJ%!})H9t [-848], right=null, predecessor=o;i9a=BR::/DeJ%!})H9t [-848])", string1);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());


[MASTER] 19:15:25.410 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.624 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.768 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.091 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.473 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.584 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.683 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.880 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.992 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.077 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.201 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.358 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.474 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.811 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:27.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.004 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.099 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.225 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.336 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.606 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:28.888 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.023 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.125 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.245 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.381 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.458 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:29.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.016 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.129 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.280 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.669 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:30.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.136 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.475 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.704 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.810 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.910 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.096 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.408 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.515 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.678 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.758 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.868 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:32.965 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.157 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.394 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.526 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.644 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.716 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:33.993 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.273 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.373 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.527 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:34.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.021 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.124 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.322 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.730 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:35.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.022 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.157 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.261 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.316 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.609 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.696 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.870 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:36.935 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.098 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.158 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.256 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.355 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.422 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.516 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.572 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.630 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.716 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:37.828 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.555 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.665 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.738 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.906 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:38.982 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.338 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.504 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.567 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:39.908 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.335 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.400 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.478 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.568 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.671 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.734 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.814 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:40.916 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.282 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.609 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.721 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.829 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:41.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.041 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.122 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.223 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.324 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.432 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.599 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.654 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:42.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.041 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.184 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.458 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.606 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.746 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.808 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:43.915 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:44.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:44.070 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.162 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.184 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:15:47.186 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put(" ", " ");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry(" ");
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string1 = "";
int int0 = (-729);
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-729));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);

String string2 = patriciaTrie0.putIfAbsent("", "");
assertNull(string2);

String string3 = patriciaTrie0.put("2&bB]hX=gb=Eowq1d", "<ONG_s_");
assertNull(string3);

SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("2&bB]hX=gb=Eowq1d");
assertNotNull(sortedMap0);

Set<String> set0 = patriciaTrie0.keySet();
assertTrue(set0.contains("2&bB]hX=gb=Eowq1d"));
assertFalse(set0.contains(""));
assertNotNull(set0);
assertFalse(set0.isEmpty());
assertEquals(3, set0.size());

String string4 = patriciaTrie0.firstKey();
assertNotNull(string4);
assertFalse(string4.equals((Object)string1));
assertEquals(" ", string4);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
patriciaTrie1.decrementSize();
String string5 = "<]ac]";
patriciaTrie0.put(string1, string5);
patriciaTrie1.keySet();
patriciaTrie1.keySet();
AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Comparable<Object>>(abstractMap_SimpleEntry0, comparable0, int0);
abstractPatriciaTrie_TrieEntry2.toString();
PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
patriciaTrie3.lastEntry();
PatriciaTrie<Comparable<Integer>> patriciaTrie4 = new PatriciaTrie<Comparable<Integer>>();

[MASTER] 19:15:47.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.313 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.495 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:47.642 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:49.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/23
* Done!

* Computation finished
